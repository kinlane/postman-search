[
  {
    "id": 1819808,
    "name": "Postman",
    "full_name": "aaronpowell/Postman",
    "description": "The Postman will help you deliver messages around your JavaScript application",
    "fork": false,
    "created_at": "2011-05-30T02:57:53Z",
    "updated_at": "2020-02-24T20:41:18Z",
    "stargazers_count": 144,
    "watchers_count": 144,
    "forks": 18,
    "watchers": 144,
    "score": 1,
    "owner_id": 434140,
    "owner_login": "aaronpowell",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/434140?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "help",
      "message",
      "around",
      "messages",
      "deliver"
    ]
  },
  {
    "user": "numberly",
    "repo": "flask2postman",
    "pulled": "Organization",
    "id": 41543238,
    "name": "flask2postman",
    "full_name": "numberly/flask2postman",
    "description": ":rocket: Generate a Postman collection from your Flask application",
    "fork": false,
    "created_at": "2015-08-28T11:12:41Z",
    "updated_at": "2020-03-20T16:05:03Z",
    "forks": 11,
    "open_issues": 5,
    "watchers": 110,
    "network_count": 11,
    "subscribers_count": 8,
    "owner_id": 5330219,
    "owner_login": "numberly",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5330219?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "application",
      "rocket"
    ]
  },
  {
    "user": "rkistner",
    "repo": "chinese-postman",
    "pulled": "User",
    "id": 5217439,
    "name": "chinese-postman",
    "full_name": "rkistner/chinese-postman",
    "description": "Python application to solve the Chinese postman problem",
    "fork": false,
    "created_at": "2012-07-28T20:31:21Z",
    "updated_at": "2019-12-30T21:36:22Z",
    "forks": 12,
    "open_issues": 0,
    "watchers": 29,
    "network_count": 12,
    "subscribers_count": 3,
    "owner_id": 94081,
    "owner_login": "rkistner",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/94081?v=4",
    "owner_type": "User",
    "tags": [
      " postman",
      "application",
      "problem",
      "postman pro"
    ]
  },
  {
    "user": "aWhereAPI",
    "repo": "API-Postman-Collections",
    "pulled": "Organization",
    "id": 44482794,
    "name": "API-Postman-Collections",
    "full_name": "aWhereAPI/API-Postman-Collections",
    "description": "Use these Postman collections to start playing with the aWhere API Platform without coding. Requires the free Chrome application, Postman, from getpostman.com",
    "fork": false,
    "created_at": "2015-10-18T15:08:28Z",
    "updated_at": "2020-01-27T22:25:57Z",
    "forks": 8,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 8,
    "subscribers_count": 3,
    "owner_id": 11070642,
    "owner_login": "aWhereAPI",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11070642?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "collections",
      "form",
      "application",
      "star",
      "start",
      "play",
      "getpost",
      "free",
      "playing",
      "coding"
    ]
  },
  {
    "user": "CiscoDevNet",
    "repo": "opendaylight-sample-apps",
    "pulled": "Organization",
    "id": 43082222,
    "name": "opendaylight-sample-apps",
    "full_name": "CiscoDevNet/opendaylight-sample-apps",
    "description": "Sample applications for use with OpenDaylight (https://www.opendaylight.org/)",
    "fork": false,
    "created_at": "2015-09-24T17:32:11Z",
    "updated_at": "2020-03-08T07:41:01Z",
    "forks": 36,
    "open_issues": 1,
    "watchers": 38,
    "network_count": 36,
    "subscribers_count": 27,
    "owner_id": 8827988,
    "owner_login": "CiscoDevNet",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8827988?v=4",
    "owner_type": "Organization",
    "tags": [
      "application",
      "http",
      "https",
      "open",
      "light",
      "applications"
    ]
  },
  {
    "user": "jorgecotillo",
    "repo": "aspnet_core_identity_server_4_postman",
    "pulled": "User",
    "id": 95179869,
    "name": "aspnet_core_identity_server_4_postman",
    "full_name": "jorgecotillo/aspnet_core_identity_server_4_postman",
    "description": "Sample applications that demonstrates the configuration of your WebApi and IdentityServer4 to test your API from Postman",
    "fork": false,
    "created_at": "2017-06-23T03:30:57Z",
    "updated_at": "2020-03-06T23:06:45Z",
    "forks": 6,
    "open_issues": 1,
    "watchers": 6,
    "network_count": 6,
    "subscribers_count": 1,
    "owner_id": 6723000,
    "owner_login": "jorgecotillo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6723000?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "application",
      "demo",
      "config",
      "configuration",
      "applications",
      "demonstrate",
      "entity",
      "demonstrates"
    ]
  },
  {
    "user": "srinivasbv22",
    "repo": "postmanemployeeproject",
    "pulled": "User",
    "id": 163518223,
    "name": "postmanemployeeproject",
    "full_name": "srinivasbv22/postmanemployeeproject",
    "description": null,
    "fork": false,
    "created_at": "2018-12-29T14:42:20Z",
    "updated_at": "2019-01-01T05:01:48Z",
    "forks": 6,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 6,
    "subscribers_count": 0,
    "owner_id": 45447713,
    "owner_login": "srinivasbv22",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/45447713?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "flyworker",
    "repo": "python-automation-testing",
    "pulled": "User",
    "id": 114945463,
    "name": "python-automation-testing",
    "full_name": "flyworker/python-automation-testing",
    "description": "Learn about automated software testing with Python, Selenium WebDriver, and API, Postman, focusing on web applications.",
    "fork": false,
    "created_at": "2017-12-21T00:53:26Z",
    "updated_at": "2019-12-13T04:43:38Z",
    "forks": 12,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 12,
    "subscribers_count": 1,
    "owner_id": 8363795,
    "owner_login": "flyworker",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8363795?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "testing",
      "application",
      "auto",
      "automat",
      "automate",
      "web app",
      "automated",
      "applications",
      "software",
      "river"
    ]
  },
  {
    "user": "shaishab",
    "repo": "sequelize-express-example",
    "pulled": "User",
    "id": 98882997,
    "name": "sequelize-express-example",
    "full_name": "shaishab/sequelize-express-example",
    "description": "An example for the usage of Sequelize within an Express.js application with schema generation from existing table",
    "fork": false,
    "created_at": "2017-07-31T11:46:29Z",
    "updated_at": "2020-02-01T16:02:41Z",
    "forks": 1,
    "open_issues": 1,
    "watchers": 30,
    "network_count": 1,
    "subscribers_count": 3,
    "owner_id": 3139652,
    "owner_login": "shaishab",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/3139652?v=4",
    "owner_type": "User",
    "tags": [
      "application",
      "example",
      "schema",
      "within",
      "generation"
    ]
  },
  {
    "user": "hasimy-as",
    "repo": "NodePostman",
    "pulled": "User",
    "id": 204016424,
    "name": "NodePostman",
    "full_name": "hasimy-as/NodePostman",
    "description": "A Node.js application, used to test Node.js back-end service with Postman.",
    "fork": false,
    "created_at": "2019-08-23T14:41:06Z",
    "updated_at": "2019-11-05T06:01:31Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 51184185,
    "owner_login": "hasimy-as",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/51184185?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "application",
      "service"
    ]
  },
  {
    "user": "TrainingByPackt",
    "repo": "Python-API-Development-Fundamentals",
    "pulled": "Organization",
    "id": 197175633,
    "name": "Python-API-Development-Fundamentals",
    "full_name": "TrainingByPackt/Python-API-Development-Fundamentals",
    "description": "Develop a full-stack web application with Python and Flask",
    "fork": false,
    "created_at": "2019-07-16T10:48:02Z",
    "updated_at": "2020-02-23T10:13:40Z",
    "forks": 12,
    "open_issues": 4,
    "watchers": 3,
    "network_count": 12,
    "subscribers_count": 2,
    "owner_id": 33929280,
    "owner_login": "TrainingByPackt",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33929280?v=4",
    "owner_type": "Organization",
    "tags": [
      "application",
      "full",
      "web app",
      "stack"
    ]
  },
  {
    "user": "selfpoised",
    "repo": "postmanExample",
    "pulled": "User",
    "id": 126764282,
    "name": "postmanExample",
    "full_name": "selfpoised/postmanExample",
    "description": "Add dynamic Java code to your application",
    "fork": false,
    "created_at": "2018-03-26T02:45:11Z",
    "updated_at": "2018-03-27T12:21:26Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 2216435,
    "owner_login": "selfpoised",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/2216435?v=4",
    "owner_type": "User",
    "tags": [
      "application",
      "code",
      "dynamic"
    ]
  },
  {
    "id": 98882997,
    "name": "sequelize-express-example",
    "full_name": "shaishab/sequelize-express-example",
    "description": "An example for the usage of Sequelize within an Express.js application with schema generation from existing table",
    "fork": false,
    "created_at": "2017-07-31T11:46:29Z",
    "updated_at": "2020-02-01T16:02:41Z",
    "stargazers_count": 30,
    "watchers_count": 30,
    "forks": 1,
    "watchers": 30,
    "score": 1,
    "owner_id": 3139652,
    "owner_login": "shaishab",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/3139652?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "example",
      "schema",
      "within",
      "generation"
    ]
  },
  {
    "id": 204016424,
    "name": "NodePostman",
    "full_name": "hasimy-as/NodePostman",
    "description": "A Node.js application, used to test Node.js back-end service with Postman.",
    "fork": false,
    "created_at": "2019-08-23T14:41:06Z",
    "updated_at": "2019-11-05T06:01:31Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 51184185,
    "owner_login": "hasimy-as",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/51184185?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "service"
    ]
  },
  {
    "id": 197175633,
    "name": "Python-API-Development-Fundamentals",
    "full_name": "TrainingByPackt/Python-API-Development-Fundamentals",
    "description": "Develop a full-stack web application with Python and Flask",
    "fork": false,
    "created_at": "2019-07-16T10:48:02Z",
    "updated_at": "2020-02-23T10:13:40Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 12,
    "watchers": 3,
    "score": 1,
    "owner_id": 33929280,
    "owner_login": "TrainingByPackt",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33929280?v=4",
    "tags": [
      "application",
      "full",
      "web app",
      "stack"
    ]
  },
  {
    "id": 217607392,
    "name": "MongoDB-Express-Postman-Ninja-2019",
    "full_name": "andrey136/MongoDB-Express-Postman-Ninja-2019",
    "description": "This is a cliche of how you should connect your application with the database",
    "fork": false,
    "created_at": "2019-10-25T20:08:06Z",
    "updated_at": "2019-10-26T03:55:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41753612,
    "owner_login": "andrey136",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/41753612?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "database",
      "connect",
      "should",
      "cliche"
    ]
  },
  {
    "id": 98760880,
    "name": "toDoListApi-w-Postman",
    "full_name": "PrL327/toDoListApi-w-Postman",
    "description": null,
    "fork": false,
    "created_at": "2017-07-29T22:02:32Z",
    "updated_at": "2017-07-29T22:02:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22156120,
    "owner_login": "PrL327",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22156120?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 101781125,
    "name": "CRUD-Mongoose",
    "full_name": "chibaba/CRUD-Mongoose",
    "description": "created, updated and delete application with mongoose using postman extension",
    "fork": false,
    "created_at": "2017-08-29T16:10:28Z",
    "updated_at": "2019-01-17T08:49:14Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 29398127,
    "owner_login": "chibaba",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29398127?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "application",
      "mongo",
      "update",
      "delete",
      "extension",
      "mongoose",
      "updated"
    ]
  },
  {
    "id": 153952610,
    "name": "RESTy",
    "full_name": "Kevinoh47/RESTy",
    "description": "react.js application for testing REST APIs, similar to Postman",
    "fork": false,
    "created_at": "2018-10-20T22:08:34Z",
    "updated_at": "2019-10-10T21:41:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3741082,
    "owner_login": "Kevinoh47",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3741082?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "application",
      "react"
    ]
  },
  {
    "id": 102150950,
    "name": "FireshouseSubs",
    "full_name": "jonathandavidpollock/FireshouseSubs",
    "description": "A simple api for purchasing subs from Firehouse. It utilizes full CRUD with mongo. Lastly, we deployed this Node.js application on the LEMP stack.",
    "fork": false,
    "created_at": "2017-09-01T20:33:36Z",
    "updated_at": "2017-09-07T19:28:55Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 4,
    "watchers": 1,
    "score": 1,
    "owner_id": 18465963,
    "owner_login": "jonathandavidpollock",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/18465963?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "mongo",
      "util",
      "full",
      "stack",
      "deployed",
      "utilizes",
      "purchasing"
    ]
  },
  {
    "id": 126576138,
    "name": "blogging-app-backend",
    "full_name": "anu0012/blogging-app-backend",
    "description": "REST APIs for a blogging application",
    "fork": false,
    "created_at": "2018-03-24T07:29:39Z",
    "updated_at": "2018-03-25T16:40:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17943805,
    "owner_login": "anu0012",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17943805?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "blog",
      "logging",
      "blogging"
    ]
  },
  {
    "id": 129200303,
    "name": "restful_task_api",
    "full_name": "devbaggett/restful_task_api",
    "description": "created an application with routing rules which offer CRUD operations using POSTMAN API",
    "fork": false,
    "created_at": "2018-04-12T05:54:18Z",
    "updated_at": "2018-04-13T18:01:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34429309,
    "owner_login": "devbaggett",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34429309?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "operation",
      "operations",
      "routing"
    ]
  },
  {
    "id": 97892221,
    "name": "postman",
    "full_name": "rupakg/postman",
    "description": "A simple serverless application with an email service.",
    "fork": false,
    "created_at": "2017-07-21T01:21:50Z",
    "updated_at": "2018-06-05T03:42:27Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 1,
    "watchers": 4,
    "score": 1,
    "owner_id": 8188,
    "owner_login": "rupakg",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/8188?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service",
      "server",
      "mail",
      "email",
      "serverless"
    ]
  },
  {
    "id": 202604334,
    "name": "Postman",
    "full_name": "nardin/Postman",
    "description": "just the test application",
    "fork": false,
    "created_at": "2019-08-15T20:04:54Z",
    "updated_at": "2019-08-20T22:12:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 780901,
    "owner_login": "nardin",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/780901?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application"
    ]
  },
  {
    "id": 26507424,
    "name": "Restler",
    "full_name": "narkhedegs/Restler",
    "description": "Rest Request Collection Runner for applications like DevHttpClient and Postman.",
    "fork": false,
    "created_at": "2014-11-11T22:16:36Z",
    "updated_at": "2019-09-09T13:30:40Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 0,
    "watchers": 3,
    "score": 1,
    "owner_id": 8203934,
    "owner_login": "narkhedegs",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8203934?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "applications"
    ]
  },
  {
    "id": 213881037,
    "name": "postmanager_firebase",
    "full_name": "leoleandrocin/postmanager_firebase",
    "description": "Node/Firebase application to User's post management",
    "fork": false,
    "created_at": "2019-10-09T09:50:31Z",
    "updated_at": "2019-10-09T09:58:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52429128,
    "owner_login": "leoleandrocin",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/52429128?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "manage",
      "management"
    ]
  },
  {
    "id": 213877290,
    "name": "postmanager-mongo",
    "full_name": "leoleandrocin/postmanager-mongo",
    "description": "Node application to user's posts management",
    "fork": false,
    "created_at": "2019-10-09T09:33:12Z",
    "updated_at": "2019-10-09T09:48:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52429128,
    "owner_login": "leoleandrocin",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/52429128?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "user",
      "manage",
      "management",
      "posts"
    ]
  },
  {
    "id": 166613108,
    "name": "Postman_util",
    "full_name": "dantasmr/Postman_util",
    "description": null,
    "fork": false,
    "created_at": "2019-01-20T01:54:51Z",
    "updated_at": "2019-01-20T01:56:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9520781,
    "owner_login": "dantasmr",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/9520781?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 240269483,
    "name": "Ticket-master",
    "full_name": "Gauthamjm007/Ticket-master",
    "description": "An issue revsolving application made using react ,redux and postman api",
    "fork": false,
    "created_at": "2020-02-13T13:41:16Z",
    "updated_at": "2020-03-19T06:37:01Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 0,
    "watchers": 3,
    "score": 1,
    "owner_id": 26291295,
    "owner_login": "Gauthamjm007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/26291295?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "application",
      "react",
      "postman api",
      "issue",
      "redux",
      "solving"
    ]
  },
  {
    "id": 61991886,
    "name": "chenqiuling-express-json-postman",
    "full_name": "Alloy-Girls/chenqiuling-express-json-postman",
    "description": null,
    "fork": false,
    "created_at": "2016-06-26T14:10:42Z",
    "updated_at": "2016-06-26T14:14:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 19777946,
    "owner_login": "Alloy-Girls",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/19777946?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 40419319,
    "name": "V1-API-Postman-Collections",
    "full_name": "aWhereAPI/V1-API-Postman-Collections",
    "description": "These Postman Collections are for the old version of aWhere's APIs. Please use the API Postman Collections repository. Requires the free Chrome application, Postman, from getpostman.com",
    "fork": false,
    "created_at": "2015-08-08T23:26:46Z",
    "updated_at": "2015-10-18T15:21:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 11070642,
    "owner_login": "aWhereAPI",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11070642?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "repos",
      "repository",
      "application",
      "version",
      "getpost",
      "free"
    ]
  },
  {
    "id": 79540667,
    "name": "Postman-Demo-API-Tests",
    "full_name": "TsvetomirSlavov/Postman-Demo-API-Tests",
    "description": "moi demota ot edin rusnak mnogo dobro istinsko za istinski application da vidq kakvi testove se pishat i syshtite shte sa i na SoapUI",
    "fork": false,
    "created_at": "2017-01-20T08:26:40Z",
    "updated_at": "2017-01-20T08:28:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21067580,
    "owner_login": "TsvetomirSlavov",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/21067580?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "demo",
      "demota"
    ]
  },
  {
    "id": 88429140,
    "name": "Postman_API_Test",
    "full_name": "vidhyarini/Postman_API_Test",
    "description": null,
    "fork": false,
    "created_at": "2017-04-16T16:54:36Z",
    "updated_at": "2017-04-16T16:54:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25911895,
    "owner_login": "vidhyarini",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25911895?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 195776640,
    "name": "Postman-Load-Testing-App",
    "full_name": "bnaddison/Postman-Load-Testing-App",
    "description": "An open source and simple application for load testing with Postman collections using Newman.",
    "fork": false,
    "created_at": "2019-07-08T09:08:41Z",
    "updated_at": "2019-07-10T23:01:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42801329,
    "owner_login": "bnaddison",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42801329?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "collections",
      "testing",
      "application",
      "load",
      "source",
      "open"
    ]
  },
  {
    "id": 203229628,
    "name": "python-postman-restmocker",
    "full_name": "codeasashu/python-postman-restmocker",
    "description": "This python exposes a flask application which mocks your postman example on localhost",
    "fork": false,
    "created_at": "2019-08-19T18:43:00Z",
    "updated_at": "2019-08-20T20:25:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1492350,
    "owner_login": "codeasashu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1492350?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "application",
      "example",
      "local",
      "host",
      "mock",
      "python",
      "flask",
      "expose",
      "exposes",
      "mocks"
    ]
  },
  {
    "id": 140089028,
    "name": "RESTful-APIs-with-JAX-RS",
    "full_name": "HristoMalakov/RESTful-APIs-with-JAX-RS",
    "description": "Simple messenger application implemented with Jersey and tested with Postman",
    "fork": false,
    "created_at": "2018-07-07T13:59:58Z",
    "updated_at": "2018-07-08T13:26:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30002864,
    "owner_login": "HristoMalakov",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/30002864?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "implement",
      "tested",
      "esse",
      "implemented",
      "messenger"
    ]
  },
  {
    "id": 152269678,
    "name": "Employee-Management",
    "full_name": "ab199506/Employee-Management",
    "description": "CRUD application using spring rest ,hibernate, JSON ,PostMan",
    "fork": false,
    "created_at": "2018-10-09T14:50:51Z",
    "updated_at": "2018-10-13T12:58:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38178571,
    "owner_login": "ab199506",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/38178571?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "rest",
      "spring",
      "hibernate"
    ]
  },
  {
    "id": 165834611,
    "name": "springbootrestapi",
    "full_name": "bamaboyAsh/springbootrestapi",
    "description": "Spring Boot application using Hibernate mysql Rest API and Postman",
    "fork": false,
    "created_at": "2019-01-15T10:52:09Z",
    "updated_at": "2019-01-15T15:16:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38692579,
    "owner_login": "bamaboyAsh",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/38692579?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "mysql",
      "mysql "
    ]
  },
  {
    "id": 237907037,
    "name": "Restful-API",
    "full_name": "ar-asatryan/Restful-API",
    "description": "RestFul API with Nodejs -> shop application. Requests/Responses handled via Postman.",
    "fork": false,
    "created_at": "2020-02-03T07:18:29Z",
    "updated_at": "2020-02-03T10:07:14Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 40166840,
    "owner_login": "ar-asatryan",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/40166840?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "shop",
      "handle"
    ]
  },
  {
    "id": 186380213,
    "name": "Customer-Relationship-Management-Real-time-CURD-Application-using-Spring-Rest-Json-HQL-WebServices",
    "full_name": "soumyadip007/Customer-Relationship-Management-Real-time-CURD-Application-using-Spring-Rest-Json-HQL-WebServices",
    "description": "CRUD (Create, Read, Update and Delete) application is the most important application for creating any project.  In spring Rest, we have developed this using Jackson,Postman and restful web services.",
    "fork": false,
    "created_at": "2019-05-13T08:42:40Z",
    "updated_at": "2020-02-10T07:22:40Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 37873518,
    "owner_login": "soumyadip007",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/37873518?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "rest",
      "service",
      "develop",
      "services",
      "import",
      "restful",
      "creating",
      "spring",
      "developed",
      "important"
    ]
  },
  {
    "id": 117414666,
    "name": "ReST_JSON",
    "full_name": "namanmishra001/ReST_JSON",
    "description": "Use this application and test the cases with either Postman or ARC",
    "fork": false,
    "created_at": "2018-01-14T08:34:23Z",
    "updated_at": "2018-01-14T09:35:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22395834,
    "owner_login": "namanmishra001",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22395834?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "case",
      "cases",
      "either"
    ]
  },
  {
    "id": 166286435,
    "name": "rest-api-manager",
    "full_name": "rhabhishek/rest-api-manager",
    "description": "A client application to manage and test APIs. (One similar to Postman, RESTClient)",
    "fork": false,
    "created_at": "2019-01-17T19:45:17Z",
    "updated_at": "2019-01-17T19:45:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22307890,
    "owner_login": "rhabhishek",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22307890?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "client",
      "manage"
    ]
  },
  {
    "id": 188317093,
    "name": "PostMate-Rest-App",
    "full_name": "roachdaddy89/PostMate-Rest-App",
    "description": "PostMate is a react-native application for exploring and storing custom api routes like postman.",
    "fork": false,
    "created_at": "2019-05-23T22:51:25Z",
    "updated_at": "2020-02-16T01:36:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 50616472,
    "owner_login": "roachdaddy89",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/50616472?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "application",
      "route",
      "routes",
      "custom",
      "react",
      "native",
      "exploring",
      "storing"
    ]
  },
  {
    "id": 127773987,
    "name": "simple-grizzly-standalone-restful-webservice-example",
    "full_name": "bzdgn/simple-grizzly-standalone-restful-webservice-example",
    "description": "A simple Grizzly standalone RESTful webservice application with Configuration Manager Implementation and Dummy Cache Repository",
    "fork": false,
    "created_at": "2018-04-02T15:20:38Z",
    "updated_at": "2020-02-27T16:20:49Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 0,
    "watchers": 3,
    "score": 1,
    "owner_id": 1220904,
    "owner_login": "bzdgn",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1220904?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service",
      "webservice",
      "standalone"
    ]
  },
  {
    "id": 141100390,
    "name": "RESTful-API",
    "full_name": "Mayurgupta3/RESTful-API",
    "description": "A RESTful API is an application program interface that uses HTTP requests to GET, PUT, POST and DELETE data using Postman Application.",
    "fork": false,
    "created_at": "2018-07-16T07:11:40Z",
    "updated_at": "2019-04-02T09:31:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16776443,
    "owner_login": "Mayurgupta3",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16776443?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "application",
      "requests",
      "face",
      "program",
      "uses",
      "interface"
    ]
  },
  {
    "id": 138474242,
    "name": "RESTful-Service--StripeAPI-integration-with-Spring-Application",
    "full_name": "utsavrai/RESTful-Service--StripeAPI-integration-with-Spring-Application",
    "description": "A Spring application to manage Customers, Plans and Subscriptions without using Stripe’s Dashboard",
    "fork": false,
    "created_at": "2018-06-24T10:53:18Z",
    "updated_at": "2018-06-24T11:13:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25121619,
    "owner_login": "utsavrai",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25121619?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "script",
      "manage"
    ]
  },
  {
    "id": 210264084,
    "name": "spring-boot-CRUD",
    "full_name": "ankesh1998/spring-boot-CRUD",
    "description": "This is basically a REST-Web application along with Custom Exception Handling",
    "fork": false,
    "created_at": "2019-09-23T04:24:03Z",
    "updated_at": "2019-09-26T05:52:01Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 46551459,
    "owner_login": "ankesh1998",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/46551459?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "call",
      "long",
      "along",
      "basically"
    ]
  },
  {
    "id": 138630808,
    "name": "e-api",
    "full_name": "apoorva-chitre/e-api",
    "description": "REST API for an E-commerce application",
    "fork": false,
    "created_at": "2018-06-25T17:53:45Z",
    "updated_at": "2018-07-03T15:52:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14181089,
    "owner_login": "apoorva-chitre",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/14181089?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "commerce"
    ]
  },
  {
    "id": 196560034,
    "name": "RESTful-API",
    "full_name": "caren1/RESTful-API",
    "description": "RESTful application based on Node.js, express.js and mongoose tested with Postman, that allows for adding, listing, deleting and editing all and single articles.  ",
    "fork": false,
    "created_at": "2019-07-12T10:29:51Z",
    "updated_at": "2019-07-23T07:04:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30754368,
    "owner_login": "caren1",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/30754368?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "based",
      "express",
      "mongo",
      " express",
      "tested",
      "list",
      "allows",
      "mongoose",
      "edit",
      "single",
      "adding",
      "article"
    ]
  },
  {
    "id": 138725378,
    "name": "profile",
    "full_name": "BaneleMlamleli/profile",
    "description": "Spring Boot application that will use REST API to create, read, update and delete a user profile",
    "fork": false,
    "created_at": "2018-06-26T10:58:01Z",
    "updated_at": "2019-04-25T02:28:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29200010,
    "owner_login": "BaneleMlamleli",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29200010?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "file",
      "application",
      "user",
      "read",
      "update",
      "delete",
      "profile"
    ]
  },
  {
    "id": 116396024,
    "name": "transaction-service",
    "full_name": "arghajit/transaction-service",
    "description": "A REST application with JAX-RS (Java) hosted in Jetty Server with API tests in POSTMAN",
    "fork": false,
    "created_at": "2018-01-05T14:58:02Z",
    "updated_at": "2018-10-22T16:50:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23239074,
    "owner_login": "arghajit",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/23239074?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "application",
      "tests ",
      "host",
      "hosted"
    ]
  },
  {
    "id": 234168690,
    "name": "LibraryManager-BackendApp",
    "full_name": "mat373/LibraryManager-BackendApp",
    "description": "Backend Rest SpringBoot application using Spring Web, Spring Data and H2 database. Testing using Postman.",
    "fork": false,
    "created_at": "2020-01-15T20:39:09Z",
    "updated_at": "2020-02-28T13:23:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42851216,
    "owner_login": "mat373",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42851216?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "database"
    ]
  },
  {
    "id": 241793843,
    "name": "spring-mvc-rest-customer-application",
    "full_name": "Mehran-at/spring-mvc-rest-customer-application",
    "description": "Simple rest application for the sake of exercising REST API+trying in POSTMAN APP. Not a good example for big apps",
    "fork": false,
    "created_at": "2020-02-20T04:35:01Z",
    "updated_at": "2020-02-20T04:35:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36104315,
    "owner_login": "Mehran-at",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36104315?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "rest",
      "example",
      "trying",
      "apps",
      "sake"
    ]
  },
  {
    "id": 193361286,
    "name": "REST-API",
    "full_name": "miladBentaiba/REST-API",
    "description": "- create a REST API for managing contact list (CRUD operation) - use Postman to test your REST API - create a frontend application with react that use this REST API. You can use axios to communicate with the API",
    "fork": false,
    "created_at": "2019-06-23T14:58:24Z",
    "updated_at": "2019-08-31T17:56:13Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 11270828,
    "owner_login": "miladBentaiba",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11270828?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "application",
      "operation",
      "list",
      "front",
      "react",
      "frontend",
      "communicate",
      "managing",
      "axios",
      "contact"
    ]
  },
  {
    "id": 198250013,
    "name": "sms-management-API",
    "full_name": "Phunmbi/sms-management-API",
    "description": "A basic SMS REST API application built with NodeJS and ExpressJS",
    "fork": false,
    "created_at": "2019-07-22T15:22:54Z",
    "updated_at": "2019-07-28T20:03:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18615287,
    "owner_login": "Phunmbi",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/18615287?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "built"
    ]
  },
  {
    "id": 95427428,
    "name": "REST-API-Web-Application",
    "full_name": "meghnadsaha/REST-API-Web-Application",
    "description": "A simple CRUD application     Framework - Jersey Jax-rs for creating RESTful APIs in Java    Editor - Eclipse    Database - mysql     Rest API client - Postman(for making REST API calls) (6) Hibernate to interact with database.",
    "fork": false,
    "created_at": "2017-06-26T08:52:49Z",
    "updated_at": "2017-06-26T08:54:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18301749,
    "owner_login": "meghnadsaha",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/18301749?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "call",
      "client",
      "database",
      "calls",
      "interact",
      "creating",
      "mysql",
      "making",
      "mysql "
    ]
  },
  {
    "id": 206502950,
    "name": "task-manager-API",
    "full_name": "bera5186/task-manager-API",
    "description": "A complete REST API for To-Do applications with JWT based authentication and MongoDB 🔥⚡",
    "fork": false,
    "created_at": "2019-09-05T07:32:59Z",
    "updated_at": "2019-11-20T16:42:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35560689,
    "owner_login": "bera5186",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/35560689?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "based",
      "auth",
      "authentication",
      "complete",
      "applications"
    ]
  },
  {
    "id": 158176010,
    "name": "restapi",
    "full_name": "yashdeepk/restapi",
    "description": "Web Service API using python and flask. A Flask application that expose the RESTful URL endpoints. All data sent to and from the API is in JSON format with the Content-Type header field set to application/json. Used postman to verify the outcome.",
    "fork": false,
    "created_at": "2018-11-19T06:58:02Z",
    "updated_at": "2018-11-19T07:01:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36252240,
    "owner_login": "yashdeepk",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36252240?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "form",
      "application",
      "json",
      "format",
      "endpoint",
      "points",
      "endpoints",
      "python",
      "flask",
      "header",
      "expose",
      "verify"
    ]
  },
  {
    "id": 221910866,
    "name": "DevOpsTutorial",
    "full_name": "skoulouzis/DevOpsTutorial",
    "description": "Define a simple REST API with OpenAPI and Swagger, write REST API tests using Postman, develop the application logic, dockerize it and finally perform continuous integration (CI) ",
    "fork": false,
    "created_at": "2019-11-15T11:30:15Z",
    "updated_at": "2019-11-25T12:12:51Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 9680609,
    "owner_login": "skoulouzis",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9680609?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "form",
      "tests",
      "application",
      "tests ",
      "develop",
      "integration",
      "perform",
      "docker",
      "write",
      "final",
      "continuous"
    ]
  },
  {
    "id": 183835488,
    "name": "partNumberGenerator",
    "full_name": "painfulcranium/partNumberGenerator",
    "description": "A sample Demo application with an angular front end, a grails REST API, and a postman collection to test with",
    "fork": false,
    "created_at": "2019-04-28T00:45:58Z",
    "updated_at": "2019-04-29T13:54:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5238279,
    "owner_login": "painfulcranium",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/5238279?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "postman collection",
      "application",
      "sample",
      "front",
      "front end",
      "angular",
      "rails",
      "grails"
    ]
  },
  {
    "id": 157699303,
    "name": "RESTful-API-with-Nodejs",
    "full_name": "paramountgroup/RESTful-API-with-Nodejs",
    "description": "Udacity Blockchain developer project RESTful Web API with Node.js Framework by Bob Ingram. This program creates a web API using Node.js framework that interacts with my private blockchain and submits and retrieves data using an application like postman or url on localhost port 8000. ",
    "fork": false,
    "created_at": "2018-11-15T11:18:36Z",
    "updated_at": "2018-11-24T14:49:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12649647,
    "owner_login": "paramountgroup",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12649647?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "data",
      "application",
      "develop",
      "framework",
      "local",
      "interact",
      "host",
      "developer",
      "program",
      "chai",
      "blockchain",
      "retrieve",
      "creates",
      "city",
      "private",
      "per project"
    ]
  },
  {
    "id": 157522865,
    "name": "springboot-rest-image-retriever",
    "full_name": "xrayin/springboot-rest-image-retriever",
    "description": "A spring boot application that uses REST to retrieve an image. Images are currently saved in the directory resources/images for convenience. Best practice would be to save it to a file system. Call any of the endpoints with a program of your choice, I used Postman. e.g. GET -> http://localhost:8080/images/abcd.png",
    "fork": false,
    "created_at": "2018-11-14T09:20:05Z",
    "updated_at": "2018-11-16T07:31:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 10046966,
    "owner_login": "xrayin",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10046966?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "application",
      "http",
      "endpoint",
      "points",
      "endpoints",
      "local",
      "source",
      "rent",
      "boot",
      "host",
      "spring",
      "image",
      "system",
      "program",
      "uses",
      "resource",
      "resources",
      "practice",
      "images",
      "spring boot",
      "retrieve",
      "current",
      "directory",
      "currently"
    ]
  },
  {
    "id": 246163667,
    "name": "REST-social-app",
    "full_name": "pramodkondur/REST-social-app",
    "description": "A social media application implementing the RESTful Web Services using JSON exchange format done in Java. The main aim for working on this project was to understand the concept of REST web services. Done in eclipse utilizing Springboot, Hibernate, Postman and uses H2 as database",
    "fork": false,
    "created_at": "2020-03-09T23:29:17Z",
    "updated_at": "2020-03-09T23:43:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 60753825,
    "owner_login": "pramodkondur",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/60753825?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "form",
      "application",
      "service",
      "database",
      "implement",
      "format",
      "util",
      "services",
      "boot",
      "working",
      "uses",
      "main",
      "under",
      "concept",
      "done",
      "implementing",
      "social",
      "media",
      "exchange",
      "eclipse",
      "utilizing"
    ]
  },
  {
    "id": 218577499,
    "name": "car",
    "full_name": "Di3GO95/car",
    "description": "REST API service for a car application, using Java EE",
    "fork": false,
    "created_at": "2019-10-30T16:51:45Z",
    "updated_at": "2019-11-20T08:24:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5565009,
    "owner_login": "Di3GO95",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5565009?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service"
    ]
  },
  {
    "id": 125800550,
    "name": "todo-list-cloud-computing",
    "full_name": "imar26/todo-list-cloud-computing",
    "description": "Developed a TODO application using Rest API, performed CRUD operations and deployed application on AWS and GCP. Also, Leveraged services like EC2, CodeDeploy, S3, DynamoDB, RDS, Route 53, Load Balancer, Lambda, CloudWatch and SNS.",
    "fork": false,
    "created_at": "2018-03-19T04:16:28Z",
    "updated_at": "2018-05-03T15:00:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28653160,
    "owner_login": "imar26",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/28653160?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "application",
      "service",
      "operation",
      "services",
      "operations",
      "perform",
      "ever",
      "deployed",
      "performed"
    ]
  },
  {
    "id": 238195152,
    "name": "web-service",
    "full_name": "elevliaykut/web-service",
    "description": "A Simple REST API application that web service using Node.js and MongoDB. You may test use with amazing tool Postman.",
    "fork": false,
    "created_at": "2020-02-04T11:58:26Z",
    "updated_at": "2020-02-20T20:35:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29731054,
    "owner_login": "elevliaykut",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29731054?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "service",
      "tool",
      "amazing"
    ]
  },
  {
    "id": 190986359,
    "name": "BooksAppReactJS-CRUD-basic",
    "full_name": "papiuiulia/BooksAppReactJS-CRUD-basic",
    "description": "I created an application in ReactJS with REST services accomplished in Postman(an online tool). The user can add new books, edit existing ones or remove them.",
    "fork": false,
    "created_at": "2019-06-09T09:15:06Z",
    "updated_at": "2019-06-09T09:24:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44809460,
    "owner_login": "papiuiulia",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/44809460?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "service",
      "tool",
      "user",
      "line",
      "services",
      "book",
      "edit",
      "books",
      "online",
      "accomplished"
    ]
  },
  {
    "id": 136736899,
    "name": "JWTApplication",
    "full_name": "BhaveshBangera/JWTApplication",
    "description": "This is a basic application built using Django-REST Framework. Here when a user is authenticated, he is provided a token (i.e. JSON Web Token) by the Authentication Server, with the help of which he is able to make an API Call to our Application. Our Application verifies the token and then only user gets access to API data.",
    "fork": false,
    "created_at": "2018-06-09T15:50:25Z",
    "updated_at": "2018-06-09T16:11:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39965053,
    "owner_login": "BhaveshBangera",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/39965053?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "user",
      "auth",
      "help",
      "built",
      "provide",
      "access",
      "token",
      "provided",
      "authenticate",
      "gets",
      "authenticated"
    ]
  },
  {
    "id": 128530193,
    "name": "springboot-testing-mysql",
    "full_name": "ivangfr/springboot-testing-mysql",
    "description": "The goals of this project are: 1) Create a simple Spring Boot REST API to manage users called user-service. The database used is MySQL; 2) Explore the utilities and annotations that Spring Boot provides when testing applications. 3) Testing with Postman and Newman",
    "fork": false,
    "created_at": "2018-04-07T13:20:13Z",
    "updated_at": "2020-03-28T11:27:06Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 10564548,
    "owner_login": "ivangfr",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/10564548?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "application",
      "service",
      "call",
      "database",
      "user",
      "util",
      "manage",
      "users",
      "provide",
      "applications",
      "provides",
      "utilities",
      "goal",
      "notation",
      "goals"
    ]
  },
  {
    "id": 169711642,
    "name": "Todo-Api",
    "full_name": "sahilwasan000/Todo-Api",
    "description": "A REST API that lets the user, use the end points and create his own application using the API. It uses Node.js, Express and MongoDB for development and Mocha and Postman for testing purposes.",
    "fork": false,
    "created_at": "2019-02-08T09:32:10Z",
    "updated_at": "2019-04-07T15:56:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32892440,
    "owner_login": "sahilwasan000",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32892440?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "user",
      "develop",
      "points",
      "development",
      "uses",
      "purposes",
      "lets"
    ]
  },
  {
    "id": 184787202,
    "name": "MERN-CRUD",
    "full_name": "AmanUllah710/MERN-CRUD",
    "description": "Simple application to delete and register user in through REACT front-end but you perform all the CRUD operations using POSTMAN. In REST api all the opertions are working perfectly,",
    "fork": false,
    "created_at": "2019-05-03T16:26:04Z",
    "updated_at": "2019-05-05T11:29:05Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 27359152,
    "owner_login": "AmanUllah710",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/27359152?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "application",
      "user",
      "operation",
      "front",
      "operations",
      "delete",
      "perform",
      "working",
      "register",
      "perfect"
    ]
  },
  {
    "id": 207350189,
    "name": "Simple-REST-API-using-Spring-Boot-Hibernate-and-MySQL-Database",
    "full_name": "andreprawira/Simple-REST-API-using-Spring-Boot-Hibernate-and-MySQL-Database",
    "description": "It's a very simple REST API for employee management using Spring Boot, Hibernate, and MySQL.  Test it with Postman:  Use GET method to list all of the employees or a single employee specified by ID Use POST method to save an employee (ID auto generated) or use a PUT method to update if employee ID already exist (specify the employee ID in the url to update) Use DELETE method to delete an employee (specify the employee ID in the url to delete) Dont forget to change the application.properties to connect the database with the app (located in src/main/resources/application.properties)",
    "fork": false,
    "created_at": "2019-09-09T16:08:07Z",
    "updated_at": "2019-09-09T16:08:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42351199,
    "owner_login": "andreprawira",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/42351199?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "database",
      "auto",
      "generate",
      "manage",
      "spec",
      "list",
      "source",
      "read",
      "update",
      "connect",
      "delete",
      "very",
      "method",
      "resource",
      "management",
      "main",
      "resources",
      "ready",
      "generated",
      "single",
      "employee",
      "forge",
      "properties",
      "employees"
    ]
  },
  {
    "id": 189706493,
    "name": "Employee-Relationship-CURD-Application-using-Spring-Boot-Thymeleaf-Hibernate-JPA-MVC",
    "full_name": "soumyadip007/Employee-Relationship-CURD-Application-using-Spring-Boot-Thymeleaf-Hibernate-JPA-MVC",
    "description": "CRUD (Create, Read, Update and Delete) application is the most important application for creating any project.  In spring Rest, we have developed this using Jackson,Postman and restful web services and along with this we have used Spring-boot ,JPA, Spring-Data-Rest and hibernate.",
    "fork": false,
    "created_at": "2019-06-01T08:00:01Z",
    "updated_at": "2019-12-01T07:39:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37873518,
    "owner_login": "soumyadip007",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/37873518?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "rest",
      "service",
      "develop",
      "services",
      "import",
      "boot",
      "restful",
      "creating",
      "spring",
      "developed",
      "long",
      "along",
      "hibernate",
      "important"
    ]
  },
  {
    "id": 233307740,
    "name": "Fanlinc",
    "full_name": "kevinxu993/Fanlinc",
    "description": "⚫ Developed a web application to foster meaningful relationships between fans, and grow the fervent passions for the fandoms they love. ⚫ Coded in Java with Spring Boot for backend, ReactJS and HTML for frontend. ⚫ Used MySQL database. Used AWS for cloud storage. Used Spring Data JPA to allow data access and Google API to implement map feature. ⚫ Wrote REST APIs in the backend to ensure flexible data handling. ⚫ Tested the APIs using Postman to ensure early failure detection and stable development. ⚫ Worked in a Scrum team using agile software development methodology. ⚫ Used Git for version control to simulate a software development process",
    "fork": false,
    "created_at": "2020-01-11T22:46:19Z",
    "updated_at": "2020-01-11T22:48:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36051651,
    "owner_login": "kevinxu993",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36051651?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "database",
      "develop",
      "implement",
      "front",
      "version",
      "development",
      "backend",
      "method",
      "access",
      "web app",
      "feature",
      "cloud",
      "control",
      "between",
      "frontend",
      "software",
      "handling",
      "process",
      "simulate",
      "storage",
      "relationship",
      "agile",
      "mean",
      "early",
      "foster",
      "flexible"
    ]
  },
  {
    "id": 119587689,
    "name": "SmackApplication",
    "full_name": "sonali-developer/SmackApplication",
    "description": "App Description: A clone of chat application namely Slack. It is a full fledged and professional looking ready to publish app on Appstore. It allows first time user to register by providing unique username, email and password along with selection of Avatar and Avatar's Background color; login using registered email and password, participate in channels available for chat, create new channel by adding users, perform live chat with other users of this app, can even logout, and so on.  • Built using Xcode 9, Swift 4, Cocoa pods, node.js, MongoDB, Heroku, Postman, etc. for iOS 11 based iPhones and iPads.  • Local Frameworks used includes Foundation, UIKit and other API's like Alamofire, SwiftyJSON, SocketIO, REST, SWReveal, etc.  • Demonstrated the use of Networking in iOS.  • Implemented Web Request creation in Xcode using UIKit, APIs, node.js and Mongo dB online. • Implemented Web service API hosting online using Heroku and local hosting using Postman. • Implemented user creation and real time talking using Socket Technology through SocketIO library.  • Implemented Web Service for User Registration, Authentication & Login, Channels Creation & display, fetching, sending and saving text messages and many more.  • Implemented Table Views, Collection Views & custom design of their cells using data models.  • Implemented side menu for the display of user profile and channels using SWReveal and Gradient color design code for providing gradient color background to this side menu.  • Implemented creation of two XIB's for Channels creation and profile view’s popUp.  • Implemented SegmentedControl for displaying 28 Dark and Light Avatar displays and code for generating Avatar’s background color on user registration screen.  • Implemented Input Accessory View for Text field.  • In all designed around eight View Controllers and their corresponding storyboard file for GUI design, Four Services, two custom cells, seven view files, two model files and lots of assets and so on. ",
    "fork": false,
    "created_at": "2018-01-30T20:02:55Z",
    "updated_at": "2018-06-24T20:51:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 20232921,
    "owner_login": "sonali-developer",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20232921?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "file",
      "application",
      "script",
      "service",
      "node",
      "user",
      "based",
      "code",
      "sign",
      "mail",
      "line",
      "files",
      "send",
      "local",
      "full",
      "read",
      "users",
      "more",
      "library",
      "view",
      "host",
      "email",
      "perform",
      "rating",
      "store",
      "play",
      "name",
      "working",
      "side",
      "allows",
      "long",
      "model",
      "custom",
      "message",
      "text",
      "design",
      "includes",
      "login",
      "along",
      "available",
      "clone",
      "designed",
      "fetch",
      "creation",
      "sending",
      "around",
      "ready",
      "many",
      "messages",
      "online",
      "sets",
      "display",
      "models",
      "register",
      "select",
      "generating",
      "fire",
      "playing",
      "profile",
      "adding",
      "talk",
      "hosting",
      "providing",
      "registration",
      "chat",
      "saving",
      "background",
      "namely",
      "fetching",
      "selection",
      "real time",
      "lots"
    ]
  },
  {
    "id": 139349790,
    "name": "Shircle",
    "full_name": "awaisbub/Shircle",
    "description": "It is Android aapplication back end code made for small local businesses. The back end of this application is in C# .NET using MVC architecture making REST APIs. And all the views are on Android. I worked as a back end developer in this app. Back end of the app is in c# using .NET entity framework. REST APIs developed using Model View Controller(MVC) architecture. Views were designed on android studio. The database was designed by using Code First Approach. (Visual Studio, Android Studio, Microsoft Azure, Microsoft SQL, SQLite, Postman, Entity Framework, MVC, Firebase REST API’s, REST API’s, JSON) This app has the following features: I. It provides all in one business solution to shopkeepers. Shopkeeper can setup his online store, manage sales through mobile POS, track of inventory, sale reports generation, market insights, and trending products. II. On the other hand, customer can view nearby stores through Google Maps & Shircle-Eye, add products to virtual cart, and view trending items according to their interests.",
    "fork": false,
    "created_at": "2018-07-01T17:54:53Z",
    "updated_at": "2018-07-01T18:16:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40741255,
    "owner_login": "awaisbub",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/40741255?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "data",
      "application",
      "rest",
      "database",
      "develop",
      "code",
      "sign",
      "line",
      "framework",
      "manage",
      "local",
      "view",
      "provide",
      "developer",
      "store",
      "shop",
      "developed",
      "report",
      "feature",
      "custom",
      "esse",
      "design",
      "product",
      "making",
      "small",
      "features",
      "were",
      "setup",
      "track",
      "solution",
      "designed",
      "android",
      "following",
      "mobile",
      "products",
      "online",
      "according",
      "generation",
      "provides",
      "entity",
      "customer",
      "worked",
      "back end",
      "inventory",
      "keep",
      "reports",
      "items",
      "insight",
      "business",
      "keeper",
      "studio",
      "businesses",
      "aapplication"
    ]
  },
  {
    "id": 91374388,
    "name": "JWT-Authentication",
    "full_name": "kpraneeth3456/JWT-Authentication",
    "description": "Project Title: JWT Authentication  Description: This project is a basic Authorization and Authentication which exchanges JSON web tokens between the client and the server for more security.  Execution: -Clone or download the repo from the GitHub link -npm install (to download the dependencies) -node index.js (To get the application running)  Working: -User has to enter his email and password to register his account.(Use any third-party rest-client like Postman on port 3000) -If the email already exists in the database it sends an error message and if the email does not exist it saves to the database. -If the user is signed up then he can go ahead and Sign-in with same username and password. -If the credentials are matched then a JSON web token will be sent to the client in the header. -If the username and password do not match then it sends back an error message.",
    "fork": false,
    "created_at": "2017-05-15T19:03:55Z",
    "updated_at": "2018-12-28T08:47:41Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 26414547,
    "owner_login": "kpraneeth3456",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26414547?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "data",
      "application",
      "rest",
      "script",
      "server",
      "client",
      "node",
      "database",
      "user",
      "sign",
      "mail",
      "send",
      "load",
      "read",
      "running",
      "more",
      "email",
      "name",
      "token",
      "message",
      "to do",
      "install",
      "between",
      "link",
      "header",
      "account",
      "download",
      "enter",
      "ready",
      "party",
      "register",
      "sends",
      "third",
      "dependencies",
      "tokens",
      "error",
      "match",
      "security",
      "exchange",
      "matched"
    ]
  },
  {
    "id": 215877357,
    "name": "busticketing",
    "full_name": "Mir00r/busticketing",
    "description": "Bus Reservation System_ and tried to implement an Admin portal which can be operated over browsers and a series of REST APIs to interact with the system using mobile applications or frontend applications written for the browsers. The complete systems has two important actors :  1. Admin user 2. End user  The _Admin user_ can access this application on browser (laptop or mobile/tablet, doesn't really matter as this is built using bootstrap, material design and is completely responsive) and can perform the following actions :  1. Signup 2. Login (Spring sessions) 3. Update their profile 4. Create an agency 5. Add buses to the agency 6. Add trips consisting of predefined stops and buses   The _End user_ can use their mobile application (yet to be built, however the REST APIs are ready and could be used via Postman or Swagger) to perform the following actions :  1. Signup 2. Login (and get a JWT token)  3. List all available stops 4. Search a trip between any two stops 5. Filter search results with a date option 6. Book a ticket for a given trip schedule  Admin interface and REST APIs both have their independent authentication mechanisms, the web application uses the cookie based authentication (provided by default by Spring security) and the REST API uses the JWT authentication for access. This application assumes the availability of 'MongoDB' installation on the localhost where the server will run or the use of docker-compose to boot up a mysqldb container and link the application with it within the realm of docker.  Any changes that the admin users will do on the web portal will impact the search results of the end users, there will be certain use cases which you may find missing here, I hope you will appreciate that the overall idea was to present a way to create such an application completely inside the realm of Spring Boot and not to actually building a fully functional reservation system.  The admin user interface is completely written in material design using Bootstrap v4 and is responsive to suite a variety of devices. The template engine used to render the admin views is Thymeleaf since the library is extremely extensible and its natural templating capability ensures templates can be prototyped without a back-end – which makes development very fast when compared with other popular template engines such as JSP.",
    "fork": false,
    "created_at": "2019-10-17T20:11:48Z",
    "updated_at": "2019-12-18T20:19:33Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 11166444,
    "owner_login": "Mir00r",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11166444?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "file",
      "application",
      "server",
      "user",
      "based",
      "develop",
      "implement",
      "contain",
      "sign",
      "auth",
      "build",
      "function",
      "local",
      "full",
      "read",
      "import",
      "interact",
      "built",
      "authentication",
      "front",
      "users",
      "library",
      "boot",
      "plate",
      "view",
      "host",
      "development",
      "face",
      "written",
      "very",
      "perform",
      "functional",
      "provide",
      "system",
      "access",
      "action",
      "side",
      "browser",
      "search",
      "web app",
      "mysql",
      "docker",
      "uses",
      "ever",
      "template",
      "case",
      "result",
      "interface",
      "token",
      "complete",
      "building",
      "design",
      "ully",
      "type",
      "fully",
      "install",
      "between",
      "link",
      "frontend",
      "available",
      "results",
      "applications",
      "within",
      "provided",
      "cases",
      "following",
      "mobile",
      "ready",
      "find",
      "given",
      "container",
      "popular",
      "actor",
      "suite",
      "define",
      "default",
      "templates",
      "both",
      "such",
      "engine",
      "sessions",
      "mechanism",
      "profile",
      "schedule",
      "consist",
      "render",
      "admin",
      "pact",
      "security",
      "makes",
      "systems",
      "important",
      "inside",
      "compose",
      "fully functional",
      "material",
      "series",
      "ticket",
      "responsive",
      "operate",
      "compare",
      "prototype",
      "completely",
      "idea",
      "consisting",
      "actually",
      "devices",
      "reservation",
      "predefined"
    ]
  },
  {
    "id": 166755938,
    "name": "Dec-api",
    "full_name": "Pal0720/Dec-api",
    "description": "Build a RESTful API/MICROSERVICE with the following implementations :   The API/Microservice must perform these basic CRUD Operations :              - Accepts a request to add a new entry into the database.        - Accepts a request to update an existing entry into the database.        - Accepts a request to retrieve all the existing entries from the database.        - Accepts a request to retrieve a single entry with respect to a particular field (ID, Name, etc.. )  from the database.    a. Products : Products Table Schema : Decathlon_Products ProductID  | ProductName  | ProductSport | ProductLevel | ProductDescription  | AssociatedStores |    b. Stores : DB Table Schema : Decathlon_Stores StoreID  | StoreName  | StoreCity |       Note : 1. 'AssociatedStores' is the field to capture the StoreIDs in which the product is available. It can be multiple stores.  2. Both Products and Stores API can be called separately and together to perform the above mentioned functions. For Ex: Expose one endpoint (for example: /stores/{store_id}/products/{product_id} ) to retrieve the details of the product associated to a store. Expose one endpoint ( /stores/store_id/products ) to list all the products available in that particular store.  3. IDs and names cannot be updated.  4. You can use Spring Boot(Java) or Django Framework (with Python) or any framework you are comfortable with to build the application with Maven.  5. You can use an in-memory database : H2/Apache Derby.  6. You can use Postman as the REST Client to send requests.   Security : Implement a Basic Authorization security mechanism, which is validated on all requests.",
    "fork": false,
    "created_at": "2019-01-21T05:53:07Z",
    "updated_at": "2019-01-21T06:55:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 29477534,
    "owner_login": "Pal0720",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/29477534?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "script",
      "service",
      "call",
      "database",
      "requests",
      "example",
      "implement",
      "endpoint",
      "framework",
      "build",
      "function",
      "send",
      "spec",
      "list",
      "update",
      "implementation",
      "perform",
      "store",
      "name",
      "product",
      "multiple",
      "available",
      "functions",
      "following",
      "retrieve",
      "products",
      "single",
      "updated",
      "details",
      "mechanism",
      "security",
      "memory",
      "names",
      "comfortable",
      "cannot",
      "implementations"
    ]
  },
  {
    "id": 33510084,
    "name": "fooblog",
    "full_name": "darrylkuhn/fooblog",
    "description": "Demo PHP application showing how to use Postman/Newman to test and collect code coverage",
    "fork": false,
    "created_at": "2015-04-06T22:54:23Z",
    "updated_at": "2017-05-11T22:40:56Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 1,
    "watchers": 4,
    "score": 1,
    "owner_id": 3458313,
    "owner_login": "darrylkuhn",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3458313?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "application",
      "code",
      "showing",
      "coverage"
    ]
  },
  {
    "id": 165355829,
    "name": "api-hub",
    "full_name": "harenlewis/api-hub",
    "description": "A mock server application where in development or dummy APIs can be created and accessed by multiple users. Similar to Postman's advanced mock server.",
    "fork": false,
    "created_at": "2019-01-12T06:37:09Z",
    "updated_at": "2019-01-15T19:46:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12905568,
    "owner_login": "harenlewis",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/12905568?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "server",
      "user",
      "develop",
      "users",
      "mock",
      "development",
      "access",
      "esse",
      "multiple",
      "advance",
      "advanced",
      "dummy",
      "accessed"
    ]
  },
  {
    "id": 161338122,
    "name": "SpringBootApp",
    "full_name": "Jakobrennan/SpringBootApp",
    "description": "First application that uses the spring boot framework, using postman to create and pull information from the mock DB",
    "fork": false,
    "created_at": "2018-12-11T13:29:03Z",
    "updated_at": "2019-01-24T18:35:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19807912,
    "owner_login": "Jakobrennan",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19807912?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "form",
      "application",
      "format",
      "framework",
      "boot",
      "mock",
      "spring",
      "info",
      "infor",
      "uses",
      "information",
      "spring boot",
      "pull"
    ]
  },
  {
    "id": 216690683,
    "name": "postman-runner",
    "full_name": "reddysainathn/postman-runner",
    "description": null,
    "fork": false,
    "created_at": "2019-10-22T00:36:20Z",
    "updated_at": "2019-10-22T01:03:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10643404,
    "owner_login": "reddysainathn",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10643404?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 98305019,
    "name": "AlamofireRouterGenerator",
    "full_name": "Mol0ko/AlamofireRouterGenerator",
    "description": "MacOS application for generating Swift 3 Alamofire router enum from Postman json collection",
    "fork": false,
    "created_at": "2017-07-25T12:43:36Z",
    "updated_at": "2017-07-25T14:04:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24519478,
    "owner_login": "Mol0ko",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/24519478?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "application",
      "json",
      "route",
      "rating",
      "router",
      "generating",
      "fire"
    ]
  },
  {
    "id": 243911686,
    "name": "Postman",
    "full_name": "momololiya/Postman",
    "description": "I have created Header-application/json,but it didn't change to JSON(application/json) in Body-raw,pls help me check ,thank you.",
    "fork": false,
    "created_at": "2020-02-29T05:39:44Z",
    "updated_at": "2020-02-29T05:40:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 61612368,
    "owner_login": "momololiya",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/61612368?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "json",
      "help",
      "check"
    ]
  },
  {
    "id": 98704597,
    "name": "postman-json",
    "full_name": "dounine/postman-json",
    "description": null,
    "fork": false,
    "created_at": "2017-07-29T03:08:33Z",
    "updated_at": "2017-07-29T03:08:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7344514,
    "owner_login": "dounine",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7344514?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 86958595,
    "name": "postman-chrome-extenshion",
    "full_name": "mddanishyusuf/postman-chrome-extenshion",
    "description": "basic application for HTTP services and return JSON data",
    "fork": false,
    "created_at": "2017-04-02T02:55:24Z",
    "updated_at": "2017-04-02T02:59:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9165019,
    "owner_login": "mddanishyusuf",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9165019?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "service",
      "services"
    ]
  },
  {
    "id": 241176513,
    "name": "api-to-md",
    "full_name": "mateusbzerra/api-to-md",
    "description": "A NodeJS application to generate a beauty markdown file from Insomnia/Postman JSON file.",
    "fork": false,
    "created_at": "2020-02-17T18:15:23Z",
    "updated_at": "2020-02-18T04:24:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17644982,
    "owner_login": "mateusbzerra",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17644982?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "application",
      "generate",
      "markdown",
      "beauty"
    ]
  },
  {
    "id": 240760942,
    "name": "apic",
    "full_name": "isocracy272/apic",
    "description": "Creation and modification of applications in Cisco APIC using JSON/Postman.",
    "fork": false,
    "created_at": "2020-02-15T17:47:38Z",
    "updated_at": "2020-02-15T18:26:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21347546,
    "owner_login": "isocracy272",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/21347546?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "applications",
      "modification"
    ]
  },
  {
    "id": 141588502,
    "name": "FlagApi",
    "full_name": "bflaven/FlagApi",
    "description": "A basic application to get information about countries via a RESTful API (Node.JS Version). This application will be used for test explanations purpose.",
    "fork": false,
    "created_at": "2018-07-19T14:06:54Z",
    "updated_at": "2018-12-20T04:15:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5916084,
    "owner_login": "bflaven",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5916084?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "form",
      "application",
      "format",
      "info",
      "infor",
      "information",
      "countries"
    ]
  },
  {
    "id": 110963819,
    "name": "MyFirstApp",
    "full_name": "smmcgrath/MyFirstApp",
    "description": "Built in Node.js open source server framework. In this project I moved from client-side development (using JavaScript, HTML, and CSS) to building a server-side web application using the Express.js web framework hosted in Node.js runtime environment. The site includes a flatty style landing page including navigatation bar, sign-up forms, staff info etc. It has an uncluttered and minimal UI. The backend API’s communicated with databases designed using MongoDB, an example of a NoSQL database program using JSON-like objects with schemas. All APIs, including GET, PUT, UPDATE and DELETE were tested using Postman. Great experience using PuTTY open-source terminal emulator, working remotely over SSH network protocol. Securing my API with authentication; hashing passwords using Bcrypt and issuing tokens with JSON Web Token (JWT). New additions help to restrict access and ensure tokens are verified. Previous to this the back-end APIs could be easily accessed via the URL. User comments coudl be retrieved, new ones saved, deleted or updated. Hashing is a means of transforming a string of characters (passwords, in my case) into a different and larger set of characters, thus protecting our sensitive data. Bcrypt is the password hashing function used.",
    "fork": false,
    "created_at": "2017-11-16T11:34:16Z",
    "updated_at": "2018-12-15T19:14:11Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 30355322,
    "owner_login": "smmcgrath",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/30355322?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "form",
      "application",
      "rest",
      "server",
      "client",
      "database",
      "develop",
      "example",
      "sign",
      "environment",
      "auth",
      "tested",
      "framework",
      "help",
      "build",
      "function",
      "site",
      "source",
      "authentication",
      "update",
      "rent",
      "host",
      "delete",
      "development",
      "backend",
      "info",
      "access",
      "working",
      "program",
      "side",
      "web app",
      "open",
      "object",
      "case",
      "token",
      "esse",
      "building",
      "design",
      "were",
      "easily",
      "includes",
      "including",
      "mini",
      "schema",
      "designed",
      "retrieve",
      "objects",
      "style",
      "remote",
      "network",
      "terminal",
      "updated",
      "communicate",
      "comments",
      "hosted",
      "words",
      "tokens",
      "transform",
      "mean",
      "schemas",
      "accessed",
      "moved",
      "restrict",
      "protecting",
      "transforming",
      "minimal",
      "databases"
    ]
  },
  {
    "id": 162791746,
    "name": "Apitest",
    "full_name": "hqq518/Apitest",
    "description": "基于HTML5、Angularjs、Ajax创建的一个用于测试restful api的页面，有点类似postman的功能，支持POST、GET、PUT、DELETE方法，支持添加请求参数、支持添加请求头，支持application/x-www-form-urlencoded和application/json编码格式，支持将历史请求记录保存到本地存储。",
    "fork": false,
    "created_at": "2018-12-22T07:39:20Z",
    "updated_at": "2018-12-22T07:59:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17294797,
    "owner_login": "hqq518",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17294797?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "application",
      "rest",
      "json",
      "code",
      "restful"
    ]
  },
  {
    "id": 82122922,
    "name": "chatapp",
    "full_name": "Inn4ki/chatapp",
    "description": "NODE.JS WEB APPS WITH EXPRESS by Wes Higbee  In this Node.js Web Apps with Express training course, expert author Wes Higbee will teach you how to create web applications and APIs with Express. This course is designed for users that are already familiar with HTML, CSS, and JavaScript.  You will start by learning how to set up a web app, then jump into learning about the Jade view engine. From there, Wes will teach you about CRUD, including how to add the chat room view, respond with JSON, and edit chat rooms. This video tutorial also covers routers, middleware, APIs, and logging and debugging. Finally, you will learn about auth with passport, including passport user validation, protecting admin routes, and query string parameters.  Once you have completed this computer based training course, you will have learned how to create web applications and APIs with Express. Working files are included, allowing you to follow along with the author throughout the lessons.  About the Publisher  Presented in stunning HD quality, the Infinite Skills range of video based training provides a clear and concise way to learn computer applications and programming languages at your own speed. Delivered to your Desktop, iPad ...  More about Infinite Skills Table of Contents Setting Up A Web App What You Will Learn 00:03:28 About The Author 00:01:23 Project Setup 00:02:14 Spinning Up Our Server From Scratch 00:05:11 Serving Index.HTML 00:04:32 Serving Bootstrap Assets 00:05:52 Styling Our Site 00:01:16 How To Access Your Working Files 00:01:15 The Jade View Engine Why View Engines? 00:02:10 The Jade View Engine 00:06:32 HTML Tags In Jade 00:02:16 Attributes Classes And Ids In Jade 00:02:06 Serving Up Jade Views 00:04:24 HTML Reuse In Jade 00:06:26 Code In Jade Views 00:02:37 Passing Data To View Rendering 00:02:01 Setting A Default View Engine 00:00:37 String Interpolation In Jade 00:02:30 Generating Tables In Jade 00:03:50 Tabs And Spaces Oh My 00:01:21 Demystifying Jade 00:02:21 Crud Setting The Stage 00:01:01 Add Chat Room View 00:04:21 Post Chat Room Form 00:06:56 Parsing Form Data From The Request Body 00:04:22 Responding With JSON 00:03:20 Admin Chat Rooms Workflow 00:02:21 Named Route Parameters To Delete Rooms 00:05:59 Edit Chat Rooms 00:06:01 Edit Chat Rooms Part - 2 00:02:00 Responding With 404 Not Found 00:01:39 Wrap Up 00:01:23 Routers Extracting An Admin Module 00:04:47 Modular Admin Router 00:04:00 Pluggable Admin Mount Path 00:03:15 Stumbling Block - Relative Redirects 00:02:49 Chaining Routes 00:01:57 Middleware Understanding Routing And Middleware 00:05:45 Adding Custom Logging Middleware 00:02:15 Understanding Next() 00:01:31 Middleware To Fetch Data 00:07:24 Order Matters.Av 00:01:09 Scoping Middleware 00:03:53 What To Do With Errors 00:03:01 Last Thoughts 00:03:19 APIs A Client Side Chat App 00:01:55 Setup The Client Side Chat App 00:03:01 Creating An API 00:05:42 Modules Are Singletons 00:01:50 Postman To Test API 00:01:24 API Get Room Messages 00:05:49 Posting To An API 00:03:37 API To Delete Messages 00:03:15 Parsing JSON In The Request Body 00:03:25 Logging And Debugging Express-Debug 00:03:03 Logging With Morgan 00:01:45 File Access Log With Morgan 00:01:28 Built-In Express Debugging 00:01:57 When Things Go Wrong Throwing An Error In A Route Handler 00:01:39 Errors In Production 00:01:53 Custom Error Handlers 00:02:40 Browser Hangs 00:00:58 Hanging Async Request Handlers 00:01:17 Errors In Callbacks 00:03:32 Don't Swallow Callback Errors 00:02:46 Auth With Passport Auth With Passport 00:01:49 Login Form 00:06:31 Passport User Validation 00:05:20 Passport Session Serialization 00:01:49 Logging In 00:06:23 Logout 00:03:52 Authorizing Access To Block Anonymous Users 00:03:40 Protecting Admin Routes 00:02:04 Using User Information 00:02:48 Bypassing Login In Development 00:03:11 Query String Parameters 00:02:34 Auth Cookies 00:02:17 Last Thoughts 00:05:45  Publisher: Infinite Skills Release Date: March 2016 ISBN: 9781491958933 Running time: 4:09:49 Topic: Node.js",
    "fork": false,
    "created_at": "2017-02-16T00:56:43Z",
    "updated_at": "2019-11-16T05:23:17Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 5,
    "watchers": 4,
    "score": 1,
    "owner_id": 9013039,
    "owner_login": "Inn4ki",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9013039?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "file",
      "application",
      "user",
      "based",
      "sign",
      "format",
      "auth",
      "files",
      "route",
      "routes",
      "star",
      "read",
      "users",
      "learn",
      "view",
      "course",
      "start",
      "rating",
      "provide",
      "learning",
      "program",
      "tutorial",
      "web app",
      "long",
      "lang",
      "complete",
      "design",
      "edit",
      "including",
      "along",
      "applications",
      "included",
      "validation",
      "designed",
      "sync",
      "parameter",
      "middleware",
      "ready",
      "debug",
      "query",
      "sets",
      "provides",
      "training",
      "router",
      "engine",
      "language",
      "covers",
      "passport",
      "lesson",
      "admin",
      "programming",
      "familiar",
      "logging",
      "passing",
      "debugging",
      "video",
      "quality",
      "chat",
      "protecting",
      "completed",
      "speed",
      "learned",
      "computer"
    ]
  },
  {
    "id": 174555369,
    "name": "mern_devconnector",
    "full_name": "SalahEddine007/mern_devconnector",
    "description": "Welcome to \"MERN Stack Front To Back\". In this course we will build an in depth full stack social network application using Node.js, Express, React, Redux and MongoDB along with ES6+. We will start with a bank text editor and end with a deployed full stack application. This course includes...  Building an extensive backend API with Node.js & Express Protecting routes/endpoints with JWT (JSON Web Tokens) Extensive API testing with Postman Integrating React with our backend in an elegant way, creating a great workflow Building our frontend to work with the API Using Redux for app state management Creating reducers and actions for our resources Creating many container components that integrate with Redux Testing with the Redux Chrome extension Creating a build script, securing our keys and deploy to Heroku using Git This is NOT an \"Intro to React\" or \"Intro to Node\" course. It is a practical hands on course for building an app using the incredible MERN stack. I do try and explain everything as I go so it is possible to follow without React/Node experience but it is recommended that you know at least the basics first.",
    "fork": false,
    "created_at": "2019-03-08T14:50:34Z",
    "updated_at": "2019-03-08T14:50:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34078780,
    "owner_login": "SalahEddine007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34078780?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "application",
      "script",
      "contain",
      "endpoint",
      "points",
      "route",
      "build",
      "manage",
      "endpoints",
      "full",
      "routes",
      "star",
      "source",
      "front",
      "stat",
      "creating",
      "course",
      "start",
      "extension",
      "very",
      "backend",
      "rating",
      "action",
      "resource",
      "long",
      "management",
      "stack",
      "ever",
      "building",
      "resources",
      "text",
      "integrate",
      "edit",
      "includes",
      "deployed",
      "frontend",
      "along",
      "container",
      "many",
      "network",
      "social",
      "plain",
      "workflow",
      "basics",
      "component",
      "full stack",
      "components",
      "editor",
      "explain",
      "bank",
      "elegant",
      "least",
      "practica",
      "every"
    ]
  },
  {
    "id": 119091462,
    "name": "Zadanie_17_5",
    "full_name": "martinproxy0/Zadanie_17_5",
    "description": " 17. ExpressJS - ekspresowe tworzenie aplikacji w NodeJS Wyzwania: Dowiesz się czym jest ExpressJS Nauczysz się korzystać z routingu Poznasz czym są szablony 17.1. Wprowadzenie do Expressa Express jest jednym z najpopularniejszych frameworków dla aplikacji pisanych w Node.js. Jest bardzo lekki i pozwala na lepszą organizację aplikacji w modelu MVC. Ok, zwolnijmy. Już na samym starcie pojawiły się dwa pojęcia, których do tej pory nie omówiliśmy zbyt dokładnie: framework i MVC. Na początku przypomnijmy sobie czym jest framework.  Czym są frameworki? Framework to swego rodzaju szkielet, na którym opieramy budowę naszej aplikacji. Jest pewnym poziomem abstrakcji, na której konstruujemy naszą aplikację.  Czym jest abstrakcja? Abstrakcja w inżynierii oprogramowania to technika, dzięki której jesteśmy w stanie zapanować nad złożonością systemu. Najzwyczajniej w świecie nie da się myśleć na wielu płaszczyznach na raz, dlatego programiści dzielą problemy na pewne poziomy i to na nich rozwiązują mniejsze problemy. Przykładowo - programista korzystający z Reacta nie martwi się o niższy poziom abstrakcji, z którego nieświadomie korzysta używając Reacta. Korzystając z komputera także nie zastanawiamy się za bardzo co dzieje się w środku procesora czy też w jaki sposób jest skonstruowany. Tym poziomem abstrakcji po prostu nie zawracamy sobie głowy. Używając JavaScriptu nie myślimy w jaki sposób parser analizuje składnię języka. Jeśli nie jest to nam potrzebne, to możemy zająć się tym, co jest dla nas naprawdę istotne - pisaniem aplikacji internetowych!  Express to właśnie kolejny, wyższy poziom abstrakcji, dzięki któremu możemy skupić się na właściwym problemie. Zawiera zbiór generycznych (możliwych do zastosowania w wielu miejscach / uniwersalnych) funkcjonalności, które powtarzają się w obrębie każdej aplikacji. Cały zamysł frameworka opiera się na zasadzie - nie wymyślaj koła na nowo, bo można budować na podstawie dobrych, uniwersalnych rozwiązań. Po wykonaniu tego samego zadania wiele razy, człowiek instynktownie szuka sposobu na automatyzację problemu - szczególnie leniwy programista. :)  Framework ma niestety jedną wadę, która bywa momentami również zaletą - narzuca programiście sposób w jaki należy rozwiązać problem. Takie podejście z jednej strony nieco nas ogranicza, bo nie pozwala nam 'grzebać' w rozwiązaniu, a z drugiej strony zmniejsza ilość miejsc, w których moglibyśmy popełnić jakiś błąd. Zaletą takiego podejścia jest też to, że programiści korzystający z frameworków często borykają się z podobnymi problemami, przez co łatwo jest znaleźć rozwiązania, bo ktoś już na pewno zetknął się z czymś, co sprawia nam kłopot :)  Wracając do Expressa - jest on niewielkim frameworkiem, który daje programiście przyjemną podstawkę do tworzenia aplikacji, ale nie narzuca żadnych praktyk - może o tym świadczyć chociażby fakt, że wiele znanych frameworków opiera swoją budowę na Express. Można do nich zaliczyć przykładowo Loopbacka, Sailsa czy Krakena.  Model-View-Controller Ok, wiemy już czym jest framework - pora na pojęcie MVC :) Jest to skrót od ang. Model View Controller (Model Widok Kontroler). Jest jednym z najczęściej przewijających się wzorców architektonicznych w internecie. Popularnością pomału wypiera go architektura Flux, o której coraz częściej słychać (szczególnie w środowisku Reacta), ale o tym wzorcu powiemy sobie jeszcze przy okazji omawiania Reduxa - wróćmy do MVC.  Głównym założeniem przyjętym podczas projektowania MVC było oddzielenie warstwy prezentacji od logiki biznesowej aplikacji. To podejście umożliwia tworzenie narzędzi działających bez graficznego interfejsu (zastępuje go wtedy tzw. Command Line Interface, a.k.a. CLI) i jest dalej popularne w środowisku Unixowym. Tak więc:  Model jest reprezentacją logiki aplikacji / problemu z jakim się zmagamy / domeną. Widok opisuje w jaki sposób coś wyświetlić. W React są to komponenty (szczególnie te prezentacyjne). Kontroler przyjmuje dane od użytkownika aplikacji i reaguje na jego działania w obrębie widoku. Aktualizuje widok i model aplikacji. O samej architekturze można napisać osobny moduł tym bardziej, że jak już wcześniej wspomnieliśmy bardzo często przewija się on w środowisku front-end developerów i jest częścią składową wielu frameworków. Sama implementacja MVC wymaga wiedzy na temat programowania obiektowego i wzorców projektowych. Zainteresowanych zapraszam do przeczytania tej książki na temat wzorców projektowych stosowanych w JavaScripcie.  Express dostarcza wielu funkcjonalności do tworzenia aplikacji webowych. Jak już wspomniałem, ułatwia on przede wszystkim szybki rozwój aplikacji opartych na Node.js. Podstawowymi cechami tego frameworka są:  serwowanie plików statycznych za pomocą jednej komendy konfigurowanie middleware, czyli pośrednika między żądaniem a odpowiedzią w momencie, kiedy użytkownik wykonuje jakieś akcje, np. wysyła formularz, middleware może wykonać pewne czynności zanim dane zostaną zapisane. Nie sprowadza się to oczywiście tylko do zapisu danych, ale szerzej na temat tego zagadnienia powiemy sobie w dalszym rozdziale definiowanie tablicy routingu, czyli ścieżek (adresów), które wyświetlają odpowiednie treści, przyjmują i zapisują dane, bądź odpytane o dane zwracają je. Bazują na protokole HTTP oraz URI (ang. Uniform Resource Identifier) pozwala na dynamiczne tworzenie stron HTML bazujących na argumentach przekazanych do istniejących szablonów Nie przejmuj się, jeśli powyższe opisy wydają się być nieco zagmatwane. Kolejne rozdziały rozjaśnią sprawę! Zanim jednak przejdziemy do omawiania poszczególnych funkcjonalności Expressa, przeprowadzimy proces instalacji.  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.2. Instalacja ExpressJS Framework Express instalujemy używając npm, analogicznie do innych pakietów, które dodawaliśmy już we wcześniejszych modułach. Dla przypomnienia, wystarczy, że zainicjujesz swój projekt - npm init, a następnie użyjesz komendy npm install express --save, która zapisze zainstalowany pakiet w katalogu node_modules/ i doda go do sekcji dependencies w pliku package.json.  Razem z Expressem należy zainstalować jeszcze jeden ważny moduł - body-parser, który jest pakietem pozwalającym na obsługę różnych formatów danych w middleware takich jak JSON, text czy tzw. surowe dane (ang. raw data). Aby go zainstalować, wpisz npm install body-parser --save.  Pierwsza aplikacja w ExpressJS Sprawdźmy teraz, czy wszystko działa tak jak powinno. Testowa aplikacja, jaką stworzymy przy użyciu Expressa, będzie przedstawiała podstawową zasadę działania tego frameworka. Aplikacja uruchomi serwer oraz będzie nasłuchiwać na porcie 3000 w oczekiwaniu na połączenie - dokładnie w taki sam sposób, jak w przypadku serwera HTTP napisanego w “czystym\" Node.js. Nasłuchiwanie oznacza nic innego jak oczekiwanie na połączenie - po wystąpieniu żądania, serwer odpowie nam klasycznym “Hello world\".  Zanim zaczniemy tworzyć aplikację, musimy wytłumaczyć sobie pewne pojęcia.  Opis pojęcia routingu Routing to sposób określania jak aplikacja będzie odpowiadać na żądania klienta na dane endpointy przy użyciu konkretnych metod HTTP. Przypomnijmy sobie w jaki sposób wyglądały metody HTTP:  GET - najprostsza z metod HTTP - służy do pobierania zasobów z serwera. Pobranymi zasobami mogą być np. pliki HTML, CSS, JavaScript czy obiekty JSON / XML. POST - ta metoda jest używana do wysyłania danych do serwera. Stosuje się ją np. przy formularzach lub przy wstawianiu zdjęć i wysyłaniu ich jako załącznik. Zwykle dane te wysyłane są jako para klucz-wartość. PUT - działa podobnie jak POST, czyli również służy do wysyłania danych. Różnicą jest ograniczenie do wysłania tylko jednej porcji danych - np. jednego pola. Metoda ta najczęściej używana jest do aktualizacji istniejących danych DELETE - metoda, która służy do usuwania danych z serwera. Chodzi oczywiście o dane, które zostały wskazane przy wysyłaniu żądania. Kolejnym pojęciem jest URI (nazywane również PATH) - jest to właśnie wspomniany wcześniej endpoint, który zawiera polecenia do wykonania gdy zostanie wywołany przez żądanie.  Czas start! Na początek stwórzmy plik server.js w katalogu z projektem. Po zainstalowaniu powyższych zależności, drzewo projektu powinno wyglądać w następujący sposób:   Aby mieć możliwość skorzystania z zainstalowanych zależności, na początku należy zadeklarować zmienną, w której będziemy przechowywać funkcjonalności pakietu Expressa.  var express = require('express'); Jak widzisz, każda paczka JS'a działa dokładnie w taki sam sposób. Koncepcja modułów będzie przewijać się aż do końca tego kursu. Następnym krokiem będzie stworzenie aplikacji Express:  var app = express(); Naszą aplikację przypisaliśmy do zmiennej app. Teraz możemy sprawić, aby odpowiadała prostym Hello world w momencie, w którym odbierzemy wysłane zapytanie GET na adres strony domowej:  app.get('/', function(req, res) {     res.send('Hello world'); }); Powyższy kod rejestruje pierwszy routing (proces przetwarzania otrzymanego adresu żądania i na jego podstawie decydowanie, co powinno zostać uruchomione) na wysłane żądanie GET po wejściu na stronę główną ( http://localhost:3000/ ). Jako callback na wystąpienie tego zdarzenia wywoływana jest funkcja, która w przypadku udanej odpowiedzi wyśle wiadomość Hello world.  To jednak jeszcze nie koniec. Zarejestrowaliśmy obsługę pierwszego routingu, ale należy zainicjować nasłuchiwanie serwera na to i inne zdarzenia. Dopiszmy więc:  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Po zapisaniu powyższego kodu, należy uruchomić go komendą node server.js (lub za pomocą Nodemona, którego poznaliśmy w pierwszym module) - teraz po ponownym wejściu na adres http://localhost:3000/ powinniśmy zobaczyć następujący widok:   Jest to znak, że nasza aplikacja działa!  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.3. Route, czyli ścieżka wyznaczona dla użytkownika aplikacji Wykorzystanie endpointów Rozwińmy teraz trochę aplikację stworzoną w poprzednim podrozdziale. Aktualnie kod w pliku server.js wygląda następująco:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Endpointy statyczne Na początek zmodyfikujemy lekko żądanie GET i do strony głównej zamiast Hello world! wpiszmy Hello GET! oraz dodamy linijkę drukującą otrzymane żądanie (po stronie serwera) jak poniżej:  app.get('/', function (req, res) {     console.log('Otrzymałem żądanie GET do strony głównej');     res.send('Hello GET!'); }); Warto w tym miejscu wspomnieć o narzędziu Postman - możesz pobrać je ze strony https://www.getpostman.com/. Używa się go do testowania endpointów. Postman jest prosty i intuicyjny w obsłudze - wystarczy, że podasz adres oraz metodę HTTP, jakiej chcesz użyć w odpowiednich polach i… już :) Pozostaje tylko wysłanie requesta i sprawdzenie czy response zgadza się z naszymi oczekiwaniami.   Dodajmy też inne metody HTTP do naszej aplikacji. Zacznijmy od POST. Dla tej i kolejnej metody wykonamy podobne operacje. Chodzi tutaj o to, aby zaobserwować działanie zarejestrowanych endpointów.  app.post('/', function (req, res) {     console.log('Otrzymałem żądanie POST do strony głównej');     res.send('Hello POST!'); }); Do tego czasu oba nasze zapytania kierowaliśmy do strony domowej. Dodajmy teraz obsługę żądania z metodą DELETE oraz inną ścieżką:  app.delete('/del_user', function (req, res) {     console.log('Otrzymałem żądanie DELETE do strony /del_user');     res.send('Hello DELETE!'); }); DLA CHĘTNYCH: Przetestuj powyższe zapytanie w Postmanie! :)  Dla praktyki, dodajmy jeszcze kilka innych endpointów, a następnie przejdźmy do testowania.  app.get('/list_user', function (req, res) {     console.log('Otrzymałem żądanie GET do strony /list_user');     res.send('Strona z listą użytkowników!'); });  app.get('/ab*cd', function(req, res) {     console.log('Otrzymałem żądanie GET do strony /ab*cd');     res.send('Wzór pasuje'); }); Po dodaniu powyższych fragmentów kodu zapisz plik server.js, a następnie ponownie użyj komendy node server.js chyba, że używasz Nodemona :)  Zerknijmy na endpoint /list_user   Otrzymaliśmy to, czego oczekiwaliśmy. Sprawdźmy jeszcze inne.    Jeśli jednak użyliśmy endpointa, którego nie zdefiniowaliśmy, otrzymamy odpowiedź jak na ostatnim obrazku.  Endpointy dynamiczne Istnieje również inny typ endpointów, które nazywa się dynamicznymi. Używanie ich pozwala na przekazywanie parametrów i bazowanie na nich. Wróćmy na moment do kodu stworzonego na samym początku:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Najpierw zmodyfikujemy trochę bazowy kod. Usuńmy linijki 8-10, które miały nam tylko pokazać podstawowe informacje na temat serwera. Zamiast tego napiszmy po prostu: app.listen(3000);  Tworzenie dynamicznego routingu pozwala na przekazywanie parametrów, więc spróbujmy najpierw z przykładowym id. Zamiast odwołać się do strony domowej ('/'), odwołajmy się do zmiennego parametru id. Parametr zmienny od statycznego rozróżnia się poprzez dodanie dwukropka (:) przed nazwę. W naszym przykładzie endpoint będzie więc wyglądał następująco:  /:id Zmieńmy jeszcze odpowiedź z Hello world na 'Identyfikator, który został dopisany to ' + req.params.id.  Czym jest req.params.id? req jest obiektem reprezentującym zapytanie HTTP (ang. request). Posiada on różne parametry, jak na przykład body (czyli ciało zapytania), nagłówki HTTP oraz parametry (params), które mamy zamiar odczytać.  Parametr, który wstawiliśmy jako część adresu w metodzie GET, przekazujemy jako id. W poniższym przypadku wyświetli się komunikat Identyfikator który został dopisany to 123, o ile zapytanie wysłano na adres http://localhost:3000/123.   Popróbuj z różnymi innymi parametrami i sprawdź czy aplikacja działa tak, jak tego oczekujesz.  Obsługa błędu 404 za pomocą ExpressJS Co jeśli serwer nie rozpozna żądania? W Expressie odpowiedź 404 nie jest wynikiem błędu, więc nie jest wyłapywany w trakcie działania aplikacji. Spowodowane jest to tym, że 404 zwykle oznacza brak możliwości wykonania danej czynności, a nie błąd występujący z powodu jakiejś 'wpadki' programisty. Innymi słowy, Express wykonał wszystkie funkcje middleware (które poznamy w kolejnym rozdziale) oraz route'y i dopiero wtedy dowiedział się, że żaden z nich nie odpowiedział na żądanie - taki przypadek możemy obsłużyć poprzez dodanie funkcji middleware na samym końcu (poniżej pozostałych funkcji), aby obsługiwała status 404.  Powróćmy znów do poprzedniego szablonu z metodą GET na stronę domową ('/'), która zwraca nam Hello world!. Dopiszmy teraz metodę middleware, która obsłuży nam błąd 404.  Na samym końcu, poniżej fragmentu z nasłuchiwaniem dodajmy obsługę odpowiedzi 404:  app.use(function (req, res, next) {     res.status(404).send('Wybacz, nie mogliśmy odnaleźć tego, czego żądasz!') }); Po ponownym uruchomieniu skryptu, w przeglądarce powinieneś zobaczyć Hello world!. Spróbuj teraz dopisać coś na koniec adresu (tak jak w poprzednim rozdziale dopisaliśmy id). Powinieneś otrzymać następujący komunikat:   Parametr next, który przekazujemy do funkcji jest funkcją, która pozwala “iść dalej\" do kolejnej funkcji middleware lub zakończenia żądania.  Można w ten sposób stworzyć także obsługę pozostałych błędów. Najczęściej obsługiwane błędy to:  400 - bad request - występuje gdy serwer nie może przetworzyć zapytania 401 - unauthorized - występuje gdy wymagane jest uwierzytelnienie, a nie zostało dostarczone 403 - forbidden - żądanie jest poprawne, jednak serwer odmawia odpowiedzi, może to wystąpić w przypadku gdy np. użytkownik jest zalogowany ale nie ma uprawnień do wykonania żądania 404 - not found - zasoby nie zostały znalezione 500 - internal server error - występuje gdy występują nieznane warunki i nie ma żadnej konkretnej wiadomości Zadanie: Operacje CRUD na pliku JSON Stwórzmy teraz aplikację, która będzie otwierać zewnętrzne pliki .json oraz edytować je. Zanim zaczniemy, w folderze projektu stwórz plik server.js, a następnie zainicjalizuj projekt poprzez wpisanie npm init w konsoli.  Przejdźmy do pobrania potrzebnych zależności - tym razem będzie nam potrzebny Express oraz body-parser. Jak się zapewne domyślasz, możesz zainstalować je za pomocą komendy npm install --save express body-parser. Po pobraniu paczek, możemy śmiało przejść do pisania kodu - na początek przypisz zależności do zmiennych w pliku server.js. Dodaj także linijkę var fs = require('fs') - fs będzie nam potrzebny do operacji na plikach. Nie musimy go instalować, bo jest on wbudowany w Node :)  Skoro zależności mamy już załatwione, zadeklaruj zmienną app, która wywoła funkcję express() oraz zmienną stringifyFile (na razie bez zadeklarowanej wartości).  Tuż pod deklaracją zmiennych dodaj także linijkę app.use(bodyParser.json()); - to pozwoli Ci wykorzystać middleware body-parser, które zainstalowaliśmy przed chwilą. body-parser jest nam potrzebny, aby korzystać z formatu application/json - póki co nie przejmuj się pojęciem middleware, zajmiemy się nim nieco dalej w tym kursie :)  Stwórz teraz endpoint GET /getNote, gdzie po wywołaniu zostanie wczytany Twój zewnętrzny plik JSON oraz wyświetlona zostanie jego zawartość. Przykłądowy plik test.json:  {\"menu\": {    \"id\": \"file\",    \"value\": \"File\",    \"popup\": {      \"menuitem\": [        {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},        {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},        {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}      ]    }  }} Metoda która pozwoli nam na odczytanie pliku to readFile, którą można wywołać z zadeklarowanego wcześniej fs. Jako parametry przyjmuje ona najpierw plik, następnie opcje (np. kodowanie) i funkcję, która wywoła się po załadowaniu. W naszym przypadku będzie to więc następujący kod: fs.readFile('./test.json', 'utf8', function(err, data) {     if (err) throw err;     stringifyFile = data     res.send(data); }); Teraz pora na stworzenie endpointa, który po wywołaniu nadpisze nam podany plik. Stworzymy do tego dynamiczny endpoint, który dopisze do pliku string, który przekażemy jako parametr. Stwórz tym razem POST na /updateNote/:note. Po jego wywołaniu tekst, który znajduje się w miejscu /:note powinniśmy dopisać do wczytanego pliku poprzez dodanie req.params.note do zmiennej stringifyFile, która przechowuje aktualną zawartość pliku.  Po przypisaniu powyższej zmiennej, należy ponownie odwołać się do modułu fs tym razem używając metody writeFile. Pomoże nam w tym następujący fragment kodu:  fs.writeFile('./test.json', stringifyFile, function(err) {     If (err) throw err;     console.log('file updated'); }); Na końcu pliku dodaj nasłuchiwanie na porcie 3000.  Zapisz plik i uruchom aplikację wpisując node server.js w konsoli.  Otwórz Postmana, ustaw metodę zapytania na GET, a w pole adresu wpisz http://localhost:3000/getNote. Jako response powinieneś otrzymać Twój stworzony wcześniej plik JSON. Po zmianie z GET na POST oraz wpisaniu /updateNote/test zamiast /getNote oraz wysłaniu requesta, Twój plik JSON powinien zostać zaktualizowany o słowo test :)  Po ukończeniu zadania, wrzuć swój kod na Githuba i przekaż link do repozytorium mentorowi :)  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_3.git   Wyslij link  17.4. Serwowanie plików statycznych Express posiada wbudowaną możliwość serwowania plików statycznych - takimi plikami są na przykład obrazki, pliki CSS czy JS. Aby serwować te pliki statycznie, wystarczy użyć express.static. Pliki statyczne to pliki, które zostają dostarczone do klienta bez generowania, modyfikacji czy przetwarzania - jedyne, co trzeba z nimi zrobić, to przekazać nazwę katalogu, w którym są przetrzymywane, do express.static - to wystarczy aby zacząć je serwować. Spróbujmy przedstawić to sobie na przykładzie.  Załóżmy, że przetrzymujesz swoje zdjęcia i pliki CSS w katalogu assets/. Aby zacząć je serwować, możesz więc użyć następującej linijki:  app.use(express.static('assets')); Zmodyfikujmy więc całkowicie naszą aplikację. Najpierw stwórzmy w katalogu projektu nowy katalog o nazwie assets/. Wrzućmy do niego jakiekolwiek zdjęcie/obrazek. W pliku server.js wróćmy do poprzedniego stanu (zanim zaczęliśmy zajmować się routingiem):  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, 'localhost', function() {     var host = server.address().address;     var port = server.address().port;      console.log('Przykładowa aplikacja nasłuchuje na http://' + host + ':' + port); }); W tym przykładzie sami definiujemy port i adres, ale w prawdziwej aplikacji moglibyśmy tych wartości nie znać. Częstym przykładem jest sytuacja w której adres i port są zdefiniowane w osobnym pliku konfiguracyjnym. Ten plik byłby inny na naszym komputerze niż na serwerze na którym będziemy publikować aplikację - ale nasz kod ma działać w obu lokalizacjach. Dlatego do wyświetlenia linka potrzebowalibyśmy pobrania tych danych za pomocą metody .address().  Pozostaje teraz jedynie w linii nr 3 dodać to, o czym powiedzieliśmy sobie chwilkę temu, czyli linijkę app.use(express.static('assets'));  Dla przypomnienia, w nawiasach do express.static przekazujemy katalog, w którym znajdują się pliki, które chcemy serwować. Po zapisaniu pliku server.js, możemy uruchomić aplikację. Teraz, aby zobaczyć nasz obrazek, wystarczy że po http://localhost:3000/ podamy nazwę pliku z rozszerzeniem - u mnie wygląda to tak:   Stwórz sobie teraz prosty plik index.html, który będzie miał formularz z dwoma inputami typu text (o nazwach first_name i last_name) oraz jednym typu submit. Element  posiada atrybuty takie jak action oraz method. Atrybut action pozwala określić, gdzie wysłać dane z formularza w momencie, gdy zostanie on zatwierdzony. W naszym przypadku będzie to http://localhost:3000/userform. Atrybut method określa metodę, jakiej chcemy użyć - w naszym przypadku niech będzie to GET.  Przykładowo, Twój index.html może wyglądać tak:                          Node Hello world example                                                 First Name:                                            Last Name:                                           Gdy już będzie gotowy, wrzuć go do katalogu /assets.  Teraz czas na modyfikację pliku server.js. Najpierw zmieńmy to, co chcemy wysyłać, gdy zostanie wysłane żądanie do strony domowej.  Zamień więc res.send('Hello world') na res.sendFile('/index.html') - jak się zapewne domyślasz, res.sendFile() wysyła w odpowiedzi plik zamiast wiadomości.  Musimy również dodać obsługę żądania na endpoint, do którego będziemy kierować nasz formularz.  app.get('/userform', function (req, res) {     const response = {         first_name: req.query.first_name,         last_name: req.query.last_name     };     res.end(JSON.stringify(response)); }); W czasie przetwarzania żądania, tworzymy nowy obiekt response, który ma klucze first_name oraz last_name. Do poszczególnych właściwości przypisujemy dane, które otrzymujemy w obiekcie req (od ang. request), czyli w obiekcie z żądaniem. Na koniec wyświetlamy nasz obiekt przetworzony na typ string za pomocą metody JSON.stringify. Po zapisaniu pliku server.js, aplikacja powinna pokazywać formularz, jak poniżej.   Po wpisaniu wartości do inputów i wysłaniu ich, powinieneś zostać przekierowany do strony /userform, a po znaku zapytania powinny zostać wyświetlone parametry umieszczone przez Ciebie w inputach.   Zadanie: Żonglujemy danymi pomiędzy endpointami Napisz kod obsługujący formularz zgodnie z wskazówkami z tego submodułu, a następnie wyślij swój kod na repozytorium oraz przekaż go do sprawdzenia mentorowi.  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_4.git   Wyslij link 17.5. Middleware - pośrednik między żądaniem a odpowiedzią",
    "fork": false,
    "created_at": "2018-01-26T19:03:05Z",
    "updated_at": "2018-01-26T19:03:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13038633,
    "owner_login": "martinproxy0",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13038633?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "data",
      "request",
      "form",
      "file",
      "application",
      "server",
      "call",
      "node",
      "json",
      "http",
      "user",
      "develop",
      "express",
      "auto",
      "example",
      "automat",
      "implement",
      "format",
      " express",
      "auth",
      "endpoint",
      "framework",
      "route",
      "https",
      "function",
      "demo",
      "send",
      "local",
      "list",
      "star",
      "source",
      "read",
      "front",
      "update",
      "response",
      "stat",
      "host",
      "start",
      "delete",
      "face",
      "package",
      "method",
      "info",
      "developer",
      "system",
      "name",
      "html",
      "action",
      "module",
      "program",
      "infor",
      "github",
      "model",
      "tech",
      "esse",
      "text",
      "getpost",
      "problem",
      "install",
      "parse",
      "link",
      "proxy",
      "folder",
      "status",
      "require",
      "middleware",
      "parser",
      "console",
      "intern",
      "note",
      "popular",
      "party",
      "write",
      "query",
      "sets",
      "updated",
      "dynamic",
      "modules",
      "routing",
      "role",
      "world",
      "address",
      "dependencies",
      "found",
      "error",
      "internal",
      "listen",
      "jest",
      "kurs",
      "rake",
      "ekspresowe",
      "kazan",
      "wars"
    ]
  },
  {
    "id": 174306188,
    "name": "slim-route-export",
    "full_name": "szonov/slim-route-export",
    "description": "Display routes and postman import for Slim application",
    "fork": false,
    "created_at": "2019-03-07T08:46:21Z",
    "updated_at": "2019-03-07T09:01:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13364789,
    "owner_login": "szonov",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13364789?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "application",
      "route",
      "routes",
      "import",
      "play"
    ]
  },
  {
    "id": 147687024,
    "name": "NodejsCRUD",
    "full_name": "nrothchicago/NodejsCRUD",
    "description": "Basic CRUD application with a connection to a PostgreSQL database. Front end was 'simulated' with postman.",
    "fork": false,
    "created_at": "2018-09-06T14:33:38Z",
    "updated_at": "2018-09-12T19:20:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17258051,
    "owner_login": "nrothchicago",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/17258051?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "application",
      "database",
      "connect",
      "connection",
      "simulate"
    ]
  },
  {
    "id": 230236129,
    "name": "my-first-Flask-resful-application",
    "full_name": "pawanmethre/my-first-Flask-resful-application",
    "description": "My first python flask restful application using postman tool which is basically CURD application for items and price using sqlite3 database.",
    "fork": false,
    "created_at": "2019-12-26T09:34:36Z",
    "updated_at": "2019-12-26T12:05:46Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 58561944,
    "owner_login": "pawanmethre",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/58561944?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "application",
      "rest",
      "tool",
      "call",
      "database",
      "restful",
      "python",
      "flask",
      "basically",
      "items",
      "sqlite"
    ]
  },
  {
    "id": 190750603,
    "name": "automated-swtesting-withpy",
    "full_name": "HuGomez/automated-swtesting-withpy",
    "description": "Learning about automated software testing with Python, BDD, Selenium WebDriver, and Postman, focusing on web applications",
    "fork": false,
    "created_at": "2019-06-07T13:46:17Z",
    "updated_at": "2019-06-10T22:59:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2131526,
    "owner_login": "HuGomez",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2131526?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "application",
      "auto",
      "automat",
      "automate",
      "web app",
      "automated",
      "applications",
      "software",
      "river"
    ]
  },
  {
    "id": 36652610,
    "name": "Postman-MeteorJs",
    "full_name": "MeteorLyon/Postman-MeteorJs",
    "description": "The Postman chrome plugin is a cool application. The problem is when you sync your collections, you don't own your data, so it's no more cool. The aim of the project is to allow every one to get the same cool app, but that can be installed on it's own server, so you own your datas.",
    "fork": false,
    "created_at": "2015-06-01T10:03:53Z",
    "updated_at": "2015-06-01T10:03:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9386284,
    "owner_login": "MeteorLyon",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9386284?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "data",
      "application",
      "server",
      "more",
      "very",
      "plugin",
      "ever",
      "problem",
      "install",
      "chrome",
      "sync",
      "installed",
      "cool",
      "every"
    ]
  },
  {
    "id": 240648970,
    "name": "spring-apache-kafka-starter",
    "full_name": "sonakdigvijay/spring-apache-kafka-starter",
    "description": "This is a spring-kafka integration starter application using Lightbend Lagom Kafka Server Plugin",
    "fork": false,
    "created_at": "2020-02-15T05:14:58Z",
    "updated_at": "2020-02-18T14:31:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49710107,
    "owner_login": "sonakdigvijay",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/49710107?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "integration",
      "star",
      "start",
      "spring",
      "starter",
      "kafka"
    ]
  },
  {
    "id": 177816386,
    "name": "Spring-Boot-With-Swagger-",
    "full_name": "RashmiPrava21/Spring-Boot-With-Swagger-",
    "description": "Designed Employee Account and developed it in Spring Boot application with Swagger, JUNIT tests and Postman tests",
    "fork": false,
    "created_at": "2019-03-26T15:25:30Z",
    "updated_at": "2019-03-26T16:01:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33043026,
    "owner_login": "RashmiPrava21",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/33043026?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "application",
      "tests ",
      "develop",
      "sign",
      "developed"
    ]
  },
  {
    "id": 94392199,
    "name": "laravel-api-test",
    "full_name": "brunocouty/laravel-api-test",
    "description": "Similar to \"postman\" (of Google Chrome), this package help you to test your API routes directly in your application.",
    "fork": false,
    "created_at": "2017-06-15T02:40:06Z",
    "updated_at": "2017-06-15T02:40:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9448901,
    "owner_login": "brunocouty",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9448901?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "help",
      "route",
      "routes",
      "package",
      "directly",
      "\"postman\""
    ]
  },
  {
    "id": 23707456,
    "name": "LearningStudio-HelloWorld-Java",
    "full_name": "PearsonDevelopersNetwork/LearningStudio-HelloWorld-Java",
    "description": "Start exploring the APIs right away with this fully-functional application that works right out of the box. Using your browser, you can get started with running any GET request to see how data is returned; try more advanced calls (creating and updating information) by pointing your preferred API console at it (e.g., Postman or Fiddler). You will need a key and sandbox prior to using it, available through the PDN website. ",
    "fork": false,
    "created_at": "2014-09-05T15:12:33Z",
    "updated_at": "2014-09-05T15:47:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 3,
    "watchers": 0,
    "score": 1,
    "owner_id": 5207678,
    "owner_login": "PearsonDevelopersNetwork",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5207678?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "call",
      "format",
      "function",
      "calls",
      "full",
      "site",
      "star",
      "running",
      "more",
      "creating",
      "start",
      "website",
      "functional",
      "info",
      "need",
      "infor",
      "browser",
      "information",
      "ully",
      "fully",
      "right",
      "available",
      "started",
      "advance",
      "advanced",
      "console",
      "exploring",
      "sandbox",
      "updating",
      "returned",
      "preferred",
      "prior",
      "pointing"
    ]
  },
  {
    "id": 23707476,
    "name": "LearningStudio-HelloWorld-Ruby",
    "full_name": "PearsonDevelopersNetwork/LearningStudio-HelloWorld-Ruby",
    "description": "Start exploring the APIs right away with this fully-functional application that works right out of the box. Using your browser, you can get started with running any GET request to see how data is returned; try more advanced calls (creating and updating information) by pointing your preferred API console at it (e.g., Postman or Fiddler). You will need a key and sandbox prior to using it, available through the PDN website. ",
    "fork": false,
    "created_at": "2014-09-05T15:13:01Z",
    "updated_at": "2014-10-20T22:02:15Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 5207678,
    "owner_login": "PearsonDevelopersNetwork",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5207678?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "call",
      "format",
      "function",
      "calls",
      "full",
      "site",
      "star",
      "running",
      "more",
      "creating",
      "start",
      "website",
      "functional",
      "info",
      "need",
      "infor",
      "browser",
      "information",
      "ully",
      "fully",
      "right",
      "available",
      "started",
      "advance",
      "advanced",
      "console",
      "exploring",
      "sandbox",
      "updating",
      "returned",
      "preferred",
      "prior",
      "pointing"
    ]
  },
  {
    "id": 23707434,
    "name": "LearningStudio-HelloWorld-PHP",
    "full_name": "PearsonDevelopersNetwork/LearningStudio-HelloWorld-PHP",
    "description": "Start exploring the APIs right away with this fully-functional application that works right out of the box. Using your browser, you can get started with running any GET request to see how data is returned; try more advanced calls (creating and updating information) by pointing your preferred API console at it (e.g., Postman or Fiddler). You will need a key and sandbox prior to using it, available through the PDN website. ",
    "fork": false,
    "created_at": "2014-09-05T15:11:56Z",
    "updated_at": "2016-05-07T12:23:55Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 5207678,
    "owner_login": "PearsonDevelopersNetwork",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5207678?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "call",
      "format",
      "function",
      "calls",
      "full",
      "site",
      "star",
      "running",
      "more",
      "creating",
      "start",
      "website",
      "functional",
      "info",
      "need",
      "infor",
      "browser",
      "information",
      "ully",
      "fully",
      "right",
      "available",
      "started",
      "advance",
      "advanced",
      "console",
      "exploring",
      "sandbox",
      "updating",
      "returned",
      "preferred",
      "prior",
      "pointing"
    ]
  },
  {
    "id": 23707466,
    "name": "LearningStudio-HelloWorld-CSharp",
    "full_name": "PearsonDevelopersNetwork/LearningStudio-HelloWorld-CSharp",
    "description": "Start exploring the APIs right away with this fully-functional application that works right out of the box. Using your browser, you can get started with running any GET request to see how data is returned; try more advanced calls (creating and updating information) by pointing your preferred API console at it (e.g., Postman or Fiddler). You will need a key and sandbox prior to using it, available through the PDN website. ",
    "fork": false,
    "created_at": "2014-09-05T15:12:47Z",
    "updated_at": "2015-05-26T01:31:35Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 5207678,
    "owner_login": "PearsonDevelopersNetwork",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5207678?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "call",
      "format",
      "function",
      "calls",
      "full",
      "site",
      "star",
      "running",
      "more",
      "creating",
      "start",
      "website",
      "functional",
      "info",
      "need",
      "infor",
      "browser",
      "information",
      "ully",
      "fully",
      "right",
      "available",
      "started",
      "advance",
      "advanced",
      "console",
      "exploring",
      "sandbox",
      "updating",
      "returned",
      "preferred",
      "prior",
      "pointing"
    ]
  },
  {
    "id": 23707448,
    "name": "LearningStudio-HelloWorld-Python",
    "full_name": "PearsonDevelopersNetwork/LearningStudio-HelloWorld-Python",
    "description": "Start exploring the APIs right away with this fully-functional application that works right out of the box. Using your browser, you can get started with running any GET request to see how data is returned; try more advanced calls (creating and updating information) by pointing your preferred API console at it (e.g., Postman or Fiddler). You will need a key and sandbox prior to using it, available through the PDN website. ",
    "fork": false,
    "created_at": "2014-09-05T15:12:14Z",
    "updated_at": "2014-09-05T15:48:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5207678,
    "owner_login": "PearsonDevelopersNetwork",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5207678?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "call",
      "format",
      "function",
      "calls",
      "full",
      "site",
      "star",
      "running",
      "more",
      "creating",
      "start",
      "website",
      "functional",
      "info",
      "need",
      "infor",
      "browser",
      "information",
      "ully",
      "fully",
      "right",
      "available",
      "started",
      "advance",
      "advanced",
      "console",
      "exploring",
      "sandbox",
      "updating",
      "returned",
      "preferred",
      "prior",
      "pointing"
    ]
  },
  {
    "id": 247837458,
    "name": "NBPExchangeRatesApplication",
    "full_name": "mat373/NBPExchangeRatesApplication",
    "description": "Spring application using Spring Boot, Spring Web. The application reads data from the NBP api. Testing using Postman",
    "fork": false,
    "created_at": "2020-03-16T23:34:28Z",
    "updated_at": "2020-03-25T18:16:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42851216,
    "owner_login": "mat373",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42851216?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "read",
      "reads"
    ]
  },
  {
    "id": 208618080,
    "name": "Spirng-boot-simple-project",
    "full_name": "Saidnajibullah/Spirng-boot-simple-project",
    "description": "A simple Spring Boot web application that allows RESTFUL CRUD operations form Postman. ",
    "fork": false,
    "created_at": "2019-09-15T15:53:41Z",
    "updated_at": "2019-10-19T00:25:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36369319,
    "owner_login": "Saidnajibullah",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36369319?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "application",
      "operation",
      "operations",
      "web app",
      "allows"
    ]
  },
  {
    "id": 118885522,
    "name": "web-app-for-hotel",
    "full_name": "jieniz/web-app-for-hotel",
    "description": "A responsive web application for hotel [Java, Spring boot, Angularjs 2.0, Bootstrap, PostMan]",
    "fork": false,
    "created_at": "2018-01-25T08:33:56Z",
    "updated_at": "2018-01-25T08:37:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31397624,
    "owner_login": "jieniz",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/31397624?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "boot",
      "web app",
      "responsive",
      "hotel"
    ]
  },
  {
    "id": 166239893,
    "name": "SakilaSpringbootWebsite",
    "full_name": "SoniaAli05/SakilaSpringbootWebsite",
    "description": "Eclipse Java - springboot application for the sakila website (works using postman), still need to do the JS HTML CSS website creation",
    "fork": false,
    "created_at": "2019-01-17T14:33:14Z",
    "updated_at": "2019-01-17T14:50:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45198070,
    "owner_login": "SoniaAli05",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/45198070?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "application",
      "site",
      "boot",
      "spring",
      "website",
      "need",
      "to do",
      "creation",
      "springboot",
      "still",
      "sakila"
    ]
  },
  {
    "id": 130627375,
    "name": "Microservice-architecture-using-Spring-Boot",
    "full_name": "absnaik810/Microservice-architecture-using-Spring-Boot",
    "description": "RESTful ToDo list application using Microservices architecture and Spring Boot",
    "fork": false,
    "created_at": "2018-04-23T02:07:26Z",
    "updated_at": "2018-04-23T02:57:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7829674,
    "owner_login": "absnaik810",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7829674?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service",
      "services",
      "list"
    ]
  },
  {
    "id": 241763103,
    "name": "kafka-test",
    "full_name": "eduardotrzan/kafka-test",
    "description": "Simple kafka application",
    "fork": false,
    "created_at": "2020-02-20T01:07:47Z",
    "updated_at": "2020-03-14T20:43:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12973195,
    "owner_login": "eduardotrzan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12973195?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "kafka"
    ]
  },
  {
    "id": 242015506,
    "name": "renohome",
    "full_name": "eduardotrzan/renohome",
    "description": "Zipkin tracing application with 2 micro-services",
    "fork": false,
    "created_at": "2020-02-20T23:51:31Z",
    "updated_at": "2020-03-14T20:39:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12973195,
    "owner_login": "eduardotrzan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12973195?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service",
      "services",
      "micro"
    ]
  },
  {
    "id": 157397938,
    "name": "MyTibiaHelper",
    "full_name": "Aniquir/MyTibiaHelper",
    "description": "This is an application that helps in guiding characters in the popular game. Used technologies: Java, Spring / Spring Boot, Hibernate, PostgreSQL, Git, Maven, Trello, Postman. Application is built in the microservers architecture.",
    "fork": false,
    "created_at": "2018-11-13T15:01:04Z",
    "updated_at": "2019-01-07T15:37:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29151031,
    "owner_login": "Aniquir",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29151031?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "server",
      "help",
      "built",
      "tech",
      "micro",
      "game",
      "helps",
      "popular",
      "servers",
      "technologies",
      "guiding"
    ]
  },
  {
    "id": 130136501,
    "name": "ClassSchedulerUsingSpring",
    "full_name": "amulyachennaboyena/ClassSchedulerUsingSpring",
    "description": "University project:create an application that will change a course schedule  When an application user select the first day of class, the application needs to change the dates in course schedule automatically If a class is canceled due to inclement weather, entire dates should be updated If the class didn’t finish the topics as scheduled, contents of course, quiz and assignment schedule should be updated  You may create a separate UI for testing purposes or utilize a Tool like SoapUI or PostMan.  You will need to use the latest of:          Java 8          Spring Framework          MySQL or Maria DB",
    "fork": false,
    "created_at": "2018-04-19T00:18:13Z",
    "updated_at": "2018-05-08T22:01:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35663002,
    "owner_login": "amulyachennaboyena",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35663002?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "call",
      "user",
      "auto",
      "automat",
      "sign",
      "util",
      "update",
      "course",
      "need",
      "class",
      "automatic",
      "needs",
      "automatically",
      "assignment",
      "should",
      "purposes",
      "updated",
      "latest",
      "content",
      "select",
      "schedule",
      "entire",
      "weather",
      "contents"
    ]
  },
  {
    "id": 130367620,
    "name": "classScheduler",
    "full_name": "AmulyaChen/classScheduler",
    "description": "University project:create an application that will change a course schedule  When an application user select the first day of class, the application needs to change the dates in course schedule automatically If a class is canceled due to inclement weather, entire dates should be updated If the class didn’t finish the topics as scheduled, contents of course, quiz and assignment schedule should be updated  You may create a separate UI for testing purposes or utilize a Tool like SoapUI or PostMan.  You will need to use the latest of:          Java 8          Spring Framework          MySQL or Maria DB",
    "fork": false,
    "created_at": "2018-04-20T13:43:16Z",
    "updated_at": "2018-04-20T13:43:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38562529,
    "owner_login": "AmulyaChen",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38562529?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "call",
      "user",
      "auto",
      "automat",
      "sign",
      "util",
      "update",
      "course",
      "need",
      "class",
      "automatic",
      "needs",
      "automatically",
      "assignment",
      "should",
      "purposes",
      "updated",
      "latest",
      "content",
      "select",
      "schedule",
      "entire",
      "weather",
      "contents"
    ]
  },
  {
    "id": 199605131,
    "name": "NodeCrudNoteApp",
    "full_name": "jaiswalsachin/NodeCrudNoteApp",
    "description": "This application is purely basic CRUD through postman, we can add note and content",
    "fork": false,
    "created_at": "2019-07-30T08:05:01Z",
    "updated_at": "2019-07-30T08:05:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17216684,
    "owner_login": "jaiswalsachin",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17216684?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "application",
      "note",
      "content",
      "pure",
      "purely"
    ]
  },
  {
    "id": 223670720,
    "name": "CRUD_NodeJs_MySQL",
    "full_name": "namjohn920/CRUD_NodeJs_MySQL",
    "description": "Simple practice for CRUD application using NodeJs and MySQL. You can use Postman to check functions.",
    "fork": false,
    "created_at": "2019-11-24T00:12:16Z",
    "updated_at": "2019-11-24T00:27:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40031678,
    "owner_login": "namjohn920",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/40031678?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "function",
      "check",
      "practice",
      "functions"
    ]
  },
  {
    "id": 170088463,
    "name": "Node-and-Express-App",
    "full_name": "anthonygilbertt/Node-and-Express-App",
    "description": "A Node and Express application that has built in data validation using Joi and sends requests via Postman",
    "fork": false,
    "created_at": "2019-02-11T07:49:59Z",
    "updated_at": "2019-02-22T16:31:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26334011,
    "owner_login": "anthonygilbertt",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/26334011?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "application",
      "requests",
      "send",
      "built",
      "validation",
      "sends"
    ]
  },
  {
    "id": 76744352,
    "name": "Basic-Authentication-Node.js",
    "full_name": "divyanshu-rawat/Basic-Authentication-Node.js",
    "description": "An application that uses cookies and Express sessions approaches to track authenticated users.",
    "fork": false,
    "created_at": "2016-12-17T20:06:25Z",
    "updated_at": "2017-06-20T19:13:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13464678,
    "owner_login": "divyanshu-rawat",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13464678?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "user",
      "auth",
      "users",
      "uses",
      "track",
      "authenticate",
      "sessions",
      "authenticated",
      "cookies"
    ]
  },
  {
    "id": 121361810,
    "name": "l3_nodejs_apirest_2018",
    "full_name": "SofianeHadjadj/l3_nodejs_apirest_2018",
    "description": "Projet de L3 d'application web en Node.js + Express.js + MongoDB + API IGDB (fonctionne avec Postman)",
    "fork": false,
    "created_at": "2018-02-13T09:14:33Z",
    "updated_at": "2018-02-13T09:16:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23208035,
    "owner_login": "SofianeHadjadj",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23208035?v=4",
    "pulled": 1,
    "tags": [
      "application"
    ]
  },
  {
    "id": 112301483,
    "name": "Node_TODO-Api",
    "full_name": "AlwarKrish/Node_TODO-Api",
    "description": "A simple application that integrates todo lists with users demonstrating mongodb integration with Node.js. The application was tested using postman.",
    "fork": false,
    "created_at": "2017-11-28T07:29:46Z",
    "updated_at": "2017-12-14T05:07:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29711689,
    "owner_login": "AlwarKrish",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29711689?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "application",
      "user",
      "mongo",
      "tested",
      "demo",
      "integration",
      "list",
      "users",
      "rating",
      "mongod",
      "mongodb",
      "integrate",
      "todo",
      "demonstrating",
      "lists",
      "integrates"
    ]
  },
  {
    "id": 168559894,
    "name": "Airbnb-Style-App-with-react-redux-express-and-mongodb",
    "full_name": "ahmedsaoudi85/Airbnb-Style-App-with-react-redux-express-and-mongodb",
    "description": " full stack application using Node.js, Express, React, Redux, Redux form, MongoDb, Amazon S3, Stripe,JWT tokens, Postman, ES6",
    "fork": false,
    "created_at": "2019-01-31T16:46:52Z",
    "updated_at": "2019-05-06T08:32:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35258582,
    "owner_login": "ahmedsaoudi85",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/35258582?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "application",
      "full",
      "stack",
      "token",
      "full stack",
      "tokens"
    ]
  },
  {
    "id": 210008069,
    "name": "nodeapp",
    "full_name": "treetrunkz/nodeapp",
    "description": "This is a nodejs application. It is a todo list that can be accessed and created by multiple users. The API is accessed by Postman. The server and interface is set up to POST and GET dynamically. To populate node_modules `npm install ejs, express, mongoose, body-parser --save -g` + tsc -w",
    "fork": false,
    "created_at": "2019-09-21T15:24:15Z",
    "updated_at": "2019-09-22T14:09:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44754821,
    "owner_login": "treetrunkz",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44754821?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "server",
      "call",
      "node",
      "user",
      "express",
      "mongo",
      " express",
      "list",
      "users",
      "face",
      "access",
      "module",
      "interface",
      "nodejs",
      "esse",
      "multiple",
      "mongoose",
      "install",
      "parse",
      "todo",
      "parser",
      "dynamic",
      "modules",
      "dynamically",
      "accessed"
    ]
  },
  {
    "id": 58987348,
    "name": "ServerSideAuthWithNode",
    "full_name": "Andriy-Kulak/ServerSideAuthWithNode",
    "description": "Server side setup with node that can be used for future application. To use, 1) run mongodb with 'mongod' command 2) In another terminal, run npm with 'npm run dev' 3) go to Postman and use localhost:3090/ && localhost:3090/signup && localhost:3090/signin to test the app",
    "fork": false,
    "created_at": "2016-05-17T03:26:23Z",
    "updated_at": "2019-02-13T10:10:03Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 12179976,
    "owner_login": "Andriy-Kulak",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/12179976?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "node",
      "mongo",
      "sign",
      "local",
      "host",
      "command",
      "mongod",
      "mongodb",
      "side",
      "setup",
      "terminal",
      "another",
      "signup",
      "future"
    ]
  },
  {
    "id": 199463214,
    "name": "Developers-Community",
    "full_name": "abankar1/Developers-Community",
    "description": "An application to help developers seek help and share knowledge to other developers. Built using React with Redux, Node.js, MongoDb Atlas, JWT, Mongoose and Postman. [In Progress]",
    "fork": false,
    "created_at": "2019-07-29T13:56:44Z",
    "updated_at": "2019-07-29T14:00:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47008224,
    "owner_login": "abankar1",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47008224?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "develop",
      "help",
      "developer",
      "developers",
      "seek",
      "knowledge"
    ]
  },
  {
    "id": 225753441,
    "name": "Task-management-app",
    "full_name": "KenC1014/Task-management-app",
    "description": "This contains all server side Node.js files for task management application. This is a pure backend application. All the endpoints are accessible via Postman. Express server and Mongoose are used.",
    "fork": false,
    "created_at": "2019-12-04T01:38:27Z",
    "updated_at": "2020-01-29T08:02:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26831001,
    "owner_login": "KenC1014",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26831001?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "application",
      "server",
      "contain",
      "endpoint",
      "points",
      "files",
      "manage",
      "endpoints",
      "backend",
      "access",
      "task",
      "side",
      "management",
      "pure"
    ]
  },
  {
    "id": 230839273,
    "name": "FitnessTracker",
    "full_name": "aking27/FitnessTracker",
    "description": "I used React Native to create a fitness tracker mobile application for iOS and Android. In order to update and maintain server data, I used a combination of the RESTful API and Postman. Additionally, the Expo framework and Node.js were used to build the application on my machine. This app allows users to sign into their account to log exercise/nutritional information, create fitness goals, and view their progress. ",
    "fork": false,
    "created_at": "2019-12-30T03:16:39Z",
    "updated_at": "2020-02-10T03:28:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26031938,
    "owner_login": "aking27",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26031938?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "application",
      "server",
      "user",
      "sign",
      "format",
      "framework",
      "build",
      "users",
      "update",
      "view",
      "info",
      "infor",
      "allows",
      "information",
      "main",
      "were",
      "track",
      "account",
      "order",
      "mobile",
      "machine",
      "progress",
      "exercise",
      "goal",
      "tracker",
      "nutritional",
      "goals"
    ]
  },
  {
    "id": 118588396,
    "name": "backend-ninja-app",
    "full_name": "gouthamkrishna/backend-ninja-app",
    "description": "A simple note taking application using express and postman. Also using docker",
    "fork": false,
    "created_at": "2018-01-23T09:31:48Z",
    "updated_at": "2018-01-23T16:58:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5842349,
    "owner_login": "gouthamkrishna",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5842349?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "application",
      "express",
      " express",
      "docker",
      "note",
      "taking"
    ]
  },
  {
    "id": 94404919,
    "name": "ExecutorAPI",
    "full_name": "yogibaba2/ExecutorAPI",
    "description": "An express server to expose selenium and postman framework to web applications for easy and efficient use",
    "fork": false,
    "created_at": "2017-06-15T05:56:57Z",
    "updated_at": "2017-07-19T16:53:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20608853,
    "owner_login": "yogibaba2",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20608853?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "application",
      "server",
      "express",
      " express",
      "framework",
      "web app",
      "applications",
      "expose",
      "efficient",
      "selenium"
    ]
  },
  {
    "id": 73948533,
    "name": "javascript-at",
    "full_name": "theuggla/javascript-at",
    "description": "ranging from small programs to full applications testing out javascript concepts, both as standalone applications, servers and client applications",
    "fork": false,
    "created_at": "2016-11-16T18:24:52Z",
    "updated_at": "2018-12-12T14:01:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20565872,
    "owner_login": "theuggla",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20565872?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "application",
      "script",
      "server",
      "client",
      "full",
      "java",
      "program",
      "small",
      "applications",
      "concept",
      "javascript",
      "both",
      "servers",
      "concepts",
      "standalone",
      "ranging"
    ]
  },
  {
    "id": 175274059,
    "name": "GitHubSearch",
    "full_name": "KamilWysocki1990/GitHubSearch",
    "description": "MVP||This application give u opportunity  to search through repository in GitHub resources along with data to recognize owner of repository . It can also transfer us to the place where we can check chosen repository in browser. In app is implemented method in RxJava for handle bigger data flow which can help reduce time for waiting to get data on screen. Technlogoy used : Java, RxJava2, Retrofit 2, RecyclerView, MVP, ButterKnife, Glide, CardView, LifeCycleObserver, Architecture Components, Postman.     ",
    "fork": false,
    "created_at": "2019-03-12T18:31:09Z",
    "updated_at": "2019-03-21T17:01:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35812584,
    "owner_login": "KamilWysocki1990",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/35812584?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "data",
      "repos",
      "repository",
      "application",
      "server",
      "implement",
      "help",
      "source",
      "method",
      "check",
      "browser",
      "search",
      "resource",
      "long",
      "resources",
      "handle",
      "place",
      "unit",
      "along",
      "implemented",
      "unity",
      "in browser"
    ]
  },
  {
    "id": 158019808,
    "name": "AndelaCodeCamp",
    "full_name": "Simbadeveloper/AndelaCodeCamp",
    "description": "a web application that provides a platform that brings businesses and individuals together. The platform will be a catalog where business owners can register their businesses for visibility to potential customers and will also give users (customers) the ability to write reviews for the businesses.",
    "fork": false,
    "created_at": "2018-11-17T19:58:55Z",
    "updated_at": "2019-06-14T08:53:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38291725,
    "owner_login": "Simbadeveloper",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/38291725?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "application",
      "user",
      "users",
      "view",
      "provide",
      "web app",
      "custom",
      "esse",
      "platform",
      "review",
      "write",
      "provides",
      "register",
      "customer",
      "customers",
      "reviews",
      "catalog",
      "business",
      "businesses",
      "brings"
    ]
  },
  {
    "id": 188559312,
    "name": "IreporterReactJs",
    "full_name": "LarryKarani/IreporterReactJs",
    "description": "# iReporterApi iReporter is an application whose aim is to reduce corruption in Africa and foster economic development. It allows users to create red flags and interventions. It implents the following list of APIs.  ### Framework used The application is built using python: flask framework. >[Flask](http://flask.pocoo.org/) is a microframework for the Python programming language.   ### End points Method | Endpoint | Usage | | ---- | ---- | --------------- | |POST| `/api/v2/auth/signup` |  Register a user. | |POST| `api/v2/auth/login` | Login user.| |POST| `api/v2/auth/logout` | Logs out a user.| |POST| `api/v2/interventions` | Create a new incident. | |GET| `api/v2/interventions` | Get all the created incidents. | |GET| `api/v2/interventions/user` | Get all incident of the logged in user. | |GET| `api/v2/interventions/` | Get a single incident. | |PATCH| `api/v2/interventions//location` | Update a single incident location. | |PATCH| `api/v2/interventions//comment` | Update a single incident comment. | |PATCH| `api/v2/interventions//status` | Update a single incident status. | |DELETE| `api/v2/interventions/` | Delete a single incident. |  ## Installation 🕵 - To run on local machine git clone this project : ``` $ git clone https://github.com/larryTheGeek/iReporterApi.git ``` Copy and paste the above command in your terminal, the project will be downloaded to your local machine.  To Install python checkout: ``` https://www.python.org/ ```  - create a virtualenv and make it use python 3 using the following command. ``` $ virtualenv -p python3 env ``` - activate the virtual environment ```  $ source env/bin/activate ``` - Install Requirements ``` $ pip install -r requirements.txt ``` ### Testing - Run Test using pytest with the following command ``` $ py.test --cov=app test`  ``` you will get the test coverage report on your terminal   The app can also be tested via Postman - Run App  ``` $ python run.py ``` The app should be accessiable via : http://127.0.0.1:5000/  open postman and navigate to the API endpoints described above  ### HEROKU URL  https://ireporter-version2.herokuapp.com/api/v2/   ### Owner - Larry Karani  ### Motivation https://www.youtube.com/watch?v=wHRUDL7GKmI",
    "fork": false,
    "created_at": "2019-05-25T11:43:18Z",
    "updated_at": "2019-05-28T07:00:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22986772,
    "owner_login": "LarryKarani",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22986772?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "repo",
      "application",
      "http",
      "user",
      "develop",
      "sign",
      "environment",
      "auth",
      "endpoint",
      "points",
      "tested",
      "framework",
      "https",
      "endpoints",
      "load",
      "local",
      "list",
      "source",
      "built",
      "users",
      "stat",
      "version",
      "python",
      "development",
      "command",
      "access",
      "check",
      "program",
      "report",
      "github",
      "allows",
      "open",
      "lang",
      "micro",
      "install",
      "flask",
      "login",
      "clone",
      "desc",
      "download",
      "status",
      "require",
      "following",
      "machine",
      "reporter",
      "should",
      "single",
      "location",
      "terminal",
      "heroku",
      "language",
      "coverage",
      "signup",
      "programming",
      "pytest",
      "foster",
      "youtube",
      "ireporter"
    ]
  },
  {
    "id": 162571828,
    "name": "iReporter2",
    "full_name": "bakersen/iReporter2",
    "description": "iReporter enables any/every citizen to bring any form of corruption to the notice of appropriate authorities and the general public. Users can also report on things that needs government intervention. Corruption is a huge bane to Africa’s development. African countries must develop novel and localised solutions that will curb this menace, hence the birth of iReporter.  ### Features  1. Users can create an account and log in. 2. Users can create a red-flag record (An incident linked to corruption). 3. Users can create intervention record (a call for a government agency to intervene e.g repair bad road sections, collapsed bridges, flooding e.t.c). 4. Users can edit their red-flag or intervention records. 5. Users can delete their red-flag or intervention records. 6. Users can add geolocation (Lat Long Coordinates) to their red-flag or intervention records . 7. Users can change the geolocation (Lat Long Coordinates) attached to their red-flag or intervention records . 8. Admin can change the status of a record to either under investigation, rejected (in the event of a false claim) or resolved (in the event that the claim has been investigated and resolved) .  Optional Features  1. Users can add images to their red-flag or intervention records, to support their claims. 2. Users can add videos to their red-flag or intervention records, to support their claims. 3. The application should display a Google Map with Marker showing the red-flag or intervention location. 4. The user gets real-time email notification when Admin changes the status of their record. 5. The user gets real-time SMS notification when Admin changes the status of their record.   ## Built With  * HTML, CSS, Javascript * Python, Flask APIs * Postgres SQL  ## Tools Used  * Pivotal Tracker * github * Postman * Heroku  ## Version  v1.0   ## Authors  * **Baker Sentamu**  ## iReporter Demo UI Link   ## Acknowledgments  * Andela Learning Facilitators",
    "fork": false,
    "created_at": "2018-12-20T11:41:54Z",
    "updated_at": "2019-02-14T14:26:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7971499,
    "owner_login": "bakersen",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7971499?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "repo",
      "form",
      "application",
      "script",
      "call",
      "user",
      "develop",
      "mail",
      "auth",
      "local",
      "stat",
      "delete",
      "email",
      "development",
      "image",
      "very",
      "play",
      "need",
      "report",
      "github",
      "ever",
      "support",
      "public",
      "edit",
      "link",
      "under",
      "showing",
      "account",
      "images",
      "solution",
      "status",
      "enable",
      "been",
      "needs",
      "enables",
      "should",
      "location",
      "event",
      "display",
      "gets",
      "things",
      "notification",
      "solutions",
      "general",
      "bridge",
      "video",
      "either",
      "bane",
      "countries",
      "section",
      "every"
    ]
  },
  {
    "id": 201517749,
    "name": "note-app",
    "full_name": "luxie11/note-app",
    "description": "An API created for saving user tasks. For API testing used Postman. This API can be user for WEB application creation with React, Vue or any front-end framework. ",
    "fork": false,
    "created_at": "2019-08-09T18:03:55Z",
    "updated_at": "2019-08-09T19:53:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29857050,
    "owner_login": "luxie11",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29857050?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "user",
      "framework",
      "front",
      "task",
      "creation",
      "tasks",
      "saving"
    ]
  },
  {
    "id": 159670446,
    "name": "QA-automation-programmer",
    "full_name": "TVoroshilova/QA-automation-programmer",
    "description": "At least 2 years experience in Testing Automation Development using known software testing tools and frameworks as Selenium, Appium, Postman, etc. ∙ Experience with Web, DB (SQL/NoSQL) and API testing – Must. ∙ Experience with working over Linux OS and public cloud environments – Must. ∙ Experience with defect tracking system (as GIT, Jira or VSTS/Azure Dev Ops) – Must. ∙ Experience in working with Docker – Advantage.We are seeking an experienced QA automation programmer that will be leading the testing automation activities for our SaaS product. ∙ The QA automation programmer will be part of an innovative team developing a challenging, cutting edge technology Web application for the e-Commerce world. ∙ Main responsibilities: Develop test plans including functional testing, end user testing, stress, performance, reliability and usability testing. o Evaluate product code according to specifications, report and track bugs and fixes. o Execute automatic tests on the product during development and pre-release stages. o Work closely with R&D and product teams on new features, system integration and performance testing as a part of a startup company stationed in Israel. o Participate in the complete development process using the agile methodology. ∙ Academic degree from a known institution.High level English – very good writing skills, fluent speech.The candidate agrees to work from Trust’s offices and not remotely from home.Salary expectations: Up to 2000 USD (Gross salary)",
    "fork": false,
    "created_at": "2018-11-29T13:27:02Z",
    "updated_at": "2018-11-29T13:27:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45455770,
    "owner_login": "TVoroshilova",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45455770?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "testing",
      "form",
      "tests",
      "application",
      "tool",
      "tests ",
      "user",
      "develop",
      "auto",
      "code",
      "automat",
      "environment",
      "framework",
      "function",
      "spec",
      "integration",
      "star",
      "stat",
      "start",
      "tools",
      "development",
      "environments",
      "very",
      "perform",
      "functional",
      "method",
      "system",
      "automation",
      "working",
      "program",
      "report",
      "feature",
      "tech",
      "cloud",
      "complete",
      "product",
      "public",
      "features",
      "automatic",
      "specific",
      "including",
      "track",
      "software",
      "process",
      "writing",
      "remote",
      "according",
      "performance",
      "world",
      "home",
      "specification",
      "expect",
      "technology",
      "specifications",
      "agile",
      "developing",
      "during",
      "fluent",
      "skills",
      "seek",
      "degree",
      "office",
      "least",
      "release",
      "level",
      "frameworks",
      "tracking"
    ]
  },
  {
    "id": 178413776,
    "name": "PostmanToHtml_Markdown",
    "full_name": "zaycodes/PostmanToHtml_Markdown",
    "description": null,
    "fork": false,
    "created_at": "2019-03-29T13:48:47Z",
    "updated_at": "2019-10-30T11:34:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22375431,
    "owner_login": "zaycodes",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22375431?v=4",
    "pulled": 1,
    "tags": []
  }
]