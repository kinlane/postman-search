[
  {
    "id": 52625059,
    "name": "postman-collection-generator",
    "full_name": "api-platform/postman-collection-generator",
    "description": "Generator for Postman collection based on API Platform",
    "fork": false,
    "created_at": "2016-02-26T18:43:04Z",
    "updated_at": "2020-02-16T13:14:05Z",
    "stargazers_count": 25,
    "watchers_count": 25,
    "forks": 9,
    "watchers": 25,
    "score": 1,
    "owner_id": 13420081,
    "owner_login": "api-platform",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13420081?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "form",
      "based"
    ]
  },
  {
    "id": 156116510,
    "name": "grpcox",
    "full_name": "gusaul/grpcox",
    "description": "Like Postman, but for gRPC: web based GUI client for gRPC Development Testing",
    "fork": false,
    "created_at": "2018-11-04T19:22:25Z",
    "updated_at": "2020-03-23T04:03:34Z",
    "stargazers_count": 130,
    "watchers_count": 130,
    "forks": 21,
    "watchers": 130,
    "score": 1,
    "owner_id": 10978391,
    "owner_login": "gusaul",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10978391?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "based"
    ]
  },
  {
    "id": 96685982,
    "name": "monitor-man",
    "full_name": "yangxikun/monitor-man",
    "description": "HTTP API monitor based on postman and newman. ",
    "fork": false,
    "created_at": "2017-07-09T13:27:33Z",
    "updated_at": "2020-02-14T07:49:50Z",
    "stargazers_count": 44,
    "watchers_count": 44,
    "forks": 10,
    "watchers": 44,
    "score": 1,
    "owner_id": 3364160,
    "owner_login": "yangxikun",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3364160?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "based",
      "newman",
      "monitor"
    ]
  },
  {
    "user": "SheikhZayed",
    "repo": "PostMan-Android-Application",
    "pulled": "User",
    "id": 55085737,
    "name": "PostMan-Android-Application",
    "full_name": "SheikhZayed/PostMan-Android-Application",
    "description": "This Application can Listen to the Incoming GSM Events in Android Handsets and Automatically forwards those Events to the Configured API in the App,It Could be made Usefull for developing Apps that want to LIsten to Phones GSM Data and forward those data to some Web based Application.",
    "fork": false,
    "created_at": "2016-03-30T18:07:51Z",
    "updated_at": "2017-08-13T15:57:40Z",
    "forks": 6,
    "open_issues": 0,
    "watchers": 10,
    "network_count": 6,
    "subscribers_count": 1,
    "owner_id": 8774293,
    "owner_login": "SheikhZayed",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8774293?v=4",
    "owner_type": "User",
    "tags": [
      "data",
      "call",
      "based",
      "develop",
      "full",
      "those",
      "sets",
      "developing"
    ]
  },
  {
    "user": "nandymandy1",
    "repo": "role_based_authentication_With-MEN",
    "pulled": "User",
    "id": 174181931,
    "name": "role_based_authentication_With-MEN",
    "full_name": "nandymandy1/role_based_authentication_With-MEN",
    "description": "In this repository I have created simple role based authentication using Node.js express mongodb and tested with Postman.",
    "fork": false,
    "created_at": "2019-03-06T16:35:33Z",
    "updated_at": "2020-03-17T19:34:48Z",
    "forks": 6,
    "open_issues": 0,
    "watchers": 14,
    "network_count": 6,
    "subscribers_count": 1,
    "owner_id": 29309671,
    "owner_login": "nandymandy1",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29309671?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "create",
      "repo",
      "repos",
      "repository",
      "based",
      "express",
      "mongo",
      " express",
      "auth",
      "tested",
      "authentication",
      "mongod",
      "mongodb",
      "role"
    ]
  },
  {
    "user": "flash286",
    "repo": "postman-load-testing",
    "pulled": "User",
    "id": 111469848,
    "name": "postman-load-testing",
    "full_name": "flash286/postman-load-testing",
    "description": "This tool written on go lang, help to run postman collections in parallel mode. So you can use it for load testing based on postman collections.  As a runner it uses newman.",
    "fork": false,
    "created_at": "2017-11-20T22:31:02Z",
    "updated_at": "2019-12-22T10:04:47Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 10,
    "network_count": 1,
    "subscribers_count": 3,
    "owner_id": 1481022,
    "owner_login": "flash286",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1481022?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "collections",
      "testing",
      "postman collection",
      "tool",
      "based",
      "newman",
      "help",
      "postman collections",
      "load",
      "runner",
      "written",
      "uses",
      "lang",
      "parallel"
    ]
  },
  {
    "user": "AndriiStepura",
    "repo": "letslearnapitesting",
    "pulled": "User",
    "id": 106154551,
    "name": "letslearnapitesting",
    "full_name": "AndriiStepura/letslearnapitesting",
    "description": "Repo for API testing presentation, based with postman tools",
    "fork": false,
    "created_at": "2017-10-08T06:18:19Z",
    "updated_at": "2019-05-22T21:14:47Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 4,
    "network_count": 2,
    "subscribers_count": 2,
    "owner_id": 30338636,
    "owner_login": "AndriiStepura",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/30338636?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      " postman",
      "testing",
      "tool",
      "based",
      "tools",
      "presentation"
    ]
  },
  {
    "user": "reportportal",
    "repo": "agent-postman",
    "pulled": "Organization",
    "id": 166978675,
    "name": "agent-postman",
    "full_name": "reportportal/agent-postman",
    "description": "Agent for Postman reporting (based on NewMan runner)",
    "fork": false,
    "created_at": "2019-01-22T10:58:21Z",
    "updated_at": "2019-12-24T03:54:47Z",
    "forks": 2,
    "open_issues": 3,
    "watchers": 6,
    "network_count": 2,
    "subscribers_count": 22,
    "owner_id": 17636279,
    "owner_login": "reportportal",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/17636279?v=4",
    "owner_type": "Organization",
    "tags": [
      "repo",
      "based",
      "runner",
      "report",
      "reporting"
    ]
  },
  {
    "user": "crowcoder",
    "repo": "PostmanDelivers",
    "pulled": "User",
    "id": 213064829,
    "name": "PostmanDelivers",
    "full_name": "crowcoder/PostmanDelivers",
    "description": null,
    "fork": false,
    "created_at": "2019-10-05T20:11:58Z",
    "updated_at": "2020-02-25T21:01:47Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 2,
    "subscribers_count": 2,
    "owner_id": 4210624,
    "owner_login": "crowcoder",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/4210624?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "philgookang",
    "repo": "Postman.php",
    "pulled": "User",
    "id": 99183809,
    "name": "Postman.php",
    "full_name": "philgookang/Postman.php",
    "description": "A Php based Mysql Prepare Statement Wrapper Class. ",
    "fork": false,
    "created_at": "2017-08-03T02:54:19Z",
    "updated_at": "2019-12-21T01:29:14Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 4,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 3853121,
    "owner_login": "philgookang",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/3853121?v=4",
    "owner_type": "User",
    "tags": [
      "based"
    ]
  },
  {
    "user": "ioncodes",
    "repo": "Wingman",
    "pulled": "User",
    "id": 89353906,
    "name": "Wingman",
    "full_name": "ioncodes/Wingman",
    "description": "The pluginbased Postman in C#",
    "fork": false,
    "created_at": "2017-04-25T11:41:13Z",
    "updated_at": "2019-03-08T22:53:53Z",
    "forks": 0,
    "open_issues": 1,
    "watchers": 4,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 18533297,
    "owner_login": "ioncodes",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/18533297?v=4",
    "owner_type": "User",
    "tags": [
      "based",
      "plugin",
      "pluginbased"
    ]
  },
  {
    "user": "vishnoitanuj",
    "repo": "Blockchain-Cryptocurrency",
    "pulled": "User",
    "id": 158826019,
    "name": "Blockchain-Cryptocurrency",
    "full_name": "vishnoitanuj/Blockchain-Cryptocurrency",
    "description": "A basic implementation of blockchain based on flask server. It servers the basics of crypto-currency technology. The genesis, block constructor and its use are explained in the read-me file. Any suggestions are welcomed.",
    "fork": false,
    "created_at": "2018-11-23T11:50:24Z",
    "updated_at": "2020-02-13T17:04:10Z",
    "forks": 2,
    "open_issues": 1,
    "watchers": 3,
    "network_count": 2,
    "subscribers_count": 0,
    "owner_id": 26393267,
    "owner_login": "vishnoitanuj",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26393267?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "server",
      "based",
      "implement",
      "read",
      "implementation",
      "struct",
      "tech",
      "chai",
      "currency",
      "flask",
      "crypto",
      "blockchain",
      "plain",
      "servers",
      "basics",
      "technology",
      "explain",
      "suggest",
      "welcome"
    ]
  },
  {
    "id": 166978675,
    "name": "agent-postman",
    "full_name": "reportportal/agent-postman",
    "description": "Agent for Postman reporting (based on NewMan runner)",
    "fork": false,
    "created_at": "2019-01-22T10:58:21Z",
    "updated_at": "2019-12-24T03:54:47Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 2,
    "watchers": 6,
    "score": 1,
    "owner_id": 17636279,
    "owner_login": "reportportal",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/17636279?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "based",
      "runner",
      "report",
      "reporting"
    ]
  },
  {
    "id": 99183809,
    "name": "Postman.php",
    "full_name": "philgookang/Postman.php",
    "description": "A Php based Mysql Prepare Statement Wrapper Class. ",
    "fork": false,
    "created_at": "2017-08-03T02:54:19Z",
    "updated_at": "2019-12-21T01:29:14Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 3853121,
    "owner_login": "philgookang",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/3853121?v=4",
    "pulled": 1,
    "tags": [
      "based"
    ]
  },
  {
    "id": 80802977,
    "name": "postman-test-generator",
    "full_name": "flipboxstudio/postman-test-generator",
    "description": null,
    "fork": false,
    "created_at": "2017-02-03T06:21:14Z",
    "updated_at": "2019-01-30T07:07:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 18345026,
    "owner_login": "flipboxstudio",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/18345026?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 89353906,
    "name": "Wingman",
    "full_name": "ioncodes/Wingman",
    "description": "The pluginbased Postman in C#",
    "fork": false,
    "created_at": "2017-04-25T11:41:13Z",
    "updated_at": "2019-03-08T22:53:53Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 18533297,
    "owner_login": "ioncodes",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/18533297?v=4",
    "tags": [
      "based",
      "plugin",
      "pluginbased"
    ]
  },
  {
    "id": 158826019,
    "name": "Blockchain-Cryptocurrency",
    "full_name": "vishnoitanuj/Blockchain-Cryptocurrency",
    "description": "A basic implementation of blockchain based on flask server. It servers the basics of crypto-currency technology. The genesis, block constructor and its use are explained in the read-me file. Any suggestions are welcomed.",
    "fork": false,
    "created_at": "2018-11-23T11:50:24Z",
    "updated_at": "2020-02-13T17:04:10Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 2,
    "watchers": 3,
    "score": 1,
    "owner_id": 26393267,
    "owner_login": "vishnoitanuj",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26393267?v=4",
    "tags": [
      "file",
      "server",
      "based",
      "implement",
      "read",
      "implementation",
      "struct",
      "tech",
      "chai",
      "currency",
      "flask",
      "crypto",
      "blockchain",
      "plain",
      "servers",
      "basics",
      "technology",
      "explain",
      "suggest",
      "welcome"
    ]
  },
  {
    "id": 454909,
    "name": "Postman",
    "full_name": "glowcoil/Postman",
    "description": "A programming language based on message passing.",
    "fork": false,
    "created_at": "2010-01-01T02:15:59Z",
    "updated_at": "2013-10-07T04:52:27Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 131388,
    "owner_login": "glowcoil",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/131388?v=4",
    "tags": [
      "based",
      "program",
      "lang",
      "message",
      "language",
      "programming",
      "passing"
    ]
  },
  {
    "id": 57402326,
    "name": "postman",
    "full_name": "jorgefilho/postman",
    "description": null,
    "fork": false,
    "created_at": "2016-04-29T17:39:33Z",
    "updated_at": "2016-05-10T18:35:49Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 2074571,
    "owner_login": "jorgefilho",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/2074571?v=4",
    "tags": []
  },
  {
    "id": 81545442,
    "name": "postman",
    "full_name": "daude/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-02-10T08:45:47Z",
    "updated_at": "2017-02-10T08:49:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25049530,
    "owner_login": "daude",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/25049530?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 94980253,
    "name": "Postman",
    "full_name": "weizhengda/Postman",
    "description": null,
    "fork": false,
    "created_at": "2017-06-21T08:17:03Z",
    "updated_at": "2017-06-21T08:17:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17511581,
    "owner_login": "weizhengda",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17511581?v=4",
    "tags": []
  },
  {
    "id": 109370282,
    "name": "postman",
    "full_name": "madaoguteng/postman",
    "description": "Postman is a components based on Java, which is solution to help you dealing with distributed transactions. it is Implementation of distributed message dealing and Saga.",
    "fork": false,
    "created_at": "2017-11-03T08:19:01Z",
    "updated_at": "2018-05-11T23:03:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15182676,
    "owner_login": "madaoguteng",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/15182676?v=4",
    "tags": [
      "based",
      "help",
      "action",
      "message",
      "solution",
      "component",
      "components",
      "transactions",
      "distributed"
    ]
  },
  {
    "id": 67298693,
    "name": "postman",
    "full_name": "joyghosh/postman",
    "description": "Highly concurrent and queue based email relay sever. JMS and Akka's actors framework are the main technologies used.",
    "fork": false,
    "created_at": "2016-09-03T15:56:40Z",
    "updated_at": "2016-09-08T16:25:36Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 5499671,
    "owner_login": "joyghosh",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/5499671?v=4",
    "tags": [
      "based",
      "mail",
      "framework",
      "rent",
      "email",
      "ever",
      "tech",
      "main",
      "actor",
      "current",
      "technologies",
      "relay"
    ]
  },
  {
    "id": 89322178,
    "name": "postMan",
    "full_name": "Hacker-Wu/postMan",
    "description": null,
    "fork": false,
    "created_at": "2017-04-25T05:48:49Z",
    "updated_at": "2017-04-25T05:57:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21240842,
    "owner_login": "Hacker-Wu",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/21240842?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 91694802,
    "name": "postman",
    "full_name": "MubizInc/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-05-18T13:12:56Z",
    "updated_at": "2017-05-18T13:12:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17713217,
    "owner_login": "MubizInc",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/17713217?v=4",
    "tags": []
  },
  {
    "id": 146746678,
    "name": "PostMan",
    "full_name": "poojaRaghuwanshi/PostMan",
    "description": null,
    "fork": false,
    "created_at": "2018-08-30T12:31:35Z",
    "updated_at": "2018-08-30T12:31:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42743162,
    "owner_login": "poojaRaghuwanshi",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/42743162?v=4",
    "tags": []
  },
  {
    "id": 144696765,
    "name": "postman",
    "full_name": "snapcrafters/postman",
    "description": null,
    "fork": false,
    "created_at": "2018-08-14T09:12:37Z",
    "updated_at": "2018-11-08T18:14:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29598503,
    "owner_login": "snapcrafters",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29598503?v=4",
    "tags": []
  },
  {
    "id": 140862040,
    "name": "postman",
    "full_name": "Alans139/postman",
    "description": null,
    "fork": false,
    "created_at": "2018-07-13T15:11:33Z",
    "updated_at": "2018-07-13T15:11:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40303781,
    "owner_login": "Alans139",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/40303781?v=4",
    "tags": []
  },
  {
    "id": 80372834,
    "name": "bound-ttr",
    "full_name": "Xantier/bound-ttr",
    "description": "Automated boundary testing framework based on Postman collections and database assertions",
    "fork": false,
    "created_at": "2017-01-29T21:10:28Z",
    "updated_at": "2019-03-01T04:27:26Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 2392775,
    "owner_login": "Xantier",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2392775?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "collections",
      "data",
      "testing",
      "database",
      "based",
      "framework",
      "assert",
      "assertion",
      "boundary"
    ]
  },
  {
    "id": 173066260,
    "name": "REST-API-for-notes-CRUD-TESTING-with-POSTMAN-TESTING-API",
    "full_name": "DhamuSniper/REST-API-for-notes-CRUD-TESTING-with-POSTMAN-TESTING-API",
    "description": "This app create notes based GET, POST, PUT, DELETE endpoints. This endpoint have been tested with POSTMAN API TESTING TOOL",
    "fork": false,
    "created_at": "2019-02-28T07:48:28Z",
    "updated_at": "2019-02-28T11:45:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22738013,
    "owner_login": "DhamuSniper",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22738013?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "based",
      "endpoint",
      "points",
      "tested",
      "endpoints",
      "been",
      "note",
      "notes"
    ]
  },
  {
    "id": 174181931,
    "name": "role_based_authentication_With-MEN",
    "full_name": "nandymandy1/role_based_authentication_With-MEN",
    "description": "In this repository I have created simple role based authentication using Node.js express mongodb and tested with Postman.",
    "fork": false,
    "created_at": "2019-03-06T16:35:33Z",
    "updated_at": "2020-03-17T19:34:48Z",
    "stargazers_count": 14,
    "watchers_count": 14,
    "forks": 6,
    "watchers": 14,
    "score": 1,
    "owner_id": 29309671,
    "owner_login": "nandymandy1",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29309671?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "repo",
      "repos",
      "repository",
      "based",
      "express",
      "mongo",
      " express",
      "auth",
      "tested",
      "authentication",
      "mongod",
      "mongodb",
      "role"
    ]
  },
  {
    "id": 19666933,
    "name": "PostMan",
    "full_name": "youngnan/PostMan",
    "description": "web based post-production management",
    "fork": false,
    "created_at": "2014-05-11T13:33:08Z",
    "updated_at": "2014-05-16T05:19:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7347104,
    "owner_login": "youngnan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7347104?v=4",
    "pulled": 1,
    "tags": [
      "based",
      "manage",
      "management",
      "product"
    ]
  },
  {
    "id": 77859223,
    "name": "postman",
    "full_name": "akanuragkumar/postman",
    "description": "This Application can Listen to the Incoming GSM Events in Android Handsets and Automatically forwards those Events to the Configured API in the App,It Could be made Usefull for developing Apps that want to LIsten to Phones GSM Data and forward those data to some Web based Application.",
    "fork": false,
    "created_at": "2017-01-02T20:14:39Z",
    "updated_at": "2017-01-07T17:58:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14040056,
    "owner_login": "akanuragkumar",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/14040056?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "call",
      "based",
      "develop",
      "full",
      "those",
      "sets",
      "developing"
    ]
  },
  {
    "id": 45903338,
    "name": "Postman",
    "full_name": "upost/Postman",
    "description": "Simple location based game demo",
    "fork": false,
    "created_at": "2015-11-10T10:01:14Z",
    "updated_at": "2018-01-17T16:59:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6184056,
    "owner_login": "upost",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6184056?v=4",
    "pulled": 1,
    "tags": [
      "based",
      "demo",
      "game",
      "location"
    ]
  },
  {
    "id": 91678678,
    "name": "postman",
    "full_name": "gost/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-05-18T10:06:18Z",
    "updated_at": "2017-05-18T10:06:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24269747,
    "owner_login": "gost",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/24269747?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 94322565,
    "name": "postman",
    "full_name": "cedricdecroiaccenture/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-06-14T11:14:48Z",
    "updated_at": "2017-06-14T11:14:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29428702,
    "owner_login": "cedricdecroiaccenture",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/29428702?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 52541209,
    "name": "postmans-quest",
    "full_name": "alice24/postmans-quest",
    "description": "A simple createjs/zim based phone game. Help the postmaster with his route map! (The title is more dramatic than the game is...)",
    "fork": false,
    "created_at": "2016-02-25T16:52:02Z",
    "updated_at": "2016-04-22T23:50:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3343801,
    "owner_login": "alice24",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/3343801?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "based",
      "route",
      "more",
      "game",
      "title",
      "master"
    ]
  },
  {
    "id": 66574448,
    "name": "Postman-Server",
    "full_name": "TomasKostadinov/Postman-Server",
    "description": "A express.js & node.js based Android Notification sync system",
    "fork": false,
    "created_at": "2016-08-25T16:22:03Z",
    "updated_at": "2016-08-25T16:22:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11008743,
    "owner_login": "TomasKostadinov",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11008743?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "based",
      "express",
      " express",
      "system",
      "sync"
    ]
  },
  {
    "id": 54271005,
    "name": "postman_game",
    "full_name": "jyotiska/postman_game",
    "description": "Simple multiplayer realtime game based on Websockets",
    "fork": false,
    "created_at": "2016-03-19T14:48:54Z",
    "updated_at": "2016-03-23T18:59:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1973489,
    "owner_login": "jyotiska",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1973489?v=4",
    "pulled": 1,
    "tags": [
      "based",
      "play",
      "game",
      "realtime",
      "multiplayer"
    ]
  },
  {
    "id": 243579838,
    "name": "postman_builder",
    "full_name": "fazulk/postman_builder",
    "description": "Generate postman routes automatically based upon express or koa routes",
    "fork": false,
    "created_at": "2020-02-27T17:47:27Z",
    "updated_at": "2020-03-27T22:48:21Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 21964900,
    "owner_login": "fazulk",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/21964900?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "call",
      "based",
      "express",
      "auto",
      "automat",
      " express",
      "route",
      "routes",
      "automatic",
      "automatically",
      "upon"
    ]
  },
  {
    "id": 29505796,
    "name": "chinese-postman",
    "full_name": "andreyluiz/chinese-postman",
    "description": null,
    "fork": false,
    "created_at": "2015-01-20T01:33:46Z",
    "updated_at": "2015-01-20T01:37:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1965897,
    "owner_login": "andreyluiz",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1965897?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 102910061,
    "name": "postman-oraclebmc-apis-js",
    "full_name": "paasdtools/postman-oraclebmc-apis-js",
    "description": "JavaScript-based mechanism for making Oracle Bare Metal Cloud Services API requests from Postman",
    "fork": false,
    "created_at": "2017-09-08T22:36:32Z",
    "updated_at": "2017-09-08T22:43:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31580110,
    "owner_login": "paasdtools",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31580110?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 169608941,
    "name": "ermjson-to-postmanjson",
    "full_name": "joneldiablo/ermjson-to-postmanjson",
    "description": null,
    "fork": false,
    "created_at": "2019-02-07T17:06:57Z",
    "updated_at": "2019-02-07T17:52:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13206502,
    "owner_login": "joneldiablo",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13206502?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 157493695,
    "name": "swagger2postman",
    "full_name": "campfire-inc/swagger2postman",
    "description": null,
    "fork": false,
    "created_at": "2018-11-14T05:03:59Z",
    "updated_at": "2019-02-26T05:20:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22833307,
    "owner_login": "campfire-inc",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22833307?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 199714458,
    "name": "fox.jason.passthrough.postman",
    "full_name": "jason-fox/fox.jason.passthrough.postman",
    "description": "Generate DITA-based REST API documentation from a Postman collection added directly to a ditamap",
    "fork": false,
    "created_at": "2019-07-30T19:26:49Z",
    "updated_at": "2020-03-29T11:24:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3439249,
    "owner_login": "jason-fox",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3439249?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "based",
      "document",
      "documentation",
      "directly",
      "added"
    ]
  },
  {
    "id": 128740187,
    "name": "postman-mail-uploader",
    "full_name": "igocooper/postman-mail-uploader",
    "description": "webdriver.io based algorithm to upload emails to postman service.",
    "fork": false,
    "created_at": "2018-04-09T08:34:43Z",
    "updated_at": "2019-04-08T13:40:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19605103,
    "owner_login": "igocooper",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19605103?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "service",
      "based",
      "mail",
      "load",
      "email",
      "drive",
      "upload",
      "emails",
      "river",
      "webdriver"
    ]
  },
  {
    "id": 124165906,
    "name": "postman-collection-generator",
    "full_name": "layoutzweb/postman-collection-generator",
    "description": "Generate a collection from your middleware based api backend (express, restify, koa...)",
    "fork": false,
    "created_at": "2018-03-07T02:17:42Z",
    "updated_at": "2018-04-22T17:09:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1878432,
    "owner_login": "layoutzweb",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1878432?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "rest",
      "based",
      "express",
      "backend",
      "middleware"
    ]
  },
  {
    "id": 126221594,
    "name": "exemplo-artigo-postman",
    "full_name": "BrunaEscudelario/exemplo-artigo-postman",
    "description": null,
    "fork": false,
    "created_at": "2018-03-21T18:11:26Z",
    "updated_at": "2018-03-21T18:19:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28552187,
    "owner_login": "BrunaEscudelario",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28552187?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 195949937,
    "name": "postman-patch-asar-ssh",
    "full_name": "jerowang/postman-patch-asar-ssh",
    "description": null,
    "fork": false,
    "created_at": "2019-07-09T06:51:41Z",
    "updated_at": "2019-07-17T02:36:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16468982,
    "owner_login": "jerowang",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/16468982?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 102173049,
    "name": "postman-amazon-apis-js",
    "full_name": "cpettools/postman-amazon-apis-js",
    "description": "JavaScript-based mechanism for making AWS REST API requests from Postman",
    "fork": false,
    "created_at": "2017-09-02T04:41:34Z",
    "updated_at": "2017-09-02T04:41:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15694756,
    "owner_login": "cpettools",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15694756?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 102172708,
    "name": "postman-oraclebmc-apis-js",
    "full_name": "cpettools/postman-oraclebmc-apis-js",
    "description": "JavaScript-based mechanism for making Oracle Bare Metal Cloud Services API requests from Postman",
    "fork": false,
    "created_at": "2017-09-02T04:32:28Z",
    "updated_at": "2017-09-02T04:34:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 15694756,
    "owner_login": "cpettools",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15694756?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 147647031,
    "name": "nodejs-postman-demo",
    "full_name": "impactotecnologico/nodejs-postman-demo",
    "description": null,
    "fork": false,
    "created_at": "2018-09-06T09:05:48Z",
    "updated_at": "2018-10-17T11:20:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5190774,
    "owner_login": "impactotecnologico",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5190774?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 102910117,
    "name": "postman-amazon-apis-js",
    "full_name": "paasdtools/postman-amazon-apis-js",
    "description": "JavaScript-based mechanism for making AWS REST API requests from Postman",
    "fork": false,
    "created_at": "2017-09-08T22:37:30Z",
    "updated_at": "2017-09-08T22:43:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31580110,
    "owner_login": "paasdtools",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31580110?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 116677681,
    "name": "node-postman-refactor-mongoose",
    "full_name": "vinoth112/node-postman-refactor-mongoose",
    "description": null,
    "fork": false,
    "created_at": "2018-01-08T13:05:11Z",
    "updated_at": "2018-02-08T09:57:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11039684,
    "owner_login": "vinoth112",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11039684?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 135809969,
    "name": "slack-postman-chatbot",
    "full_name": "oleh-polishchuk/slack-postman-chatbot",
    "description": null,
    "fork": false,
    "created_at": "2018-06-02T10:52:25Z",
    "updated_at": "2018-06-03T11:39:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16427424,
    "owner_login": "oleh-polishchuk",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16427424?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 85630960,
    "name": "API_Explorer",
    "full_name": "namkai/API_Explorer",
    "description": "Web based API explorer similar to postman",
    "fork": false,
    "created_at": "2017-03-20T21:52:33Z",
    "updated_at": "2017-03-20T21:53:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19697134,
    "owner_login": "namkai",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19697134?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "based",
      "explore",
      "explorer"
    ]
  },
  {
    "id": 200709922,
    "name": "toDoListApi",
    "full_name": "Silks-road/toDoListApi",
    "description": "Node, MongoDB and Postman based API",
    "fork": false,
    "created_at": "2019-08-05T18:40:02Z",
    "updated_at": "2019-08-07T18:18:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36883406,
    "owner_login": "Silks-road",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36883406?v=4",
    "pulled": 1,
    "tags": [
      "based"
    ]
  },
  {
    "id": 155572624,
    "name": "js-postman-newman-csv-writer",
    "full_name": "CarlosEduardoFerreiraRamos/js-postman-newman-csv-writer",
    "description": "A javascript csv file writer, receving data from the newman api based on a postman collection",
    "fork": false,
    "created_at": "2018-10-31T14:38:10Z",
    "updated_at": "2018-10-31T14:54:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25060586,
    "owner_login": "CarlosEduardoFerreiraRamos",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25060586?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "data",
      "postman collection",
      "file",
      "script",
      "based",
      "newman",
      "java",
      "javascript",
      "write",
      "writer"
    ]
  },
  {
    "id": 120322714,
    "name": "telethon-api-web-app",
    "full_name": "HasnainAshfaq/telethon-api-web-app",
    "description": "Tele PostMan - a complete web app based on Telethon API to send messages on Telegram",
    "fork": false,
    "created_at": "2018-02-05T15:25:02Z",
    "updated_at": "2020-01-16T12:55:50Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 0,
    "watchers": 6,
    "score": 1,
    "owner_id": 11078828,
    "owner_login": "HasnainAshfaq",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11078828?v=4",
    "pulled": 1,
    "tags": [
      "based",
      "send",
      "web app",
      "complete",
      "message",
      "messages"
    ]
  },
  {
    "id": 102267396,
    "name": "monitor-man-distribute",
    "full_name": "yangxikun/monitor-man-distribute",
    "description": "HTTP API monitor based on postman and newman.",
    "fork": false,
    "created_at": "2017-09-03T13:43:14Z",
    "updated_at": "2017-09-04T03:27:02Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 1,
    "watchers": 2,
    "score": 1,
    "owner_id": 3364160,
    "owner_login": "yangxikun",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3364160?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "based",
      "newman",
      "monitor"
    ]
  },
  {
    "id": 80535371,
    "name": "postman2doc",
    "full_name": "ChristianHarms/postman2doc",
    "description": "A small script to generate a plain API document based on postman data",
    "fork": false,
    "created_at": "2017-01-31T15:54:39Z",
    "updated_at": "2017-02-01T13:06:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 606484,
    "owner_login": "ChristianHarms",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/606484?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "script",
      "based",
      "document",
      "generate",
      "small",
      "plain"
    ]
  },
  {
    "id": 123729643,
    "name": "postman_collection_ThingModel",
    "full_name": "suncor-timeseries-trial/postman_collection_ThingModel",
    "description": "This is a Postman collection for Modeling a Sample data set in the SAP Leonardo Thing Model. The Model was based on a subset of data provided.",
    "fork": false,
    "created_at": "2018-03-03T20:42:51Z",
    "updated_at": "2018-03-03T20:42:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36996366,
    "owner_login": "suncor-timeseries-trial",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/36996366?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "data",
      "based",
      "provide",
      "provided"
    ]
  },
  {
    "id": 145470671,
    "name": "SecureMail-Postman-Collections",
    "full_name": "DataMotionInc/SecureMail-Postman-Collections",
    "description": null,
    "fork": false,
    "created_at": "2018-08-20T21:07:40Z",
    "updated_at": "2019-06-06T22:24:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13525790,
    "owner_login": "DataMotionInc",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13525790?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 162195470,
    "name": "PostManCollection",
    "full_name": "lsnsuresh1/PostManCollection",
    "description": null,
    "fork": false,
    "created_at": "2018-12-17T22:05:26Z",
    "updated_at": "2018-12-18T16:43:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45952434,
    "owner_login": "lsnsuresh1",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/45952434?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 171198943,
    "name": "new-fastly-postman-collection",
    "full_name": "minus27/new-fastly-postman-collection",
    "description": null,
    "fork": false,
    "created_at": "2019-02-18T02:10:58Z",
    "updated_at": "2019-02-18T02:11:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33375833,
    "owner_login": "minus27",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33375833?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 204944658,
    "name": "plan-net-postman-collection",
    "full_name": "Jammjammjamm/plan-net-postman-collection",
    "description": null,
    "fork": false,
    "created_at": "2019-08-28T13:57:48Z",
    "updated_at": "2019-09-12T15:56:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15969967,
    "owner_login": "Jammjammjamm",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/15969967?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 45168765,
    "name": "postman2tex",
    "full_name": "kgrech/postman2tex",
    "description": "The tool to generate latex documentation based on given postman collection",
    "fork": false,
    "created_at": "2015-10-29T08:00:07Z",
    "updated_at": "2018-05-04T21:21:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9020133,
    "owner_login": "kgrech",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9020133?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "tool",
      "based",
      "document",
      "generate",
      "documentation",
      "given",
      "latex"
    ]
  },
  {
    "id": 102611196,
    "name": "Postman-electron",
    "full_name": "yogibaba2/Postman-electron",
    "description": "An electron based desktop app to manage postman collection",
    "fork": false,
    "created_at": "2017-09-06T13:22:00Z",
    "updated_at": "2017-09-06T13:22:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20608853,
    "owner_login": "yogibaba2",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20608853?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "based",
      "manage",
      "desktop",
      "electron"
    ]
  },
  {
    "id": 90466934,
    "name": "ApiDocumentor",
    "full_name": "foobar1643/ApiDocumentor",
    "description": "A tool that allows you generate documentation to the API based on Postman collection files",
    "fork": false,
    "created_at": "2017-05-06T14:02:52Z",
    "updated_at": "2017-05-06T16:49:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16771771,
    "owner_login": "foobar1643",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16771771?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "tool",
      "based",
      "document",
      "generate",
      "files",
      "documentation",
      "allows"
    ]
  },
  {
    "id": 123882206,
    "name": "url-imagecount-service",
    "full_name": "RathaKM/url-imagecount-service",
    "description": "Multithreaded & Asynchronous Spring Boot and Java 8 based REST implementation for counting the images in the given Urls",
    "fork": false,
    "created_at": "2018-03-05T07:35:23Z",
    "updated_at": "2019-04-11T16:01:26Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 1,
    "watchers": 4,
    "score": 1,
    "owner_id": 13189421,
    "owner_login": "RathaKM",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13189421?v=4",
    "pulled": 1,
    "tags": [
      "based",
      "implement",
      "read",
      "image",
      "implementation",
      "images",
      "sync",
      "given",
      "threaded"
    ]
  },
  {
    "id": 115524600,
    "name": "Restaurant-API",
    "full_name": "anmolkhanna93/Restaurant-API",
    "description": null,
    "fork": false,
    "created_at": "2017-12-27T13:38:08Z",
    "updated_at": "2018-01-15T18:21:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22453500,
    "owner_login": "anmolkhanna93",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22453500?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 168653648,
    "name": "rest-tool",
    "full_name": "ryancui-/rest-tool",
    "description": "A REST API tool like Postman or Insomnia, but based on terminal and more features.",
    "fork": false,
    "created_at": "2019-02-01T06:35:42Z",
    "updated_at": "2019-02-04T08:46:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3788103,
    "owner_login": "ryancui-",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3788103?v=4",
    "pulled": 1,
    "tags": [
      "tool",
      "based",
      "more",
      "feature",
      "features",
      "terminal"
    ]
  },
  {
    "id": 190126346,
    "name": "Restful-Explore-California-App",
    "full_name": "davidenoma/Restful-Explore-California-App",
    "description": "A restful spring boot micro service based on spring data JPA and spring rest. It allows requests to the web service that returns information about tours, tour packages and tour ratings about locations in california.",
    "fork": false,
    "created_at": "2019-06-04T04:01:22Z",
    "updated_at": "2019-06-06T14:43:04Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 24875399,
    "owner_login": "davidenoma",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/24875399?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "rest",
      "service",
      "requests",
      "based",
      "format",
      "boot",
      "restful",
      "spring",
      "package",
      "rating",
      "info",
      "infor",
      "allows",
      "information",
      "micro",
      "spring boot",
      "location",
      "turns",
      "returns",
      "packages",
      "tours"
    ]
  },
  {
    "id": 196560034,
    "name": "RESTful-API",
    "full_name": "caren1/RESTful-API",
    "description": "RESTful application based on Node.js, express.js and mongoose tested with Postman, that allows for adding, listing, deleting and editing all and single articles.  ",
    "fork": false,
    "created_at": "2019-07-12T10:29:51Z",
    "updated_at": "2019-07-23T07:04:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30754368,
    "owner_login": "caren1",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/30754368?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "based",
      "express",
      "mongo",
      " express",
      "tested",
      "list",
      "allows",
      "mongoose",
      "edit",
      "single",
      "adding",
      "article"
    ]
  },
  {
    "id": 37193468,
    "name": "restful-node",
    "full_name": "AbhieSpeaks/restful-node",
    "description": "A simple Node/Express/Mongoose based REST API for CRUD operations on a local mongodb. These can be tested in Chrome Postman",
    "fork": false,
    "created_at": "2015-06-10T11:36:28Z",
    "updated_at": "2015-06-10T11:37:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2608084,
    "owner_login": "AbhieSpeaks",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2608084?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "based",
      "mongo",
      "tested",
      "operation",
      "local",
      "operations",
      "mongod",
      "mongodb"
    ]
  },
  {
    "id": 31053659,
    "name": "restful-db-interface",
    "full_name": "skyupadhya/restful-db-interface",
    "description": "RESTFUL INVENTORY MANAGEMENT SYSTEM: Rest based inventory management system implemented using Bottle (python based) web framework. System testing was done using Postman REST client.",
    "fork": false,
    "created_at": "2015-02-20T06:27:44Z",
    "updated_at": "2016-10-02T00:42:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 11071792,
    "owner_login": "skyupadhya",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11071792?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "client",
      "based",
      "implement",
      "framework",
      "manage",
      "python",
      "system",
      "management",
      "implemented",
      "done",
      "inventory"
    ]
  },
  {
    "id": 130248612,
    "name": "vending-machine",
    "full_name": "alibergstedt/vending-machine",
    "description": "A brower-based virtual vending machine using REST API, JQuery, Postman, JSON. ",
    "fork": false,
    "created_at": "2018-04-19T17:15:57Z",
    "updated_at": "2018-04-19T17:24:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22192842,
    "owner_login": "alibergstedt",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22192842?v=4",
    "pulled": 1,
    "tags": [
      "based",
      "machine",
      "vend"
    ]
  },
  {
    "id": 217190775,
    "name": "Task-Manager-API",
    "full_name": "git-shashwat/Task-Manager-API",
    "description": "A MongoDB based Task Manager REST API, completely tested with POSTMAN. ✔",
    "fork": false,
    "created_at": "2019-10-24T02:04:41Z",
    "updated_at": "2020-01-15T20:28:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43851597,
    "owner_login": "git-shashwat",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/43851597?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "based",
      "tested",
      "complete",
      "completely"
    ]
  },
  {
    "id": 211506296,
    "name": "movie_rating_drf",
    "full_name": "Sayam753/movie_rating_drf",
    "description": "A django rest based web app for handling movie_ratings for different users.",
    "fork": false,
    "created_at": "2019-09-28T13:39:54Z",
    "updated_at": "2020-01-12T05:28:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43073325,
    "owner_login": "Sayam753",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/43073325?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "user",
      "based",
      "users",
      "rent",
      "rating",
      "web app",
      "handling",
      "django",
      "movie",
      "django rest"
    ]
  },
  {
    "id": 162643106,
    "name": "REST-employeeApp",
    "full_name": "Marqueb82/REST-employeeApp",
    "description": "RESTful web service created using spring and tested with Postman.  Uses general get and post requests for mapping and service will allow user to add, remove, view all and view specific employess based upon their ID.",
    "fork": false,
    "created_at": "2018-12-20T23:50:03Z",
    "updated_at": "2019-02-06T05:53:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33797265,
    "owner_login": "Marqueb82",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33797265?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "service",
      "requests",
      "user",
      "based",
      "tested",
      "spec",
      "view",
      "spring",
      "specific",
      "general",
      "upon"
    ]
  },
  {
    "id": 206502950,
    "name": "task-manager-API",
    "full_name": "bera5186/task-manager-API",
    "description": "A complete REST API for To-Do applications with JWT based authentication and MongoDB 🔥⚡",
    "fork": false,
    "created_at": "2019-09-05T07:32:59Z",
    "updated_at": "2019-11-20T16:42:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35560689,
    "owner_login": "bera5186",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/35560689?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "based",
      "auth",
      "authentication",
      "complete",
      "applications"
    ]
  },
  {
    "id": 155590238,
    "name": "twitter-rest-api",
    "full_name": "coderIlluminatus/twitter-rest-api",
    "description": "Twitter-like Rest API based on Node.js and tests using Chai and Mocha",
    "fork": false,
    "created_at": "2018-10-31T16:33:57Z",
    "updated_at": "2019-07-05T15:54:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16795028,
    "owner_login": "coderIlluminatus",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16795028?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "tests ",
      "based"
    ]
  },
  {
    "id": 167221773,
    "name": "rest-dev-vnc-docker",
    "full_name": "DrSnowbird/rest-dev-vnc-docker",
    "description": "Restful / SOAP API Development with common tools in VNC/noVNC-based Docker",
    "fork": false,
    "created_at": "2019-01-23T17:10:47Z",
    "updated_at": "2019-06-18T02:40:25Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 12815574,
    "owner_login": "DrSnowbird",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12815574?v=4",
    "pulled": 1,
    "tags": [
      "tool",
      "based",
      "tools",
      "common"
    ]
  },
  {
    "id": 161524341,
    "name": "php_oop_rest_api",
    "full_name": "brankozecevic/php_oop_rest_api",
    "description": "This is a REST API using PHP and OOP principles. There is also MySQL database that you can use to import on your server (myblog.sql). This REST API is based on CRUD functionality (blog posts and blog categories). For testing use Postman app environment as a REST client.",
    "fork": false,
    "created_at": "2018-12-12T17:45:29Z",
    "updated_at": "2018-12-12T17:53:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45066671,
    "owner_login": "brankozecevic",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45066671?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "server",
      "client",
      "database",
      "based",
      "environment",
      "function",
      "import",
      "functional",
      "functionality",
      "blog",
      "posts",
      "principles"
    ]
  },
  {
    "id": 205943793,
    "name": "admin-service-api",
    "full_name": "anandjat05/admin-service-api",
    "description": "Project based on Micro-services, I created REST API's, wrote Junit, testing the coverage, bug smell, vulnerability analysis on Sonarqube and static test analysis using Jococo, Jenkins, Postman and Newman deploy through the CI/CD pipeline in ECS cluster using EC2 instances, Dockerhub, Docker Container/image. ",
    "fork": false,
    "created_at": "2019-09-02T22:10:35Z",
    "updated_at": "2019-11-04T22:01:23Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 39242031,
    "owner_login": "anandjat05",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/39242031?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "service",
      "based",
      "line",
      "services",
      "stat",
      "image",
      "unit",
      "pipeline",
      "coverage",
      "instance",
      "vulnerability",
      "instances"
    ]
  },
  {
    "id": 119587689,
    "name": "SmackApplication",
    "full_name": "sonali-developer/SmackApplication",
    "description": "App Description: A clone of chat application namely Slack. It is a full fledged and professional looking ready to publish app on Appstore. It allows first time user to register by providing unique username, email and password along with selection of Avatar and Avatar's Background color; login using registered email and password, participate in channels available for chat, create new channel by adding users, perform live chat with other users of this app, can even logout, and so on.  • Built using Xcode 9, Swift 4, Cocoa pods, node.js, MongoDB, Heroku, Postman, etc. for iOS 11 based iPhones and iPads.  • Local Frameworks used includes Foundation, UIKit and other API's like Alamofire, SwiftyJSON, SocketIO, REST, SWReveal, etc.  • Demonstrated the use of Networking in iOS.  • Implemented Web Request creation in Xcode using UIKit, APIs, node.js and Mongo dB online. • Implemented Web service API hosting online using Heroku and local hosting using Postman. • Implemented user creation and real time talking using Socket Technology through SocketIO library.  • Implemented Web Service for User Registration, Authentication & Login, Channels Creation & display, fetching, sending and saving text messages and many more.  • Implemented Table Views, Collection Views & custom design of their cells using data models.  • Implemented side menu for the display of user profile and channels using SWReveal and Gradient color design code for providing gradient color background to this side menu.  • Implemented creation of two XIB's for Channels creation and profile view’s popUp.  • Implemented SegmentedControl for displaying 28 Dark and Light Avatar displays and code for generating Avatar’s background color on user registration screen.  • Implemented Input Accessory View for Text field.  • In all designed around eight View Controllers and their corresponding storyboard file for GUI design, Four Services, two custom cells, seven view files, two model files and lots of assets and so on. ",
    "fork": false,
    "created_at": "2018-01-30T20:02:55Z",
    "updated_at": "2018-06-24T20:51:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 20232921,
    "owner_login": "sonali-developer",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20232921?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "file",
      "application",
      "script",
      "service",
      "node",
      "user",
      "based",
      "code",
      "sign",
      "mail",
      "line",
      "files",
      "send",
      "local",
      "full",
      "read",
      "users",
      "more",
      "library",
      "view",
      "host",
      "email",
      "perform",
      "rating",
      "store",
      "play",
      "name",
      "working",
      "side",
      "allows",
      "long",
      "model",
      "custom",
      "message",
      "text",
      "design",
      "includes",
      "login",
      "along",
      "available",
      "clone",
      "designed",
      "fetch",
      "creation",
      "sending",
      "around",
      "ready",
      "many",
      "messages",
      "online",
      "sets",
      "display",
      "models",
      "register",
      "select",
      "generating",
      "fire",
      "playing",
      "profile",
      "adding",
      "talk",
      "hosting",
      "providing",
      "registration",
      "chat",
      "saving",
      "background",
      "namely",
      "fetching",
      "selection",
      "real time",
      "lots"
    ]
  },
  {
    "id": 215877357,
    "name": "busticketing",
    "full_name": "Mir00r/busticketing",
    "description": "Bus Reservation System_ and tried to implement an Admin portal which can be operated over browsers and a series of REST APIs to interact with the system using mobile applications or frontend applications written for the browsers. The complete systems has two important actors :  1. Admin user 2. End user  The _Admin user_ can access this application on browser (laptop or mobile/tablet, doesn't really matter as this is built using bootstrap, material design and is completely responsive) and can perform the following actions :  1. Signup 2. Login (Spring sessions) 3. Update their profile 4. Create an agency 5. Add buses to the agency 6. Add trips consisting of predefined stops and buses   The _End user_ can use their mobile application (yet to be built, however the REST APIs are ready and could be used via Postman or Swagger) to perform the following actions :  1. Signup 2. Login (and get a JWT token)  3. List all available stops 4. Search a trip between any two stops 5. Filter search results with a date option 6. Book a ticket for a given trip schedule  Admin interface and REST APIs both have their independent authentication mechanisms, the web application uses the cookie based authentication (provided by default by Spring security) and the REST API uses the JWT authentication for access. This application assumes the availability of 'MongoDB' installation on the localhost where the server will run or the use of docker-compose to boot up a mysqldb container and link the application with it within the realm of docker.  Any changes that the admin users will do on the web portal will impact the search results of the end users, there will be certain use cases which you may find missing here, I hope you will appreciate that the overall idea was to present a way to create such an application completely inside the realm of Spring Boot and not to actually building a fully functional reservation system.  The admin user interface is completely written in material design using Bootstrap v4 and is responsive to suite a variety of devices. The template engine used to render the admin views is Thymeleaf since the library is extremely extensible and its natural templating capability ensures templates can be prototyped without a back-end – which makes development very fast when compared with other popular template engines such as JSP.",
    "fork": false,
    "created_at": "2019-10-17T20:11:48Z",
    "updated_at": "2019-12-18T20:19:33Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 11166444,
    "owner_login": "Mir00r",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11166444?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "file",
      "application",
      "server",
      "user",
      "based",
      "develop",
      "implement",
      "contain",
      "sign",
      "auth",
      "build",
      "function",
      "local",
      "full",
      "read",
      "import",
      "interact",
      "built",
      "authentication",
      "front",
      "users",
      "library",
      "boot",
      "plate",
      "view",
      "host",
      "development",
      "face",
      "written",
      "very",
      "perform",
      "functional",
      "provide",
      "system",
      "access",
      "action",
      "side",
      "browser",
      "search",
      "web app",
      "mysql",
      "docker",
      "uses",
      "ever",
      "template",
      "case",
      "result",
      "interface",
      "token",
      "complete",
      "building",
      "design",
      "ully",
      "type",
      "fully",
      "install",
      "between",
      "link",
      "frontend",
      "available",
      "results",
      "applications",
      "within",
      "provided",
      "cases",
      "following",
      "mobile",
      "ready",
      "find",
      "given",
      "container",
      "popular",
      "actor",
      "suite",
      "define",
      "default",
      "templates",
      "both",
      "such",
      "engine",
      "sessions",
      "mechanism",
      "profile",
      "schedule",
      "consist",
      "render",
      "admin",
      "pact",
      "security",
      "makes",
      "systems",
      "important",
      "inside",
      "compose",
      "fully functional",
      "material",
      "series",
      "ticket",
      "responsive",
      "operate",
      "compare",
      "prototype",
      "completely",
      "idea",
      "consisting",
      "actually",
      "devices",
      "reservation",
      "predefined"
    ]
  },
  {
    "id": 167029194,
    "name": "PostmanTests",
    "full_name": "DavidChezem/PostmanTests",
    "description": "Samples of using JAVA based tests in Postman",
    "fork": false,
    "created_at": "2019-01-22T16:39:10Z",
    "updated_at": "2019-01-22T16:39:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46934107,
    "owner_login": "DavidChezem",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/46934107?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "tests ",
      "based"
    ]
  },
  {
    "id": 107155099,
    "name": "postmanTest",
    "full_name": "akshay2604/postmanTest",
    "description": null,
    "fork": false,
    "created_at": "2017-10-16T16:39:18Z",
    "updated_at": "2017-10-16T16:39:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20161828,
    "owner_login": "akshay2604",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/20161828?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 212039924,
    "name": "PostmanTest",
    "full_name": "AnastasiiaPishchela/PostmanTest",
    "description": null,
    "fork": false,
    "created_at": "2019-10-01T07:47:08Z",
    "updated_at": "2019-10-01T07:47:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 51374113,
    "owner_login": "AnastasiiaPishchela",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/51374113?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 246319798,
    "name": "PostmanTest",
    "full_name": "gcampbell391/PostmanTest",
    "description": null,
    "fork": false,
    "created_at": "2020-03-10T14:15:47Z",
    "updated_at": "2020-03-10T14:15:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44715436,
    "owner_login": "gcampbell391",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/44715436?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 137879156,
    "name": "PostmanTests",
    "full_name": "cacarott1130/PostmanTests",
    "description": null,
    "fork": false,
    "created_at": "2018-06-19T10:56:07Z",
    "updated_at": "2019-01-09T11:38:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25843991,
    "owner_login": "cacarott1130",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25843991?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 208332412,
    "name": "loadtest",
    "full_name": "cheese-hub/loadtest",
    "description": "Postman-based load test for Cheesehub",
    "fork": false,
    "created_at": "2019-09-13T19:26:39Z",
    "updated_at": "2019-09-16T17:32:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41589726,
    "owner_login": "cheese-hub",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/41589726?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "based",
      "load"
    ]
  },
  {
    "id": 182522683,
    "name": "newman-runner",
    "full_name": "Miheev/newman-runner",
    "description": "The Runner of API Integration Tests. Run Postman based collections via multiple Newman instances.",
    "fork": false,
    "created_at": "2019-04-21T11:07:09Z",
    "updated_at": "2019-04-21T13:12:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1481632,
    "owner_login": "Miheev",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1481632?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "based",
      "multiple",
      "instance",
      "instances"
    ]
  },
  {
    "id": 110409642,
    "name": "Spring-webservices",
    "full_name": "Vinodh-thimmisetty/Spring-webservices",
    "description": "Spring based Restful API to compare the performance of Hibernate and MyBatis frameworks based on response time(POSTMAN).",
    "fork": false,
    "created_at": "2017-11-12T06:09:13Z",
    "updated_at": "2018-04-11T16:19:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17508623,
    "owner_login": "Vinodh-thimmisetty",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/17508623?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "based",
      "framework",
      "response",
      "perform",
      "performance",
      "compare",
      "frameworks"
    ]
  },
  {
    "id": 177665978,
    "name": "Jedi",
    "full_name": "KennethNL/Jedi",
    "description": "This experimental project involved the conversion of a Gherkin-based input file to a JSON-based configuration of Postman with the end goal of API testing.",
    "fork": false,
    "created_at": "2019-03-25T21:16:17Z",
    "updated_at": "2019-04-10T10:01:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44347880,
    "owner_login": "KennethNL",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44347880?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "file",
      "based",
      "version",
      "config",
      "configuration",
      "experiment",
      "goal",
      "experimental"
    ]
  },
  {
    "id": 82122922,
    "name": "chatapp",
    "full_name": "Inn4ki/chatapp",
    "description": "NODE.JS WEB APPS WITH EXPRESS by Wes Higbee  In this Node.js Web Apps with Express training course, expert author Wes Higbee will teach you how to create web applications and APIs with Express. This course is designed for users that are already familiar with HTML, CSS, and JavaScript.  You will start by learning how to set up a web app, then jump into learning about the Jade view engine. From there, Wes will teach you about CRUD, including how to add the chat room view, respond with JSON, and edit chat rooms. This video tutorial also covers routers, middleware, APIs, and logging and debugging. Finally, you will learn about auth with passport, including passport user validation, protecting admin routes, and query string parameters.  Once you have completed this computer based training course, you will have learned how to create web applications and APIs with Express. Working files are included, allowing you to follow along with the author throughout the lessons.  About the Publisher  Presented in stunning HD quality, the Infinite Skills range of video based training provides a clear and concise way to learn computer applications and programming languages at your own speed. Delivered to your Desktop, iPad ...  More about Infinite Skills Table of Contents Setting Up A Web App What You Will Learn 00:03:28 About The Author 00:01:23 Project Setup 00:02:14 Spinning Up Our Server From Scratch 00:05:11 Serving Index.HTML 00:04:32 Serving Bootstrap Assets 00:05:52 Styling Our Site 00:01:16 How To Access Your Working Files 00:01:15 The Jade View Engine Why View Engines? 00:02:10 The Jade View Engine 00:06:32 HTML Tags In Jade 00:02:16 Attributes Classes And Ids In Jade 00:02:06 Serving Up Jade Views 00:04:24 HTML Reuse In Jade 00:06:26 Code In Jade Views 00:02:37 Passing Data To View Rendering 00:02:01 Setting A Default View Engine 00:00:37 String Interpolation In Jade 00:02:30 Generating Tables In Jade 00:03:50 Tabs And Spaces Oh My 00:01:21 Demystifying Jade 00:02:21 Crud Setting The Stage 00:01:01 Add Chat Room View 00:04:21 Post Chat Room Form 00:06:56 Parsing Form Data From The Request Body 00:04:22 Responding With JSON 00:03:20 Admin Chat Rooms Workflow 00:02:21 Named Route Parameters To Delete Rooms 00:05:59 Edit Chat Rooms 00:06:01 Edit Chat Rooms Part - 2 00:02:00 Responding With 404 Not Found 00:01:39 Wrap Up 00:01:23 Routers Extracting An Admin Module 00:04:47 Modular Admin Router 00:04:00 Pluggable Admin Mount Path 00:03:15 Stumbling Block - Relative Redirects 00:02:49 Chaining Routes 00:01:57 Middleware Understanding Routing And Middleware 00:05:45 Adding Custom Logging Middleware 00:02:15 Understanding Next() 00:01:31 Middleware To Fetch Data 00:07:24 Order Matters.Av 00:01:09 Scoping Middleware 00:03:53 What To Do With Errors 00:03:01 Last Thoughts 00:03:19 APIs A Client Side Chat App 00:01:55 Setup The Client Side Chat App 00:03:01 Creating An API 00:05:42 Modules Are Singletons 00:01:50 Postman To Test API 00:01:24 API Get Room Messages 00:05:49 Posting To An API 00:03:37 API To Delete Messages 00:03:15 Parsing JSON In The Request Body 00:03:25 Logging And Debugging Express-Debug 00:03:03 Logging With Morgan 00:01:45 File Access Log With Morgan 00:01:28 Built-In Express Debugging 00:01:57 When Things Go Wrong Throwing An Error In A Route Handler 00:01:39 Errors In Production 00:01:53 Custom Error Handlers 00:02:40 Browser Hangs 00:00:58 Hanging Async Request Handlers 00:01:17 Errors In Callbacks 00:03:32 Don't Swallow Callback Errors 00:02:46 Auth With Passport Auth With Passport 00:01:49 Login Form 00:06:31 Passport User Validation 00:05:20 Passport Session Serialization 00:01:49 Logging In 00:06:23 Logout 00:03:52 Authorizing Access To Block Anonymous Users 00:03:40 Protecting Admin Routes 00:02:04 Using User Information 00:02:48 Bypassing Login In Development 00:03:11 Query String Parameters 00:02:34 Auth Cookies 00:02:17 Last Thoughts 00:05:45  Publisher: Infinite Skills Release Date: March 2016 ISBN: 9781491958933 Running time: 4:09:49 Topic: Node.js",
    "fork": false,
    "created_at": "2017-02-16T00:56:43Z",
    "updated_at": "2019-11-16T05:23:17Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 5,
    "watchers": 4,
    "score": 1,
    "owner_id": 9013039,
    "owner_login": "Inn4ki",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9013039?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "file",
      "application",
      "user",
      "based",
      "sign",
      "format",
      "auth",
      "files",
      "route",
      "routes",
      "star",
      "read",
      "users",
      "learn",
      "view",
      "course",
      "start",
      "rating",
      "provide",
      "learning",
      "program",
      "tutorial",
      "web app",
      "long",
      "lang",
      "complete",
      "design",
      "edit",
      "including",
      "along",
      "applications",
      "included",
      "validation",
      "designed",
      "sync",
      "parameter",
      "middleware",
      "ready",
      "debug",
      "query",
      "sets",
      "provides",
      "training",
      "router",
      "engine",
      "language",
      "covers",
      "passport",
      "lesson",
      "admin",
      "programming",
      "familiar",
      "logging",
      "passing",
      "debugging",
      "video",
      "quality",
      "chat",
      "protecting",
      "completed",
      "speed",
      "learned",
      "computer"
    ]
  },
  {
    "id": 92730231,
    "name": "performance-load-test",
    "full_name": "mohamed-abdo/performance-load-test",
    "description": "Performance parallel load test ecosystem based on running postman collections in parallel in addition to capture test performance counters, and unit tests results; Exporting all results to (local) data store (sql express).",
    "fork": false,
    "created_at": "2017-05-29T10:38:02Z",
    "updated_at": "2017-07-03T10:48:18Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 92772,
    "owner_login": "mohamed-abdo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/92772?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "collections",
      "data",
      "postman collection",
      "form",
      "tests",
      "tests ",
      "based",
      "express",
      " express",
      "postman collections",
      "load",
      "local",
      "running",
      "perform",
      "system",
      "store",
      "result",
      "unit",
      "results",
      "parallel",
      "performance",
      "ecosystem"
    ]
  },
  {
    "id": 184118378,
    "name": "command-line-physician",
    "full_name": "command-line-physician/command-line-physician",
    "description": "Our intention with this app is to let users find natural herbal based remedies for their ailments. Our app allows users to browse our specially curated herb database by name and latin name. Command-Line Physician also allows users to locate the nearest store where they can find their unique remedy, or a local resident who has the herb available to share. Tech stack: Command-line Physician is a RESTful api that utilizes Node, Express, Jest, end-to-end and unit testing. Our testing was carried out by Compass, Robo 3T, and Postman.",
    "fork": false,
    "created_at": "2019-04-29T17:57:06Z",
    "updated_at": "2019-05-29T23:32:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 4,
    "watchers": 0,
    "score": 1,
    "owner_id": 50116559,
    "owner_login": "command-line-physician",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/50116559?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "rest",
      "database",
      "user",
      "based",
      "line",
      "util",
      "spec",
      "local",
      "users",
      "store",
      "name",
      "side",
      "allows",
      "stack",
      "unit",
      "available",
      "find",
      "utilizes",
      "intention"
    ]
  },
  {
    "id": 227783010,
    "name": "task-manager-api",
    "full_name": "Shaykoo/task-manager-api",
    "description": "This app is purely based on NodeJS. This app is a task manager app which stores all the users and their tasks in MongoDB database with required authentication of the user to create, read, update and delete the users and their own particular tasks plus when a user gets created or deleted the app sends them email to notify. Use the website address to test it on postman. Get authenticated before using the app on postman.",
    "fork": false,
    "created_at": "2019-12-13T07:35:57Z",
    "updated_at": "2020-01-13T15:06:20Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 34743587,
    "owner_login": "Shaykoo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/34743587?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "data",
      "database",
      "user",
      "based",
      "mail",
      "auth",
      "manage",
      "send",
      "site",
      "read",
      "authentication",
      "users",
      "update",
      "delete",
      "email",
      "website",
      "store",
      "task",
      "require",
      "tasks",
      "authenticate",
      "gets",
      "sends",
      "required",
      "pure",
      "address",
      "authenticated",
      "manager",
      "notify",
      "purely"
    ]
  },
  {
    "id": 210642468,
    "name": "literate-train",
    "full_name": "elvisoliveira/literate-train",
    "description": "A programming challange in Java SpringBoot. Restful service that implements a cache based user manager.",
    "fork": false,
    "created_at": "2019-09-24T15:56:36Z",
    "updated_at": "2019-09-24T21:10:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 314738,
    "owner_login": "elvisoliveira",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/314738?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "user",
      "based",
      "implement",
      "manage",
      "program",
      "lang",
      "programming",
      "implements",
      "manager",
      "challange"
    ]
  },
  {
    "id": 117283277,
    "name": "tagger-laravel",
    "full_name": "bryannbarbosa/tagger-laravel",
    "description": "This library generates Postman Routes based on Laravel Routes",
    "fork": false,
    "created_at": "2018-01-12T20:08:20Z",
    "updated_at": "2018-01-12T20:09:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19507090,
    "owner_login": "bryannbarbosa",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/19507090?v=4",
    "pulled": 1,
    "tags": [
      "based",
      "generate",
      "library",
      "generates"
    ]
  },
  {
    "id": 207091776,
    "name": "practice-3",
    "full_name": "martynow173/practice-3",
    "description": "Just backend requests handling, use postman. Additional functionality and code refactoring: user ratings, comments, sorting based on them, many-to-many relationship between categories and products. Role system - https://github.com/spatie/laravel-permission",
    "fork": false,
    "created_at": "2019-09-08T09:47:16Z",
    "updated_at": "2019-09-16T15:06:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25533512,
    "owner_login": "martynow173",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25533512?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "requests",
      "http",
      "user",
      "based",
      "code",
      "https",
      "function",
      "functional",
      "backend",
      "rating",
      "system",
      "github",
      "laravel",
      "product",
      "between",
      "functionality",
      "handling",
      "many",
      "actor",
      "products",
      "sort",
      "comments",
      "relationship"
    ]
  },
  {
    "id": 155592875,
    "name": "Course-API",
    "full_name": "XenuxX/Course-API",
    "description": "This project is based on creating a course api which facilitates adding and removing a list of courses along with topics under respective courses. Technologies used are: Spring Boot, Spring RESTful webservices, Apache Derby db and Postman integration tool.",
    "fork": false,
    "created_at": "2018-10-31T16:52:42Z",
    "updated_at": "2019-01-12T06:05:13Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 9895034,
    "owner_login": "XenuxX",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/9895034?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "tool",
      "based",
      "spec",
      "integration",
      "services",
      "list",
      "creating",
      "course",
      "long",
      "under",
      "along",
      "adding",
      "facilitate",
      "webservice",
      "webservices",
      "facilitates"
    ]
  },
  {
    "id": 84827260,
    "name": "NodeJs",
    "full_name": "leandro-zeballos/NodeJs",
    "description": "Express based middleware returning data from a third-party API",
    "fork": false,
    "created_at": "2017-03-13T13:04:44Z",
    "updated_at": "2018-06-02T11:21:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8493564,
    "owner_login": "leandro-zeballos",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8493564?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "based",
      "middleware",
      "party",
      "third",
      "returning"
    ]
  },
  {
    "id": 181634471,
    "name": "node-todo-api",
    "full_name": "ai-zubair/node-todo-api",
    "description": "An express-based API for a per-user todo-app experience.",
    "fork": false,
    "created_at": "2019-04-16T07:08:12Z",
    "updated_at": "2019-05-02T18:38:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28255043,
    "owner_login": "ai-zubair",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/28255043?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "based",
      "express",
      " express",
      "todo"
    ]
  },
  {
    "id": 221553327,
    "name": "Social-network",
    "full_name": "VPihalov/Social-network",
    "description": "It is a social network app for developers that includes authentication, profiles, forum posts. App is based on MERN stack (MongoDB, Mongoose, React, Redux, Nodejs, Express). Main implementations are React Hooks, Redux, Postman, Bcrypt, Heroku, Git flow",
    "fork": false,
    "created_at": "2019-11-13T21:17:21Z",
    "updated_at": "2020-03-09T14:49:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41261016,
    "owner_login": "VPihalov",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/41261016?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "based",
      "develop",
      "implement",
      "auth",
      "files",
      "authentication",
      "implementation",
      "developer",
      "stack",
      "developers",
      "includes",
      "network",
      "posts",
      "social",
      "profile",
      "forum",
      "profiles",
      "implementations"
    ]
  },
  {
    "id": 219241674,
    "name": "redisproject",
    "full_name": "byekobe/redisproject",
    "description": "For beginners,this project based on SpringBoot,which redis cache middleware been deployed on linux and postman,redis desktop some tools also been used.",
    "fork": false,
    "created_at": "2019-11-03T02:35:40Z",
    "updated_at": "2019-11-03T09:27:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31009579,
    "owner_login": "byekobe",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31009579?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "tool",
      "based",
      "tools",
      "deployed",
      "middleware",
      "been",
      "desktop",
      "redis"
    ]
  },
  {
    "id": 191927923,
    "name": "Jopper",
    "full_name": "probdo/Jopper",
    "description": "Postman and Java TestNG based Data Driven API Testing",
    "fork": false,
    "created_at": "2019-06-14T10:57:01Z",
    "updated_at": "2019-06-14T10:57:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49477372,
    "owner_login": "probdo",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/49477372?v=4",
    "pulled": 1,
    "tags": [
      "based"
    ]
  },
  {
    "id": 132593810,
    "name": "microblog",
    "full_name": "shwetaimanage/microblog",
    "description": "This project creates a web based \"Server Side\" mircoblog using Python and Flask. Request can be made through Postman.",
    "fork": false,
    "created_at": "2018-05-08T10:36:05Z",
    "updated_at": "2018-05-08T10:40:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23253645,
    "owner_login": "shwetaimanage",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/23253645?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "based",
      "blog",
      "creates"
    ]
  },
  {
    "id": 149984325,
    "name": "ShopifyTrialStore",
    "full_name": "ysodiqakanni/ShopifyTrialStore",
    "description": "This repository is based on a challenge by shopify to create an API for performing some basic CRUDs in a defined e-commerce style. Development still in progress. For review purpose, check the ProductsController, it's the most up to date. Language: C# ASP.net web API with 3 layer architecture Technologies: Entity Framework, Dependency Injection, SQL server, NUnit, Postman",
    "fork": false,
    "created_at": "2018-09-23T12:54:41Z",
    "updated_at": "2018-10-12T16:07:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22787351,
    "owner_login": "ysodiqakanni",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/22787351?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "repo",
      "form",
      "repos",
      "repository",
      "server",
      "based",
      "view",
      "perform",
      "shop",
      "check",
      "review",
      "style",
      "define",
      "commerce",
      "progress",
      "still",
      "performing",
      "challenge",
      "shopify"
    ]
  },
  {
    "id": 92985083,
    "name": "docker-newman-awscli",
    "full_name": "kt-git/docker-newman-awscli",
    "description": "A docker container based upon the latest official postman newman, with the awscli included as well.",
    "fork": false,
    "created_at": "2017-05-31T20:17:33Z",
    "updated_at": "2017-05-31T20:17:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 28463279,
    "owner_login": "kt-git",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28463279?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "based",
      "newman",
      "contain",
      "docker",
      "included",
      "official",
      "container",
      "latest",
      "upon",
      "postman newman",
      "awscli"
    ]
  }
]