[
  {
    "id": 1354660,
    "name": "postman-server",
    "full_name": "obeattie/postman-server",
    "description": "The Postman node.js server.",
    "fork": false,
    "created_at": "2011-02-11T11:06:22Z",
    "updated_at": "2016-04-18T07:51:33Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 5,
    "watchers": 6,
    "score": 1,
    "owner_id": 5988,
    "owner_login": "obeattie",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5988?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "node"
    ]
  },
  {
    "id": 222658692,
    "name": "newman-parallel-run",
    "full_name": "m4nu56/newman-parallel-run",
    "description": "Simple node function to run multiple postman collection in parallel ",
    "fork": false,
    "created_at": "2019-11-19T09:30:32Z",
    "updated_at": "2020-03-18T09:34:05Z",
    "stargazers_count": 9,
    "watchers_count": 9,
    "forks": 6,
    "watchers": 9,
    "score": 1,
    "owner_id": 330472,
    "owner_login": "m4nu56",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/330472?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "node",
      "function",
      "multiple",
      "parallel"
    ]
  },
  {
    "user": "itsmebhavin",
    "repo": "nodejs-express-typescript-boilerplate",
    "pulled": "User",
    "id": 68237084,
    "name": "nodejs-express-typescript-boilerplate",
    "full_name": "itsmebhavin/nodejs-express-typescript-boilerplate",
    "description": "Sample boilerplate project for node.js, express using TypeScript and Gulp.",
    "fork": false,
    "created_at": "2016-09-14T19:37:02Z",
    "updated_at": "2019-04-10T17:33:12Z",
    "forks": 8,
    "open_issues": 0,
    "watchers": 8,
    "network_count": 8,
    "subscribers_count": 2,
    "owner_id": 7399519,
    "owner_login": "itsmebhavin",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/7399519?v=4",
    "owner_type": "User",
    "tags": [
      "node",
      "express",
      " express",
      "plate",
      "boiler",
      "boilerplate"
    ]
  },
  {
    "user": "benmangold",
    "repo": "ffmpeg-service",
    "pulled": "User",
    "id": 89741892,
    "name": "ffmpeg-service",
    "full_name": "benmangold/ffmpeg-service",
    "description": "a dockerized node.js service for encoding with ffmpeg",
    "fork": false,
    "created_at": "2017-04-28T20:20:11Z",
    "updated_at": "2020-01-20T02:20:15Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 5,
    "network_count": 2,
    "subscribers_count": 1,
    "owner_id": 1518509,
    "owner_login": "benmangold",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1518509?v=4",
    "owner_type": "User",
    "tags": [
      "service",
      "node",
      "docker",
      "coding",
      "dockerized",
      "encoding"
    ]
  },
  {
    "id": 89741892,
    "name": "ffmpeg-service",
    "full_name": "benmangold/ffmpeg-service",
    "description": "a dockerized node.js service for encoding with ffmpeg",
    "fork": false,
    "created_at": "2017-04-28T20:20:11Z",
    "updated_at": "2020-01-20T02:20:15Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 2,
    "watchers": 5,
    "score": 1,
    "owner_id": 1518509,
    "owner_login": "benmangold",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1518509?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "node",
      "docker",
      "coding",
      "dockerized",
      "encoding"
    ]
  },
  {
    "id": 19024842,
    "name": "postman",
    "full_name": "jakeauyeung/postman",
    "description": "帮我买海外OM前端推送到PROD程序，基于express,nodejs",
    "fork": false,
    "created_at": "2014-04-22T09:55:13Z",
    "updated_at": "2014-04-22T10:00:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2888405,
    "owner_login": "jakeauyeung",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/2888405?v=4",
    "tags": [
      "node",
      "express",
      "nodejs"
    ]
  },
  {
    "id": 6843653,
    "name": "postman",
    "full_name": "parallel588/postman",
    "description": null,
    "fork": false,
    "created_at": "2012-11-24T19:47:48Z",
    "updated_at": "2013-01-13T07:39:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7176,
    "owner_login": "parallel588",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/7176?v=4",
    "tags": []
  },
  {
    "id": 14066905,
    "name": "postman",
    "full_name": "sammy/postman",
    "description": null,
    "fork": false,
    "created_at": "2013-11-02T13:53:02Z",
    "updated_at": "2013-11-25T22:17:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37764,
    "owner_login": "sammy",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/37764?v=4",
    "tags": []
  },
  {
    "id": 66256133,
    "name": "postman",
    "full_name": "danieljph/postman",
    "description": null,
    "fork": false,
    "created_at": "2016-08-22T08:57:27Z",
    "updated_at": "2016-08-22T08:57:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11795584,
    "owner_login": "danieljph",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/11795584?v=4",
    "tags": []
  },
  {
    "id": 110517023,
    "name": "postman",
    "full_name": "brodasamozlo/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-11-13T07:53:59Z",
    "updated_at": "2017-11-13T07:53:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2796289,
    "owner_login": "brodasamozlo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/2796289?v=4",
    "tags": []
  },
  {
    "id": 169836852,
    "name": "nodejs-encryption-api-example",
    "full_name": "timoa/nodejs-encryption-api-example",
    "description": "Example of encrypting/decrypting data thru an API using node.js",
    "fork": false,
    "created_at": "2019-02-09T05:54:09Z",
    "updated_at": "2020-03-22T16:02:16Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 1432989,
    "owner_login": "timoa",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1432989?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "node",
      "decrypt",
      "thru"
    ]
  },
  {
    "id": 62928205,
    "name": "PostMan-ShortCut-NodeApp",
    "full_name": "tanjagadde/PostMan-ShortCut-NodeApp",
    "description": null,
    "fork": false,
    "created_at": "2016-07-09T02:28:43Z",
    "updated_at": "2016-07-09T02:29:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3653118,
    "owner_login": "tanjagadde",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/3653118?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 24640440,
    "name": "shopping-list",
    "full_name": "artariq/shopping-list",
    "description": "A simple RESTful shopping list in node. Use with Postman",
    "fork": false,
    "created_at": "2014-09-30T14:04:41Z",
    "updated_at": "2014-09-30T14:06:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3467726,
    "owner_login": "artariq",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3467726?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "list",
      "shop",
      "shopping"
    ]
  },
  {
    "id": 166621102,
    "name": "NodeJS",
    "full_name": "zhiji95/NodeJS",
    "description": "And node js server with instruction of postman and npm",
    "fork": false,
    "created_at": "2019-01-20T03:59:13Z",
    "updated_at": "2019-01-20T04:21:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33732707,
    "owner_login": "zhiji95",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33732707?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "node",
      "struct",
      "instruction"
    ]
  },
  {
    "id": 235356059,
    "name": "nodejs-mongo-authentication",
    "full_name": "ambuyo/nodejs-mongo-authentication",
    "description": "validating mongodb data schema using nodejs and postman ",
    "fork": false,
    "created_at": "2020-01-21T14:03:24Z",
    "updated_at": "2020-01-21T14:41:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37287294,
    "owner_login": "ambuyo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/37287294?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "node",
      "mongo",
      "mongod",
      "mongodb",
      "nodejs",
      "schema",
      "validating"
    ]
  },
  {
    "id": 224428008,
    "name": "todo-api",
    "full_name": "AJEdelmann/todo-api",
    "description": "RESTfull API using node, express, mongoDB and postman",
    "fork": false,
    "created_at": "2019-11-27T12:39:24Z",
    "updated_at": "2020-01-21T11:54:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47785661,
    "owner_login": "AJEdelmann",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/47785661?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "node",
      "express",
      "mongo",
      " express",
      "full"
    ]
  },
  {
    "id": 210683999,
    "name": "node-express-movies",
    "full_name": "cristina-ferreira/node-express-movies",
    "description": "wcs-node-02 node-express sq, mysql, postman",
    "fork": false,
    "created_at": "2019-09-24T19:42:13Z",
    "updated_at": "2019-10-03T16:28:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48142451,
    "owner_login": "cristina-ferreira",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/48142451?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "node",
      "express",
      "mysql"
    ]
  },
  {
    "id": 139436027,
    "name": "mongo-node-api",
    "full_name": "sweb1433/mongo-node-api",
    "description": "Simple shop product api using node js, mongoDb and postman",
    "fork": false,
    "created_at": "2018-07-02T11:46:13Z",
    "updated_at": "2018-07-10T07:03:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29112907,
    "owner_login": "sweb1433",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/29112907?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "node",
      "mongo",
      "shop",
      "product"
    ]
  },
  {
    "id": 237898578,
    "name": "node-restapi-express-automobiles",
    "full_name": "CaptainStorm21/node-restapi-express-automobiles",
    "description": "creating restful API from scratch using node/mongodb/express postman",
    "fork": false,
    "created_at": "2020-02-03T06:19:04Z",
    "updated_at": "2020-02-03T09:06:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19989141,
    "owner_login": "CaptainStorm21",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19989141?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "rest",
      "node",
      "express",
      "mongo",
      "restful",
      "creating",
      "mongod",
      "mongodb",
      "scratch"
    ]
  },
  {
    "id": 152033451,
    "name": "RESTful-api-nodejs",
    "full_name": "Thom9521/RESTful-api-nodejs",
    "description": "RESTful api lavet med nodejs og testet med postman",
    "fork": false,
    "created_at": "2018-10-08T07:04:45Z",
    "updated_at": "2018-10-08T07:08:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31951107,
    "owner_login": "Thom9521",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/31951107?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "node",
      "nodejs",
      "lavet"
    ]
  },
  {
    "id": 210683577,
    "name": "node-express-employees",
    "full_name": "cristina-ferreira/node-express-employees",
    "description": "wcs-node-02 node-express sq, mysql, postman",
    "fork": false,
    "created_at": "2019-09-24T19:39:52Z",
    "updated_at": "2019-10-03T16:27:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48142451,
    "owner_login": "cristina-ferreira",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/48142451?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "node",
      "express",
      "mysql"
    ]
  },
  {
    "id": 35385485,
    "name": "jenkman",
    "full_name": "timemachine3030/jenkman",
    "description": "Jenkins CI testing of node API servers with Postman/Newman",
    "fork": false,
    "created_at": "2015-05-10T19:48:48Z",
    "updated_at": "2018-02-08T16:20:09Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 338063,
    "owner_login": "timemachine3030",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/338063?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "server",
      "node",
      "servers"
    ]
  },
  {
    "id": 64861848,
    "name": "todo-api",
    "full_name": "Finble/todo-api",
    "description": "node.js app + express server.js + heroku (using postman)",
    "fork": false,
    "created_at": "2016-08-03T16:34:23Z",
    "updated_at": "2016-08-03T16:34:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7348626,
    "owner_login": "Finble",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7348626?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "node",
      "express",
      " express",
      "heroku"
    ]
  },
  {
    "id": 177117905,
    "name": "nodejs_babeljs_expressjs_mongodb_passport_tests_tdd_postman",
    "full_name": "thangpdtt/nodejs_babeljs_expressjs_mongodb_passport_tests_tdd_postman",
    "description": "The simple app that used express framework with babel compiler run on nodejs. This used passport to authenticate and MongoDb to store data.",
    "fork": false,
    "created_at": "2019-03-22T10:11:14Z",
    "updated_at": "2019-03-23T08:29:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7430648,
    "owner_login": "thangpdtt",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7430648?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "node",
      "express",
      " express",
      "auth",
      "framework",
      "store",
      "nodejs",
      "authenticate",
      "passport"
    ]
  },
  {
    "id": 86320839,
    "name": "node.js-and-mysql-login-and-registration-using-crome-postman-",
    "full_name": "esm2017tarun/node.js-and-mysql-login-and-registration-using-crome-postman-",
    "description": null,
    "fork": false,
    "created_at": "2017-03-27T10:11:15Z",
    "updated_at": "2020-02-05T12:56:48Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 25475892,
    "owner_login": "esm2017tarun",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25475892?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 223330887,
    "name": "postbuddy",
    "full_name": "bohancen/postbuddy",
    "description": "仿照postman，api接口调试工具，使用react+nodejs",
    "fork": false,
    "created_at": "2019-11-22T05:35:10Z",
    "updated_at": "2019-12-10T10:17:17Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 20083341,
    "owner_login": "bohancen",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/20083341?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "nodejs",
      "react"
    ]
  },
  {
    "id": 121707712,
    "name": "sample-node-mongo-api",
    "full_name": "isunil/sample-node-mongo-api",
    "description": "sample node api with express and mongodb",
    "fork": false,
    "created_at": "2018-02-16T02:28:36Z",
    "updated_at": "2018-02-26T03:49:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5199367,
    "owner_login": "isunil",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5199367?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "express",
      "mongo",
      " express",
      "sample",
      "mongod",
      "mongodb"
    ]
  },
  {
    "id": 96758910,
    "name": "micro-recipe",
    "full_name": "enahomurphy/micro-recipe",
    "description": "test project for developing highly reusable node/mongo services recipe service ",
    "fork": false,
    "created_at": "2017-07-10T09:17:26Z",
    "updated_at": "2019-03-26T20:39:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13594802,
    "owner_login": "enahomurphy",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/13594802?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "service",
      "node",
      "develop",
      "mongo",
      "services",
      "usable",
      "developing",
      "reusable",
      "recipe",
      "highly"
    ]
  },
  {
    "id": 157136841,
    "name": "node-api",
    "full_name": "mfernand0/node-api",
    "description": "BackEnd nodeJS crud-api [postman | nodemon | docker | mongoose | robo3T | cors | mongoose-paginate]",
    "fork": false,
    "created_at": "2018-11-12T00:54:56Z",
    "updated_at": "2018-11-12T00:57:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8040431,
    "owner_login": "mfernand0",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/8040431?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "mongo",
      "demo",
      "docker",
      "crud",
      "mongoose",
      "robo",
      "nodemon"
    ]
  },
  {
    "id": 51945769,
    "name": "vocabRestful",
    "full_name": "kassergey/vocabRestful",
    "description": "vocabulary without words, restful app, MEAN(mongodb, express.js, angular.js, node.js), curl, postman",
    "fork": false,
    "created_at": "2016-02-17T18:37:04Z",
    "updated_at": "2016-02-17T19:24:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 13509099,
    "owner_login": "kassergey",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/13509099?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "rest",
      "node",
      "express",
      "mongo",
      " express",
      "restful",
      "mongod",
      "mongodb",
      "curl",
      "angular",
      "words",
      "vocabulary"
    ]
  },
  {
    "id": 146703715,
    "name": "postman",
    "full_name": "lykmapipo/postman",
    "description": "collective notifications for nodejs(WIP)",
    "fork": false,
    "created_at": "2018-08-30T06:11:03Z",
    "updated_at": "2020-03-30T08:25:21Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 1,
    "watchers": 4,
    "score": 1,
    "owner_id": 1610857,
    "owner_login": "lykmapipo",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1610857?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "node",
      "nodejs",
      "notification",
      "collective"
    ]
  },
  {
    "id": 249937798,
    "name": "postmanlogin",
    "full_name": "oscarceko/postmanlogin",
    "description": null,
    "fork": false,
    "created_at": "2020-03-25T09:34:16Z",
    "updated_at": "2020-03-25T09:56:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 62601481,
    "owner_login": "oscarceko",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/62601481?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 92242584,
    "name": "postman",
    "full_name": "Shangri-GitHub/postman",
    "description": "node开发postman",
    "fork": false,
    "created_at": "2017-05-24T02:47:47Z",
    "updated_at": "2017-05-24T05:59:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20767809,
    "owner_login": "Shangri-GitHub",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/20767809?v=4",
    "pulled": 1,
    "tags": [
      "node"
    ]
  },
  {
    "id": 53036994,
    "name": "postmanApi",
    "full_name": "anzizhao/postmanApi",
    "description": "node es6    ",
    "fork": false,
    "created_at": "2016-03-03T09:15:11Z",
    "updated_at": "2016-03-03T09:15:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3821255,
    "owner_login": "anzizhao",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3821255?v=4",
    "pulled": 1,
    "tags": [
      "node"
    ]
  },
  {
    "id": 5287247,
    "name": "postman",
    "full_name": "enyo/postman",
    "description": "A poster written in node.",
    "fork": false,
    "created_at": "2012-08-03T15:56:11Z",
    "updated_at": "2019-12-03T10:12:39Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 133277,
    "owner_login": "enyo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/133277?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "written",
      "poster"
    ]
  },
  {
    "id": 238633638,
    "name": "postman",
    "full_name": "poojagra/postman",
    "description": null,
    "fork": false,
    "created_at": "2020-02-06T07:42:53Z",
    "updated_at": "2020-02-06T07:43:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45695938,
    "owner_login": "poojagra",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/45695938?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 198266332,
    "name": "node",
    "full_name": "sumitcodename47/node",
    "description": "node API Postman",
    "fork": false,
    "created_at": "2019-07-22T16:51:01Z",
    "updated_at": "2019-07-22T17:04:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 17869794,
    "owner_login": "sumitcodename47",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17869794?v=4",
    "pulled": 1,
    "tags": [
      "node"
    ]
  },
  {
    "id": 249818745,
    "name": "nodejs-test",
    "full_name": "amathm/nodejs-test",
    "description": "testing postman and nodejs",
    "fork": false,
    "created_at": "2020-03-24T21:10:45Z",
    "updated_at": "2020-03-24T21:13:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16358458,
    "owner_login": "amathm",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16358458?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "testing",
      "node",
      "nodejs"
    ]
  },
  {
    "id": 62787777,
    "name": "postman-ci",
    "full_name": "jannemann/postman-ci",
    "description": "node.js cli tools to integrate postman and newman with your favorite CI",
    "fork": false,
    "created_at": "2016-07-07T08:09:47Z",
    "updated_at": "2016-07-07T08:19:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 7280696,
    "owner_login": "jannemann",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7280696?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "tool",
      "node",
      "newman",
      "tools",
      "integrate",
      "favorite"
    ]
  },
  {
    "id": 66574448,
    "name": "Postman-Server",
    "full_name": "TomasKostadinov/Postman-Server",
    "description": "A express.js & node.js based Android Notification sync system",
    "fork": false,
    "created_at": "2016-08-25T16:22:03Z",
    "updated_at": "2016-08-25T16:22:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11008743,
    "owner_login": "TomasKostadinov",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11008743?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "based",
      "express",
      " express",
      "system",
      "sync"
    ]
  },
  {
    "id": 215383391,
    "name": "PostManager",
    "full_name": "FredDsR/PostManager",
    "description": "A simple CRUD for learning node.js",
    "fork": false,
    "created_at": "2019-10-15T19:46:17Z",
    "updated_at": "2019-10-25T16:17:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41489925,
    "owner_login": "FredDsR",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/41489925?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "learn",
      "learning"
    ]
  },
  {
    "id": 212541007,
    "name": "postman-tests",
    "full_name": "elias551/postman-tests",
    "description": null,
    "fork": false,
    "created_at": "2019-10-03T09:23:02Z",
    "updated_at": "2019-10-03T09:31:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1853013,
    "owner_login": "elias551",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1853013?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 242499207,
    "name": "expressArena",
    "full_name": "connorhw/expressArena",
    "description": "node, express, and postman practice",
    "fork": false,
    "created_at": "2020-02-23T10:45:55Z",
    "updated_at": "2020-02-24T07:20:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22334563,
    "owner_login": "connorhw",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/22334563?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "node",
      "express",
      " express",
      "practice"
    ]
  },
  {
    "id": 94080944,
    "name": "mongo-queries",
    "full_name": "kumarya/mongo-queries",
    "description": "express-node-mongoose-postman-queries",
    "fork": false,
    "created_at": "2017-06-12T09:51:22Z",
    "updated_at": "2017-06-12T09:51:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26035032,
    "owner_login": "kumarya",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26035032?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "express",
      "mongo",
      "mongoose",
      "queries"
    ]
  },
  {
    "id": 200129951,
    "name": "postman-external-require",
    "full_name": "matt-ball/postman-external-require",
    "description": "Import node packages inside Postman.",
    "fork": false,
    "created_at": "2019-08-01T23:08:34Z",
    "updated_at": "2019-08-20T15:09:58Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 8490181,
    "owner_login": "matt-ball",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8490181?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "package",
      "side",
      "packages",
      "inside"
    ]
  },
  {
    "id": 51247641,
    "name": "postman-task",
    "full_name": "avirati/postman-task",
    "description": null,
    "fork": false,
    "created_at": "2016-02-07T12:58:21Z",
    "updated_at": "2016-02-07T12:58:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1936119,
    "owner_login": "avirati",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1936119?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 108829831,
    "name": "Blog-postman",
    "full_name": "RahulWala/Blog-postman",
    "description": null,
    "fork": false,
    "created_at": "2017-10-30T09:35:14Z",
    "updated_at": "2017-10-30T10:32:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31235531,
    "owner_login": "RahulWala",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31235531?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 180650589,
    "name": "postman_collection_monitoring",
    "full_name": "shruti-14/postman_collection_monitoring",
    "description": "Monitoring postman collection using newman node and storing data in elastic serach",
    "fork": false,
    "created_at": "2019-04-10T19:32:02Z",
    "updated_at": "2019-04-10T19:48:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29634367,
    "owner_login": "shruti-14",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29634367?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "data",
      "postman collection",
      "node",
      "newman",
      "storing",
      "elastic"
    ]
  },
  {
    "id": 217895058,
    "name": "ThumbprintPostmanTool",
    "full_name": "czarecoo/ThumbprintPostmanTool",
    "description": null,
    "fork": false,
    "created_at": "2019-10-27T18:04:42Z",
    "updated_at": "2019-10-27T18:06:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33862699,
    "owner_login": "czarecoo",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/33862699?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 193944218,
    "name": "Postman-Integracion-nodejs-express",
    "full_name": "Ciprianoe/Postman-Integracion-nodejs-express",
    "description": "Postman-Integracion-nodejs-express prueba y evaluacion de SYNERGY ",
    "fork": false,
    "created_at": "2019-06-26T16:50:06Z",
    "updated_at": "2019-06-26T16:51:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34544076,
    "owner_login": "Ciprianoe",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/34544076?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "express",
      "nodejs",
      "prueba"
    ]
  },
  {
    "id": 157579763,
    "name": "node-api",
    "full_name": "vandyfree12/node-api",
    "description": "using node and postman for CRUD",
    "fork": false,
    "created_at": "2018-11-14T16:41:43Z",
    "updated_at": "2018-11-14T16:47:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31728444,
    "owner_login": "vandyfree12",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/31728444?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "node"
    ]
  },
  {
    "id": 189246238,
    "name": "simpleREST",
    "full_name": "HananNayberg/simpleREST",
    "description": "nodeJS REST app to test Postman",
    "fork": false,
    "created_at": "2019-05-29T14:53:12Z",
    "updated_at": "2019-06-03T18:50:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35271504,
    "owner_login": "HananNayberg",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/35271504?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "node"
    ]
  },
  {
    "id": 229167802,
    "name": "login-reg-node",
    "full_name": "ranjithraji/login-reg-node",
    "description": "mongodb and postman connected on node login ",
    "fork": false,
    "created_at": "2019-12-20T01:34:51Z",
    "updated_at": "2019-12-20T01:37:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32198997,
    "owner_login": "ranjithraji",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32198997?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "node",
      "mongo",
      "connect",
      "mongod",
      "mongodb",
      "login",
      "connected"
    ]
  },
  {
    "id": 215403664,
    "name": "postman-sample-api",
    "full_name": "TiagoGouvea/postman-sample-api",
    "description": "A simple node API to use with Postman",
    "fork": false,
    "created_at": "2019-10-15T21:54:55Z",
    "updated_at": "2019-10-15T21:54:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2242549,
    "owner_login": "TiagoGouvea",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/2242549?v=4",
    "pulled": 1,
    "tags": [
      "node"
    ]
  },
  {
    "id": 248737256,
    "name": "postman-CI-demo",
    "full_name": "MChodap1/postman-CI-demo",
    "description": "This repository contains a node project with the dependencies to run postman collection",
    "fork": false,
    "created_at": "2020-03-20T11:18:59Z",
    "updated_at": "2020-03-20T11:37:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 54065867,
    "owner_login": "MChodap1",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/54065867?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "repo",
      "postman collection",
      "repos",
      "repository",
      "node",
      "contain",
      "dependencies"
    ]
  },
  {
    "id": 170845399,
    "name": "full-stack-auth",
    "full_name": "SiddharthaChowdhury/full-stack-auth",
    "description": "react.js, node.js, typescript, babel, webpack, graphQL, REST, mongoDB, jest, react-router, postman",
    "fork": false,
    "created_at": "2019-02-15T10:17:05Z",
    "updated_at": "2019-11-12T17:06:41Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 0,
    "watchers": 5,
    "score": 1,
    "owner_id": 11028021,
    "owner_login": "SiddharthaChowdhury",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/11028021?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "node",
      "mongo",
      "route",
      "react",
      "type",
      "types",
      "router",
      "graph",
      "typescript",
      "jest"
    ]
  },
  {
    "id": 167320995,
    "name": "RESTAPITestingPostman",
    "full_name": "trivenimedici/RESTAPITestingPostman",
    "description": null,
    "fork": false,
    "created_at": "2019-01-24T07:11:51Z",
    "updated_at": "2019-01-24T09:40:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21274394,
    "owner_login": "trivenimedici",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/21274394?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 237214059,
    "name": "RESTAPIusingPostman",
    "full_name": "akash-agarwal96/RESTAPIusingPostman",
    "description": null,
    "fork": false,
    "created_at": "2020-01-30T13:01:24Z",
    "updated_at": "2020-01-30T13:07:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 58200628,
    "owner_login": "akash-agarwal96",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/58200628?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 235139286,
    "name": "Postman2RestClient",
    "full_name": "MikoSh95/Postman2RestClient",
    "description": null,
    "fork": false,
    "created_at": "2020-01-20T15:55:38Z",
    "updated_at": "2020-01-20T20:03:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23083053,
    "owner_login": "MikoSh95",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/23083053?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 69216250,
    "name": "restful",
    "full_name": "aschambers/restful",
    "description": "creating a restful api using the node-restful library, and testing with postman.",
    "fork": false,
    "created_at": "2016-09-26T05:35:57Z",
    "updated_at": "2016-09-26T05:37:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16850576,
    "owner_login": "aschambers",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16850576?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "testing",
      "rest",
      "node",
      "library",
      "restful",
      "creating"
    ]
  },
  {
    "id": 67126197,
    "name": "Restful-API",
    "full_name": "sandeepkumar14/Restful-API",
    "description": "Mean stack API for node JS and mongoDB as database. This api tested in Postman (Chrome app).",
    "fork": false,
    "created_at": "2016-09-01T11:41:08Z",
    "updated_at": "2016-09-15T09:12:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17603965,
    "owner_login": "sandeepkumar14",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17603965?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "node",
      "database",
      "mongo",
      "tested",
      "stack"
    ]
  },
  {
    "id": 187532019,
    "name": "nodeREST_boilerplate",
    "full_name": "shahedex/nodeREST_boilerplate",
    "description": "REST-API Boilerplate using nodeJS and mongodb",
    "fork": false,
    "created_at": "2019-05-19T21:55:17Z",
    "updated_at": "2019-05-19T21:58:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17005411,
    "owner_login": "shahedex",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17005411?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "mongo",
      "plate",
      "mongod",
      "mongodb"
    ]
  },
  {
    "id": 111292718,
    "name": "node-restful-api",
    "full_name": "AsodariyaP/node-restful-api",
    "description": "node-mongodb restful api",
    "fork": false,
    "created_at": "2017-11-19T12:24:44Z",
    "updated_at": "2017-12-24T11:04:52Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 25656505,
    "owner_login": "AsodariyaP",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25656505?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "node",
      "mongo",
      "restful",
      "mongod",
      "mongodb"
    ]
  },
  {
    "id": 76199323,
    "name": "node-auth",
    "full_name": "wizardnet972/node-auth",
    "description": "This is implemention of REST authentication with node.js and mongodb using jwt to have token.",
    "fork": false,
    "created_at": "2016-12-11T20:53:54Z",
    "updated_at": "2019-12-09T09:41:39Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 4997825,
    "owner_login": "wizardnet972",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/4997825?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "implement",
      "mongo",
      "auth",
      "authentication",
      "mongod",
      "mongodb",
      "token",
      "implemention"
    ]
  },
  {
    "id": 21752869,
    "name": "API-mongoDB-nodeJS",
    "full_name": "feernando-cortes/API-mongoDB-nodeJS",
    "description": "API desarrollada con mongoDB y node.js para cliente rest POSTMAN de un CRUD de trovadores.",
    "fork": false,
    "created_at": "2014-07-11T22:06:49Z",
    "updated_at": "2014-07-11T22:26:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8049029,
    "owner_login": "feernando-cortes",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/8049029?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "client",
      "node",
      "mongo",
      "desarrollada"
    ]
  },
  {
    "id": 159642262,
    "name": "testePeoplePRO",
    "full_name": "EdivaldoRibeiro/testePeoplePRO",
    "description": "Teste de avaliação - conhecimentos em Java, Rest, RestFull, nodeJS, MongoDB, Postman",
    "fork": false,
    "created_at": "2018-11-29T09:38:35Z",
    "updated_at": "2018-11-29T18:08:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45264769,
    "owner_login": "EdivaldoRibeiro",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45264769?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "conhecimentos"
    ]
  },
  {
    "id": 203823567,
    "name": "Postgen",
    "full_name": "Phara0h/Postgen",
    "description": "A simple node script to convert postman collections to clean REST client libs for node.",
    "fork": false,
    "created_at": "2019-08-22T15:32:28Z",
    "updated_at": "2019-11-07T19:16:05Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 1054802,
    "owner_login": "Phara0h",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1054802?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "postman collection",
      "script",
      "client",
      "node",
      "convert",
      "postman collections",
      "clean"
    ]
  },
  {
    "id": 96535965,
    "name": "hw-rest-express-nodejs",
    "full_name": "vishalbhardwaj26/hw-rest-express-nodejs",
    "description": "Elaborated exercise on rest+express+nodejs. ",
    "fork": false,
    "created_at": "2017-07-07T12:22:06Z",
    "updated_at": "2017-08-11T07:52:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15126782,
    "owner_login": "vishalbhardwaj26",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/15126782?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "node",
      "express",
      "nodejs",
      "exercise"
    ]
  },
  {
    "id": 115123665,
    "name": "crudApp",
    "full_name": "laffingDragons/crudApp",
    "description": "Using node and express and various modules, using POSTMAN rest  client manuplating Json data",
    "fork": false,
    "created_at": "2017-12-22T14:42:13Z",
    "updated_at": "2017-12-22T14:43:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32427753,
    "owner_login": "laffingDragons",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/32427753?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "rest",
      "client",
      "node",
      "express",
      " express",
      "module",
      "various",
      "modules"
    ]
  },
  {
    "id": 159887137,
    "name": "task",
    "full_name": "krukarkonrad/task",
    "description": "[Internship Assignment]Simple REST API (unzipping may be surprisingly \"long\" because of \"root/node_modules\" folder amount of small files)",
    "fork": false,
    "created_at": "2018-11-30T22:51:07Z",
    "updated_at": "2019-01-13T20:16:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 27883693,
    "owner_login": "krukarkonrad",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/27883693?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "node",
      "sign",
      "files",
      "module",
      "long",
      "small",
      "folder",
      "modules",
      "cause"
    ]
  },
  {
    "id": 142711276,
    "name": "camunda-zaken",
    "full_name": "sjefvanleeuwen/camunda-zaken",
    "description": "BPMN research case for zaakgericht werken using camunda process engine on nodejs external workers",
    "fork": false,
    "created_at": "2018-07-28T21:28:17Z",
    "updated_at": "2019-11-28T17:07:37Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 36629650,
    "owner_login": "sjefvanleeuwen",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36629650?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "search",
      "case",
      "nodejs",
      "process",
      "engine",
      "external",
      "rich",
      "camunda"
    ]
  },
  {
    "id": 119587689,
    "name": "SmackApplication",
    "full_name": "sonali-developer/SmackApplication",
    "description": "App Description: A clone of chat application namely Slack. It is a full fledged and professional looking ready to publish app on Appstore. It allows first time user to register by providing unique username, email and password along with selection of Avatar and Avatar's Background color; login using registered email and password, participate in channels available for chat, create new channel by adding users, perform live chat with other users of this app, can even logout, and so on.  • Built using Xcode 9, Swift 4, Cocoa pods, node.js, MongoDB, Heroku, Postman, etc. for iOS 11 based iPhones and iPads.  • Local Frameworks used includes Foundation, UIKit and other API's like Alamofire, SwiftyJSON, SocketIO, REST, SWReveal, etc.  • Demonstrated the use of Networking in iOS.  • Implemented Web Request creation in Xcode using UIKit, APIs, node.js and Mongo dB online. • Implemented Web service API hosting online using Heroku and local hosting using Postman. • Implemented user creation and real time talking using Socket Technology through SocketIO library.  • Implemented Web Service for User Registration, Authentication & Login, Channels Creation & display, fetching, sending and saving text messages and many more.  • Implemented Table Views, Collection Views & custom design of their cells using data models.  • Implemented side menu for the display of user profile and channels using SWReveal and Gradient color design code for providing gradient color background to this side menu.  • Implemented creation of two XIB's for Channels creation and profile view’s popUp.  • Implemented SegmentedControl for displaying 28 Dark and Light Avatar displays and code for generating Avatar’s background color on user registration screen.  • Implemented Input Accessory View for Text field.  • In all designed around eight View Controllers and their corresponding storyboard file for GUI design, Four Services, two custom cells, seven view files, two model files and lots of assets and so on. ",
    "fork": false,
    "created_at": "2018-01-30T20:02:55Z",
    "updated_at": "2018-06-24T20:51:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 20232921,
    "owner_login": "sonali-developer",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20232921?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "file",
      "application",
      "script",
      "service",
      "node",
      "user",
      "based",
      "code",
      "sign",
      "mail",
      "line",
      "files",
      "send",
      "local",
      "full",
      "read",
      "users",
      "more",
      "library",
      "view",
      "host",
      "email",
      "perform",
      "rating",
      "store",
      "play",
      "name",
      "working",
      "side",
      "allows",
      "long",
      "model",
      "custom",
      "message",
      "text",
      "design",
      "includes",
      "login",
      "along",
      "available",
      "clone",
      "designed",
      "fetch",
      "creation",
      "sending",
      "around",
      "ready",
      "many",
      "messages",
      "online",
      "sets",
      "display",
      "models",
      "register",
      "select",
      "generating",
      "fire",
      "playing",
      "profile",
      "adding",
      "talk",
      "hosting",
      "providing",
      "registration",
      "chat",
      "saving",
      "background",
      "namely",
      "fetching",
      "selection",
      "real time",
      "lots"
    ]
  },
  {
    "id": 91374388,
    "name": "JWT-Authentication",
    "full_name": "kpraneeth3456/JWT-Authentication",
    "description": "Project Title: JWT Authentication  Description: This project is a basic Authorization and Authentication which exchanges JSON web tokens between the client and the server for more security.  Execution: -Clone or download the repo from the GitHub link -npm install (to download the dependencies) -node index.js (To get the application running)  Working: -User has to enter his email and password to register his account.(Use any third-party rest-client like Postman on port 3000) -If the email already exists in the database it sends an error message and if the email does not exist it saves to the database. -If the user is signed up then he can go ahead and Sign-in with same username and password. -If the credentials are matched then a JSON web token will be sent to the client in the header. -If the username and password do not match then it sends back an error message.",
    "fork": false,
    "created_at": "2017-05-15T19:03:55Z",
    "updated_at": "2018-12-28T08:47:41Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 26414547,
    "owner_login": "kpraneeth3456",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26414547?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "data",
      "application",
      "rest",
      "script",
      "server",
      "client",
      "node",
      "database",
      "user",
      "sign",
      "mail",
      "send",
      "load",
      "read",
      "running",
      "more",
      "email",
      "name",
      "token",
      "message",
      "to do",
      "install",
      "between",
      "link",
      "header",
      "account",
      "download",
      "enter",
      "ready",
      "party",
      "register",
      "sends",
      "third",
      "dependencies",
      "tokens",
      "error",
      "match",
      "security",
      "exchange",
      "matched"
    ]
  },
  {
    "id": 114821650,
    "name": "postman_newman_test_framework",
    "full_name": "committedtester/postman_newman_test_framework",
    "description": "Postman execution via node for Continuous Integration",
    "fork": false,
    "created_at": "2017-12-19T23:33:28Z",
    "updated_at": "2018-01-03T00:36:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31405214,
    "owner_login": "committedtester",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/31405214?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "execution"
    ]
  },
  {
    "id": 129424470,
    "name": "postman-newman-teamcity-test",
    "full_name": "AmyGao18/postman-newman-teamcity-test",
    "description": null,
    "fork": false,
    "created_at": "2018-04-13T15:59:17Z",
    "updated_at": "2018-08-28T17:40:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35817129,
    "owner_login": "AmyGao18",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/35817129?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 124747771,
    "name": "postman_test_suite_example",
    "full_name": "nikunj08/postman_test_suite_example",
    "description": null,
    "fork": false,
    "created_at": "2018-03-11T11:01:14Z",
    "updated_at": "2018-03-11T17:58:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6276679,
    "owner_login": "nikunj08",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6276679?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 181254688,
    "name": "postman_Oauth_test",
    "full_name": "De-lovelyhhh/postman_Oauth_test",
    "description": null,
    "fork": false,
    "created_at": "2019-04-14T03:14:55Z",
    "updated_at": "2019-04-14T03:15:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39548891,
    "owner_login": "De-lovelyhhh",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/39548891?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 169600060,
    "name": "SpecFlowPostmanTests",
    "full_name": "kozhinamasha/SpecFlowPostmanTests",
    "description": null,
    "fork": false,
    "created_at": "2019-02-07T16:09:09Z",
    "updated_at": "2019-03-20T09:47:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13085332,
    "owner_login": "kozhinamasha",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/13085332?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 228253050,
    "name": "httpbin-postman-tests",
    "full_name": "PhilDolganov/httpbin-postman-tests",
    "description": null,
    "fork": false,
    "created_at": "2019-12-15T21:10:44Z",
    "updated_at": "2019-12-15T21:35:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31718442,
    "owner_login": "PhilDolganov",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/31718442?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 205011976,
    "name": "postman-docs-test",
    "full_name": "kaustavdm/postman-docs-test",
    "description": null,
    "fork": false,
    "created_at": "2019-08-28T19:53:20Z",
    "updated_at": "2019-08-29T12:02:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 364832,
    "owner_login": "kaustavdm",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/364832?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 143275857,
    "name": "swagger2postman",
    "full_name": "thneeb/swagger2postman",
    "description": "This little nodejs tool gets a swagger.json on the one hand and generated a postman collection file for testing the specified api on the other hand.",
    "fork": false,
    "created_at": "2018-08-02T09:54:03Z",
    "updated_at": "2018-11-20T08:14:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26486066,
    "owner_login": "thneeb",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/26486066?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "testing",
      "postman collection",
      "file",
      "tool",
      "node",
      "json",
      "generate",
      "spec",
      "swagger",
      "nodejs",
      "generated",
      "gets",
      "little"
    ]
  },
  {
    "id": 214824652,
    "name": "car-rental-management",
    "full_name": "achu1998/car-rental-management",
    "description": "A Car-Rental-Management developed on node and mongodb and deployed in heroku. The postman collection is in postman-collection.json file.  Add car page doesn't have front end . Car are manually added through the body which is clearly mentioned in the README.md file. This repository has the files implemented in localhost.Visit this repo:",
    "fork": false,
    "created_at": "2019-10-13T13:25:18Z",
    "updated_at": "2019-10-14T15:35:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43047640,
    "owner_login": "achu1998",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/43047640?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "repo",
      "postman collection",
      "file",
      "repos",
      "repository",
      "node",
      "json",
      "develop",
      "implement",
      "mongo",
      "files",
      "local",
      "front",
      "host",
      "mongod",
      "mongodb",
      "developed",
      "deployed",
      "implemented",
      "front end",
      "heroku",
      "added",
      "manua",
      "early"
    ]
  },
  {
    "id": 138470813,
    "name": "node.js-socialNetwork",
    "full_name": "guys1444/node.js-socialNetwork",
    "description": "socialNetwork that ive made in node.js Building an extensive backend API with Node.js & Express Protecting routes/endpoints with JWT (JSON Web Tokens) Extensive API testing with Postman Integrating React with our backend in an elegant way, creating a great workflow Building our frontend to work with the API Using Redux for app state management Creating reducers and actions for our resources Creating many container components that integrate with Redux Testing with the Redux Chrome extension ,MERN STACK",
    "fork": false,
    "created_at": "2018-06-24T09:53:49Z",
    "updated_at": "2018-06-24T09:53:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32614636,
    "owner_login": "guys1444",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/32614636?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "node",
      "contain",
      "endpoint",
      "points",
      "route",
      "manage",
      "endpoints",
      "routes",
      "source",
      "front",
      "stat",
      "creating",
      "extension",
      "backend",
      "rating",
      "action",
      "resource",
      "management",
      "resources",
      "integrate",
      "frontend",
      "container",
      "many",
      "social",
      "workflow",
      "component",
      "components",
      "elegant"
    ]
  },
  {
    "id": 218892035,
    "name": "CursoBackendConNode.js",
    "full_name": "gsuscastellanosSC/CursoBackendConNode.js",
    "description": "Introducción y bienvenida Guillermo Rodas será tu profesor en este curso, él tiene más 6 años dedicado a programar sólo en JavaScript y forma parte del equipo de Auth0, además de ser Google Developer Expert (GDE) en Web Technologies y organizador de eventos como Medellin CSS y CSS Conf.  Requisitos antes de iniciar:  Node y NPM Editor de texto ya sea vsCode, Atom o Sublime Text Navegador Chrome o Firefox Extensión JSON viewer Postman en @platzi https://platzi.com/clases/1646-backend-nodejs/22012-introduccion-y-bienvenida/ 💚💚💚",
    "fork": false,
    "created_at": "2019-11-01T01:42:18Z",
    "updated_at": "2019-11-05T11:10:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 53982913,
    "owner_login": "gsuscastellanosSC",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/53982913?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "node",
      "http",
      "https",
      "view",
      "backend",
      "program",
      "intro",
      "nodejs",
      "text",
      "event",
      "curso",
      "como",
      "bienvenida"
    ]
  },
  {
    "id": 193515124,
    "name": "NodeJsExpressMongoDB",
    "full_name": "MayMP/NodeJsExpressMongoDB",
    "description": "This is a very basic example of (`List All Data`, `Detail By Each Id`, `Create`, `Update`, `Delete`) in Node.js and MongoDB.  Running Locally Make sure you have Node.js(`https://nodejs.org/en/`) and the MongoDB for 32-bit(`https://www.mongodb.org/dl/win32/i386`) and for others (`https://www.mongodb.com/download-center/community`) installed.  You're gonna need to create a DB named `InterviewDB` and import from the `MongoDB(For Interview)` folder. And please create collection name `posts`. You can adjust the database configuration in `app/config/config.json`.  You can run \" node app.js \" from the project directory in command prompt.  You can call url(`localhost:8080`) from your `Postman` or `Restful`.",
    "fork": false,
    "created_at": "2019-06-24T13:52:01Z",
    "updated_at": "2020-03-04T12:56:55Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 52011773,
    "owner_login": "MayMP",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/52011773?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "create",
      "data",
      "call",
      "node",
      "database",
      "json",
      "http",
      "example",
      "mongo",
      "https",
      "load",
      "local",
      "import",
      "view",
      "host",
      "config",
      "very",
      "command",
      "mongod",
      "mongodb",
      "need",
      "name",
      "nodejs",
      "configuration",
      "install",
      "unit",
      "folder",
      "download",
      "enter",
      "posts",
      "directory",
      "installed",
      "please",
      "unity",
      "named",
      "center"
    ]
  },
  {
    "id": 119091462,
    "name": "Zadanie_17_5",
    "full_name": "martinproxy0/Zadanie_17_5",
    "description": " 17. ExpressJS - ekspresowe tworzenie aplikacji w NodeJS Wyzwania: Dowiesz się czym jest ExpressJS Nauczysz się korzystać z routingu Poznasz czym są szablony 17.1. Wprowadzenie do Expressa Express jest jednym z najpopularniejszych frameworków dla aplikacji pisanych w Node.js. Jest bardzo lekki i pozwala na lepszą organizację aplikacji w modelu MVC. Ok, zwolnijmy. Już na samym starcie pojawiły się dwa pojęcia, których do tej pory nie omówiliśmy zbyt dokładnie: framework i MVC. Na początku przypomnijmy sobie czym jest framework.  Czym są frameworki? Framework to swego rodzaju szkielet, na którym opieramy budowę naszej aplikacji. Jest pewnym poziomem abstrakcji, na której konstruujemy naszą aplikację.  Czym jest abstrakcja? Abstrakcja w inżynierii oprogramowania to technika, dzięki której jesteśmy w stanie zapanować nad złożonością systemu. Najzwyczajniej w świecie nie da się myśleć na wielu płaszczyznach na raz, dlatego programiści dzielą problemy na pewne poziomy i to na nich rozwiązują mniejsze problemy. Przykładowo - programista korzystający z Reacta nie martwi się o niższy poziom abstrakcji, z którego nieświadomie korzysta używając Reacta. Korzystając z komputera także nie zastanawiamy się za bardzo co dzieje się w środku procesora czy też w jaki sposób jest skonstruowany. Tym poziomem abstrakcji po prostu nie zawracamy sobie głowy. Używając JavaScriptu nie myślimy w jaki sposób parser analizuje składnię języka. Jeśli nie jest to nam potrzebne, to możemy zająć się tym, co jest dla nas naprawdę istotne - pisaniem aplikacji internetowych!  Express to właśnie kolejny, wyższy poziom abstrakcji, dzięki któremu możemy skupić się na właściwym problemie. Zawiera zbiór generycznych (możliwych do zastosowania w wielu miejscach / uniwersalnych) funkcjonalności, które powtarzają się w obrębie każdej aplikacji. Cały zamysł frameworka opiera się na zasadzie - nie wymyślaj koła na nowo, bo można budować na podstawie dobrych, uniwersalnych rozwiązań. Po wykonaniu tego samego zadania wiele razy, człowiek instynktownie szuka sposobu na automatyzację problemu - szczególnie leniwy programista. :)  Framework ma niestety jedną wadę, która bywa momentami również zaletą - narzuca programiście sposób w jaki należy rozwiązać problem. Takie podejście z jednej strony nieco nas ogranicza, bo nie pozwala nam 'grzebać' w rozwiązaniu, a z drugiej strony zmniejsza ilość miejsc, w których moglibyśmy popełnić jakiś błąd. Zaletą takiego podejścia jest też to, że programiści korzystający z frameworków często borykają się z podobnymi problemami, przez co łatwo jest znaleźć rozwiązania, bo ktoś już na pewno zetknął się z czymś, co sprawia nam kłopot :)  Wracając do Expressa - jest on niewielkim frameworkiem, który daje programiście przyjemną podstawkę do tworzenia aplikacji, ale nie narzuca żadnych praktyk - może o tym świadczyć chociażby fakt, że wiele znanych frameworków opiera swoją budowę na Express. Można do nich zaliczyć przykładowo Loopbacka, Sailsa czy Krakena.  Model-View-Controller Ok, wiemy już czym jest framework - pora na pojęcie MVC :) Jest to skrót od ang. Model View Controller (Model Widok Kontroler). Jest jednym z najczęściej przewijających się wzorców architektonicznych w internecie. Popularnością pomału wypiera go architektura Flux, o której coraz częściej słychać (szczególnie w środowisku Reacta), ale o tym wzorcu powiemy sobie jeszcze przy okazji omawiania Reduxa - wróćmy do MVC.  Głównym założeniem przyjętym podczas projektowania MVC było oddzielenie warstwy prezentacji od logiki biznesowej aplikacji. To podejście umożliwia tworzenie narzędzi działających bez graficznego interfejsu (zastępuje go wtedy tzw. Command Line Interface, a.k.a. CLI) i jest dalej popularne w środowisku Unixowym. Tak więc:  Model jest reprezentacją logiki aplikacji / problemu z jakim się zmagamy / domeną. Widok opisuje w jaki sposób coś wyświetlić. W React są to komponenty (szczególnie te prezentacyjne). Kontroler przyjmuje dane od użytkownika aplikacji i reaguje na jego działania w obrębie widoku. Aktualizuje widok i model aplikacji. O samej architekturze można napisać osobny moduł tym bardziej, że jak już wcześniej wspomnieliśmy bardzo często przewija się on w środowisku front-end developerów i jest częścią składową wielu frameworków. Sama implementacja MVC wymaga wiedzy na temat programowania obiektowego i wzorców projektowych. Zainteresowanych zapraszam do przeczytania tej książki na temat wzorców projektowych stosowanych w JavaScripcie.  Express dostarcza wielu funkcjonalności do tworzenia aplikacji webowych. Jak już wspomniałem, ułatwia on przede wszystkim szybki rozwój aplikacji opartych na Node.js. Podstawowymi cechami tego frameworka są:  serwowanie plików statycznych za pomocą jednej komendy konfigurowanie middleware, czyli pośrednika między żądaniem a odpowiedzią w momencie, kiedy użytkownik wykonuje jakieś akcje, np. wysyła formularz, middleware może wykonać pewne czynności zanim dane zostaną zapisane. Nie sprowadza się to oczywiście tylko do zapisu danych, ale szerzej na temat tego zagadnienia powiemy sobie w dalszym rozdziale definiowanie tablicy routingu, czyli ścieżek (adresów), które wyświetlają odpowiednie treści, przyjmują i zapisują dane, bądź odpytane o dane zwracają je. Bazują na protokole HTTP oraz URI (ang. Uniform Resource Identifier) pozwala na dynamiczne tworzenie stron HTML bazujących na argumentach przekazanych do istniejących szablonów Nie przejmuj się, jeśli powyższe opisy wydają się być nieco zagmatwane. Kolejne rozdziały rozjaśnią sprawę! Zanim jednak przejdziemy do omawiania poszczególnych funkcjonalności Expressa, przeprowadzimy proces instalacji.  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.2. Instalacja ExpressJS Framework Express instalujemy używając npm, analogicznie do innych pakietów, które dodawaliśmy już we wcześniejszych modułach. Dla przypomnienia, wystarczy, że zainicjujesz swój projekt - npm init, a następnie użyjesz komendy npm install express --save, która zapisze zainstalowany pakiet w katalogu node_modules/ i doda go do sekcji dependencies w pliku package.json.  Razem z Expressem należy zainstalować jeszcze jeden ważny moduł - body-parser, który jest pakietem pozwalającym na obsługę różnych formatów danych w middleware takich jak JSON, text czy tzw. surowe dane (ang. raw data). Aby go zainstalować, wpisz npm install body-parser --save.  Pierwsza aplikacja w ExpressJS Sprawdźmy teraz, czy wszystko działa tak jak powinno. Testowa aplikacja, jaką stworzymy przy użyciu Expressa, będzie przedstawiała podstawową zasadę działania tego frameworka. Aplikacja uruchomi serwer oraz będzie nasłuchiwać na porcie 3000 w oczekiwaniu na połączenie - dokładnie w taki sam sposób, jak w przypadku serwera HTTP napisanego w “czystym\" Node.js. Nasłuchiwanie oznacza nic innego jak oczekiwanie na połączenie - po wystąpieniu żądania, serwer odpowie nam klasycznym “Hello world\".  Zanim zaczniemy tworzyć aplikację, musimy wytłumaczyć sobie pewne pojęcia.  Opis pojęcia routingu Routing to sposób określania jak aplikacja będzie odpowiadać na żądania klienta na dane endpointy przy użyciu konkretnych metod HTTP. Przypomnijmy sobie w jaki sposób wyglądały metody HTTP:  GET - najprostsza z metod HTTP - służy do pobierania zasobów z serwera. Pobranymi zasobami mogą być np. pliki HTML, CSS, JavaScript czy obiekty JSON / XML. POST - ta metoda jest używana do wysyłania danych do serwera. Stosuje się ją np. przy formularzach lub przy wstawianiu zdjęć i wysyłaniu ich jako załącznik. Zwykle dane te wysyłane są jako para klucz-wartość. PUT - działa podobnie jak POST, czyli również służy do wysyłania danych. Różnicą jest ograniczenie do wysłania tylko jednej porcji danych - np. jednego pola. Metoda ta najczęściej używana jest do aktualizacji istniejących danych DELETE - metoda, która służy do usuwania danych z serwera. Chodzi oczywiście o dane, które zostały wskazane przy wysyłaniu żądania. Kolejnym pojęciem jest URI (nazywane również PATH) - jest to właśnie wspomniany wcześniej endpoint, który zawiera polecenia do wykonania gdy zostanie wywołany przez żądanie.  Czas start! Na początek stwórzmy plik server.js w katalogu z projektem. Po zainstalowaniu powyższych zależności, drzewo projektu powinno wyglądać w następujący sposób:   Aby mieć możliwość skorzystania z zainstalowanych zależności, na początku należy zadeklarować zmienną, w której będziemy przechowywać funkcjonalności pakietu Expressa.  var express = require('express'); Jak widzisz, każda paczka JS'a działa dokładnie w taki sam sposób. Koncepcja modułów będzie przewijać się aż do końca tego kursu. Następnym krokiem będzie stworzenie aplikacji Express:  var app = express(); Naszą aplikację przypisaliśmy do zmiennej app. Teraz możemy sprawić, aby odpowiadała prostym Hello world w momencie, w którym odbierzemy wysłane zapytanie GET na adres strony domowej:  app.get('/', function(req, res) {     res.send('Hello world'); }); Powyższy kod rejestruje pierwszy routing (proces przetwarzania otrzymanego adresu żądania i na jego podstawie decydowanie, co powinno zostać uruchomione) na wysłane żądanie GET po wejściu na stronę główną ( http://localhost:3000/ ). Jako callback na wystąpienie tego zdarzenia wywoływana jest funkcja, która w przypadku udanej odpowiedzi wyśle wiadomość Hello world.  To jednak jeszcze nie koniec. Zarejestrowaliśmy obsługę pierwszego routingu, ale należy zainicjować nasłuchiwanie serwera na to i inne zdarzenia. Dopiszmy więc:  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Po zapisaniu powyższego kodu, należy uruchomić go komendą node server.js (lub za pomocą Nodemona, którego poznaliśmy w pierwszym module) - teraz po ponownym wejściu na adres http://localhost:3000/ powinniśmy zobaczyć następujący widok:   Jest to znak, że nasza aplikacja działa!  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.3. Route, czyli ścieżka wyznaczona dla użytkownika aplikacji Wykorzystanie endpointów Rozwińmy teraz trochę aplikację stworzoną w poprzednim podrozdziale. Aktualnie kod w pliku server.js wygląda następująco:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Endpointy statyczne Na początek zmodyfikujemy lekko żądanie GET i do strony głównej zamiast Hello world! wpiszmy Hello GET! oraz dodamy linijkę drukującą otrzymane żądanie (po stronie serwera) jak poniżej:  app.get('/', function (req, res) {     console.log('Otrzymałem żądanie GET do strony głównej');     res.send('Hello GET!'); }); Warto w tym miejscu wspomnieć o narzędziu Postman - możesz pobrać je ze strony https://www.getpostman.com/. Używa się go do testowania endpointów. Postman jest prosty i intuicyjny w obsłudze - wystarczy, że podasz adres oraz metodę HTTP, jakiej chcesz użyć w odpowiednich polach i… już :) Pozostaje tylko wysłanie requesta i sprawdzenie czy response zgadza się z naszymi oczekiwaniami.   Dodajmy też inne metody HTTP do naszej aplikacji. Zacznijmy od POST. Dla tej i kolejnej metody wykonamy podobne operacje. Chodzi tutaj o to, aby zaobserwować działanie zarejestrowanych endpointów.  app.post('/', function (req, res) {     console.log('Otrzymałem żądanie POST do strony głównej');     res.send('Hello POST!'); }); Do tego czasu oba nasze zapytania kierowaliśmy do strony domowej. Dodajmy teraz obsługę żądania z metodą DELETE oraz inną ścieżką:  app.delete('/del_user', function (req, res) {     console.log('Otrzymałem żądanie DELETE do strony /del_user');     res.send('Hello DELETE!'); }); DLA CHĘTNYCH: Przetestuj powyższe zapytanie w Postmanie! :)  Dla praktyki, dodajmy jeszcze kilka innych endpointów, a następnie przejdźmy do testowania.  app.get('/list_user', function (req, res) {     console.log('Otrzymałem żądanie GET do strony /list_user');     res.send('Strona z listą użytkowników!'); });  app.get('/ab*cd', function(req, res) {     console.log('Otrzymałem żądanie GET do strony /ab*cd');     res.send('Wzór pasuje'); }); Po dodaniu powyższych fragmentów kodu zapisz plik server.js, a następnie ponownie użyj komendy node server.js chyba, że używasz Nodemona :)  Zerknijmy na endpoint /list_user   Otrzymaliśmy to, czego oczekiwaliśmy. Sprawdźmy jeszcze inne.    Jeśli jednak użyliśmy endpointa, którego nie zdefiniowaliśmy, otrzymamy odpowiedź jak na ostatnim obrazku.  Endpointy dynamiczne Istnieje również inny typ endpointów, które nazywa się dynamicznymi. Używanie ich pozwala na przekazywanie parametrów i bazowanie na nich. Wróćmy na moment do kodu stworzonego na samym początku:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Najpierw zmodyfikujemy trochę bazowy kod. Usuńmy linijki 8-10, które miały nam tylko pokazać podstawowe informacje na temat serwera. Zamiast tego napiszmy po prostu: app.listen(3000);  Tworzenie dynamicznego routingu pozwala na przekazywanie parametrów, więc spróbujmy najpierw z przykładowym id. Zamiast odwołać się do strony domowej ('/'), odwołajmy się do zmiennego parametru id. Parametr zmienny od statycznego rozróżnia się poprzez dodanie dwukropka (:) przed nazwę. W naszym przykładzie endpoint będzie więc wyglądał następująco:  /:id Zmieńmy jeszcze odpowiedź z Hello world na 'Identyfikator, który został dopisany to ' + req.params.id.  Czym jest req.params.id? req jest obiektem reprezentującym zapytanie HTTP (ang. request). Posiada on różne parametry, jak na przykład body (czyli ciało zapytania), nagłówki HTTP oraz parametry (params), które mamy zamiar odczytać.  Parametr, który wstawiliśmy jako część adresu w metodzie GET, przekazujemy jako id. W poniższym przypadku wyświetli się komunikat Identyfikator który został dopisany to 123, o ile zapytanie wysłano na adres http://localhost:3000/123.   Popróbuj z różnymi innymi parametrami i sprawdź czy aplikacja działa tak, jak tego oczekujesz.  Obsługa błędu 404 za pomocą ExpressJS Co jeśli serwer nie rozpozna żądania? W Expressie odpowiedź 404 nie jest wynikiem błędu, więc nie jest wyłapywany w trakcie działania aplikacji. Spowodowane jest to tym, że 404 zwykle oznacza brak możliwości wykonania danej czynności, a nie błąd występujący z powodu jakiejś 'wpadki' programisty. Innymi słowy, Express wykonał wszystkie funkcje middleware (które poznamy w kolejnym rozdziale) oraz route'y i dopiero wtedy dowiedział się, że żaden z nich nie odpowiedział na żądanie - taki przypadek możemy obsłużyć poprzez dodanie funkcji middleware na samym końcu (poniżej pozostałych funkcji), aby obsługiwała status 404.  Powróćmy znów do poprzedniego szablonu z metodą GET na stronę domową ('/'), która zwraca nam Hello world!. Dopiszmy teraz metodę middleware, która obsłuży nam błąd 404.  Na samym końcu, poniżej fragmentu z nasłuchiwaniem dodajmy obsługę odpowiedzi 404:  app.use(function (req, res, next) {     res.status(404).send('Wybacz, nie mogliśmy odnaleźć tego, czego żądasz!') }); Po ponownym uruchomieniu skryptu, w przeglądarce powinieneś zobaczyć Hello world!. Spróbuj teraz dopisać coś na koniec adresu (tak jak w poprzednim rozdziale dopisaliśmy id). Powinieneś otrzymać następujący komunikat:   Parametr next, który przekazujemy do funkcji jest funkcją, która pozwala “iść dalej\" do kolejnej funkcji middleware lub zakończenia żądania.  Można w ten sposób stworzyć także obsługę pozostałych błędów. Najczęściej obsługiwane błędy to:  400 - bad request - występuje gdy serwer nie może przetworzyć zapytania 401 - unauthorized - występuje gdy wymagane jest uwierzytelnienie, a nie zostało dostarczone 403 - forbidden - żądanie jest poprawne, jednak serwer odmawia odpowiedzi, może to wystąpić w przypadku gdy np. użytkownik jest zalogowany ale nie ma uprawnień do wykonania żądania 404 - not found - zasoby nie zostały znalezione 500 - internal server error - występuje gdy występują nieznane warunki i nie ma żadnej konkretnej wiadomości Zadanie: Operacje CRUD na pliku JSON Stwórzmy teraz aplikację, która będzie otwierać zewnętrzne pliki .json oraz edytować je. Zanim zaczniemy, w folderze projektu stwórz plik server.js, a następnie zainicjalizuj projekt poprzez wpisanie npm init w konsoli.  Przejdźmy do pobrania potrzebnych zależności - tym razem będzie nam potrzebny Express oraz body-parser. Jak się zapewne domyślasz, możesz zainstalować je za pomocą komendy npm install --save express body-parser. Po pobraniu paczek, możemy śmiało przejść do pisania kodu - na początek przypisz zależności do zmiennych w pliku server.js. Dodaj także linijkę var fs = require('fs') - fs będzie nam potrzebny do operacji na plikach. Nie musimy go instalować, bo jest on wbudowany w Node :)  Skoro zależności mamy już załatwione, zadeklaruj zmienną app, która wywoła funkcję express() oraz zmienną stringifyFile (na razie bez zadeklarowanej wartości).  Tuż pod deklaracją zmiennych dodaj także linijkę app.use(bodyParser.json()); - to pozwoli Ci wykorzystać middleware body-parser, które zainstalowaliśmy przed chwilą. body-parser jest nam potrzebny, aby korzystać z formatu application/json - póki co nie przejmuj się pojęciem middleware, zajmiemy się nim nieco dalej w tym kursie :)  Stwórz teraz endpoint GET /getNote, gdzie po wywołaniu zostanie wczytany Twój zewnętrzny plik JSON oraz wyświetlona zostanie jego zawartość. Przykłądowy plik test.json:  {\"menu\": {    \"id\": \"file\",    \"value\": \"File\",    \"popup\": {      \"menuitem\": [        {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},        {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},        {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}      ]    }  }} Metoda która pozwoli nam na odczytanie pliku to readFile, którą można wywołać z zadeklarowanego wcześniej fs. Jako parametry przyjmuje ona najpierw plik, następnie opcje (np. kodowanie) i funkcję, która wywoła się po załadowaniu. W naszym przypadku będzie to więc następujący kod: fs.readFile('./test.json', 'utf8', function(err, data) {     if (err) throw err;     stringifyFile = data     res.send(data); }); Teraz pora na stworzenie endpointa, który po wywołaniu nadpisze nam podany plik. Stworzymy do tego dynamiczny endpoint, który dopisze do pliku string, który przekażemy jako parametr. Stwórz tym razem POST na /updateNote/:note. Po jego wywołaniu tekst, który znajduje się w miejscu /:note powinniśmy dopisać do wczytanego pliku poprzez dodanie req.params.note do zmiennej stringifyFile, która przechowuje aktualną zawartość pliku.  Po przypisaniu powyższej zmiennej, należy ponownie odwołać się do modułu fs tym razem używając metody writeFile. Pomoże nam w tym następujący fragment kodu:  fs.writeFile('./test.json', stringifyFile, function(err) {     If (err) throw err;     console.log('file updated'); }); Na końcu pliku dodaj nasłuchiwanie na porcie 3000.  Zapisz plik i uruchom aplikację wpisując node server.js w konsoli.  Otwórz Postmana, ustaw metodę zapytania na GET, a w pole adresu wpisz http://localhost:3000/getNote. Jako response powinieneś otrzymać Twój stworzony wcześniej plik JSON. Po zmianie z GET na POST oraz wpisaniu /updateNote/test zamiast /getNote oraz wysłaniu requesta, Twój plik JSON powinien zostać zaktualizowany o słowo test :)  Po ukończeniu zadania, wrzuć swój kod na Githuba i przekaż link do repozytorium mentorowi :)  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_3.git   Wyslij link  17.4. Serwowanie plików statycznych Express posiada wbudowaną możliwość serwowania plików statycznych - takimi plikami są na przykład obrazki, pliki CSS czy JS. Aby serwować te pliki statycznie, wystarczy użyć express.static. Pliki statyczne to pliki, które zostają dostarczone do klienta bez generowania, modyfikacji czy przetwarzania - jedyne, co trzeba z nimi zrobić, to przekazać nazwę katalogu, w którym są przetrzymywane, do express.static - to wystarczy aby zacząć je serwować. Spróbujmy przedstawić to sobie na przykładzie.  Załóżmy, że przetrzymujesz swoje zdjęcia i pliki CSS w katalogu assets/. Aby zacząć je serwować, możesz więc użyć następującej linijki:  app.use(express.static('assets')); Zmodyfikujmy więc całkowicie naszą aplikację. Najpierw stwórzmy w katalogu projektu nowy katalog o nazwie assets/. Wrzućmy do niego jakiekolwiek zdjęcie/obrazek. W pliku server.js wróćmy do poprzedniego stanu (zanim zaczęliśmy zajmować się routingiem):  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, 'localhost', function() {     var host = server.address().address;     var port = server.address().port;      console.log('Przykładowa aplikacja nasłuchuje na http://' + host + ':' + port); }); W tym przykładzie sami definiujemy port i adres, ale w prawdziwej aplikacji moglibyśmy tych wartości nie znać. Częstym przykładem jest sytuacja w której adres i port są zdefiniowane w osobnym pliku konfiguracyjnym. Ten plik byłby inny na naszym komputerze niż na serwerze na którym będziemy publikować aplikację - ale nasz kod ma działać w obu lokalizacjach. Dlatego do wyświetlenia linka potrzebowalibyśmy pobrania tych danych za pomocą metody .address().  Pozostaje teraz jedynie w linii nr 3 dodać to, o czym powiedzieliśmy sobie chwilkę temu, czyli linijkę app.use(express.static('assets'));  Dla przypomnienia, w nawiasach do express.static przekazujemy katalog, w którym znajdują się pliki, które chcemy serwować. Po zapisaniu pliku server.js, możemy uruchomić aplikację. Teraz, aby zobaczyć nasz obrazek, wystarczy że po http://localhost:3000/ podamy nazwę pliku z rozszerzeniem - u mnie wygląda to tak:   Stwórz sobie teraz prosty plik index.html, który będzie miał formularz z dwoma inputami typu text (o nazwach first_name i last_name) oraz jednym typu submit. Element  posiada atrybuty takie jak action oraz method. Atrybut action pozwala określić, gdzie wysłać dane z formularza w momencie, gdy zostanie on zatwierdzony. W naszym przypadku będzie to http://localhost:3000/userform. Atrybut method określa metodę, jakiej chcemy użyć - w naszym przypadku niech będzie to GET.  Przykładowo, Twój index.html może wyglądać tak:                          Node Hello world example                                                 First Name:                                            Last Name:                                           Gdy już będzie gotowy, wrzuć go do katalogu /assets.  Teraz czas na modyfikację pliku server.js. Najpierw zmieńmy to, co chcemy wysyłać, gdy zostanie wysłane żądanie do strony domowej.  Zamień więc res.send('Hello world') na res.sendFile('/index.html') - jak się zapewne domyślasz, res.sendFile() wysyła w odpowiedzi plik zamiast wiadomości.  Musimy również dodać obsługę żądania na endpoint, do którego będziemy kierować nasz formularz.  app.get('/userform', function (req, res) {     const response = {         first_name: req.query.first_name,         last_name: req.query.last_name     };     res.end(JSON.stringify(response)); }); W czasie przetwarzania żądania, tworzymy nowy obiekt response, który ma klucze first_name oraz last_name. Do poszczególnych właściwości przypisujemy dane, które otrzymujemy w obiekcie req (od ang. request), czyli w obiekcie z żądaniem. Na koniec wyświetlamy nasz obiekt przetworzony na typ string za pomocą metody JSON.stringify. Po zapisaniu pliku server.js, aplikacja powinna pokazywać formularz, jak poniżej.   Po wpisaniu wartości do inputów i wysłaniu ich, powinieneś zostać przekierowany do strony /userform, a po znaku zapytania powinny zostać wyświetlone parametry umieszczone przez Ciebie w inputach.   Zadanie: Żonglujemy danymi pomiędzy endpointami Napisz kod obsługujący formularz zgodnie z wskazówkami z tego submodułu, a następnie wyślij swój kod na repozytorium oraz przekaż go do sprawdzenia mentorowi.  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_4.git   Wyslij link 17.5. Middleware - pośrednik między żądaniem a odpowiedzią",
    "fork": false,
    "created_at": "2018-01-26T19:03:05Z",
    "updated_at": "2018-01-26T19:03:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13038633,
    "owner_login": "martinproxy0",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13038633?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "data",
      "request",
      "form",
      "file",
      "application",
      "server",
      "call",
      "node",
      "json",
      "http",
      "user",
      "develop",
      "express",
      "auto",
      "example",
      "automat",
      "implement",
      "format",
      " express",
      "auth",
      "endpoint",
      "framework",
      "route",
      "https",
      "function",
      "demo",
      "send",
      "local",
      "list",
      "star",
      "source",
      "read",
      "front",
      "update",
      "response",
      "stat",
      "host",
      "start",
      "delete",
      "face",
      "package",
      "method",
      "info",
      "developer",
      "system",
      "name",
      "html",
      "action",
      "module",
      "program",
      "infor",
      "github",
      "model",
      "tech",
      "esse",
      "text",
      "getpost",
      "problem",
      "install",
      "parse",
      "link",
      "proxy",
      "folder",
      "status",
      "require",
      "middleware",
      "parser",
      "console",
      "intern",
      "note",
      "popular",
      "party",
      "write",
      "query",
      "sets",
      "updated",
      "dynamic",
      "modules",
      "routing",
      "role",
      "world",
      "address",
      "dependencies",
      "found",
      "error",
      "internal",
      "listen",
      "jest",
      "kurs",
      "rake",
      "ekspresowe",
      "kazan",
      "wars"
    ]
  },
  {
    "id": 121401583,
    "name": "FirstApiHello",
    "full_name": "vigneshios/FirstApiHello",
    "description": "writing my first api with node, mongo database, express.checked api calls in postman, viewed mongo collections in roboMongo.",
    "fork": false,
    "created_at": "2018-02-13T15:48:10Z",
    "updated_at": "2018-02-13T15:52:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21258604,
    "owner_login": "vigneshios",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/21258604?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "data",
      "call",
      "node",
      "database",
      "express",
      "mongo",
      " express",
      "calls",
      "view",
      "check",
      "writing",
      "robo",
      "checked"
    ]
  },
  {
    "id": 142351951,
    "name": "jekshop-api",
    "full_name": "slpkej/jekshop-api",
    "description": "Created a node api using express/bodyparser and mongo and mongoose for the database. Used Postman to send web requests to the backend.",
    "fork": false,
    "created_at": "2018-07-25T20:42:50Z",
    "updated_at": "2018-07-25T20:58:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41170480,
    "owner_login": "slpkej",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/41170480?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "node",
      "database",
      "requests",
      "express",
      "mongo",
      " express",
      "send",
      "backend",
      "mongoose",
      "parse",
      "parser"
    ]
  },
  {
    "id": 201312005,
    "name": "food-delivery-server-goit",
    "full_name": "SerhiiY/food-delivery-server-goit",
    "description": "A course task with using node.js server. All queries were tested by Postman. App can give products list or user by id and write a new product or user to the database. On master branch used http module, on express-hw branch express.js is used.",
    "fork": false,
    "created_at": "2019-08-08T18:06:53Z",
    "updated_at": "2019-09-10T10:36:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34281627,
    "owner_login": "SerhiiY",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/34281627?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "server",
      "node",
      "database",
      "http",
      "user",
      "express",
      " express",
      "tested",
      "list",
      "course",
      "task",
      "module",
      "product",
      "were",
      "queries",
      "products",
      "write",
      "master"
    ]
  },
  {
    "id": 249643006,
    "name": "Newman-Framework-Node-App",
    "full_name": "karthick-git/Newman-Framework-Node-App",
    "description": "This repository contains an API automation framework project. It's built with Postman's newman CLI as core. It's bundled with the node dependencies and can be deployed directly in PCF.",
    "fork": false,
    "created_at": "2020-03-24T07:41:00Z",
    "updated_at": "2020-03-24T08:28:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48290922,
    "owner_login": "karthick-git",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/48290922?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "repos",
      "repository",
      "node",
      "auto",
      "automat",
      "newman",
      "contain",
      "framework",
      "built",
      "automation",
      "deployed",
      "directly",
      "core",
      "dependencies",
      "bundled",
      "bundle"
    ]
  },
  {
    "id": 225575258,
    "name": "swagger.io-openAPI",
    "full_name": "rohitchatla/swagger.io-openAPI",
    "description": "For more Nodejs,JavaScript projects :: goto https://github.com/thunderssilver to see our team projects listed as following:: 1)stud_form with nodeJS,mysql 2)swagger.io/openAPI 3)socket1 4)restapiauth: (nodeJS,expressJS with routes,private routes,auth(JWT),validations(Joi@hapi),password hashing with bcryptjs,data/codes hiding with dotenv lib,MongoDb(mongoose connect) as DB) 5)restapi: (MongoDb as DB) 6)sample_postman 7)oauth2.0 with google,facebook 8)oauth2.0 with local strategy",
    "fork": false,
    "created_at": "2019-12-03T09:02:53Z",
    "updated_at": "2019-12-04T07:27:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 51963891,
    "owner_login": "rohitchatla",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/51963891?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "form",
      "rest",
      "node",
      "http",
      "express",
      "code",
      "mongo",
      "auth",
      "route",
      "https",
      "sample",
      "local",
      "list",
      "routes",
      "more",
      "swagger",
      "connect",
      "face",
      "mysql",
      "book",
      "github",
      "open",
      "mongoose",
      "under",
      "validation",
      "following",
      "mysql ",
      "codes",
      "projects",
      "restapi",
      "google",
      "bcrypt",
      "private",
      "oauth2",
      "hapi",
      "oauth"
    ]
  },
  {
    "id": 102051898,
    "name": "python-google-pubsub",
    "full_name": "bennzhang/python-google-pubsub",
    "description": null,
    "fork": false,
    "created_at": "2017-08-31T22:47:26Z",
    "updated_at": "2018-01-27T00:27:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25533990,
    "owner_login": "bennzhang",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/25533990?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 26385193,
    "name": "postman",
    "full_name": "chenchengxing/postman",
    "description": "node postman",
    "fork": false,
    "created_at": "2014-11-09T04:32:40Z",
    "updated_at": "2015-01-18T15:54:22Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 2252616,
    "owner_login": "chenchengxing",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/2252616?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "node"
    ]
  },
  {
    "id": 92245629,
    "name": "postman",
    "full_name": "Honest-Team/postman",
    "description": "node开发postman",
    "fork": false,
    "created_at": "2017-05-24T03:26:25Z",
    "updated_at": "2017-05-24T03:26:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28914282,
    "owner_login": "Honest-Team",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28914282?v=4",
    "pulled": 1,
    "tags": [
      "node"
    ]
  },
  {
    "id": 211144248,
    "name": "LondonTrainings",
    "full_name": "lauren-thornton/LondonTrainings",
    "description": "conversational AI. Postman/node/luis",
    "fork": false,
    "created_at": "2019-09-26T17:23:45Z",
    "updated_at": "2019-09-26T17:23:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 55850329,
    "owner_login": "lauren-thornton",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/55850329?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "conversational"
    ]
  },
  {
    "id": 180138015,
    "name": "node.js-xmysql-postman",
    "full_name": "ming-zh/node.js-xmysql-postman",
    "description": "node.js+xmysql+postman实现接口自动化测试，并校验数据库",
    "fork": false,
    "created_at": "2019-04-08T11:50:01Z",
    "updated_at": "2019-06-19T03:00:45Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 24984887,
    "owner_login": "ming-zh",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/24984887?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "mysql"
    ]
  },
  {
    "id": 69622660,
    "name": "postman_node-ajax",
    "full_name": "anilrayamajhi/postman_node-ajax",
    "description": null,
    "fork": false,
    "created_at": "2016-09-30T01:35:02Z",
    "updated_at": "2016-09-30T01:35:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17842147,
    "owner_login": "anilrayamajhi",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17842147?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 218228404,
    "name": "Postman-node.js",
    "full_name": "izzul112/Postman-node.js",
    "description": null,
    "fork": false,
    "created_at": "2019-10-29T07:29:33Z",
    "updated_at": "2019-10-29T07:29:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43197282,
    "owner_login": "izzul112",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/43197282?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 157793503,
    "name": "postman_node_vip_pool",
    "full_name": "stariqali/postman_node_vip_pool",
    "description": "Create BIGIP node, pool and VIP in Bulk using Postman",
    "fork": false,
    "created_at": "2018-11-16T01:09:54Z",
    "updated_at": "2018-11-16T01:42:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43615169,
    "owner_login": "stariqali",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/43615169?v=4",
    "pulled": 1,
    "tags": [
      "node"
    ]
  },
  {
    "id": 161976716,
    "name": "node-post",
    "full_name": "ramakanthrao/node-post",
    "description": "node js script for postman sandbox api",
    "fork": false,
    "created_at": "2018-12-16T07:06:15Z",
    "updated_at": "2018-12-16T07:06:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2632526,
    "owner_login": "ramakanthrao",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2632526?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "node",
      "sandbox"
    ]
  },
  {
    "id": 168086837,
    "name": "SIMPLE-CRUD-NODEJS",
    "full_name": "mdwis13/SIMPLE-CRUD-NODEJS",
    "description": "+Node JS  -Express JS  -nodemon +MYSQL +POSTMAN",
    "fork": false,
    "created_at": "2019-01-29T04:06:06Z",
    "updated_at": "2019-01-29T04:06:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34559560,
    "owner_login": "mdwis13",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/34559560?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "demo",
      "nodemon"
    ]
  },
  {
    "id": 175562421,
    "name": "postman-Jenkins-node.js-xmysql-",
    "full_name": "crazyhuiliu/postman-Jenkins-node.js-xmysql-",
    "description": null,
    "fork": false,
    "created_at": "2019-03-14T06:33:06Z",
    "updated_at": "2019-03-14T06:33:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44564672,
    "owner_login": "crazyhuiliu",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/44564672?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 158057551,
    "name": "NodeJS-Express-MongoDb-API",
    "full_name": "ChrisLiu95/NodeJS-Express-MongoDb-API",
    "description": "Simple API built by nodeJS, expressJS and MongoDB, with postman and Robo3T tools.",
    "fork": false,
    "created_at": "2018-11-18T06:46:45Z",
    "updated_at": "2018-11-18T06:57:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 35429548,
    "owner_login": "ChrisLiu95",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/35429548?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "tool",
      "node",
      "express",
      " express",
      "built",
      "tools"
    ]
  },
  {
    "id": 173549806,
    "name": "todo-list-api",
    "full_name": "anandk174/todo-list-api",
    "description": "to do list implementation using node,fire-base and postman",
    "fork": false,
    "created_at": "2019-03-03T08:31:50Z",
    "updated_at": "2019-03-03T08:38:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16771281,
    "owner_login": "anandk174",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16771281?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "node",
      "implement",
      "list",
      "implementation",
      "to do",
      "fire"
    ]
  },
  {
    "id": 170300493,
    "name": "NotasNode",
    "full_name": "LuisJCastano/NotasNode",
    "description": "Pequeño proyecto de notas hecho con node y utilizando la herramienta de Postman",
    "fork": false,
    "created_at": "2019-02-12T10:41:24Z",
    "updated_at": "2019-02-18T09:43:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36086071,
    "owner_login": "LuisJCastano",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36086071?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "util",
      "utilizando",
      "proyecto",
      "notas"
    ]
  },
  {
    "id": 128876150,
    "name": "node-simple-api-with-express",
    "full_name": "spriggsj/node-simple-api-with-express",
    "description": "using node and express create delete read and list with postman",
    "fork": false,
    "created_at": "2018-04-10T05:01:24Z",
    "updated_at": "2018-04-10T05:58:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10429290,
    "owner_login": "spriggsj",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/10429290?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "node",
      "express",
      " express",
      "list",
      "read",
      "delete"
    ]
  },
  {
    "id": 187348131,
    "name": "MongoDB_Nodejs_CRUD_operations",
    "full_name": "techinfo-youtube/MongoDB_Nodejs_CRUD_operations",
    "description": "complete mongodb and nodejs crud operation using postman tool not frontend used!!",
    "fork": false,
    "created_at": "2019-05-18T11:10:59Z",
    "updated_at": "2019-05-18T11:11:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49879287,
    "owner_login": "techinfo-youtube",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/49879287?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "tool",
      "node",
      "mongo",
      "operation",
      "front",
      "mongod",
      "mongodb",
      "nodejs",
      "complete",
      "crud",
      "frontend"
    ]
  },
  {
    "id": 83179676,
    "name": "api_hw2",
    "full_name": "colechristenson/api_hw2",
    "description": "Test different requests against a node.js server using postman. Node.js server is set up with express.",
    "fork": false,
    "created_at": "2017-02-26T03:20:14Z",
    "updated_at": "2017-02-26T03:42:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22686955,
    "owner_login": "colechristenson",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22686955?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "server",
      "node",
      "requests",
      "express",
      " express",
      "rent"
    ]
  },
  {
    "id": 105598245,
    "name": "GamingShop",
    "full_name": "Zahermah/GamingShop",
    "description": "Building a shop for fun using postman request and learning node.js and trying MongoDB",
    "fork": false,
    "created_at": "2017-10-03T00:12:31Z",
    "updated_at": "2017-10-03T00:17:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15321471,
    "owner_login": "Zahermah",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/15321471?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "node",
      "learn",
      "shop",
      "learning",
      "trying"
    ]
  },
  {
    "id": 151507943,
    "name": "nodeHerokuServer",
    "full_name": "BubbaMachina/nodeHerokuServer",
    "description": "My tutorial for myself on how to use node, and deploy to heroku with as little files as possible. Postman is front end for now, and Mongo DB is connected to this as well",
    "fork": false,
    "created_at": "2018-10-04T02:20:39Z",
    "updated_at": "2018-10-04T15:05:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23363955,
    "owner_login": "BubbaMachina",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23363955?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "node",
      "files",
      "front",
      "connect",
      "tutorial",
      "front end",
      "heroku",
      "little",
      "connected",
      "myself"
    ]
  },
  {
    "id": 150829934,
    "name": "nodejs-x18",
    "full_name": "eddyyanto/nodejs-x18",
    "description": "Revisiting nodejs (v10.11.0) and npm (v6.4.1)",
    "fork": false,
    "created_at": "2018-09-29T05:55:41Z",
    "updated_at": "2018-11-04T22:28:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 372538,
    "owner_login": "eddyyanto",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/372538?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "nodejs"
    ]
  },
  {
    "id": 207482236,
    "name": "Node.js_sms_send",
    "full_name": "zzckano/Node.js_sms_send",
    "description": "通过node.js搭建短信验证码接口 通过全局nodemon搭建虚拟服务器，用Postman来测试接口",
    "fork": false,
    "created_at": "2019-09-10T06:32:04Z",
    "updated_at": "2019-09-10T06:43:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 51130609,
    "owner_login": "zzckano",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/51130609?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "demo",
      "nodemon"
    ]
  },
  {
    "id": 194770225,
    "name": "API-Com-Express",
    "full_name": "evertonnppp/API-Com-Express",
    "description": "Esse e um simples exemplo de uma api  feita  com node , utilizer o Postman para facilita  o trabalho",
    "fork": false,
    "created_at": "2019-07-02T02:01:41Z",
    "updated_at": "2019-07-02T02:38:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44758876,
    "owner_login": "evertonnppp",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44758876?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "util",
      "simples",
      "exemplo"
    ]
  },
  {
    "id": 144194149,
    "name": "coding-a-web-api",
    "full_name": "payouri/coding-a-web-api",
    "description": "Practice PostMan, create a node/express/mongo web api to store and manage my own datas and have fun.",
    "fork": false,
    "created_at": "2018-08-09T19:18:58Z",
    "updated_at": "2019-10-18T12:48:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33089888,
    "owner_login": "payouri",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/33089888?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "node",
      "express",
      "mongo",
      "manage",
      "store"
    ]
  },
  {
    "id": 210008069,
    "name": "nodeapp",
    "full_name": "treetrunkz/nodeapp",
    "description": "This is a nodejs application. It is a todo list that can be accessed and created by multiple users. The API is accessed by Postman. The server and interface is set up to POST and GET dynamically. To populate node_modules `npm install ejs, express, mongoose, body-parser --save -g` + tsc -w",
    "fork": false,
    "created_at": "2019-09-21T15:24:15Z",
    "updated_at": "2019-09-22T14:09:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44754821,
    "owner_login": "treetrunkz",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44754821?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "server",
      "call",
      "node",
      "user",
      "express",
      "mongo",
      " express",
      "list",
      "users",
      "face",
      "access",
      "module",
      "interface",
      "nodejs",
      "esse",
      "multiple",
      "mongoose",
      "install",
      "parse",
      "todo",
      "parser",
      "dynamic",
      "modules",
      "dynamically",
      "accessed"
    ]
  },
  {
    "id": 223191895,
    "name": "node-mysql-crud-app",
    "full_name": "dinushchathurya/node-mysql-crud-app",
    "description": "Create  Restful API using nodejs, express and mysql",
    "fork": false,
    "created_at": "2019-11-21T14:24:22Z",
    "updated_at": "2019-11-22T08:52:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38061436,
    "owner_login": "dinushchathurya",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/38061436?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "express",
      " express",
      "mysql",
      "nodejs"
    ]
  },
  {
    "id": 58987348,
    "name": "ServerSideAuthWithNode",
    "full_name": "Andriy-Kulak/ServerSideAuthWithNode",
    "description": "Server side setup with node that can be used for future application. To use, 1) run mongodb with 'mongod' command 2) In another terminal, run npm with 'npm run dev' 3) go to Postman and use localhost:3090/ && localhost:3090/signup && localhost:3090/signin to test the app",
    "fork": false,
    "created_at": "2016-05-17T03:26:23Z",
    "updated_at": "2019-02-13T10:10:03Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 12179976,
    "owner_login": "Andriy-Kulak",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/12179976?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "node",
      "mongo",
      "sign",
      "local",
      "host",
      "command",
      "mongod",
      "mongodb",
      "side",
      "setup",
      "terminal",
      "another",
      "signup",
      "future"
    ]
  },
  {
    "id": 134984970,
    "name": "Cryptokart-OpenExchange-master",
    "full_name": "he77y/Cryptokart-OpenExchange-master",
    "description": "Implementation of a bitcoin exchange using node and couchbase. (Development Mode)",
    "fork": false,
    "created_at": "2018-05-26T18:18:16Z",
    "updated_at": "2018-05-28T01:01:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19712435,
    "owner_login": "he77y",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/19712435?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "exchange",
      "bitcoin"
    ]
  },
  {
    "id": 142746863,
    "name": "My_first_cryptocurrency",
    "full_name": "HP213/My_first_cryptocurrency",
    "description": "Using Blockchain, I made my first cryptocurrency, I suggest using postman for better understanding. Baiscally we made an decentralized system of transferring cryptocurrency. It is runnig locally on http://127.0.0.1:5001/ you can chage port according to requirement and new user. Post request is made to add transactions and create a new node and get request to block new mine and get chain. Everything mentioned in code with comments, we have made three ports http://127.0.0.1:5002/, http://127.0.0.1:5003/, http://127.0.0.1:5004/, to show connections between three miners \"A\" \"B\" and \"C\". You can make more  ",
    "fork": false,
    "created_at": "2018-07-29T09:17:12Z",
    "updated_at": "2018-07-29T09:18:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34127674,
    "owner_login": "HP213",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34127674?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "request",
      "call",
      "node",
      "http",
      "user",
      "code",
      "local",
      "more",
      "connect",
      "very",
      "system",
      "action",
      "chai",
      "currency",
      "between",
      "under",
      "crypto",
      "require",
      "connection",
      "according",
      "locally",
      "comments",
      "mine",
      "three",
      "better",
      "transactions",
      "understanding",
      "cryptocurrency",
      "suggest"
    ]
  },
  {
    "id": 230786808,
    "name": "todo",
    "full_name": "psjoshi20/todo",
    "description": "todo app  using -psql-seq-nodejs-express-postman-restapi 29dec2019",
    "fork": false,
    "created_at": "2019-12-29T18:15:40Z",
    "updated_at": "2019-12-30T05:17:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 55941347,
    "owner_login": "psjoshi20",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/55941347?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "node",
      "express",
      "nodejs",
      "todo",
      "2019",
      "restapi",
      "29dec2019"
    ]
  }
]