[
  {
    "id": 16481477,
    "name": "postman-chrome-interceptor",
    "full_name": "postmanlabs/postman-chrome-interceptor",
    "description": "Helper extension for the Postman packaged app. Also helps send restricted headers.",
    "fork": false,
    "created_at": "2014-02-03T14:21:04Z",
    "updated_at": "2020-03-15T18:02:10Z",
    "stargazers_count": 178,
    "watchers_count": 178,
    "forks": 59,
    "watchers": 178,
    "score": 1,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "help",
      "send",
      "extension",
      "package",
      "header",
      "helps",
      "restrict"
    ]
  },
  {
    "id": 62882111,
    "name": "postman-runtime",
    "full_name": "postmanlabs/postman-runtime",
    "description": null,
    "fork": false,
    "created_at": "2016-07-08T10:54:26Z",
    "updated_at": "2020-03-31T07:00:49Z",
    "stargazers_count": 79,
    "watchers_count": 79,
    "forks": 51,
    "watchers": 79,
    "score": 1,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 41714744,
    "name": "api-spec-converter",
    "full_name": "stoplightio/api-spec-converter",
    "description": "This package helps to convert between different API specifications (Postman, Swagger, RAML, StopLight).",
    "fork": false,
    "created_at": "2015-09-01T03:26:30Z",
    "updated_at": "2020-03-12T20:44:20Z",
    "stargazers_count": 106,
    "watchers_count": 106,
    "forks": 73,
    "watchers": 106,
    "score": 1,
    "owner_id": 10767217,
    "owner_login": "stoplightio",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/10767217?v=4",
    "pulled": 1,
    "tags": [
      "convert",
      "help",
      "spec",
      "rent",
      "package",
      "between",
      "specific",
      "helps",
      "specification",
      "specifications"
    ]
  },
  {
    "user": "kendaleiv",
    "repo": "chocolatey-postman",
    "pulled": "User",
    "id": 64801397,
    "name": "chocolatey-postman",
    "full_name": "kendaleiv/chocolatey-postman",
    "description": "This is a Chocolatey package to install Postman for Windows.",
    "fork": false,
    "created_at": "2016-08-03T00:21:07Z",
    "updated_at": "2020-03-16T01:24:36Z",
    "forks": 9,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 9,
    "subscribers_count": 2,
    "owner_id": 1012917,
    "owner_login": "kendaleiv",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1012917?v=4",
    "owner_type": "User",
    "tags": [
      "package",
      "install"
    ]
  },
  {
    "user": "HamedNN76",
    "repo": "postman-fetch",
    "pulled": "User",
    "id": 191059128,
    "name": "postman-fetch",
    "full_name": "HamedNN76/postman-fetch",
    "description": "A package for fetch from your postman collection easily with name of your request",
    "fork": false,
    "created_at": "2019-06-09T21:54:28Z",
    "updated_at": "2019-09-15T11:59:46Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 6,
    "network_count": 1,
    "subscribers_count": 0,
    "owner_id": 33554763,
    "owner_login": "HamedNN76",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/33554763?v=4",
    "owner_type": "User",
    "tags": [
      " postman",
      "collect",
      "collection",
      "request",
      "postman collection",
      "package",
      "name",
      "easily",
      "fetch"
    ]
  },
  {
    "user": "udartsev",
    "repo": "LaravelPostmanExport",
    "pulled": "User",
    "id": 191168070,
    "name": "LaravelPostmanExport",
    "full_name": "udartsev/LaravelPostmanExport",
    "description": "Laravel 5.8+ package to create Postman_collection.json file with Laravel routes",
    "fork": false,
    "created_at": "2019-06-10T12:56:05Z",
    "updated_at": "2020-03-03T02:41:09Z",
    "forks": 1,
    "open_issues": 3,
    "watchers": 6,
    "network_count": 1,
    "subscribers_count": 0,
    "owner_id": 36134794,
    "owner_login": "udartsev",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36134794?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "create",
      "file",
      "json",
      "route",
      "routes",
      "package"
    ]
  },
  {
    "user": "tiagohillebrandt",
    "repo": "postman-ubuntu-ppa",
    "pulled": "User",
    "id": 120094592,
    "name": "postman-ubuntu-ppa",
    "full_name": "tiagohillebrandt/postman-ubuntu-ppa",
    "description": "Source to build Postman PPA packages.",
    "fork": false,
    "created_at": "2018-02-03T13:42:14Z",
    "updated_at": "2020-03-13T02:40:52Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 5,
    "network_count": 1,
    "subscribers_count": 1,
    "owner_id": 1733911,
    "owner_login": "tiagohillebrandt",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1733911?v=4",
    "owner_type": "User",
    "tags": [
      "build",
      "package",
      "packages"
    ]
  },
  {
    "user": "SalahEddin",
    "repo": "pman",
    "pulled": "User",
    "id": 209098019,
    "name": "pman",
    "full_name": "SalahEddin/pman",
    "description": "package to create postman test collections without Postman GUI",
    "fork": false,
    "created_at": "2019-09-17T16:02:04Z",
    "updated_at": "2019-09-18T15:53:10Z",
    "forks": 0,
    "open_issues": 7,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 7818090,
    "owner_login": "SalahEddin",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7818090?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "collections",
      "create",
      "package"
    ]
  },
  {
    "id": 191059128,
    "name": "postman-fetch",
    "full_name": "HamedNN76/postman-fetch",
    "description": "A package for fetch from your postman collection easily with name of your request",
    "fork": false,
    "created_at": "2019-06-09T21:54:28Z",
    "updated_at": "2019-09-15T11:59:46Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 1,
    "watchers": 6,
    "score": 1,
    "owner_id": 33554763,
    "owner_login": "HamedNN76",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/33554763?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "request",
      "postman collection",
      "package",
      "name",
      "easily",
      "fetch"
    ]
  },
  {
    "id": 191168070,
    "name": "LaravelPostmanExport",
    "full_name": "udartsev/LaravelPostmanExport",
    "description": "Laravel 5.8+ package to create Postman_collection.json file with Laravel routes",
    "fork": false,
    "created_at": "2019-06-10T12:56:05Z",
    "updated_at": "2020-03-03T02:41:09Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 1,
    "watchers": 6,
    "score": 1,
    "owner_id": 36134794,
    "owner_login": "udartsev",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36134794?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "create",
      "file",
      "json",
      "route",
      "routes",
      "package"
    ]
  },
  {
    "id": 137139268,
    "name": "Node_Postman",
    "full_name": "lkkushan101/Node_Postman",
    "description": null,
    "fork": false,
    "created_at": "2018-06-12T23:44:11Z",
    "updated_at": "2018-06-13T04:28:31Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 35223257,
    "owner_login": "lkkushan101",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35223257?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 120094592,
    "name": "postman-ubuntu-ppa",
    "full_name": "tiagohillebrandt/postman-ubuntu-ppa",
    "description": "Source to build Postman PPA packages.",
    "fork": false,
    "created_at": "2018-02-03T13:42:14Z",
    "updated_at": "2020-03-13T02:40:52Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 1,
    "watchers": 5,
    "score": 1,
    "owner_id": 1733911,
    "owner_login": "tiagohillebrandt",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1733911?v=4",
    "pulled": 1,
    "tags": [
      "build",
      "package",
      "packages"
    ]
  },
  {
    "id": 209098019,
    "name": "pman",
    "full_name": "SalahEddin/pman",
    "description": "package to create postman test collections without Postman GUI",
    "fork": false,
    "created_at": "2019-09-17T16:02:04Z",
    "updated_at": "2019-09-18T15:53:10Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 7818090,
    "owner_login": "SalahEddin",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7818090?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "collections",
      "create",
      "package"
    ]
  },
  {
    "id": 60530352,
    "name": "YangHuiLi-express-json-postman",
    "full_name": "Alloy-Girls/YangHuiLi-express-json-postman",
    "description": null,
    "fork": false,
    "created_at": "2016-06-06T13:32:35Z",
    "updated_at": "2016-06-06T13:41:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 19777946,
    "owner_login": "Alloy-Girls",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/19777946?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 211705852,
    "name": "authentication-in-node-js",
    "full_name": "siddharth151199/authentication-in-node-js",
    "description": "use postman or rest client package in editor",
    "fork": false,
    "created_at": "2019-09-29T18:15:35Z",
    "updated_at": "2019-09-29T18:18:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47297731,
    "owner_login": "siddharth151199",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47297731?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "rest",
      "client",
      "package",
      "edit",
      "editor"
    ]
  },
  {
    "id": 159415400,
    "name": "postman-collection-generator",
    "full_name": "AlbertLabarento/postman-collection-generator",
    "description": "Postman collection generator for your api's. Best used for your functional tests integrated with this package.",
    "fork": false,
    "created_at": "2018-11-27T23:35:58Z",
    "updated_at": "2019-09-27T03:58:15Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 3,
    "watchers": 4,
    "score": 1,
    "owner_id": 12888117,
    "owner_login": "AlbertLabarento",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12888117?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "tests",
      "tests ",
      "function",
      "functional",
      "package",
      "generator",
      "integrate",
      "integrated"
    ]
  },
  {
    "id": 46117925,
    "name": "wi-postman",
    "full_name": "werbasinnotec/wi-postman",
    "description": "Letterman will response and request all packages from a REST API",
    "fork": false,
    "created_at": "2015-11-13T11:22:50Z",
    "updated_at": "2015-11-16T15:05:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13216351,
    "owner_login": "werbasinnotec",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/13216351?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "response",
      "package",
      "packages"
    ]
  },
  {
    "id": 200129951,
    "name": "postman-external-require",
    "full_name": "matt-ball/postman-external-require",
    "description": "Import node packages inside Postman.",
    "fork": false,
    "created_at": "2019-08-01T23:08:34Z",
    "updated_at": "2019-08-20T15:09:58Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 8490181,
    "owner_login": "matt-ball",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8490181?v=4",
    "pulled": 1,
    "tags": [
      "node",
      "package",
      "side",
      "packages",
      "inside"
    ]
  },
  {
    "id": 51247641,
    "name": "postman-task",
    "full_name": "avirati/postman-task",
    "description": null,
    "fork": false,
    "created_at": "2016-02-07T12:58:21Z",
    "updated_at": "2016-02-07T12:58:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1936119,
    "owner_login": "avirati",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1936119?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 108829831,
    "name": "Blog-postman",
    "full_name": "RahulWala/Blog-postman",
    "description": null,
    "fork": false,
    "created_at": "2017-10-30T09:35:14Z",
    "updated_at": "2017-10-30T10:32:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31235531,
    "owner_login": "RahulWala",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31235531?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 195262908,
    "name": "postman-doc-generator",
    "full_name": "vishweswaran-p/postman-doc-generator",
    "description": "This package is used to create an xlsx file from the postman collection.",
    "fork": false,
    "created_at": "2019-07-04T15:09:25Z",
    "updated_at": "2019-07-04T15:13:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 50708520,
    "owner_login": "vishweswaran-p",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/50708520?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "create",
      "postman collection",
      "file",
      "package",
      "xlsx"
    ]
  },
  {
    "id": 185835993,
    "name": "postman-to-load",
    "full_name": "jedlee2004/postman-to-load",
    "description": "Tool to convert postman collections into load tests options and run them with the npm loadtest package",
    "fork": false,
    "created_at": "2019-05-09T16:34:41Z",
    "updated_at": "2019-09-24T16:39:19Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 8194654,
    "owner_login": "jedlee2004",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/8194654?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "collections",
      "postman collection",
      "tests",
      "tests ",
      "convert",
      "postman collections",
      "load",
      "package",
      "options"
    ]
  },
  {
    "id": 189011114,
    "name": "Postman_Friend_PHP",
    "full_name": "samjones310/Postman_Friend_PHP",
    "description": null,
    "fork": false,
    "created_at": "2019-05-28T10:59:43Z",
    "updated_at": "2019-05-30T08:11:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33936224,
    "owner_login": "samjones310",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/33936224?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 119261980,
    "name": "postmanAPITesting",
    "full_name": "nicolashenschel/postmanAPITesting",
    "description": "Playing with Postman (https://www.getpostman.com/) and newman (https://www.npmjs.com/package/newman)",
    "fork": false,
    "created_at": "2018-01-28T13:44:36Z",
    "updated_at": "2018-01-28T13:44:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1732412,
    "owner_login": "nicolashenschel",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1732412?v=4",
    "pulled": 1,
    "tags": [
      "http",
      "newman",
      "https",
      "package",
      "getpost"
    ]
  },
  {
    "id": 166862188,
    "name": "PostmanApi",
    "full_name": "ngcamango/PostmanApi",
    "description": null,
    "fork": false,
    "created_at": "2019-01-21T18:40:13Z",
    "updated_at": "2019-01-21T19:32:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6638216,
    "owner_login": "ngcamango",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6638216?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 231652278,
    "name": "postmanAPi",
    "full_name": "gsezis/postmanAPi",
    "description": null,
    "fork": false,
    "created_at": "2020-01-03T19:32:23Z",
    "updated_at": "2020-01-03T22:46:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20908142,
    "owner_login": "gsezis",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20908142?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 182991485,
    "name": "PostmanAPI",
    "full_name": "NiveditaSachan/PostmanAPI",
    "description": null,
    "fork": false,
    "created_at": "2019-04-23T10:28:23Z",
    "updated_at": "2019-10-18T09:16:21Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 28826914,
    "owner_login": "NiveditaSachan",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/28826914?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 193398169,
    "name": "PostmanAPIProject",
    "full_name": "deledpe/PostmanAPIProject",
    "description": null,
    "fork": false,
    "created_at": "2019-06-23T21:42:59Z",
    "updated_at": "2019-06-29T23:03:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23053226,
    "owner_login": "deledpe",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23053226?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 34539538,
    "name": "postmanAPI",
    "full_name": "congodabongo/postmanAPI",
    "description": null,
    "fork": false,
    "created_at": "2015-04-24T20:13:31Z",
    "updated_at": "2018-11-25T20:09:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12104691,
    "owner_login": "congodabongo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/12104691?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 190126346,
    "name": "Restful-Explore-California-App",
    "full_name": "davidenoma/Restful-Explore-California-App",
    "description": "A restful spring boot micro service based on spring data JPA and spring rest. It allows requests to the web service that returns information about tours, tour packages and tour ratings about locations in california.",
    "fork": false,
    "created_at": "2019-06-04T04:01:22Z",
    "updated_at": "2019-06-06T14:43:04Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 24875399,
    "owner_login": "davidenoma",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/24875399?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "rest",
      "service",
      "requests",
      "based",
      "format",
      "boot",
      "restful",
      "spring",
      "package",
      "rating",
      "info",
      "infor",
      "allows",
      "information",
      "micro",
      "spring boot",
      "location",
      "turns",
      "returns",
      "packages",
      "tours"
    ]
  },
  {
    "id": 202735610,
    "name": "newman_runner",
    "full_name": "Ppamo/newman_runner",
    "description": "A docker image to run Postman tests using Newman NPM package",
    "fork": false,
    "created_at": "2019-08-16T13:49:09Z",
    "updated_at": "2019-08-16T16:16:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6662326,
    "owner_login": "Ppamo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/6662326?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "tests ",
      "image",
      "package",
      "docker"
    ]
  },
  {
    "id": 119091462,
    "name": "Zadanie_17_5",
    "full_name": "martinproxy0/Zadanie_17_5",
    "description": " 17. ExpressJS - ekspresowe tworzenie aplikacji w NodeJS Wyzwania: Dowiesz się czym jest ExpressJS Nauczysz się korzystać z routingu Poznasz czym są szablony 17.1. Wprowadzenie do Expressa Express jest jednym z najpopularniejszych frameworków dla aplikacji pisanych w Node.js. Jest bardzo lekki i pozwala na lepszą organizację aplikacji w modelu MVC. Ok, zwolnijmy. Już na samym starcie pojawiły się dwa pojęcia, których do tej pory nie omówiliśmy zbyt dokładnie: framework i MVC. Na początku przypomnijmy sobie czym jest framework.  Czym są frameworki? Framework to swego rodzaju szkielet, na którym opieramy budowę naszej aplikacji. Jest pewnym poziomem abstrakcji, na której konstruujemy naszą aplikację.  Czym jest abstrakcja? Abstrakcja w inżynierii oprogramowania to technika, dzięki której jesteśmy w stanie zapanować nad złożonością systemu. Najzwyczajniej w świecie nie da się myśleć na wielu płaszczyznach na raz, dlatego programiści dzielą problemy na pewne poziomy i to na nich rozwiązują mniejsze problemy. Przykładowo - programista korzystający z Reacta nie martwi się o niższy poziom abstrakcji, z którego nieświadomie korzysta używając Reacta. Korzystając z komputera także nie zastanawiamy się za bardzo co dzieje się w środku procesora czy też w jaki sposób jest skonstruowany. Tym poziomem abstrakcji po prostu nie zawracamy sobie głowy. Używając JavaScriptu nie myślimy w jaki sposób parser analizuje składnię języka. Jeśli nie jest to nam potrzebne, to możemy zająć się tym, co jest dla nas naprawdę istotne - pisaniem aplikacji internetowych!  Express to właśnie kolejny, wyższy poziom abstrakcji, dzięki któremu możemy skupić się na właściwym problemie. Zawiera zbiór generycznych (możliwych do zastosowania w wielu miejscach / uniwersalnych) funkcjonalności, które powtarzają się w obrębie każdej aplikacji. Cały zamysł frameworka opiera się na zasadzie - nie wymyślaj koła na nowo, bo można budować na podstawie dobrych, uniwersalnych rozwiązań. Po wykonaniu tego samego zadania wiele razy, człowiek instynktownie szuka sposobu na automatyzację problemu - szczególnie leniwy programista. :)  Framework ma niestety jedną wadę, która bywa momentami również zaletą - narzuca programiście sposób w jaki należy rozwiązać problem. Takie podejście z jednej strony nieco nas ogranicza, bo nie pozwala nam 'grzebać' w rozwiązaniu, a z drugiej strony zmniejsza ilość miejsc, w których moglibyśmy popełnić jakiś błąd. Zaletą takiego podejścia jest też to, że programiści korzystający z frameworków często borykają się z podobnymi problemami, przez co łatwo jest znaleźć rozwiązania, bo ktoś już na pewno zetknął się z czymś, co sprawia nam kłopot :)  Wracając do Expressa - jest on niewielkim frameworkiem, który daje programiście przyjemną podstawkę do tworzenia aplikacji, ale nie narzuca żadnych praktyk - może o tym świadczyć chociażby fakt, że wiele znanych frameworków opiera swoją budowę na Express. Można do nich zaliczyć przykładowo Loopbacka, Sailsa czy Krakena.  Model-View-Controller Ok, wiemy już czym jest framework - pora na pojęcie MVC :) Jest to skrót od ang. Model View Controller (Model Widok Kontroler). Jest jednym z najczęściej przewijających się wzorców architektonicznych w internecie. Popularnością pomału wypiera go architektura Flux, o której coraz częściej słychać (szczególnie w środowisku Reacta), ale o tym wzorcu powiemy sobie jeszcze przy okazji omawiania Reduxa - wróćmy do MVC.  Głównym założeniem przyjętym podczas projektowania MVC było oddzielenie warstwy prezentacji od logiki biznesowej aplikacji. To podejście umożliwia tworzenie narzędzi działających bez graficznego interfejsu (zastępuje go wtedy tzw. Command Line Interface, a.k.a. CLI) i jest dalej popularne w środowisku Unixowym. Tak więc:  Model jest reprezentacją logiki aplikacji / problemu z jakim się zmagamy / domeną. Widok opisuje w jaki sposób coś wyświetlić. W React są to komponenty (szczególnie te prezentacyjne). Kontroler przyjmuje dane od użytkownika aplikacji i reaguje na jego działania w obrębie widoku. Aktualizuje widok i model aplikacji. O samej architekturze można napisać osobny moduł tym bardziej, że jak już wcześniej wspomnieliśmy bardzo często przewija się on w środowisku front-end developerów i jest częścią składową wielu frameworków. Sama implementacja MVC wymaga wiedzy na temat programowania obiektowego i wzorców projektowych. Zainteresowanych zapraszam do przeczytania tej książki na temat wzorców projektowych stosowanych w JavaScripcie.  Express dostarcza wielu funkcjonalności do tworzenia aplikacji webowych. Jak już wspomniałem, ułatwia on przede wszystkim szybki rozwój aplikacji opartych na Node.js. Podstawowymi cechami tego frameworka są:  serwowanie plików statycznych za pomocą jednej komendy konfigurowanie middleware, czyli pośrednika między żądaniem a odpowiedzią w momencie, kiedy użytkownik wykonuje jakieś akcje, np. wysyła formularz, middleware może wykonać pewne czynności zanim dane zostaną zapisane. Nie sprowadza się to oczywiście tylko do zapisu danych, ale szerzej na temat tego zagadnienia powiemy sobie w dalszym rozdziale definiowanie tablicy routingu, czyli ścieżek (adresów), które wyświetlają odpowiednie treści, przyjmują i zapisują dane, bądź odpytane o dane zwracają je. Bazują na protokole HTTP oraz URI (ang. Uniform Resource Identifier) pozwala na dynamiczne tworzenie stron HTML bazujących na argumentach przekazanych do istniejących szablonów Nie przejmuj się, jeśli powyższe opisy wydają się być nieco zagmatwane. Kolejne rozdziały rozjaśnią sprawę! Zanim jednak przejdziemy do omawiania poszczególnych funkcjonalności Expressa, przeprowadzimy proces instalacji.  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.2. Instalacja ExpressJS Framework Express instalujemy używając npm, analogicznie do innych pakietów, które dodawaliśmy już we wcześniejszych modułach. Dla przypomnienia, wystarczy, że zainicjujesz swój projekt - npm init, a następnie użyjesz komendy npm install express --save, która zapisze zainstalowany pakiet w katalogu node_modules/ i doda go do sekcji dependencies w pliku package.json.  Razem z Expressem należy zainstalować jeszcze jeden ważny moduł - body-parser, który jest pakietem pozwalającym na obsługę różnych formatów danych w middleware takich jak JSON, text czy tzw. surowe dane (ang. raw data). Aby go zainstalować, wpisz npm install body-parser --save.  Pierwsza aplikacja w ExpressJS Sprawdźmy teraz, czy wszystko działa tak jak powinno. Testowa aplikacja, jaką stworzymy przy użyciu Expressa, będzie przedstawiała podstawową zasadę działania tego frameworka. Aplikacja uruchomi serwer oraz będzie nasłuchiwać na porcie 3000 w oczekiwaniu na połączenie - dokładnie w taki sam sposób, jak w przypadku serwera HTTP napisanego w “czystym\" Node.js. Nasłuchiwanie oznacza nic innego jak oczekiwanie na połączenie - po wystąpieniu żądania, serwer odpowie nam klasycznym “Hello world\".  Zanim zaczniemy tworzyć aplikację, musimy wytłumaczyć sobie pewne pojęcia.  Opis pojęcia routingu Routing to sposób określania jak aplikacja będzie odpowiadać na żądania klienta na dane endpointy przy użyciu konkretnych metod HTTP. Przypomnijmy sobie w jaki sposób wyglądały metody HTTP:  GET - najprostsza z metod HTTP - służy do pobierania zasobów z serwera. Pobranymi zasobami mogą być np. pliki HTML, CSS, JavaScript czy obiekty JSON / XML. POST - ta metoda jest używana do wysyłania danych do serwera. Stosuje się ją np. przy formularzach lub przy wstawianiu zdjęć i wysyłaniu ich jako załącznik. Zwykle dane te wysyłane są jako para klucz-wartość. PUT - działa podobnie jak POST, czyli również służy do wysyłania danych. Różnicą jest ograniczenie do wysłania tylko jednej porcji danych - np. jednego pola. Metoda ta najczęściej używana jest do aktualizacji istniejących danych DELETE - metoda, która służy do usuwania danych z serwera. Chodzi oczywiście o dane, które zostały wskazane przy wysyłaniu żądania. Kolejnym pojęciem jest URI (nazywane również PATH) - jest to właśnie wspomniany wcześniej endpoint, który zawiera polecenia do wykonania gdy zostanie wywołany przez żądanie.  Czas start! Na początek stwórzmy plik server.js w katalogu z projektem. Po zainstalowaniu powyższych zależności, drzewo projektu powinno wyglądać w następujący sposób:   Aby mieć możliwość skorzystania z zainstalowanych zależności, na początku należy zadeklarować zmienną, w której będziemy przechowywać funkcjonalności pakietu Expressa.  var express = require('express'); Jak widzisz, każda paczka JS'a działa dokładnie w taki sam sposób. Koncepcja modułów będzie przewijać się aż do końca tego kursu. Następnym krokiem będzie stworzenie aplikacji Express:  var app = express(); Naszą aplikację przypisaliśmy do zmiennej app. Teraz możemy sprawić, aby odpowiadała prostym Hello world w momencie, w którym odbierzemy wysłane zapytanie GET na adres strony domowej:  app.get('/', function(req, res) {     res.send('Hello world'); }); Powyższy kod rejestruje pierwszy routing (proces przetwarzania otrzymanego adresu żądania i na jego podstawie decydowanie, co powinno zostać uruchomione) na wysłane żądanie GET po wejściu na stronę główną ( http://localhost:3000/ ). Jako callback na wystąpienie tego zdarzenia wywoływana jest funkcja, która w przypadku udanej odpowiedzi wyśle wiadomość Hello world.  To jednak jeszcze nie koniec. Zarejestrowaliśmy obsługę pierwszego routingu, ale należy zainicjować nasłuchiwanie serwera na to i inne zdarzenia. Dopiszmy więc:  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Po zapisaniu powyższego kodu, należy uruchomić go komendą node server.js (lub za pomocą Nodemona, którego poznaliśmy w pierwszym module) - teraz po ponownym wejściu na adres http://localhost:3000/ powinniśmy zobaczyć następujący widok:   Jest to znak, że nasza aplikacja działa!  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.3. Route, czyli ścieżka wyznaczona dla użytkownika aplikacji Wykorzystanie endpointów Rozwińmy teraz trochę aplikację stworzoną w poprzednim podrozdziale. Aktualnie kod w pliku server.js wygląda następująco:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Endpointy statyczne Na początek zmodyfikujemy lekko żądanie GET i do strony głównej zamiast Hello world! wpiszmy Hello GET! oraz dodamy linijkę drukującą otrzymane żądanie (po stronie serwera) jak poniżej:  app.get('/', function (req, res) {     console.log('Otrzymałem żądanie GET do strony głównej');     res.send('Hello GET!'); }); Warto w tym miejscu wspomnieć o narzędziu Postman - możesz pobrać je ze strony https://www.getpostman.com/. Używa się go do testowania endpointów. Postman jest prosty i intuicyjny w obsłudze - wystarczy, że podasz adres oraz metodę HTTP, jakiej chcesz użyć w odpowiednich polach i… już :) Pozostaje tylko wysłanie requesta i sprawdzenie czy response zgadza się z naszymi oczekiwaniami.   Dodajmy też inne metody HTTP do naszej aplikacji. Zacznijmy od POST. Dla tej i kolejnej metody wykonamy podobne operacje. Chodzi tutaj o to, aby zaobserwować działanie zarejestrowanych endpointów.  app.post('/', function (req, res) {     console.log('Otrzymałem żądanie POST do strony głównej');     res.send('Hello POST!'); }); Do tego czasu oba nasze zapytania kierowaliśmy do strony domowej. Dodajmy teraz obsługę żądania z metodą DELETE oraz inną ścieżką:  app.delete('/del_user', function (req, res) {     console.log('Otrzymałem żądanie DELETE do strony /del_user');     res.send('Hello DELETE!'); }); DLA CHĘTNYCH: Przetestuj powyższe zapytanie w Postmanie! :)  Dla praktyki, dodajmy jeszcze kilka innych endpointów, a następnie przejdźmy do testowania.  app.get('/list_user', function (req, res) {     console.log('Otrzymałem żądanie GET do strony /list_user');     res.send('Strona z listą użytkowników!'); });  app.get('/ab*cd', function(req, res) {     console.log('Otrzymałem żądanie GET do strony /ab*cd');     res.send('Wzór pasuje'); }); Po dodaniu powyższych fragmentów kodu zapisz plik server.js, a następnie ponownie użyj komendy node server.js chyba, że używasz Nodemona :)  Zerknijmy na endpoint /list_user   Otrzymaliśmy to, czego oczekiwaliśmy. Sprawdźmy jeszcze inne.    Jeśli jednak użyliśmy endpointa, którego nie zdefiniowaliśmy, otrzymamy odpowiedź jak na ostatnim obrazku.  Endpointy dynamiczne Istnieje również inny typ endpointów, które nazywa się dynamicznymi. Używanie ich pozwala na przekazywanie parametrów i bazowanie na nich. Wróćmy na moment do kodu stworzonego na samym początku:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Najpierw zmodyfikujemy trochę bazowy kod. Usuńmy linijki 8-10, które miały nam tylko pokazać podstawowe informacje na temat serwera. Zamiast tego napiszmy po prostu: app.listen(3000);  Tworzenie dynamicznego routingu pozwala na przekazywanie parametrów, więc spróbujmy najpierw z przykładowym id. Zamiast odwołać się do strony domowej ('/'), odwołajmy się do zmiennego parametru id. Parametr zmienny od statycznego rozróżnia się poprzez dodanie dwukropka (:) przed nazwę. W naszym przykładzie endpoint będzie więc wyglądał następująco:  /:id Zmieńmy jeszcze odpowiedź z Hello world na 'Identyfikator, który został dopisany to ' + req.params.id.  Czym jest req.params.id? req jest obiektem reprezentującym zapytanie HTTP (ang. request). Posiada on różne parametry, jak na przykład body (czyli ciało zapytania), nagłówki HTTP oraz parametry (params), które mamy zamiar odczytać.  Parametr, który wstawiliśmy jako część adresu w metodzie GET, przekazujemy jako id. W poniższym przypadku wyświetli się komunikat Identyfikator który został dopisany to 123, o ile zapytanie wysłano na adres http://localhost:3000/123.   Popróbuj z różnymi innymi parametrami i sprawdź czy aplikacja działa tak, jak tego oczekujesz.  Obsługa błędu 404 za pomocą ExpressJS Co jeśli serwer nie rozpozna żądania? W Expressie odpowiedź 404 nie jest wynikiem błędu, więc nie jest wyłapywany w trakcie działania aplikacji. Spowodowane jest to tym, że 404 zwykle oznacza brak możliwości wykonania danej czynności, a nie błąd występujący z powodu jakiejś 'wpadki' programisty. Innymi słowy, Express wykonał wszystkie funkcje middleware (które poznamy w kolejnym rozdziale) oraz route'y i dopiero wtedy dowiedział się, że żaden z nich nie odpowiedział na żądanie - taki przypadek możemy obsłużyć poprzez dodanie funkcji middleware na samym końcu (poniżej pozostałych funkcji), aby obsługiwała status 404.  Powróćmy znów do poprzedniego szablonu z metodą GET na stronę domową ('/'), która zwraca nam Hello world!. Dopiszmy teraz metodę middleware, która obsłuży nam błąd 404.  Na samym końcu, poniżej fragmentu z nasłuchiwaniem dodajmy obsługę odpowiedzi 404:  app.use(function (req, res, next) {     res.status(404).send('Wybacz, nie mogliśmy odnaleźć tego, czego żądasz!') }); Po ponownym uruchomieniu skryptu, w przeglądarce powinieneś zobaczyć Hello world!. Spróbuj teraz dopisać coś na koniec adresu (tak jak w poprzednim rozdziale dopisaliśmy id). Powinieneś otrzymać następujący komunikat:   Parametr next, który przekazujemy do funkcji jest funkcją, która pozwala “iść dalej\" do kolejnej funkcji middleware lub zakończenia żądania.  Można w ten sposób stworzyć także obsługę pozostałych błędów. Najczęściej obsługiwane błędy to:  400 - bad request - występuje gdy serwer nie może przetworzyć zapytania 401 - unauthorized - występuje gdy wymagane jest uwierzytelnienie, a nie zostało dostarczone 403 - forbidden - żądanie jest poprawne, jednak serwer odmawia odpowiedzi, może to wystąpić w przypadku gdy np. użytkownik jest zalogowany ale nie ma uprawnień do wykonania żądania 404 - not found - zasoby nie zostały znalezione 500 - internal server error - występuje gdy występują nieznane warunki i nie ma żadnej konkretnej wiadomości Zadanie: Operacje CRUD na pliku JSON Stwórzmy teraz aplikację, która będzie otwierać zewnętrzne pliki .json oraz edytować je. Zanim zaczniemy, w folderze projektu stwórz plik server.js, a następnie zainicjalizuj projekt poprzez wpisanie npm init w konsoli.  Przejdźmy do pobrania potrzebnych zależności - tym razem będzie nam potrzebny Express oraz body-parser. Jak się zapewne domyślasz, możesz zainstalować je za pomocą komendy npm install --save express body-parser. Po pobraniu paczek, możemy śmiało przejść do pisania kodu - na początek przypisz zależności do zmiennych w pliku server.js. Dodaj także linijkę var fs = require('fs') - fs będzie nam potrzebny do operacji na plikach. Nie musimy go instalować, bo jest on wbudowany w Node :)  Skoro zależności mamy już załatwione, zadeklaruj zmienną app, która wywoła funkcję express() oraz zmienną stringifyFile (na razie bez zadeklarowanej wartości).  Tuż pod deklaracją zmiennych dodaj także linijkę app.use(bodyParser.json()); - to pozwoli Ci wykorzystać middleware body-parser, które zainstalowaliśmy przed chwilą. body-parser jest nam potrzebny, aby korzystać z formatu application/json - póki co nie przejmuj się pojęciem middleware, zajmiemy się nim nieco dalej w tym kursie :)  Stwórz teraz endpoint GET /getNote, gdzie po wywołaniu zostanie wczytany Twój zewnętrzny plik JSON oraz wyświetlona zostanie jego zawartość. Przykłądowy plik test.json:  {\"menu\": {    \"id\": \"file\",    \"value\": \"File\",    \"popup\": {      \"menuitem\": [        {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},        {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},        {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}      ]    }  }} Metoda która pozwoli nam na odczytanie pliku to readFile, którą można wywołać z zadeklarowanego wcześniej fs. Jako parametry przyjmuje ona najpierw plik, następnie opcje (np. kodowanie) i funkcję, która wywoła się po załadowaniu. W naszym przypadku będzie to więc następujący kod: fs.readFile('./test.json', 'utf8', function(err, data) {     if (err) throw err;     stringifyFile = data     res.send(data); }); Teraz pora na stworzenie endpointa, który po wywołaniu nadpisze nam podany plik. Stworzymy do tego dynamiczny endpoint, który dopisze do pliku string, który przekażemy jako parametr. Stwórz tym razem POST na /updateNote/:note. Po jego wywołaniu tekst, który znajduje się w miejscu /:note powinniśmy dopisać do wczytanego pliku poprzez dodanie req.params.note do zmiennej stringifyFile, która przechowuje aktualną zawartość pliku.  Po przypisaniu powyższej zmiennej, należy ponownie odwołać się do modułu fs tym razem używając metody writeFile. Pomoże nam w tym następujący fragment kodu:  fs.writeFile('./test.json', stringifyFile, function(err) {     If (err) throw err;     console.log('file updated'); }); Na końcu pliku dodaj nasłuchiwanie na porcie 3000.  Zapisz plik i uruchom aplikację wpisując node server.js w konsoli.  Otwórz Postmana, ustaw metodę zapytania na GET, a w pole adresu wpisz http://localhost:3000/getNote. Jako response powinieneś otrzymać Twój stworzony wcześniej plik JSON. Po zmianie z GET na POST oraz wpisaniu /updateNote/test zamiast /getNote oraz wysłaniu requesta, Twój plik JSON powinien zostać zaktualizowany o słowo test :)  Po ukończeniu zadania, wrzuć swój kod na Githuba i przekaż link do repozytorium mentorowi :)  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_3.git   Wyslij link  17.4. Serwowanie plików statycznych Express posiada wbudowaną możliwość serwowania plików statycznych - takimi plikami są na przykład obrazki, pliki CSS czy JS. Aby serwować te pliki statycznie, wystarczy użyć express.static. Pliki statyczne to pliki, które zostają dostarczone do klienta bez generowania, modyfikacji czy przetwarzania - jedyne, co trzeba z nimi zrobić, to przekazać nazwę katalogu, w którym są przetrzymywane, do express.static - to wystarczy aby zacząć je serwować. Spróbujmy przedstawić to sobie na przykładzie.  Załóżmy, że przetrzymujesz swoje zdjęcia i pliki CSS w katalogu assets/. Aby zacząć je serwować, możesz więc użyć następującej linijki:  app.use(express.static('assets')); Zmodyfikujmy więc całkowicie naszą aplikację. Najpierw stwórzmy w katalogu projektu nowy katalog o nazwie assets/. Wrzućmy do niego jakiekolwiek zdjęcie/obrazek. W pliku server.js wróćmy do poprzedniego stanu (zanim zaczęliśmy zajmować się routingiem):  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, 'localhost', function() {     var host = server.address().address;     var port = server.address().port;      console.log('Przykładowa aplikacja nasłuchuje na http://' + host + ':' + port); }); W tym przykładzie sami definiujemy port i adres, ale w prawdziwej aplikacji moglibyśmy tych wartości nie znać. Częstym przykładem jest sytuacja w której adres i port są zdefiniowane w osobnym pliku konfiguracyjnym. Ten plik byłby inny na naszym komputerze niż na serwerze na którym będziemy publikować aplikację - ale nasz kod ma działać w obu lokalizacjach. Dlatego do wyświetlenia linka potrzebowalibyśmy pobrania tych danych za pomocą metody .address().  Pozostaje teraz jedynie w linii nr 3 dodać to, o czym powiedzieliśmy sobie chwilkę temu, czyli linijkę app.use(express.static('assets'));  Dla przypomnienia, w nawiasach do express.static przekazujemy katalog, w którym znajdują się pliki, które chcemy serwować. Po zapisaniu pliku server.js, możemy uruchomić aplikację. Teraz, aby zobaczyć nasz obrazek, wystarczy że po http://localhost:3000/ podamy nazwę pliku z rozszerzeniem - u mnie wygląda to tak:   Stwórz sobie teraz prosty plik index.html, który będzie miał formularz z dwoma inputami typu text (o nazwach first_name i last_name) oraz jednym typu submit. Element  posiada atrybuty takie jak action oraz method. Atrybut action pozwala określić, gdzie wysłać dane z formularza w momencie, gdy zostanie on zatwierdzony. W naszym przypadku będzie to http://localhost:3000/userform. Atrybut method określa metodę, jakiej chcemy użyć - w naszym przypadku niech będzie to GET.  Przykładowo, Twój index.html może wyglądać tak:                          Node Hello world example                                                 First Name:                                            Last Name:                                           Gdy już będzie gotowy, wrzuć go do katalogu /assets.  Teraz czas na modyfikację pliku server.js. Najpierw zmieńmy to, co chcemy wysyłać, gdy zostanie wysłane żądanie do strony domowej.  Zamień więc res.send('Hello world') na res.sendFile('/index.html') - jak się zapewne domyślasz, res.sendFile() wysyła w odpowiedzi plik zamiast wiadomości.  Musimy również dodać obsługę żądania na endpoint, do którego będziemy kierować nasz formularz.  app.get('/userform', function (req, res) {     const response = {         first_name: req.query.first_name,         last_name: req.query.last_name     };     res.end(JSON.stringify(response)); }); W czasie przetwarzania żądania, tworzymy nowy obiekt response, który ma klucze first_name oraz last_name. Do poszczególnych właściwości przypisujemy dane, które otrzymujemy w obiekcie req (od ang. request), czyli w obiekcie z żądaniem. Na koniec wyświetlamy nasz obiekt przetworzony na typ string za pomocą metody JSON.stringify. Po zapisaniu pliku server.js, aplikacja powinna pokazywać formularz, jak poniżej.   Po wpisaniu wartości do inputów i wysłaniu ich, powinieneś zostać przekierowany do strony /userform, a po znaku zapytania powinny zostać wyświetlone parametry umieszczone przez Ciebie w inputach.   Zadanie: Żonglujemy danymi pomiędzy endpointami Napisz kod obsługujący formularz zgodnie z wskazówkami z tego submodułu, a następnie wyślij swój kod na repozytorium oraz przekaż go do sprawdzenia mentorowi.  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_4.git   Wyslij link 17.5. Middleware - pośrednik między żądaniem a odpowiedzią",
    "fork": false,
    "created_at": "2018-01-26T19:03:05Z",
    "updated_at": "2018-01-26T19:03:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13038633,
    "owner_login": "martinproxy0",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13038633?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "data",
      "request",
      "form",
      "file",
      "application",
      "server",
      "call",
      "node",
      "json",
      "http",
      "user",
      "develop",
      "express",
      "auto",
      "example",
      "automat",
      "implement",
      "format",
      " express",
      "auth",
      "endpoint",
      "framework",
      "route",
      "https",
      "function",
      "demo",
      "send",
      "local",
      "list",
      "star",
      "source",
      "read",
      "front",
      "update",
      "response",
      "stat",
      "host",
      "start",
      "delete",
      "face",
      "package",
      "method",
      "info",
      "developer",
      "system",
      "name",
      "html",
      "action",
      "module",
      "program",
      "infor",
      "github",
      "model",
      "tech",
      "esse",
      "text",
      "getpost",
      "problem",
      "install",
      "parse",
      "link",
      "proxy",
      "folder",
      "status",
      "require",
      "middleware",
      "parser",
      "console",
      "intern",
      "note",
      "popular",
      "party",
      "write",
      "query",
      "sets",
      "updated",
      "dynamic",
      "modules",
      "routing",
      "role",
      "world",
      "address",
      "dependencies",
      "found",
      "error",
      "internal",
      "listen",
      "jest",
      "kurs",
      "rake",
      "ekspresowe",
      "kazan",
      "wars"
    ]
  },
  {
    "id": 251298533,
    "name": "RequestLogger",
    "full_name": "Ayorinde-Codes/RequestLogger",
    "description": "A Laravel package that logs requests ip, agent(browser or postman), payload request, payload response, Time of execution and url in the database within any request call",
    "fork": false,
    "created_at": "2020-03-30T12:32:05Z",
    "updated_at": "2020-03-30T17:52:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47367086,
    "owner_login": "Ayorinde-Codes",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/47367086?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "request",
      "call",
      "database",
      "requests",
      "load",
      "response",
      "package",
      "browser",
      "within",
      "agent",
      "execution",
      "logs"
    ]
  },
  {
    "id": 145154752,
    "name": "mongotut",
    "full_name": "Greg1992/mongotut",
    "description": "Server set up to communicate with a MongoDB database, using modern security measures to encrypt data. Used POSTMAN and Node testing packages (Mocha and Chai)",
    "fork": false,
    "created_at": "2018-08-17T18:37:07Z",
    "updated_at": "2018-10-26T12:35:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37276159,
    "owner_login": "Greg1992",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/37276159?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "database",
      "package",
      "communicate",
      "packages",
      "security",
      "modern"
    ]
  },
  {
    "id": 94392199,
    "name": "laravel-api-test",
    "full_name": "brunocouty/laravel-api-test",
    "description": "Similar to \"postman\" (of Google Chrome), this package help you to test your API routes directly in your application.",
    "fork": false,
    "created_at": "2017-06-15T02:40:06Z",
    "updated_at": "2017-06-15T02:40:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9448901,
    "owner_login": "brunocouty",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9448901?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "help",
      "route",
      "routes",
      "package",
      "directly",
      "\"postman\""
    ]
  },
  {
    "id": 249785142,
    "name": "Projeto-NODE",
    "full_name": "Maraujo999/Projeto-NODE",
    "description": "Projeto Node Server, MySql, Instalação do package, Rota, Listar, Buscar pelo codigo, gravar, Postman",
    "fork": false,
    "created_at": "2020-03-24T18:21:22Z",
    "updated_at": "2020-03-24T18:25:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 58007373,
    "owner_login": "Maraujo999",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/58007373?v=4",
    "pulled": 1,
    "tags": [
      "star",
      "package",
      "pelo"
    ]
  },
  {
    "id": 106513321,
    "name": "gradle-postman-example",
    "full_name": "daggerok/gradle-postman-example",
    "description": "This repository contains example how to execute postman collection tests using gradle (newman npm package). Add functionality to collect all html reports into single one",
    "fork": false,
    "created_at": "2017-10-11T06:17:53Z",
    "updated_at": "2019-01-21T22:32:14Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 2445604,
    "owner_login": "daggerok",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/2445604?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "repo",
      "postman collection",
      "repos",
      "repository",
      "tests",
      "tests ",
      "example",
      "newman",
      "contain",
      "function",
      "functional",
      "package",
      "html",
      "report",
      "functionality",
      "single",
      "execute",
      "reports",
      "gradle"
    ]
  },
  {
    "id": 183656335,
    "name": "Postman_JavaScript_npm_ChaiAssertionLibrary",
    "full_name": "qijia00/Postman_JavaScript_npm_ChaiAssertionLibrary",
    "description": "Sample Postman scripts I created in JavaScript with Chai Assertion Library. The scripts are also packaged by npm for easy execution and integration to CI/CD pipeline with Jenkins. Authentication information has been removed for privacy reasons.",
    "fork": false,
    "created_at": "2019-04-26T15:53:00Z",
    "updated_at": "2019-10-17T16:50:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41161854,
    "owner_login": "qijia00",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/41161854?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "script",
      "format",
      "line",
      "scripts",
      "integration",
      "package",
      "info",
      "infor",
      "information",
      "been",
      "execution",
      "pipeline",
      "moved"
    ]
  }
]