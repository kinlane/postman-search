[
  {
    "id": 171538075,
    "name": "sapbydesign-api-samples",
    "full_name": "SAP-samples/sapbydesign-api-samples",
    "description": "A set of Postman collections that enables users to consume SAP Business ByDesign web services.",
    "fork": false,
    "created_at": "2019-02-19T19:43:06Z",
    "updated_at": "2020-03-23T12:06:06Z",
    "stargazers_count": 24,
    "watchers_count": 24,
    "forks": 22,
    "watchers": 24,
    "score": 1,
    "owner_id": 50221243,
    "owner_login": "SAP-samples",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/50221243?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "service",
      "user",
      "sign",
      "services",
      "users",
      "consume",
      "enable",
      "enables"
    ]
  },
  {
    "user": "yannickbodin",
    "repo": "EIP_Postman_Library",
    "pulled": "User",
    "id": 99006652,
    "name": "EIP_Postman_Library",
    "full_name": "yannickbodin/EIP_Postman_Library",
    "description": "Library of rest webservices call for EfficientIP SOLIDserver appliances",
    "fork": false,
    "created_at": "2017-08-01T13:52:20Z",
    "updated_at": "2018-12-05T11:41:49Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 2,
    "subscribers_count": 1,
    "owner_id": 30628007,
    "owner_login": "yannickbodin",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/30628007?v=4",
    "owner_type": "User",
    "tags": [
      "rest",
      "service",
      "server",
      "call",
      "services",
      "webservice",
      "webservices",
      "rest web"
    ]
  },
  {
    "user": "nsat",
    "repo": "spire-api-postman-collection",
    "pulled": "Organization",
    "id": 97888974,
    "name": "spire-api-postman-collection",
    "full_name": "nsat/spire-api-postman-collection",
    "description": "Postman collection for getting started with Spire APIs and services",
    "fork": false,
    "created_at": "2017-07-21T00:22:49Z",
    "updated_at": "2020-03-25T23:12:23Z",
    "forks": 3,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 3,
    "subscribers_count": 4,
    "owner_id": 7773369,
    "owner_login": "nsat",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7773369?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "service",
      "services",
      "star",
      "start",
      "started",
      "getting"
    ]
  },
  {
    "user": "SAP-samples",
    "repo": "service-ticket-intelligence-postman-collection-sample",
    "pulled": "Organization",
    "id": 158232397,
    "name": "service-ticket-intelligence-postman-collection-sample",
    "full_name": "SAP-samples/service-ticket-intelligence-postman-collection-sample",
    "description": "A Postman collection and environment template that enables users to consume the Service Ticket Intelligence machine learning service.",
    "fork": false,
    "created_at": "2018-11-19T13:58:24Z",
    "updated_at": "2020-03-12T23:24:48Z",
    "forks": 3,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 3,
    "subscribers_count": 6,
    "owner_id": 50221243,
    "owner_login": "SAP-samples",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/50221243?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "service",
      "user",
      "environment",
      "users",
      "learn",
      "plate",
      "learning",
      "template",
      "consume",
      "machine",
      "enable",
      "enables"
    ]
  },
  {
    "user": "EhsanTang",
    "repo": "ApiDebug",
    "pulled": "User",
    "id": 91162919,
    "name": "ApiDebug",
    "full_name": "EhsanTang/ApiDebug",
    "description": "浏览器API接口调试插件，Chrome接口调试工具，http调试，post调试，post模拟工具，postman，post接口调试，post测试插件-ApiDebug is a browser plug-in for testing RESTful web services. http://api.crap.cn",
    "fork": false,
    "created_at": "2017-05-13T09:18:26Z",
    "updated_at": "2020-03-24T09:58:07Z",
    "forks": 36,
    "open_issues": 1,
    "watchers": 115,
    "network_count": 36,
    "subscribers_count": 15,
    "owner_id": 5117567,
    "owner_login": "EhsanTang",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5117567?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "testing",
      "service",
      "http",
      "services",
      "browser"
    ]
  },
  {
    "user": "benmangold",
    "repo": "ffmpeg-service",
    "pulled": "User",
    "id": 89741892,
    "name": "ffmpeg-service",
    "full_name": "benmangold/ffmpeg-service",
    "description": "a dockerized node.js service for encoding with ffmpeg",
    "fork": false,
    "created_at": "2017-04-28T20:20:11Z",
    "updated_at": "2020-01-20T02:20:15Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 5,
    "network_count": 2,
    "subscribers_count": 1,
    "owner_id": 1518509,
    "owner_login": "benmangold",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1518509?v=4",
    "owner_type": "User",
    "tags": [
      "service",
      "node",
      "docker",
      "coding",
      "dockerized",
      "encoding"
    ]
  },
  {
    "user": "motivast",
    "repo": "motimize-postman",
    "pulled": "Organization",
    "id": 149724278,
    "name": "motimize-postman",
    "full_name": "motivast/motimize-postman",
    "description": "Collection of Postman requests to work with Motimize. Motimize is an open source self-hosted REST web service to optimize and compress images.",
    "fork": false,
    "created_at": "2018-09-21T07:09:06Z",
    "updated_at": "2019-09-14T03:25:18Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 32762369,
    "owner_login": "motivast",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32762369?v=4",
    "owner_type": "Organization",
    "tags": [
      "request",
      "service",
      "requests",
      "source",
      "host",
      "image",
      "open",
      "images",
      "hosted"
    ]
  },
  {
    "user": "hasimy-as",
    "repo": "NodePostman",
    "pulled": "User",
    "id": 204016424,
    "name": "NodePostman",
    "full_name": "hasimy-as/NodePostman",
    "description": "A Node.js application, used to test Node.js back-end service with Postman.",
    "fork": false,
    "created_at": "2019-08-23T14:41:06Z",
    "updated_at": "2019-11-05T06:01:31Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 51184185,
    "owner_login": "hasimy-as",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/51184185?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "application",
      "service"
    ]
  },
  {
    "user": "arjunagi",
    "repo": "REST-Web-Service",
    "pulled": "User",
    "id": 92685006,
    "name": "REST-Web-Service",
    "full_name": "arjunagi/REST-Web-Service",
    "description": "RESTful web service to handle(POST and GET) JSON data.",
    "fork": false,
    "created_at": "2017-05-28T20:22:00Z",
    "updated_at": "2019-01-13T20:37:37Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 1,
    "network_count": 2,
    "subscribers_count": 2,
    "owner_id": 10600646,
    "owner_login": "arjunagi",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10600646?v=4",
    "owner_type": "User",
    "tags": [
      "data",
      "service",
      "handle"
    ]
  },
  {
    "user": "huangliebiao",
    "repo": "aboutPostmanTools",
    "pulled": "User",
    "id": 94070893,
    "name": "aboutPostmanTools",
    "full_name": "huangliebiao/aboutPostmanTools",
    "description": null,
    "fork": false,
    "created_at": "2017-06-12T08:04:12Z",
    "updated_at": "2017-08-21T13:42:37Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 16610638,
    "owner_login": "huangliebiao",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16610638?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "abroz",
    "repo": "lunch-picker",
    "pulled": "User",
    "id": 96658138,
    "name": "lunch-picker",
    "full_name": "abroz/lunch-picker",
    "description": "Lunch Picker is a Postman collection that acts as a restaurant discovery service, powered by the Yelp Fusion API.",
    "fork": false,
    "created_at": "2017-07-09T03:12:04Z",
    "updated_at": "2018-08-27T19:33:39Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 7,
    "network_count": 0,
    "subscribers_count": 2,
    "owner_id": 3943505,
    "owner_login": "abroz",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3943505?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "rest",
      "service",
      "very",
      "were",
      "powered",
      "restaurant",
      "discovery"
    ]
  },
  {
    "id": 158232397,
    "name": "service-ticket-intelligence-postman-collection-sample",
    "full_name": "SAP-samples/service-ticket-intelligence-postman-collection-sample",
    "description": "A Postman collection and environment template that enables users to consume the Service Ticket Intelligence machine learning service.",
    "fork": false,
    "created_at": "2018-11-19T13:58:24Z",
    "updated_at": "2020-03-12T23:24:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 3,
    "watchers": 0,
    "score": 1,
    "owner_id": 50221243,
    "owner_login": "SAP-samples",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/50221243?v=4",
    "tags": [
      "collect",
      "collection",
      "service",
      "user",
      "environment",
      "users",
      "learn",
      "plate",
      "learning",
      "template",
      "consume",
      "machine",
      "enable",
      "enables"
    ]
  },
  {
    "id": 91162919,
    "name": "ApiDebug",
    "full_name": "EhsanTang/ApiDebug",
    "description": "浏览器API接口调试插件，Chrome接口调试工具，http调试，post调试，post模拟工具，postman，post接口调试，post测试插件-ApiDebug is a browser plug-in for testing RESTful web services. http://api.crap.cn",
    "fork": false,
    "created_at": "2017-05-13T09:18:26Z",
    "updated_at": "2020-03-24T09:58:07Z",
    "stargazers_count": 115,
    "watchers_count": 115,
    "forks": 36,
    "watchers": 115,
    "score": 1,
    "owner_id": 5117567,
    "owner_login": "EhsanTang",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5117567?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "service",
      "http",
      "services",
      "browser"
    ]
  },
  {
    "id": 19058102,
    "name": "postman",
    "full_name": "eugenesan/postman",
    "description": "Upload photos to online services through an intuitive interface",
    "fork": false,
    "created_at": "2014-04-23T05:26:11Z",
    "updated_at": "2018-01-03T23:57:20Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 406768,
    "owner_login": "eugenesan",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/406768?v=4",
    "tags": [
      "service",
      "line",
      "load",
      "services",
      "face",
      "interface",
      "online"
    ]
  },
  {
    "id": 89741892,
    "name": "ffmpeg-service",
    "full_name": "benmangold/ffmpeg-service",
    "description": "a dockerized node.js service for encoding with ffmpeg",
    "fork": false,
    "created_at": "2017-04-28T20:20:11Z",
    "updated_at": "2020-01-20T02:20:15Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 2,
    "watchers": 5,
    "score": 1,
    "owner_id": 1518509,
    "owner_login": "benmangold",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1518509?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "node",
      "docker",
      "coding",
      "dockerized",
      "encoding"
    ]
  },
  {
    "id": 149724278,
    "name": "motimize-postman",
    "full_name": "motivast/motimize-postman",
    "description": "Collection of Postman requests to work with Motimize. Motimize is an open source self-hosted REST web service to optimize and compress images.",
    "fork": false,
    "created_at": "2018-09-21T07:09:06Z",
    "updated_at": "2019-09-14T03:25:18Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 32762369,
    "owner_login": "motivast",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32762369?v=4",
    "tags": [
      "request",
      "service",
      "requests",
      "source",
      "host",
      "image",
      "open",
      "images",
      "hosted"
    ]
  },
  {
    "id": 204016424,
    "name": "NodePostman",
    "full_name": "hasimy-as/NodePostman",
    "description": "A Node.js application, used to test Node.js back-end service with Postman.",
    "fork": false,
    "created_at": "2019-08-23T14:41:06Z",
    "updated_at": "2019-11-05T06:01:31Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 51184185,
    "owner_login": "hasimy-as",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/51184185?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "service"
    ]
  },
  {
    "id": 92685006,
    "name": "REST-Web-Service",
    "full_name": "arjunagi/REST-Web-Service",
    "description": "RESTful web service to handle(POST and GET) JSON data.",
    "fork": false,
    "created_at": "2017-05-28T20:22:00Z",
    "updated_at": "2019-01-13T20:37:37Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 10600646,
    "owner_login": "arjunagi",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10600646?v=4",
    "tags": [
      "data",
      "service",
      "handle"
    ]
  },
  {
    "id": 96658138,
    "name": "lunch-picker",
    "full_name": "abroz/lunch-picker",
    "description": "Lunch Picker is a Postman collection that acts as a restaurant discovery service, powered by the Yelp Fusion API.",
    "fork": false,
    "created_at": "2017-07-09T03:12:04Z",
    "updated_at": "2018-08-27T19:33:39Z",
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks": 0,
    "watchers": 7,
    "score": 1,
    "owner_id": 3943505,
    "owner_login": "abroz",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3943505?v=4",
    "tags": [
      "collect",
      "collection",
      "rest",
      "service",
      "very",
      "were",
      "powered",
      "restaurant",
      "discovery"
    ]
  },
  {
    "id": 114741206,
    "name": "postman_lightning_talk",
    "full_name": "ZeusPerez/postman_lightning_talk",
    "description": null,
    "fork": false,
    "created_at": "2017-12-19T08:48:31Z",
    "updated_at": "2017-12-21T08:50:27Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 11160447,
    "owner_login": "ZeusPerez",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11160447?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 32080039,
    "name": "postman",
    "full_name": "wannaup/postman",
    "description": "A mail to threaded messaging microservice in Go and SCALA",
    "fork": false,
    "created_at": "2015-03-12T14:02:15Z",
    "updated_at": "2015-04-09T23:21:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6564839,
    "owner_login": "wannaup",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6564839?v=4",
    "tags": [
      "service",
      "mail",
      "read",
      "micro",
      "messaging",
      "microservice",
      "threaded"
    ]
  },
  {
    "id": 34886061,
    "name": "Postman",
    "full_name": "k1LoW/Postman",
    "description": null,
    "fork": false,
    "created_at": "2015-05-01T02:07:43Z",
    "updated_at": "2016-02-25T01:35:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 57114,
    "owner_login": "k1LoW",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/57114?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 96758910,
    "name": "micro-recipe",
    "full_name": "enahomurphy/micro-recipe",
    "description": "test project for developing highly reusable node/mongo services recipe service ",
    "fork": false,
    "created_at": "2017-07-10T09:17:26Z",
    "updated_at": "2019-03-26T20:39:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13594802,
    "owner_login": "enahomurphy",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/13594802?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "service",
      "node",
      "develop",
      "mongo",
      "services",
      "usable",
      "developing",
      "reusable",
      "recipe",
      "highly"
    ]
  },
  {
    "id": 97892221,
    "name": "postman",
    "full_name": "rupakg/postman",
    "description": "A simple serverless application with an email service.",
    "fork": false,
    "created_at": "2017-07-21T01:21:50Z",
    "updated_at": "2018-06-05T03:42:27Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 1,
    "watchers": 4,
    "score": 1,
    "owner_id": 8188,
    "owner_login": "rupakg",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/8188?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service",
      "server",
      "mail",
      "email",
      "serverless"
    ]
  },
  {
    "id": 225288246,
    "name": "postman",
    "full_name": "StellarFw/postman",
    "description": "Simple and easy to use mailer service",
    "fork": false,
    "created_at": "2019-12-02T04:52:59Z",
    "updated_at": "2019-12-02T04:54:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20728166,
    "owner_login": "StellarFw",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/20728166?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "mail",
      "e mail",
      "mailer"
    ]
  },
  {
    "id": 215289551,
    "name": "postman",
    "full_name": "ayushkr07/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-10-15T12:09:35Z",
    "updated_at": "2019-10-15T13:57:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39664063,
    "owner_login": "ayushkr07",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/39664063?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 210994328,
    "name": "postman",
    "full_name": "xuyenauto/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-09-26T03:46:17Z",
    "updated_at": "2019-10-04T09:36:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22289694,
    "owner_login": "xuyenauto",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22289694?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 227260376,
    "name": "postman",
    "full_name": "carey2019/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-12-11T02:37:55Z",
    "updated_at": "2019-12-11T02:37:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49012888,
    "owner_login": "carey2019",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/49012888?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 21506888,
    "name": "postman",
    "full_name": "lorislab-archived/postman",
    "description": "Email service",
    "fork": false,
    "created_at": "2014-07-04T20:08:31Z",
    "updated_at": "2019-09-17T20:39:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 55463096,
    "owner_login": "lorislab-archived",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/55463096?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "mail"
    ]
  },
  {
    "id": 19227326,
    "name": "PostMan",
    "full_name": "e2software/PostMan",
    "description": null,
    "fork": false,
    "created_at": "2014-04-28T04:44:17Z",
    "updated_at": "2014-04-28T04:49:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7425262,
    "owner_login": "e2software",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/7425262?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 34073561,
    "name": "postman",
    "full_name": "ruby4mag/postman",
    "description": null,
    "fork": false,
    "created_at": "2015-04-16T18:36:01Z",
    "updated_at": "2015-04-28T12:31:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11811813,
    "owner_login": "ruby4mag",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/11811813?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 57390470,
    "name": "postman",
    "full_name": "andreastt/postman",
    "description": null,
    "fork": false,
    "created_at": "2016-04-29T14:24:51Z",
    "updated_at": "2016-04-29T14:25:10Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 399120,
    "owner_login": "andreastt",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/399120?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 123672615,
    "name": "postman",
    "full_name": "nmjmdr/postman",
    "description": "Sends emails reliably (supports failover) using services such as Sendgrid and Mailgun  ",
    "fork": false,
    "created_at": "2018-03-03T08:10:49Z",
    "updated_at": "2019-12-24T08:07:09Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 2081711,
    "owner_login": "nmjmdr",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2081711?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "mail",
      "services",
      "email",
      "support",
      "emails",
      "such"
    ]
  },
  {
    "id": 100746984,
    "name": "Postman",
    "full_name": "priscilahenriques2050/Postman",
    "description": "Tool for performing service tests",
    "fork": false,
    "created_at": "2017-08-18T20:15:08Z",
    "updated_at": "2017-08-21T02:07:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4249709,
    "owner_login": "priscilahenriques2050",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/4249709?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "form",
      "tests",
      "service",
      "perform",
      "performing"
    ]
  },
  {
    "id": 80584522,
    "name": "Postman",
    "full_name": "geanv/Postman",
    "description": "A distributed NFV service to improve network performance for small packet processing",
    "fork": false,
    "created_at": "2017-02-01T02:56:01Z",
    "updated_at": "2017-02-01T14:49:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 500338,
    "owner_login": "geanv",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/500338?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "service",
      "perform",
      "small",
      "process",
      "network",
      "performance",
      "distributed",
      "improve"
    ]
  },
  {
    "id": 179211169,
    "name": "postman",
    "full_name": "NogerbekNurzhan/postman",
    "description": "Web service for sending letters to personal corporate mail via SMTP protocol.",
    "fork": false,
    "created_at": "2019-04-03T04:35:48Z",
    "updated_at": "2020-03-11T11:23:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8999232,
    "owner_login": "NogerbekNurzhan",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/8999232?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "mail",
      "send",
      "sending",
      "e mail",
      "personal",
      "letters"
    ]
  },
  {
    "id": 244375163,
    "name": "postman-demo",
    "full_name": "rtorond/postman-demo",
    "description": "Postman DEMO with micro services",
    "fork": false,
    "created_at": "2020-03-02T13:15:45Z",
    "updated_at": "2020-03-10T19:04:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1135540,
    "owner_login": "rtorond",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1135540?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "services",
      "micro",
      "micro services"
    ]
  },
  {
    "id": 192199759,
    "name": "grpc-test",
    "full_name": "rishabhcha/grpc-test",
    "description": "Test your Grpc service as easy as a rest endpoint with your favorite API tool like Postman or Swagger.",
    "fork": false,
    "created_at": "2019-06-16T14:20:19Z",
    "updated_at": "2019-08-05T21:04:30Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 0,
    "watchers": 6,
    "score": 1,
    "owner_id": 22080789,
    "owner_login": "rishabhcha",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/22080789?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "service",
      "tool",
      "endpoint",
      "favorite"
    ]
  },
  {
    "id": 65580187,
    "name": "NodePostman",
    "full_name": "ansh2107/NodePostman",
    "description": null,
    "fork": false,
    "created_at": "2016-08-12T20:00:40Z",
    "updated_at": "2016-08-12T20:01:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13527778,
    "owner_login": "ansh2107",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13527778?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 90534424,
    "name": "postman-sample",
    "full_name": "iamsiddhant05/postman-sample",
    "description": null,
    "fork": false,
    "created_at": "2017-05-07T13:27:25Z",
    "updated_at": "2017-05-07T13:32:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6564303,
    "owner_login": "iamsiddhant05",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/6564303?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 139432716,
    "name": "postman-ui",
    "full_name": "jonatassales/postman-ui",
    "description": "UI for a email and messaging service",
    "fork": false,
    "created_at": "2018-07-02T11:13:10Z",
    "updated_at": "2018-08-20T16:18:23Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 6073626,
    "owner_login": "jonatassales",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6073626?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "mail",
      "email",
      "messaging"
    ]
  },
  {
    "id": 90636109,
    "name": "postman-client-js",
    "full_name": "ThCC/postman-client-js",
    "description": "Client service, to send simple text emails or, using a template created at Postman, send more complex emails.",
    "fork": false,
    "created_at": "2017-05-08T14:14:27Z",
    "updated_at": "2017-11-20T15:29:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2923857,
    "owner_login": "ThCC",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2923857?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "service",
      "mail",
      "send",
      "more",
      "plate",
      "email",
      "template",
      "text",
      "emails",
      "complex"
    ]
  },
  {
    "id": 92151295,
    "name": "f5Postman",
    "full_name": "rabru/f5Postman",
    "description": null,
    "fork": false,
    "created_at": "2017-05-23T08:56:20Z",
    "updated_at": "2019-07-20T19:38:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 25138509,
    "owner_login": "rabru",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25138509?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 151972859,
    "name": "whatsapp-web-postman",
    "full_name": "pradeepkumarK18/whatsapp-web-postman",
    "description": null,
    "fork": false,
    "created_at": "2018-10-07T18:34:42Z",
    "updated_at": "2018-10-07T18:37:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6258679,
    "owner_login": "pradeepkumarK18",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6258679?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 176671846,
    "name": "cgi-trello-postman",
    "full_name": "riturajpandey93/cgi-trello-postman",
    "description": null,
    "fork": false,
    "created_at": "2019-03-20T06:46:02Z",
    "updated_at": "2019-03-20T07:32:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24825553,
    "owner_login": "riturajpandey93",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/24825553?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 128740187,
    "name": "postman-mail-uploader",
    "full_name": "igocooper/postman-mail-uploader",
    "description": "webdriver.io based algorithm to upload emails to postman service.",
    "fork": false,
    "created_at": "2018-04-09T08:34:43Z",
    "updated_at": "2019-04-08T13:40:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19605103,
    "owner_login": "igocooper",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19605103?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "service",
      "based",
      "mail",
      "load",
      "email",
      "drive",
      "upload",
      "emails",
      "river",
      "webdriver"
    ]
  },
  {
    "id": 163992105,
    "name": "emsbuscatalog-2-postman",
    "full_name": "mateusmanuel/emsbuscatalog-2-postman",
    "description": "Ems-bus services catalog converter for Postman Collection",
    "fork": false,
    "created_at": "2019-01-03T15:44:53Z",
    "updated_at": "2020-01-29T13:16:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11480994,
    "owner_login": "mateusmanuel",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11480994?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "convert",
      "services",
      "converte",
      "converter",
      "catalog"
    ]
  },
  {
    "id": 192884352,
    "name": "postman_laravel_encrypter",
    "full_name": "insectkorea/postman_laravel_encrypter",
    "description": null,
    "fork": false,
    "created_at": "2019-06-20T08:49:33Z",
    "updated_at": "2019-06-20T08:49:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23379589,
    "owner_login": "insectkorea",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23379589?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 249884087,
    "name": "f5-cloudserviceeaplab",
    "full_name": "f5devcentral/f5-cloudserviceeaplab",
    "description": "F5 Essential App Protect cloud services - Lab & API examples with Postman",
    "fork": false,
    "created_at": "2020-03-25T04:07:46Z",
    "updated_at": "2020-03-27T21:21:28Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 18314976,
    "owner_login": "f5devcentral",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/18314976?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "example",
      "services",
      "examples",
      "cloud"
    ]
  },
  {
    "id": 228353837,
    "name": "postmanrepo",
    "full_name": "Prafulkumarbheemanathi/postmanrepo",
    "description": "creating for testing web services with API",
    "fork": false,
    "created_at": "2019-12-16T09:48:25Z",
    "updated_at": "2019-12-16T11:00:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 57483099,
    "owner_login": "Prafulkumarbheemanathi",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/57483099?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "service",
      "services",
      "creating"
    ]
  },
  {
    "id": 187700483,
    "name": "Postman-API_Tests",
    "full_name": "snangia/Postman-API_Tests",
    "description": "http://ab-branch.staging.acml.com/sites/api_service/Fund/GetFeeAndExpenses?countryCode=US&fundIsinOrLocalId=01878H778:3119",
    "fork": false,
    "created_at": "2019-05-20T19:23:13Z",
    "updated_at": "2019-05-20T20:07:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30027127,
    "owner_login": "snangia",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/30027127?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "http",
      "site"
    ]
  },
  {
    "id": 164330519,
    "name": "Postman-API-tests",
    "full_name": "Nachosky/Postman-API-tests",
    "description": null,
    "fork": false,
    "created_at": "2019-01-06T17:40:17Z",
    "updated_at": "2019-01-06T17:44:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46422228,
    "owner_login": "Nachosky",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/46422228?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 219247792,
    "name": "Postman-Collections-Vehicles-Api",
    "full_name": "lsolier/Postman-Collections-Vehicles-Api",
    "description": "Postman Collections to test Vehicles API and external services that its use",
    "fork": false,
    "created_at": "2019-11-03T03:48:43Z",
    "updated_at": "2019-11-03T03:50:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11725705,
    "owner_login": "lsolier",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11725705?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "service",
      "services",
      "external"
    ]
  },
  {
    "id": 219084911,
    "name": "api-testing-postman",
    "full_name": "brunopulis/api-testing-postman",
    "description": null,
    "fork": false,
    "created_at": "2019-11-02T00:56:37Z",
    "updated_at": "2019-11-02T00:59:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1204692,
    "owner_login": "brunopulis",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1204692?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 250336457,
    "name": "postman_api_collection_tesing",
    "full_name": "mokuq/postman_api_collection_tesing",
    "description": null,
    "fork": false,
    "created_at": "2020-03-26T18:14:02Z",
    "updated_at": "2020-03-26T22:20:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25499582,
    "owner_login": "mokuq",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25499582?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 158839656,
    "name": "postman-newman-api-test",
    "full_name": "switbe/postman-newman-api-test",
    "description": "An example how to use Postman to verify web services with Jenkins integration.",
    "fork": false,
    "created_at": "2018-11-23T13:58:13Z",
    "updated_at": "2018-11-23T18:44:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5425418,
    "owner_login": "switbe",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5425418?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "example",
      "integration",
      "services",
      "verify"
    ]
  },
  {
    "id": 109515034,
    "name": "API-Testing---Postman",
    "full_name": "testingbyravi/API-Testing---Postman",
    "description": null,
    "fork": false,
    "created_at": "2017-11-04T17:23:34Z",
    "updated_at": "2017-11-04T17:23:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17028843,
    "owner_login": "testingbyravi",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17028843?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 217042883,
    "name": "PostMan_RestAPI",
    "full_name": "gavin7681/PostMan_RestAPI",
    "description": null,
    "fork": false,
    "created_at": "2019-10-23T11:40:38Z",
    "updated_at": "2019-10-23T11:40:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49104859,
    "owner_login": "gavin7681",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/49104859?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 213677524,
    "name": "api_postman_test",
    "full_name": "saulhappy/api_postman_test",
    "description": null,
    "fork": false,
    "created_at": "2019-10-08T15:09:54Z",
    "updated_at": "2019-10-08T15:09:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23194728,
    "owner_login": "saulhappy",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/23194728?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 202979764,
    "name": "wisatadunia-postman",
    "full_name": "talentiva/wisatadunia-postman",
    "description": "Travel sample API service - Postman collection",
    "fork": false,
    "created_at": "2019-08-18T08:42:53Z",
    "updated_at": "2019-08-22T04:45:43Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 54202426,
    "owner_login": "talentiva",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/54202426?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "service",
      "sample"
    ]
  },
  {
    "id": 46976323,
    "name": "PostmanCollectionClient",
    "full_name": "BancaSella/PostmanCollectionClient",
    "description": "PostmanCollectionClient calls for all the services",
    "fork": false,
    "created_at": "2015-11-27T11:16:21Z",
    "updated_at": "2015-11-27T11:16:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15999079,
    "owner_login": "BancaSella",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15999079?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "call",
      "calls",
      "services"
    ]
  },
  {
    "id": 76406289,
    "name": "postmanCollectionBackup",
    "full_name": "toastman/postmanCollectionBackup",
    "description": null,
    "fork": false,
    "created_at": "2016-12-13T23:14:14Z",
    "updated_at": "2016-12-13T23:14:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1378839,
    "owner_login": "toastman",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1378839?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 63805607,
    "name": "urtheplatform-postman-collection",
    "full_name": "kjbrazil/urtheplatform-postman-collection",
    "description": "Postman Collection for getting started with the UrtheCast platform APIs and services.",
    "fork": false,
    "created_at": "2016-07-20T18:42:02Z",
    "updated_at": "2016-07-20T19:42:02Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 3917383,
    "owner_login": "kjbrazil",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3917383?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "service",
      "services",
      "star",
      "start",
      "started",
      "getting",
      "platform"
    ]
  },
  {
    "id": 28906650,
    "name": "Postman-Collection-Generator",
    "full_name": "huangshan108/Postman-Collection-Generator",
    "description": null,
    "fork": false,
    "created_at": "2015-01-07T08:55:53Z",
    "updated_at": "2019-09-04T11:24:34Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 7412782,
    "owner_login": "huangshan108",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7412782?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 65317384,
    "name": "planet-platform-postman-collection",
    "full_name": "kjbrazil/planet-platform-postman-collection",
    "description": "Postman Collection for getting started with the v0 & v1 Planet platform APIs and services.",
    "fork": false,
    "created_at": "2016-08-09T18:08:13Z",
    "updated_at": "2016-09-06T22:46:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3917383,
    "owner_login": "kjbrazil",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3917383?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "service",
      "services",
      "star",
      "start",
      "started",
      "getting",
      "platform"
    ]
  },
  {
    "id": 101762526,
    "name": "Yii-User-Crud-Architecture-Webservices",
    "full_name": "yadunandankushwaha/Yii-User-Crud-Architecture-Webservices",
    "description": "Crud - Yii - Webservices - postman collection",
    "fork": false,
    "created_at": "2017-08-29T13:08:38Z",
    "updated_at": "2018-03-15T21:33:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26286873,
    "owner_login": "yadunandankushwaha",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/26286873?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "service",
      "services"
    ]
  },
  {
    "id": 146479756,
    "name": "ReplacingPostman",
    "full_name": "fabiohenriquebayma/ReplacingPostman",
    "description": "A tool to replace CI postman tests in a CI environment.  Test are organized by stories. Can test externals rest services.",
    "fork": false,
    "created_at": "2018-08-28T17:02:37Z",
    "updated_at": "2019-11-12T20:43:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30695763,
    "owner_login": "fabiohenriquebayma",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/30695763?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "tests",
      "rest",
      "service",
      "tool",
      "tests ",
      "environment",
      "services",
      "postman tests",
      "place",
      "repl",
      "replace",
      "external",
      "rest service",
      "organized"
    ]
  },
  {
    "id": 248704128,
    "name": "Rest_Service",
    "full_name": "IgorBekerskyy/Rest_Service",
    "description": "Respository includes my Rest service, made with the help of Spring, Postman and Eclipse",
    "fork": false,
    "created_at": "2020-03-20T08:26:45Z",
    "updated_at": "2020-03-27T08:55:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 57897226,
    "owner_login": "IgorBekerskyy",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/57897226?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "help",
      "includes"
    ]
  },
  {
    "id": 178538644,
    "name": "RestFul-API-Testing-server",
    "full_name": "admindebu/RestFul-API-Testing-server",
    "description": "This is the Server of testing restful web service. and your tool - postman / rest client act as an client.",
    "fork": false,
    "created_at": "2019-03-30T09:31:42Z",
    "updated_at": "2019-06-08T19:00:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46689581,
    "owner_login": "admindebu",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/46689581?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "testing",
      "rest",
      "service",
      "tool",
      "client",
      "restful"
    ]
  },
  {
    "id": 186380213,
    "name": "Customer-Relationship-Management-Real-time-CURD-Application-using-Spring-Rest-Json-HQL-WebServices",
    "full_name": "soumyadip007/Customer-Relationship-Management-Real-time-CURD-Application-using-Spring-Rest-Json-HQL-WebServices",
    "description": "CRUD (Create, Read, Update and Delete) application is the most important application for creating any project.  In spring Rest, we have developed this using Jackson,Postman and restful web services.",
    "fork": false,
    "created_at": "2019-05-13T08:42:40Z",
    "updated_at": "2020-02-10T07:22:40Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 37873518,
    "owner_login": "soumyadip007",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/37873518?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "rest",
      "service",
      "develop",
      "services",
      "import",
      "restful",
      "creating",
      "spring",
      "developed",
      "important"
    ]
  },
  {
    "id": 60636134,
    "name": "soap_rest_templates",
    "full_name": "1tallgirl/soap_rest_templates",
    "description": "Holds Boomerang SOAP and POSTman REST request templates for web services.",
    "fork": false,
    "created_at": "2016-06-07T18:20:45Z",
    "updated_at": "2016-06-07T18:20:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7917344,
    "owner_login": "1tallgirl",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7917344?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "service",
      "services",
      "plate",
      "template",
      "templates"
    ]
  },
  {
    "id": 190686708,
    "name": "API-Rest-Service",
    "full_name": "stefhani/API-Rest-Service",
    "description": "Proyecto REST API's service - Practicas Capacitacion. Contenidos incorporados: Maven, MongoDB, Spring boot, Postman, RestAPI, JSON",
    "fork": false,
    "created_at": "2019-06-07T04:15:13Z",
    "updated_at": "2019-06-08T23:23:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22527327,
    "owner_login": "stefhani",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22527327?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "boot"
    ]
  },
  {
    "id": 247906560,
    "name": "CustomerManagement-with-Spring-REST-APIs-using-MySQL-POSTMAN",
    "full_name": "AdityaKshettri/CustomerManagement-with-Spring-REST-APIs-using-MySQL-POSTMAN",
    "description": "In this project, we have created a Customer Management Website for CRUD operations using Spring REST APIs in Netbeans 11.3 using MySQL database and POSTMAN service.",
    "fork": false,
    "created_at": "2020-03-17T07:33:08Z",
    "updated_at": "2020-03-17T07:42:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36606431,
    "owner_login": "AdityaKshettri",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/36606431?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "service",
      "database",
      "operation",
      "site",
      "operations"
    ]
  },
  {
    "id": 127773987,
    "name": "simple-grizzly-standalone-restful-webservice-example",
    "full_name": "bzdgn/simple-grizzly-standalone-restful-webservice-example",
    "description": "A simple Grizzly standalone RESTful webservice application with Configuration Manager Implementation and Dummy Cache Repository",
    "fork": false,
    "created_at": "2018-04-02T15:20:38Z",
    "updated_at": "2020-02-27T16:20:49Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 0,
    "watchers": 3,
    "score": 1,
    "owner_id": 1220904,
    "owner_login": "bzdgn",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1220904?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service",
      "webservice",
      "standalone"
    ]
  },
  {
    "id": 196905046,
    "name": "RestAPIImplementationInSpringBoot",
    "full_name": "dikshachauhan008/RestAPIImplementationInSpringBoot",
    "description": "REST API implementation In Spring Boot, implemented all the crud operations GET,POST, DELETE, PUT in  MVC framework and tested all the services with POSTMAN",
    "fork": false,
    "created_at": "2019-07-15T01:51:18Z",
    "updated_at": "2019-12-13T11:13:44Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 50563842,
    "owner_login": "dikshachauhan008",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/50563842?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "service",
      "implement",
      "tested",
      "framework",
      "operation",
      "services",
      "operations",
      "implementation",
      "crud",
      "implemented"
    ]
  },
  {
    "id": 132424731,
    "name": "rest-api-playlist",
    "full_name": "olzh2102/rest-api-playlist",
    "description": null,
    "fork": false,
    "created_at": "2018-05-07T07:40:06Z",
    "updated_at": "2018-05-07T17:22:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 27337196,
    "owner_login": "olzh2102",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/27337196?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 190126346,
    "name": "Restful-Explore-California-App",
    "full_name": "davidenoma/Restful-Explore-California-App",
    "description": "A restful spring boot micro service based on spring data JPA and spring rest. It allows requests to the web service that returns information about tours, tour packages and tour ratings about locations in california.",
    "fork": false,
    "created_at": "2019-06-04T04:01:22Z",
    "updated_at": "2019-06-06T14:43:04Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 24875399,
    "owner_login": "davidenoma",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/24875399?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "rest",
      "service",
      "requests",
      "based",
      "format",
      "boot",
      "restful",
      "spring",
      "package",
      "rating",
      "info",
      "infor",
      "allows",
      "information",
      "micro",
      "spring boot",
      "location",
      "turns",
      "returns",
      "packages",
      "tours"
    ]
  },
  {
    "id": 225678342,
    "name": "data-attribute-recommendation-postman-tutorial-sample",
    "full_name": "SAP-samples/data-attribute-recommendation-postman-tutorial-sample",
    "description": "Sample code and dataset example for anyone who wants to try out the data attribute recommendation machine learning service using a REST client.",
    "fork": false,
    "created_at": "2019-12-03T17:29:46Z",
    "updated_at": "2020-03-25T09:20:18Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 50221243,
    "owner_login": "SAP-samples",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/50221243?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "service",
      "client",
      "code",
      "example",
      "learn",
      "learning",
      "machine",
      "dataset"
    ]
  },
  {
    "id": 248030724,
    "name": "REST-Project2",
    "full_name": "rdw6297/REST-Project2",
    "description": "A RESTful service written in Java. A WAR file is used to run this service and I used Postman to test it.",
    "fork": false,
    "created_at": "2020-03-17T17:22:23Z",
    "updated_at": "2020-03-17T17:43:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47403827,
    "owner_login": "rdw6297",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/47403827?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "file",
      "service",
      "written"
    ]
  },
  {
    "id": 197553685,
    "name": "meetings",
    "full_name": "Ryyk/meetings",
    "description": "Rest service to manage recordings of a meeting",
    "fork": false,
    "created_at": "2019-07-18T09:15:18Z",
    "updated_at": "2019-09-14T22:00:53Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 11073534,
    "owner_login": "Ryyk",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/11073534?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "manage",
      "recordings",
      "meeting"
    ]
  },
  {
    "id": 139327407,
    "name": "learning-program",
    "full_name": "ashwinies/learning-program",
    "description": "sample project on spring boot, rest services using postman on reference Genomes",
    "fork": false,
    "created_at": "2018-07-01T12:30:31Z",
    "updated_at": "2019-02-11T15:47:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8567567,
    "owner_login": "ashwinies",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/8567567?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "rest",
      "service",
      "sample",
      "services",
      "boot",
      "spring",
      "spring boot",
      "reference",
      "rest service"
    ]
  },
  {
    "id": 165928181,
    "name": "ppgService",
    "full_name": "birish87/ppgService",
    "description": "simple springboot, rest service whereby we can integrate postman with our postgresql db.",
    "fork": false,
    "created_at": "2019-01-15T21:43:26Z",
    "updated_at": "2019-01-15T22:11:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45980316,
    "owner_login": "birish87",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/45980316?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "rest",
      "service",
      "boot",
      "spring",
      "integrate",
      "springboot",
      "postgres",
      "rest service",
      "postgresql",
      "whereby"
    ]
  },
  {
    "id": 163047051,
    "name": "REST-CarApp",
    "full_name": "Marqueb82/REST-CarApp",
    "description": "REST-Service for car management allowing viewing list of cars, finding by id, updating, deleting and adding new vehicles.  Used Postman for testing of service. ",
    "fork": false,
    "created_at": "2018-12-25T04:52:25Z",
    "updated_at": "2018-12-25T05:12:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33797265,
    "owner_login": "Marqueb82",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33797265?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "service",
      "manage",
      "list",
      "view",
      "management",
      "find",
      "updating",
      "adding",
      "vehicles"
    ]
  },
  {
    "id": 194500685,
    "name": "grpc-gateway-example",
    "full_name": "BenSlabbert/grpc-gateway-example",
    "description": "Example project using gRPC Gateway as a REST proxy to a gRPC service",
    "fork": false,
    "created_at": "2019-06-30T09:58:32Z",
    "updated_at": "2019-06-30T10:04:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12390879,
    "owner_login": "BenSlabbert",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/12390879?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "proxy"
    ]
  },
  {
    "id": 184440071,
    "name": "MasterMind",
    "full_name": "cl1k/MasterMind",
    "description": "Java REST service that can be interacted with using Postman to play a number guessing game",
    "fork": false,
    "created_at": "2019-05-01T15:45:53Z",
    "updated_at": "2019-05-01T15:53:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45695284,
    "owner_login": "cl1k",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/45695284?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "interact",
      "play",
      "game",
      "interacted"
    ]
  },
  {
    "id": 162643106,
    "name": "REST-employeeApp",
    "full_name": "Marqueb82/REST-employeeApp",
    "description": "RESTful web service created using spring and tested with Postman.  Uses general get and post requests for mapping and service will allow user to add, remove, view all and view specific employess based upon their ID.",
    "fork": false,
    "created_at": "2018-12-20T23:50:03Z",
    "updated_at": "2019-02-06T05:53:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33797265,
    "owner_login": "Marqueb82",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33797265?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "service",
      "requests",
      "user",
      "based",
      "tested",
      "spec",
      "view",
      "spring",
      "specific",
      "general",
      "upon"
    ]
  },
  {
    "id": 81371954,
    "name": "EmployeeCRUD-Spring-MVC-Hibernate",
    "full_name": "Ajinkyashinde15/EmployeeCRUD-Spring-MVC-Hibernate",
    "description": "I have created web services REST API using Spring Web MVC framework with Hibernate technology. Postman used to tested and constructed requests to REST API .",
    "fork": false,
    "created_at": "2017-02-08T20:19:11Z",
    "updated_at": "2017-02-08T21:07:26Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 11631994,
    "owner_login": "Ajinkyashinde15",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/11631994?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "service",
      "requests",
      "tested",
      "framework",
      "services",
      "struct",
      "tech",
      "technology",
      "constructed"
    ]
  },
  {
    "id": 108623660,
    "name": "westjet_test",
    "full_name": "OlgaDery/westjet_test",
    "description": "Spring Boot micro service with 3 REST APIs. May be deployed locally or on AWS. Postman tests included.",
    "fork": false,
    "created_at": "2017-10-28T05:55:12Z",
    "updated_at": "2018-04-05T17:30:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19338310,
    "owner_login": "OlgaDery",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19338310?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "service",
      "tests ",
      "call",
      "local",
      "micro",
      "deployed",
      "included",
      "locally"
    ]
  },
  {
    "id": 227680958,
    "name": "RentaCarService",
    "full_name": "cevheryilmaz/RentaCarService",
    "description": "Rest API service was created by using Node.js, Express.js and MongoDB in RentaCar service. Tested with postman.",
    "fork": false,
    "created_at": "2019-12-12T19:27:43Z",
    "updated_at": "2019-12-14T21:16:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38843825,
    "owner_login": "cevheryilmaz",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/38843825?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "service"
    ]
  },
  {
    "id": 247478788,
    "name": "RESTful-API",
    "full_name": "markande98/RESTful-API",
    "description": "A RESRful service. A product can be post, update, delete in this api and list of orders can be fetched from the database. I have used mongodb as a database and postman services and a lot of modules in my api.",
    "fork": false,
    "created_at": "2020-03-15T14:08:25Z",
    "updated_at": "2020-03-15T14:14:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 60274263,
    "owner_login": "markande98",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/60274263?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "service",
      "database",
      "mongo",
      "services",
      "list",
      "update",
      "delete",
      "mongod",
      "mongodb",
      "module",
      "product",
      "fetch",
      "order",
      "modules",
      "orders"
    ]
  },
  {
    "id": 246163667,
    "name": "REST-social-app",
    "full_name": "pramodkondur/REST-social-app",
    "description": "A social media application implementing the RESTful Web Services using JSON exchange format done in Java. The main aim for working on this project was to understand the concept of REST web services. Done in eclipse utilizing Springboot, Hibernate, Postman and uses H2 as database",
    "fork": false,
    "created_at": "2020-03-09T23:29:17Z",
    "updated_at": "2020-03-09T23:43:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 60753825,
    "owner_login": "pramodkondur",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/60753825?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "form",
      "application",
      "service",
      "database",
      "implement",
      "format",
      "util",
      "services",
      "boot",
      "working",
      "uses",
      "main",
      "under",
      "concept",
      "done",
      "implementing",
      "social",
      "media",
      "exchange",
      "eclipse",
      "utilizing"
    ]
  },
  {
    "id": 218577499,
    "name": "car",
    "full_name": "Di3GO95/car",
    "description": "REST API service for a car application, using Java EE",
    "fork": false,
    "created_at": "2019-10-30T16:51:45Z",
    "updated_at": "2019-11-20T08:24:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5565009,
    "owner_login": "Di3GO95",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5565009?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service"
    ]
  },
  {
    "id": 125800550,
    "name": "todo-list-cloud-computing",
    "full_name": "imar26/todo-list-cloud-computing",
    "description": "Developed a TODO application using Rest API, performed CRUD operations and deployed application on AWS and GCP. Also, Leveraged services like EC2, CodeDeploy, S3, DynamoDB, RDS, Route 53, Load Balancer, Lambda, CloudWatch and SNS.",
    "fork": false,
    "created_at": "2018-03-19T04:16:28Z",
    "updated_at": "2018-05-03T15:00:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28653160,
    "owner_login": "imar26",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/28653160?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "application",
      "service",
      "operation",
      "services",
      "operations",
      "perform",
      "ever",
      "deployed",
      "performed"
    ]
  },
  {
    "id": 238195152,
    "name": "web-service",
    "full_name": "elevliaykut/web-service",
    "description": "A Simple REST API application that web service using Node.js and MongoDB. You may test use with amazing tool Postman.",
    "fork": false,
    "created_at": "2020-02-04T11:58:26Z",
    "updated_at": "2020-02-20T20:35:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29731054,
    "owner_login": "elevliaykut",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29731054?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "service",
      "tool",
      "amazing"
    ]
  },
  {
    "id": 190986359,
    "name": "BooksAppReactJS-CRUD-basic",
    "full_name": "papiuiulia/BooksAppReactJS-CRUD-basic",
    "description": "I created an application in ReactJS with REST services accomplished in Postman(an online tool). The user can add new books, edit existing ones or remove them.",
    "fork": false,
    "created_at": "2019-06-09T09:15:06Z",
    "updated_at": "2019-06-09T09:24:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44809460,
    "owner_login": "papiuiulia",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/44809460?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "service",
      "tool",
      "user",
      "line",
      "services",
      "book",
      "edit",
      "books",
      "online",
      "accomplished"
    ]
  },
  {
    "id": 104587490,
    "name": "webservices-test-framework-compare",
    "full_name": "FachrulCH/webservices-test-framework-compare",
    "description": "personal opinion for test framework for web services in PHP, Python, Javascript, and Java. using codeception, postman-newman, robot framework, rest assured",
    "fork": false,
    "created_at": "2017-09-23T17:52:06Z",
    "updated_at": "2017-09-23T17:56:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10245158,
    "owner_login": "FachrulCH",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10245158?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "rest",
      "script",
      "service",
      "code",
      "newman",
      "framework",
      "services",
      "robo",
      "personal",
      "assured",
      "codeception",
      "opinion"
    ]
  },
  {
    "id": 86376672,
    "name": "spring-restful-web-services-crud-example",
    "full_name": "ddemott/spring-restful-web-services-crud-example",
    "description": "DESCRIPTION:  This project represents a base Spring 4 legacy project for Spring MVC / REST services.  The REST services are handled / tested by index.html.  This is done so you can see an example of how to call all of the CRUD  functions from a web page.  Most projects do not make the calls from a web page but from POSTMAN or even from a  test function which does you no good if you are trying to figure out how to do call from a webpage.  Dependencies ------------ Maven 3.1 Java 8 Spring 4 Spring MVC 4 Jackson Databind javax.servlet-api 3.1",
    "fork": false,
    "created_at": "2017-03-27T19:40:04Z",
    "updated_at": "2018-05-25T21:05:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 6421193,
    "owner_login": "ddemott",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/6421193?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "service",
      "call",
      "example",
      "tested",
      "function",
      "calls",
      "services",
      "java",
      "html",
      "to do",
      "handle",
      "functions",
      "done",
      "projects",
      "trying"
    ]
  },
  {
    "id": 128530193,
    "name": "springboot-testing-mysql",
    "full_name": "ivangfr/springboot-testing-mysql",
    "description": "The goals of this project are: 1) Create a simple Spring Boot REST API to manage users called user-service. The database used is MySQL; 2) Explore the utilities and annotations that Spring Boot provides when testing applications. 3) Testing with Postman and Newman",
    "fork": false,
    "created_at": "2018-04-07T13:20:13Z",
    "updated_at": "2020-03-28T11:27:06Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 10564548,
    "owner_login": "ivangfr",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/10564548?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "application",
      "service",
      "call",
      "database",
      "user",
      "util",
      "manage",
      "users",
      "provide",
      "applications",
      "provides",
      "utilities",
      "goal",
      "notation",
      "goals"
    ]
  },
  {
    "id": 115544571,
    "name": "todolist_using_api_and_ajax",
    "full_name": "danielxcom/todolist_using_api_and_ajax",
    "description": "Test-run of ajax syntax, todolist using RESTful web services tested with POSTMAN. Refactored REST operations in Promises + put them in helper file to make modular todos.js. Schema created using MongoDB",
    "fork": false,
    "created_at": "2017-12-27T17:48:23Z",
    "updated_at": "2017-12-27T17:51:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26654775,
    "owner_login": "danielxcom",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/26654775?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "file",
      "service",
      "tested",
      "help",
      "operation",
      "services",
      "list",
      "operations",
      "todo",
      "actor",
      "helper",
      "syntax",
      "ajax"
    ]
  },
  {
    "id": 189706493,
    "name": "Employee-Relationship-CURD-Application-using-Spring-Boot-Thymeleaf-Hibernate-JPA-MVC",
    "full_name": "soumyadip007/Employee-Relationship-CURD-Application-using-Spring-Boot-Thymeleaf-Hibernate-JPA-MVC",
    "description": "CRUD (Create, Read, Update and Delete) application is the most important application for creating any project.  In spring Rest, we have developed this using Jackson,Postman and restful web services and along with this we have used Spring-boot ,JPA, Spring-Data-Rest and hibernate.",
    "fork": false,
    "created_at": "2019-06-01T08:00:01Z",
    "updated_at": "2019-12-01T07:39:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37873518,
    "owner_login": "soumyadip007",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/37873518?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "rest",
      "service",
      "develop",
      "services",
      "import",
      "boot",
      "restful",
      "creating",
      "spring",
      "developed",
      "long",
      "along",
      "hibernate",
      "important"
    ]
  },
  {
    "id": 178220194,
    "name": "Explorer-Ionic",
    "full_name": "dailiang18bb/Explorer-Ionic",
    "description": "Explorer – A hybrid mobile apps which help explore the world by using Google Vision and Wikipedia API. Coding in Angular 6, building with Ionic 4 and Cordova. Worked on the REST/Web API to create the services and tested on postman and used in AngularJS $HTTP service calls and bind the data in the card.",
    "fork": false,
    "created_at": "2019-03-28T14:27:29Z",
    "updated_at": "2020-02-19T21:15:41Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 15603436,
    "owner_login": "dailiang18bb",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/15603436?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "data",
      "service",
      "call",
      "tested",
      "help",
      "build",
      "calls",
      "services",
      "building",
      "mobile",
      "world",
      "explore",
      "apps",
      "hybrid"
    ]
  },
  {
    "id": 205943793,
    "name": "admin-service-api",
    "full_name": "anandjat05/admin-service-api",
    "description": "Project based on Micro-services, I created REST API's, wrote Junit, testing the coverage, bug smell, vulnerability analysis on Sonarqube and static test analysis using Jococo, Jenkins, Postman and Newman deploy through the CI/CD pipeline in ECS cluster using EC2 instances, Dockerhub, Docker Container/image. ",
    "fork": false,
    "created_at": "2019-09-02T22:10:35Z",
    "updated_at": "2019-11-04T22:01:23Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 39242031,
    "owner_login": "anandjat05",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/39242031?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "service",
      "based",
      "line",
      "services",
      "stat",
      "image",
      "unit",
      "pipeline",
      "coverage",
      "instance",
      "vulnerability",
      "instances"
    ]
  },
  {
    "id": 119587689,
    "name": "SmackApplication",
    "full_name": "sonali-developer/SmackApplication",
    "description": "App Description: A clone of chat application namely Slack. It is a full fledged and professional looking ready to publish app on Appstore. It allows first time user to register by providing unique username, email and password along with selection of Avatar and Avatar's Background color; login using registered email and password, participate in channels available for chat, create new channel by adding users, perform live chat with other users of this app, can even logout, and so on.  • Built using Xcode 9, Swift 4, Cocoa pods, node.js, MongoDB, Heroku, Postman, etc. for iOS 11 based iPhones and iPads.  • Local Frameworks used includes Foundation, UIKit and other API's like Alamofire, SwiftyJSON, SocketIO, REST, SWReveal, etc.  • Demonstrated the use of Networking in iOS.  • Implemented Web Request creation in Xcode using UIKit, APIs, node.js and Mongo dB online. • Implemented Web service API hosting online using Heroku and local hosting using Postman. • Implemented user creation and real time talking using Socket Technology through SocketIO library.  • Implemented Web Service for User Registration, Authentication & Login, Channels Creation & display, fetching, sending and saving text messages and many more.  • Implemented Table Views, Collection Views & custom design of their cells using data models.  • Implemented side menu for the display of user profile and channels using SWReveal and Gradient color design code for providing gradient color background to this side menu.  • Implemented creation of two XIB's for Channels creation and profile view’s popUp.  • Implemented SegmentedControl for displaying 28 Dark and Light Avatar displays and code for generating Avatar’s background color on user registration screen.  • Implemented Input Accessory View for Text field.  • In all designed around eight View Controllers and their corresponding storyboard file for GUI design, Four Services, two custom cells, seven view files, two model files and lots of assets and so on. ",
    "fork": false,
    "created_at": "2018-01-30T20:02:55Z",
    "updated_at": "2018-06-24T20:51:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 20232921,
    "owner_login": "sonali-developer",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20232921?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "file",
      "application",
      "script",
      "service",
      "node",
      "user",
      "based",
      "code",
      "sign",
      "mail",
      "line",
      "files",
      "send",
      "local",
      "full",
      "read",
      "users",
      "more",
      "library",
      "view",
      "host",
      "email",
      "perform",
      "rating",
      "store",
      "play",
      "name",
      "working",
      "side",
      "allows",
      "long",
      "model",
      "custom",
      "message",
      "text",
      "design",
      "includes",
      "login",
      "along",
      "available",
      "clone",
      "designed",
      "fetch",
      "creation",
      "sending",
      "around",
      "ready",
      "many",
      "messages",
      "online",
      "sets",
      "display",
      "models",
      "register",
      "select",
      "generating",
      "fire",
      "playing",
      "profile",
      "adding",
      "talk",
      "hosting",
      "providing",
      "registration",
      "chat",
      "saving",
      "background",
      "namely",
      "fetching",
      "selection",
      "real time",
      "lots"
    ]
  },
  {
    "id": 166755938,
    "name": "Dec-api",
    "full_name": "Pal0720/Dec-api",
    "description": "Build a RESTful API/MICROSERVICE with the following implementations :   The API/Microservice must perform these basic CRUD Operations :              - Accepts a request to add a new entry into the database.        - Accepts a request to update an existing entry into the database.        - Accepts a request to retrieve all the existing entries from the database.        - Accepts a request to retrieve a single entry with respect to a particular field (ID, Name, etc.. )  from the database.    a. Products : Products Table Schema : Decathlon_Products ProductID  | ProductName  | ProductSport | ProductLevel | ProductDescription  | AssociatedStores |    b. Stores : DB Table Schema : Decathlon_Stores StoreID  | StoreName  | StoreCity |       Note : 1. 'AssociatedStores' is the field to capture the StoreIDs in which the product is available. It can be multiple stores.  2. Both Products and Stores API can be called separately and together to perform the above mentioned functions. For Ex: Expose one endpoint (for example: /stores/{store_id}/products/{product_id} ) to retrieve the details of the product associated to a store. Expose one endpoint ( /stores/store_id/products ) to list all the products available in that particular store.  3. IDs and names cannot be updated.  4. You can use Spring Boot(Java) or Django Framework (with Python) or any framework you are comfortable with to build the application with Maven.  5. You can use an in-memory database : H2/Apache Derby.  6. You can use Postman as the REST Client to send requests.   Security : Implement a Basic Authorization security mechanism, which is validated on all requests.",
    "fork": false,
    "created_at": "2019-01-21T05:53:07Z",
    "updated_at": "2019-01-21T06:55:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 29477534,
    "owner_login": "Pal0720",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/29477534?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "script",
      "service",
      "call",
      "database",
      "requests",
      "example",
      "implement",
      "endpoint",
      "framework",
      "build",
      "function",
      "send",
      "spec",
      "list",
      "update",
      "implementation",
      "perform",
      "store",
      "name",
      "product",
      "multiple",
      "available",
      "functions",
      "following",
      "retrieve",
      "products",
      "single",
      "updated",
      "details",
      "mechanism",
      "security",
      "memory",
      "names",
      "comfortable",
      "cannot",
      "implementations"
    ]
  },
  {
    "id": 144125384,
    "name": "newman-postman-docker",
    "full_name": "gunesmes/newman-postman-docker",
    "description": "Run your service / microservice / API test with Postman, create test steps in Postman and run them with Newman in a Docker via cli",
    "fork": false,
    "created_at": "2018-08-09T08:44:37Z",
    "updated_at": "2020-01-14T09:50:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 956628,
    "owner_login": "gunesmes",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/956628?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "service",
      "micro",
      "microservice",
      "steps"
    ]
  },
  {
    "id": 243192940,
    "name": "ssmgenerator03",
    "full_name": "zhihuiwang88/ssmgenerator03",
    "description": "1. 此项目是SSM，使用代码生成器(mybatis-generator)自动生成dao、entity、mapper.xml ,需要自己写controller、service、serviceImpl。不是mybatis-plus-generator自动生成的代码。 2. 使用的日志是log4j 3.简单的CRUD接口写好了且postman测试通过。没有前端页面。 4. 测试类(HouseXiaoServiceImplTest.java)也测试通过。 5. 项目中的DTO、VO没有用到，如果用了，不知道接口测通不。",
    "fork": false,
    "created_at": "2020-02-26T07:11:32Z",
    "updated_at": "2020-02-26T07:15:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38693879,
    "owner_login": "zhihuiwang88",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/38693879?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "java",
      "generator",
      "control",
      "controller",
      "entity",
      "mybatis"
    ]
  },
  {
    "id": 86958595,
    "name": "postman-chrome-extenshion",
    "full_name": "mddanishyusuf/postman-chrome-extenshion",
    "description": "basic application for HTTP services and return JSON data",
    "fork": false,
    "created_at": "2017-04-02T02:55:24Z",
    "updated_at": "2017-04-02T02:59:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9165019,
    "owner_login": "mddanishyusuf",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9165019?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "service",
      "services"
    ]
  },
  {
    "id": 131483815,
    "name": "todolistpostmancollection",
    "full_name": "AnilDeshpande/todolistpostmancollection",
    "description": "Just contains POSTMAN collection json files which can be imported by the people who want to use this to test the web services",
    "fork": false,
    "created_at": "2018-04-29T10:05:05Z",
    "updated_at": "2018-09-30T14:40:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 3,
    "watchers": 0,
    "score": 1,
    "owner_id": 7361268,
    "owner_login": "AnilDeshpande",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7361268?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "file",
      "service",
      "json",
      "contain",
      "files",
      "services",
      "import",
      "imported"
    ]
  },
  {
    "id": 92009861,
    "name": "PlanetAssetsAPI",
    "full_name": "10manjunath/PlanetAssetsAPI",
    "description": "Built custom API using Python and Flask. A RESTful web service. ",
    "fork": false,
    "created_at": "2017-05-22T04:02:26Z",
    "updated_at": "2018-06-27T07:00:44Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 7700267,
    "owner_login": "10manjunath",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7700267?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "custom"
    ]
  },
  {
    "id": 187572200,
    "name": "PaymentService",
    "full_name": "anshhora7/PaymentService",
    "description": "Payment Service is a Sring Boot service, which allows user to subscribe a plan aacording to its use. Postman is also used here to provide JSON objects and the nesseccery parameters for the project.",
    "fork": false,
    "created_at": "2019-05-20T05:18:24Z",
    "updated_at": "2019-05-23T08:43:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46044644,
    "owner_login": "anshhora7",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/46044644?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "user",
      "provide",
      "allows",
      "object",
      "esse",
      "parameter",
      "objects"
    ]
  },
  {
    "id": 95364561,
    "name": "RetailManager",
    "full_name": "sangramkonde/RetailManager",
    "description": "A Retail Manager (using a RESTful client e.g Chrome's Postman),  wanting to keep track of their shops, does a RESTful POST to /shops with a JSON of shopName, shopAddress.number and shopAddress.postCode  to the Shops API (microservice)",
    "fork": false,
    "created_at": "2017-06-25T14:24:43Z",
    "updated_at": "2017-06-27T03:23:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29208425,
    "owner_login": "sangramkonde",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29208425?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "client",
      "shop",
      "micro",
      "track",
      "microservice",
      "keep"
    ]
  },
  {
    "id": 231825644,
    "name": "Roomy-App",
    "full_name": "zakikasem/Roomy-App",
    "description": " An iOS Mobile App that offers room renting service , I utilized the knowledge I gained throughout being iOS Developer Trainee at SwiftyCamp in this project by dealing with: Autolayout constraints. Tableviews. Networking using Alamofire, APIs and JSON Parsing. Userdefaults. MVP Architectural Pattern. Worked with Git , Postman and Sketch in development process ",
    "fork": false,
    "created_at": "2020-01-04T20:43:44Z",
    "updated_at": "2020-01-13T19:17:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 54954872,
    "owner_login": "zakikasem",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/54954872?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "develop",
      "util",
      "rent",
      "view",
      "development",
      "working",
      "process",
      "default",
      "being",
      "fire",
      "knowledge",
      "offers"
    ]
  },
  {
    "id": 163893574,
    "name": "golangProject",
    "full_name": "RedaZenagui/golangProject",
    "description": "Creating a server that exposes a graphql endpoint that returns a struct taken from gRPC service when queried via something like postman.",
    "fork": false,
    "created_at": "2019-01-02T21:53:35Z",
    "updated_at": "2019-01-03T15:43:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37189636,
    "owner_login": "RedaZenagui",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/37189636?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "service",
      "server",
      "endpoint",
      "struct",
      "expose",
      "turns",
      "returns",
      "exposes",
      "graph",
      "something",
      "graphql"
    ]
  },
  {
    "id": 245247187,
    "name": "postman-proto",
    "full_name": "cwoolum/postman-proto",
    "description": null,
    "fork": false,
    "created_at": "2020-03-05T19:12:50Z",
    "updated_at": "2020-03-13T19:06:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 942415,
    "owner_login": "cwoolum",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/942415?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 166232472,
    "name": "JavaEntityFrameworkFromDatabaseToPostMan",
    "full_name": "BahgatMashaly/JavaEntityFrameworkFromDatabaseToPostMan",
    "description": "Auto generate  model, repository, service, controller and postman file ",
    "fork": false,
    "created_at": "2019-01-17T13:43:04Z",
    "updated_at": "2019-01-21T07:37:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6259704,
    "owner_login": "BahgatMashaly",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6259704?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "repo",
      "file",
      "repos",
      "repository",
      "service",
      "generate",
      "model",
      "control",
      "controller"
    ]
  },
  {
    "id": 178550036,
    "name": "currency-converter-eureka-naming-server",
    "full_name": "Unogwudan/currency-converter-eureka-naming-server",
    "description": "Eureka Naming Server API Microservice for a currency converter developed with Java, Spring Framework, Spring Boot, Spring Data JPA, H2 database, Spring cloud, Eureka, Hystrix, Ribbon, Zipkin, Rabbit MQ, Zuul, Spring Sleuth, Maven, Tomcat, STS, Postman.",
    "fork": false,
    "created_at": "2019-03-30T11:30:42Z",
    "updated_at": "2019-03-30T17:49:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15893492,
    "owner_login": "Unogwudan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15893492?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "service",
      "database",
      "develop",
      "convert",
      "converte",
      "developed",
      "converter",
      "cloud",
      "currency"
    ]
  },
  {
    "id": 178550439,
    "name": "currency-converter-limits-service",
    "full_name": "Unogwudan/currency-converter-limits-service",
    "description": "Config API Microservice for a currency converter app developed with Java, Spring Framework, Spring Boot, Spring Data JPA, H2 database, Spring cloud, Eureka, Hystrix, Ribbon, Zipkin, Rabbit MQ, Zuul, Spring Sleuth, Maven, Tomcat, STS, Postman.",
    "fork": false,
    "created_at": "2019-03-30T11:34:46Z",
    "updated_at": "2019-03-30T17:48:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15893492,
    "owner_login": "Unogwudan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15893492?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "service",
      "database",
      "develop",
      "convert",
      "converte",
      "developed",
      "converter",
      "cloud",
      "currency"
    ]
  },
  {
    "id": 178550221,
    "name": "currency-converter-discovery-server",
    "full_name": "Unogwudan/currency-converter-discovery-server",
    "description": "Discovery Server API Microservice for a currency converter app developed with Java, Spring Framework, Spring Boot, Spring Data JPA, H2 database, Spring cloud, Eureka, Hystrix, Ribbon, Zipkin, Rabbit MQ, Zuul, Spring Sleuth, Maven, Tomcat, STS, Postman.",
    "fork": false,
    "created_at": "2019-03-30T11:32:32Z",
    "updated_at": "2019-03-30T17:46:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15893492,
    "owner_login": "Unogwudan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15893492?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "service",
      "database",
      "develop",
      "convert",
      "very",
      "converte",
      "developed",
      "converter",
      "cloud",
      "currency"
    ]
  },
  {
    "id": 178549809,
    "name": "currency-exchange-service",
    "full_name": "Unogwudan/currency-exchange-service",
    "description": "A Currency Exchange API Microservice for a currency converter developed with Java, Spring Framework, Spring Boot, Spring Data JPA, H2 database, Spring cloud, Eureka, Hystrix, Ribbon, Zipkin, Rabbit MQ, Zuul, Spring Sleuth, Maven, Tomcat, STS, Postman.",
    "fork": false,
    "created_at": "2019-03-30T11:28:40Z",
    "updated_at": "2019-03-30T17:49:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15893492,
    "owner_login": "Unogwudan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15893492?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "service",
      "database",
      "develop",
      "convert",
      "converte",
      "developed",
      "converter",
      "cloud",
      "currency"
    ]
  },
  {
    "id": 178550088,
    "name": "currency-converter-spring-cloud-config-server",
    "full_name": "Unogwudan/currency-converter-spring-cloud-config-server",
    "description": "Spring Cloud Config Server API Microservice for a currency converter developed with Java, Spring Framework, Spring Boot, Spring Data JPA, H2 database, Spring cloud, Eureka, Hystrix, Ribbon, Zipkin, Rabbit MQ, Zuul, Spring Sleuth, Maven, Tomcat, STS, Postman.",
    "fork": false,
    "created_at": "2019-03-30T11:31:16Z",
    "updated_at": "2019-03-30T17:49:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15893492,
    "owner_login": "Unogwudan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15893492?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "service",
      "database",
      "develop",
      "convert",
      "converte",
      "developed",
      "converter",
      "cloud",
      "currency"
    ]
  },
  {
    "id": 178549875,
    "name": "currency-conversion-service",
    "full_name": "Unogwudan/currency-conversion-service",
    "description": "A currency converter API microservice for a currency converter app developed with Java, Spring Framework, Spring Boot, Spring Data JPA, H2 database, Spring cloud, Eureka, Hystrix, Ribbon, Zipkin, Rabbit MQ, Zuul, Spring Sleuth, Maven, Tomcat, STS, Postman.",
    "fork": false,
    "created_at": "2019-03-30T11:29:06Z",
    "updated_at": "2019-03-30T17:41:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15893492,
    "owner_login": "Unogwudan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15893492?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "service",
      "database",
      "develop",
      "convert",
      "converte",
      "developed",
      "converter",
      "cloud",
      "currency",
      "micro",
      "microservice"
    ]
  },
  {
    "id": 178550135,
    "name": "currency-converter-zuul-api-gateway-server",
    "full_name": "Unogwudan/currency-converter-zuul-api-gateway-server",
    "description": "Zuul API Gateway Server Microservice for a currency converter developed with Java, Spring Framework, Spring Boot, Spring Data JPA, H2 database, Spring cloud, Eureka, Hystrix, Ribbon, Zipkin, Rabbit MQ, Zuul, Spring Sleuth, Maven, Tomcat, STS, Postman.",
    "fork": false,
    "created_at": "2019-03-30T11:31:40Z",
    "updated_at": "2019-03-30T17:45:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15893492,
    "owner_login": "Unogwudan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15893492?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "service",
      "database",
      "develop",
      "convert",
      "converte",
      "developed",
      "converter",
      "cloud",
      "currency"
    ]
  },
  {
    "id": 194071011,
    "name": "EspaceFurcanASBL",
    "full_name": "PaulArnaud/EspaceFurcanASBL",
    "description": null,
    "fork": false,
    "created_at": "2019-06-27T10:02:54Z",
    "updated_at": "2020-02-27T10:27:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32633519,
    "owner_login": "PaulArnaud",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/32633519?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 66363646,
    "name": "postman-client",
    "full_name": "ThCC/postman-client",
    "description": "Client service, to send simple text emails or, using a template created at Postman, send more complex emails.",
    "fork": false,
    "created_at": "2016-08-23T12:10:19Z",
    "updated_at": "2017-11-20T18:29:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2923857,
    "owner_login": "ThCC",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2923857?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "service",
      "mail",
      "send",
      "more",
      "plate",
      "email",
      "template",
      "text",
      "emails",
      "complex"
    ]
  },
  {
    "id": 31588431,
    "name": "postman-client",
    "full_name": "openteam-tusur/postman-client",
    "description": null,
    "fork": false,
    "created_at": "2015-03-03T08:47:49Z",
    "updated_at": "2017-07-29T04:13:36Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 1542779,
    "owner_login": "openteam-tusur",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1542779?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 103148094,
    "name": "postman",
    "full_name": "rgamba/postman",
    "description": "Reverse proxy for async microservice communication",
    "fork": false,
    "created_at": "2017-09-11T14:44:20Z",
    "updated_at": "2019-07-15T13:18:52Z",
    "stargazers_count": 29,
    "watchers_count": 29,
    "forks": 1,
    "watchers": 29,
    "score": 1,
    "owner_id": 3084582,
    "owner_login": "rgamba",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3084582?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "ever",
      "micro",
      "proxy",
      "sync",
      "microservice",
      "communication",
      "async"
    ]
  },
  {
    "id": 210642468,
    "name": "literate-train",
    "full_name": "elvisoliveira/literate-train",
    "description": "A programming challange in Java SpringBoot. Restful service that implements a cache based user manager.",
    "fork": false,
    "created_at": "2019-09-24T15:56:36Z",
    "updated_at": "2019-09-24T21:10:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 314738,
    "owner_login": "elvisoliveira",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/314738?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "user",
      "based",
      "implement",
      "manage",
      "program",
      "lang",
      "programming",
      "implements",
      "manager",
      "challange"
    ]
  },
  {
    "id": 123968911,
    "name": "webservice-contatos",
    "full_name": "EmanuelGabriel/webservice-contatos",
    "description": "Webservice desenvolvido em Java com Spring Boot",
    "fork": false,
    "created_at": "2018-03-05T19:35:26Z",
    "updated_at": "2018-03-05T19:39:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16214525,
    "owner_login": "EmanuelGabriel",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16214525?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "desenvolvido"
    ]
  },
  {
    "id": 130627375,
    "name": "Microservice-architecture-using-Spring-Boot",
    "full_name": "absnaik810/Microservice-architecture-using-Spring-Boot",
    "description": "RESTful ToDo list application using Microservices architecture and Spring Boot",
    "fork": false,
    "created_at": "2018-04-23T02:07:26Z",
    "updated_at": "2018-04-23T02:57:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7829674,
    "owner_login": "absnaik810",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7829674?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service",
      "services",
      "list"
    ]
  },
  {
    "id": 242015506,
    "name": "renohome",
    "full_name": "eduardotrzan/renohome",
    "description": "Zipkin tracing application with 2 micro-services",
    "fork": false,
    "created_at": "2020-02-20T23:51:31Z",
    "updated_at": "2020-03-14T20:39:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12973195,
    "owner_login": "eduardotrzan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12973195?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service",
      "services",
      "micro"
    ]
  },
  {
    "id": 155592875,
    "name": "Course-API",
    "full_name": "XenuxX/Course-API",
    "description": "This project is based on creating a course api which facilitates adding and removing a list of courses along with topics under respective courses. Technologies used are: Spring Boot, Spring RESTful webservices, Apache Derby db and Postman integration tool.",
    "fork": false,
    "created_at": "2018-10-31T16:52:42Z",
    "updated_at": "2019-01-12T06:05:13Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 9895034,
    "owner_login": "XenuxX",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/9895034?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "tool",
      "based",
      "spec",
      "integration",
      "services",
      "list",
      "creating",
      "course",
      "long",
      "under",
      "along",
      "adding",
      "facilitate",
      "webservice",
      "webservices",
      "facilitates"
    ]
  },
  {
    "id": 104517446,
    "name": "backend-webservice-using-Node-and-Express",
    "full_name": "akshaymittal143/backend-webservice-using-Node-and-Express",
    "description": "This is a project for web services using Node and Express with other dependencies",
    "fork": false,
    "created_at": "2017-09-22T20:47:38Z",
    "updated_at": "2017-10-24T20:17:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8115184,
    "owner_login": "akshaymittal143",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8115184?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "services",
      "dependencies"
    ]
  },
  {
    "id": 104284014,
    "name": "BookAPI-Web-Services",
    "full_name": "akshaymittal143/BookAPI-Web-Services",
    "description": "Node.js is a simple and powerful tool for back-end development. When combined with express, you can create lightweight, fast, scalable APIs quickly and simply. which will walk through how to stand up a lightweight Express server serving truly RESTful services using Node.js, Mongoose, and MongoDB. We will implement all of the RESTful verbs to get, add, and update data from our service. We will also spend some time working through unit and end to end integration tests for our services.",
    "fork": false,
    "created_at": "2017-09-21T01:00:22Z",
    "updated_at": "2017-10-09T01:01:01Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 8115184,
    "owner_login": "akshaymittal143",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8115184?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "data",
      "tests",
      "service",
      "tool",
      "server",
      "tests ",
      "develop",
      "express",
      "implement",
      " express",
      "integration",
      "services",
      "update",
      "development",
      "working",
      "light",
      "unit",
      "combine",
      "powerful",
      "quickly",
      "verb",
      "end to end",
      "lightweight",
      "combined",
      "verbs"
    ]
  },
  {
    "id": 242286851,
    "name": "Lipa-na-Mpesa-Express-using-Daraja-Library-for-Android",
    "full_name": "ronnieotieno/Lipa-na-Mpesa-Express-using-Daraja-Library-for-Android",
    "description": "Lipa na Mpesa Express is an easy way to intergrate mpesa. The service allows sim pop up on the number that is supposed to pay. The owner simply enter the pin and they are done. No more opening sim and entering paybill number etc. Use this link to follow along but on android, the link uses postman.",
    "fork": false,
    "created_at": "2020-02-22T05:41:39Z",
    "updated_at": "2020-02-23T14:47:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48311117,
    "owner_login": "ronnieotieno",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/48311117?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "service",
      "more",
      "allows",
      "uses",
      "long",
      "open",
      "link",
      "along",
      "android",
      "enter",
      "done"
    ]
  },
  {
    "id": 40326550,
    "name": "Angular-Directive-Project",
    "full_name": "sn0112358/Angular-Directive-Project",
    "description": "Angular-Directive-Project Directives range from very basic to extremely complex. This project will build up to some somewhat difficult directives. Keep in mind that the format we're learning for directives is the same format used to build some extremely complex things in angular. Using directives often and well is one way to show you're a talented developer.  Starting Out  We've included only a few things for you to begin with. index.html, app.js, styles.css. At this point the best way to get more comfortable with angular is to initialize an app without relying heavily on boilerplate code (reusable code that starts out your projects for you).  You'll notice that in the index.html we've included the angular-route CDN. Yes, we'll be using angular's router here. Put an ng-view into your index.html.  In your app.js set up a config and set up our first route for when a user is at the '/home' url. If you're having trouble remembering how to set up the router go look at how you set up the router on the previous project. One way these projects will be beneficial to you is allowing you to look back at something *you** did and seeing how you got that something to work.* You may also want add an otherwise that defaults to /home. Create a controller and a template file for this route in your app folder. Don't forget to include the controller as a script in your index.html Check that everything is hooked up correctly. Try adding a div with some text in your home template just to make sure it's showing up. Once you've got that going you're ready to start on some directives. Now let's make our directive. We'll start with a simple one that we can use to display information passed to it.  Step 1. Start your directive  Woot. When you're initializing your directive just remember that it works very similarly to how you start up a controller or a service. It can also be very helpful to think of your directive as a route.  Create your directive. You'll use the directive method on your angular module. It takes two arguments, the name string and the callback function, which will return the object that represents your directive. When naming your directive give it a name with two words; dirDisplay would be nice, but anything works. Just remember it's best practice to give a directive a camel case name so that it's clear in your html what it is. Also we're going to need a template html for our directive. We could do it inline, but let's make another file instead. Just name it something that makes sense for the name of your directive and put it in the same directory as your directive file. For your template just make a  and inside a  tag that says User. Now in your home route html add in your directive. It will look like this if you named it dirDisplay:  Start up your app and go to the home route. Check and make sure you see User where your directive was placed. If you're not seeing it at this point it could mean a few things. Here's some more common issues. You didn't link your directive in your index as a script. Your name for your directive doesn't match the name in your html. Remember camel case becomes snake case so myDirective becomes . You're file path to your html template is wrong. You have to think of file paths in angular as relative to the index. Here's some code to see just for this part, and just for the directive's js file.  var app = angular.module('directivePractice'); app.directive('dirDisplay', function(){   return {     templateUrl: 'app/directives/dirDisplay.html'   }; }); What we're returning is the directive object. You won't see anymore code in this tutorial so it's important you get things working right and refer back to what you've already done to advance from now on.  Step 2. Advancing directives  Your directive should be loaded up now, but it's not really doing much. Let's make it better.  In your home controller. Make a variable on your $scope called user. Set it's value to {   name: \"Geoff McMammy\",   age: 43,   email: \"geofdude@gmail.com\" } Now inside your directive's html specifically inside the  tags display our new user's name. Then inside maybe some  tags display his email and age. This is going to work exactly the same as if it was just inside your home controller. Reload the page and make sure it works. This is still very cosmetic and really not all that useful. It needs functionality.  Add into your directive's object the link property. The link property's value is a function definition that takes (generally) three parameters. scope, element, and attributes. Unlike in other places with angular injection these parameter names don't carry meaning. The first parameter will always represent your $scope for that directive, the second will always be the element that wraps your whole directive, and the third will always be an object containing all the properties and values of the attributes on your directive in the dom. Try the following to get a feel for all three.  Add two attributes to your directive in your html. Like this -  Now in the link property you've added console.log the three parameters in the function. You'll see an object for scope that should look identical to the $scope of your html function. For element you'll see an object the represents the DOM wrapper for your directive. For attributes you'll see an object that will look like this:  {   test: \"myTest\",   myCheck: \"checkItOut\" } An important thing to notice is how it has again converted snake case to camel case for you. my-check became myCheck. Don't forget this. You'll run into this issue one day. It counts for both attributes and directive names.  To feel some of what the link function could do let's try this.  Add a ng-show to both the email and age wrappers. This should be familiar to you. Now inside your link function add a click event listener to your element property. It's going to look just like jQuery. element.on('click', function(){  }) Inside the click listener's callback add a toggle for the ng-show property you passed in. Along with a console.log to make sure things are connecting when you click. Try it out. Don't call for a mentor when it doesn't work. Let's talk about that first. You should see the console.log firing, but why isn't it toggling. This is going to be a common problem when working with the link function and event listeners. What we have here is an angular digest problem. The value is changing on the scope object, but the change isn't being reflected by our DOM. That's because angular isn't aware of the change yet. Anytime we cause an event to happen using something like jQuery or even angular's jQLite we need to let angular know that we've made a change.  Add this line of code in place of your console.log, scope.$apply(). Now try it out. It should be working now, so if you're still having issues it's time to debug. What we've done is forced angular to run it's digest cycle. This is where angular checks the scope object for changes and then applies those to the DOM. This is another good lesson to learn for later. You'll most likely hit this when making changes to your element using event listeners.  Step 3. Directive's re-usability.  Now our directive has some extremely basic functionality. One of a directive's greatest advantages though is its ability to be placed anywhere and still be functional. Let's say instead we had a list of users instead of just one.  Change the $scope property in your home controller to be users and give it this array as its value: [  {    name: \"Geoff McMammy\",    age: 43,    email: \"geofdude@gmail.com\",    city: \"Provo\"  },  {    name: \"Frederick Deeder\",    age: 26,    email: \"fredeed@gmail.com\",    city: \"Austin\"  },  {    name: \"Spencer Rentz\",    age: 35,    email: \"spencerrentz@gmail.com\",    city: \"Sacramento\"  },  {    name: \"Geddup Ngo\",    age: 43,    email: \"geddupngo@gmail.com\",    city: \"Orlando\"  },  {    name: \"Donst Opbie Leevin\",    age: 67,    email: \"gernee@gmail.com\",    city: \"Phoenix\"  } ] Now in your home HTML add a ng-repeat to the directive call. Tell it to repeat for each user in users. Reload your page. It's working! But why? How does each directive instance know what information to display?  In the link function console.log the scope parameter. Make sure it's outside of your click listener. You'll see five print outs in your console. Open up any one of them and look to the bottom. Open up the user property. It's exactly what we would want! But again why would that be the case? Don't get too caught up in this next bit if it's too hard to understand, but the ng-repeat is essentially making new tiny scope objects for each individual user in our users array. Now each of our directives is still getting a user property on the scope object just like the directive wanted in the beginning. Woot.  Step 4. Ramp it up with Isolate Scope.  Directives can do so much more. So let's make that happen. That means we should make.... a new directive!!! This directive's purpose will be to display a selected User and the weather in his/her/its location. Link it up just like the last one.  Create a js file for our directive and name it dirWeather. Make an html file named dirWeather.html. Link it up in your index.html and add the template to your new directive object. In your directive's template give it an  tag that says Weather just so we can know it's working. Above your ng-repeat on dirDisplay add your new dirWeather directive. If it's not working check the instructions above as to some common reasons why before asking a mentor for help. If you're seeing the Weather text on your page then we're ready to try out the dreaded Isolate Scope. The isolate scope object is one of the stranger API's in angular. I'm sorry but it is. Just refer to this for now.  scope: {  string: '@',  link: '=',  func: '&' } The properties on the scope object represent the attributes on the directive in the html. Our example scope object here would look something like this in the html.  The hard part here is the @, =, and &. They each have very important and distinct meanings.  @ says take in my attribute value as a string. = says take in my attribute value as a two-way bound variable from the parent scope. & says take in my attribute value as a reference to a function on the parent scope. It's also critical to point out that once you add a scope object you have no isolated your directive's scope. Meaning, aside from the values passed in through attributes, this directive has no connection to the $scope of its parent.  That being said let's isolate our directive's scope. :worried:  Add the scope property to your dirWeather. Give it the value of an object with a property of currentUser whose value is '='. Remember in your html this will look like current-user. This is the third time I've said so don't expect it again. This means that whatever comes into the currentUser attribute is going to be a value of the parent's scope object.  For now test this out by passing in users[0]. Find a way to show that users information inside your dirWeather's html. Remember inside your directive now the user is represented by currentUser. Step 5. &? &!?  The '=' value on your scope object has created a two-way binding between users[0] and currentUser. Now let's try out the '&'.  On your home controller add a function called getWeather. It takes one parameter called city. This function will make a call to a service so we'll need to create that. Make a weather service. Name it something cool and creative like weatherService. Inside the weather service make a function called getWeather that also takes one parameter, city. Make an $http get to this url - 'http://api.openweathermap.org/data/2.5/weather?q=' After the q= add on the city parameter. If you want you can test this out in postman. See what kind of data you get back. If it's the weather of that city then... you win! Use $q to return a promise that only resolves with the data you want. Temperature (preferably not in Kelvin) and the weather description. Use console.log on the data coming from the $http request to get to what you want. You'll need to add both on an object that you resolve your new promise with. On your home controller have it return the result of invoking the get getWeather function on the service. You should be returning a promise. Now in your home route's HTML pass in the getWeather function to the dirWeather directive through an attribute called weather-call. Add the attribute to your isolate scope object. That was a lot of linking, but let's walk through it. Your controller has a function linked to the service, which is in turn linked to your directive. So if you run the weatherCall function in your directive it will go through your controller to your service and then back.  Now things get a little bit tricky. Angular's way of passing along arguments through a directive to your controller are tricky, but once you understand how to do it, it's not hard. I'm going to give an example here of how it works.   Here's how it would look in your HTML. But where's the data supposed to be coming from? It seems that you'd rather be able to pass in data from your directive. Well you still can, you just have to essentially tell angular what do use as an argument to replace data when it calls that function in your controller. The actualy function call inside the directive will look like this.  $scope.passFunc({data: wantedData}) So what you'll do is pass in an object where the property name is what the argument is named in the HTML where you call the directive. That might sound confusing, but just look at the two code blocks above for a pattern. Note that pass-func becomes $scope.passFunc and data is being replaced with wantedData with the {data: wantedData} object. In our directive we want to replace city in the attribute call, for something else inside the directive. You'll follow the same pattern as above.  For now let's get things set up for that function call.  Add to the dirWeather directive object a property called controller. It's value will be a function. Yes, this is a controller specifically for your one directive. It works the same as any other controller, except you don't give it a name. It's $scope object will only be accessible within an instance of your directive. Don't forget to inject $scope in the function.  Inside your controller function run the weatherCall function with the city property from the currentUser on your $scope. Here's where you need to make sure you've passed in a city argument in the attribute function call, and then replace that with your currentUser's city using an object with a city property. The function call should return a promise, so call .then afterward and add the data onto your $scope to display both the weather and temperature of the currentUser's city. The properties can be named whatever makes sense to you.  You may also want to find a way to get rid of all the decimal places on your temperature. Now you should have everything hooked up so it shows Geoff's data and the weather data for Provo. But is that good enough?  Step 6. Ramping up our ramp up.  Now let's change this so it shows the weather data for whichever user we select. We're going to need to use '&' again.  Make a function on the home controller that takes in a parameter and sets a property on the $scope to be that parameter. Maybe you see where this is going.  We want to get this function into our dirDisplay controller. But in order to do that we need to isolate dirDisplay's scope. This also means we need to pass in each individual user through the scope object as well.  To make it easier on ourselves, let's pass the current user from our ng-repeat into our directive through a user attribute. This way we can leave our two-way bindings as they are. Also pass our new function that sets our current user from our home controller into our directive through a setUser attribute.  You'll need to add an argument in there again. Go with user. Your scope object in dirDisplay should have two properties. setUser with the value of '&' and user with the value of '='. As before we're going to need to do some tricky stuff to get our argument back to our controller.  Call the setUser function inside our click event listener and pass in an object the sets our user argument to be the user on our directive's scope object. If you've forgotten this part go back up and take a look at how you did it before or the example in this README.  Whatever user you click on now should show up in the dirWeather directive as the current user. But we're missing one thing, we want to be able to see the weather for that user too. We'll have to do one more thing that will seem a little bit tricky at first, but it's good to learn if you don't know it already since it's actually used quite frequently.  We need to step up a change listener on our currentUser in the dirWeather directive. We'll use angular's $watch functionality. $watch is a method on your $scope that will watch for changes in a variable you give it. It works in two ways.  $scope.$watch('property', function(value){  console.log(\"When $scope.property changes its new value is: \", value) }); And  $scope.$watch(function(){  return myVar }, function(value){  console.log(\"When myVar changes its new value is: \", value); }); Remove the immediate function call that we have in there now. Maybe just comment it out for now because we'll use it in a bit. Now call the $watch method on your scope and have it watch currentUser. Either way of using $watch is fine. Have its callback run the $scope.weatherCall function just like you had it before.  One thing to note is that $scope.$watch will always run once to begin with. Since that's what we want here it's great, but just be aware of that.  If you've reached this point congratulate yourself. You've messed with some serious stuff today, namely directives. There are still a lot of things about directives that we can't possibly cover in a single project. If you like what we've done so far then you're in a good place to keep going. A developer who understands directives well can build a really clean looking code base. Just look at your home.html. It could have just two lines in it. If you're feeling good move on now to Step 7.  Step 7. Finishing touches  Try to work out these problems on your own.  There should be a way to let the user know that the weather data is loading. Something that appears while our $http request is retrieving our data. The $http request shouldn't fire on both opening and closing a user's information. A color change for the currently active user would be nicer than showing that user's info inside the dirWeather modal. Or at least less redundant. Whatever else you want. We still haven't explored transclusion and ng-transclude so give that a try if you're feeling adventurous. Just know that it's a way for deciding where to put the HTML child elements of a directive. It's cool stuff that can involve some criss-crossing of scopes.",
    "fork": false,
    "created_at": "2015-08-06T20:56:18Z",
    "updated_at": "2019-03-11T21:13:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 14,
    "watchers": 0,
    "score": 1,
    "owner_id": 13667207,
    "owner_login": "sn0112358",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13667207?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "data",
      "request",
      "form",
      "file",
      "script",
      "service",
      "call",
      "http",
      "user",
      "develop",
      "code",
      "example",
      "contain",
      "format",
      "convert",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "function",
      "load",
      "calls",
      "spec",
      "list",
      "star",
      "read",
      "import",
      "users",
      "learn",
      "rent",
      "more",
      "plate",
      "view",
      "config",
      "start",
      "connect",
      "email",
      "very",
      "functional",
      "method",
      "struct",
      "info",
      "developer",
      "play",
      "need",
      "access",
      "name",
      "working",
      "html",
      "converte",
      "learning",
      "module",
      "check",
      "side",
      "tutorial",
      "infor",
      "long",
      "open",
      "object",
      "print",
      "ever",
      "information",
      "template",
      "case",
      "result",
      "control",
      "esse",
      "text",
      "problem",
      "practice",
      "making",
      "to do",
      "place",
      "between",
      "link",
      "under",
      "right",
      "specific",
      "showing",
      "along",
      "variable",
      "included",
      "lines",
      "getting",
      "desc",
      "within",
      "folder",
      "functionality",
      "order",
      "advance",
      "parameter",
      "following",
      "controller",
      "reference",
      "those",
      "done",
      "ready",
      "debug",
      "needs",
      "find",
      "objects",
      "repl",
      "style",
      "console",
      "useful",
      "note",
      "angular",
      "containing",
      "current",
      "should",
      "single",
      "location",
      "easier",
      "connection",
      "sets",
      "default",
      "common",
      "event",
      "connecting",
      "description",
      "display",
      "both",
      "router",
      "best",
      "words",
      "directory",
      "usable",
      "projects",
      "things",
      "another",
      "complex",
      "added",
      "being",
      "third",
      "select",
      "fire",
      "wrapper",
      "doing",
      "correct",
      "path",
      "cause",
      "while",
      "media",
      "going",
      "keep",
      "replace",
      "stuff",
      "home",
      "boiler",
      "expect",
      "issue",
      "still",
      "having",
      "instead",
      "boilerplate",
      "three",
      "definition",
      "currently",
      "adding",
      "better",
      "helpful",
      "talk",
      "little",
      "match",
      "lesson",
      "ember",
      "makes",
      "instruction",
      "previous",
      "city",
      "named",
      "general",
      "instance",
      "familiar",
      "important",
      "become",
      "forge",
      "explore",
      "mean",
      "inside",
      "properties",
      "onto",
      "passing",
      "listen",
      "weather",
      "something",
      "names",
      "reusable",
      "inject",
      "array",
      "least",
      "shows",
      "comfortable",
      "tiny",
      "always",
      "clean",
      "cool",
      "five",
      "namely",
      "invoking",
      "initial",
      "returning",
      "actually",
      "wrappers",
      "wraps",
      "talent",
      "whole",
      "element",
      "directives",
      "elements",
      "essential",
      "sense",
      "arent",
      "much",
      "every",
      "wanted"
    ]
  },
  {
    "id": 33697091,
    "name": "postman-go",
    "full_name": "wannaup/postman-go",
    "description": "The Golang version of our preferred postman mail to threaded messaging relay microservice in Go.",
    "fork": false,
    "created_at": "2015-04-09T23:04:57Z",
    "updated_at": "2016-07-08T10:10:45Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 6564839,
    "owner_login": "wannaup",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6564839?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "service",
      "mail",
      "read",
      "version",
      "lang",
      "micro",
      "messaging",
      "preferred",
      "microservice",
      "threaded",
      "relay"
    ]
  },
  {
    "id": 176193451,
    "name": "go-postman",
    "full_name": "crazytaxi824/go-postman",
    "description": null,
    "fork": false,
    "created_at": "2019-03-18T02:52:59Z",
    "updated_at": "2019-04-09T05:27:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16500384,
    "owner_login": "crazytaxi824",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16500384?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 158919366,
    "name": "go-localapi",
    "full_name": "stanhordiyenko/go-localapi",
    "description": "This is a small golang API service that can be run locally to learn how to interact with it in Postman on the like tool.",
    "fork": false,
    "created_at": "2018-11-24T09:03:54Z",
    "updated_at": "2018-11-24T20:01:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1460638,
    "owner_login": "stanhordiyenko",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1460638?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "tool",
      "call",
      "local",
      "interact",
      "learn",
      "lang",
      "small",
      "locally",
      "golang"
    ]
  },
  {
    "id": 234382436,
    "name": "custom-Go-CRUD-server-template",
    "full_name": "cloudcooksco/custom-Go-CRUD-server-template",
    "description": "This is a custom Go server to handle typical CRUD services ie. website forms. This is a template, and does not come fully assembled with a db. Tested with postman - fully functional as of jan-16-2020",
    "fork": false,
    "created_at": "2020-01-16T18:14:35Z",
    "updated_at": "2020-01-16T18:14:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45404661,
    "owner_login": "cloudcooksco",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45404661?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "form",
      "service",
      "server",
      "function",
      "services",
      "full",
      "site",
      "plate",
      "website",
      "functional",
      "template",
      "custom",
      "ully",
      "handle",
      "fully",
      "fully functional",
      "typical"
    ]
  },
  {
    "id": 131504946,
    "name": "Smart-Doorbell",
    "full_name": "omniaAbdallah/Smart-Doorbell",
    "description": "My friend often call me instead of pressing my doorbell when they arrive, because I always miss the doorbell and left my guests outside, but how about postman or delivery service whom may not have my phone number? There are also special doorbell made for deafness people with lights alert, but it still can be missed easily, so I think it is time to reinvent doorbell.In this project, I am going to build an IoT doorbell .Once the visitor pressed the doorbell, it will publish and an alert will be sent, so I know someone is knocking my door no matter where I am. Visitors no longer need to call me and simply let the IoT doorbell to do the job, deafness people also benefit using it so they can alert from vibration of their phone.",
    "fork": false,
    "created_at": "2018-04-29T15:12:43Z",
    "updated_at": "2018-06-17T17:23:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36019090,
    "owner_login": "omniaAbdallah",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36019090?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "service",
      "call",
      "build",
      "spec",
      "very",
      "need",
      "side",
      "long",
      "esse",
      "to do",
      "light",
      "easily",
      "cause",
      "going",
      "still",
      "instead",
      "deliver",
      "friend",
      "longer",
      "always",
      "guest"
    ]
  },
  {
    "id": 206781028,
    "name": "Postman_CICD_AzureDevops",
    "full_name": "RashmiPad/Postman_CICD_AzureDevops",
    "description": null,
    "fork": false,
    "created_at": "2019-09-06T11:37:48Z",
    "updated_at": "2019-09-16T12:37:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39586491,
    "owner_login": "RashmiPad",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/39586491?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 217598202,
    "name": "microservice",
    "full_name": "carmargut/microservice",
    "description": "Microservice that handles bank transactions",
    "fork": false,
    "created_at": "2019-10-25T19:03:23Z",
    "updated_at": "2020-01-11T12:30:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12630892,
    "owner_login": "carmargut",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/12630892?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "action",
      "handle",
      "transactions",
      "handles",
      "bank"
    ]
  },
  {
    "id": 123844026,
    "name": "webservice-eventos",
    "full_name": "EmanuelGabriel/webservice-eventos",
    "description": "Criação de um webservice com Spring Boot",
    "fork": false,
    "created_at": "2018-03-05T00:46:50Z",
    "updated_at": "2018-03-05T00:49:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16214525,
    "owner_login": "EmanuelGabriel",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16214525?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "webservice"
    ]
  },
  {
    "id": 226859706,
    "name": "TesterQA-PROEM",
    "full_name": "rominamc/TesterQA-PROEM",
    "description": "Testing manual:documentación. Metodologias agiles.Kanban.Scrum.Ambientes de testing QC/QA. Software para testing de automatización:Registro de bugs:Redmine,Jira.Regresión: Selenium web driver.Katalon recorder.Testing unitario (java):JUnit.Webservice:Postman",
    "fork": false,
    "created_at": "2019-12-09T11:53:47Z",
    "updated_at": "2019-12-18T16:47:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14793590,
    "owner_login": "rominamc",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/14793590?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "service",
      "document",
      "auto",
      "automat",
      "java",
      "unit",
      "drive",
      "todo",
      "order",
      "mine",
      "river",
      "manua",
      "agile"
    ]
  },
  {
    "id": 46812176,
    "name": "MessengerApp",
    "full_name": "karthikeyaJ/MessengerApp",
    "description": "Developed RESTful APIs with JAX-RS. Built a sample Social Media API (JAVA EE) Developed a sample REStful web service, designed the API’s, implemented using Jersey and deployed using Tom cat Server. Made use of Postman Client to build, test and document the API.",
    "fork": false,
    "created_at": "2015-11-24T18:59:55Z",
    "updated_at": "2015-11-24T19:04:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9103489,
    "owner_login": "karthikeyaJ",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/9103489?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "service",
      "document",
      "implement",
      "sign",
      "build",
      "sample",
      "design",
      "deployed",
      "implemented",
      "designed"
    ]
  },
  {
    "id": 149067337,
    "name": "python-flask-hello",
    "full_name": "Static-Void-Academy/python-flask-hello",
    "description": "Hello world Python Flask web service.",
    "fork": false,
    "created_at": "2018-09-17T04:08:09Z",
    "updated_at": "2020-02-25T18:36:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 3,
    "watchers": 0,
    "score": 1,
    "owner_id": 43329694,
    "owner_login": "Static-Void-Academy",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/43329694?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "world"
    ]
  },
  {
    "id": 82772417,
    "name": "FlaskwithPostman",
    "full_name": "vasantharaj1990/FlaskwithPostman",
    "description": null,
    "fork": false,
    "created_at": "2017-02-22T07:08:29Z",
    "updated_at": "2017-02-22T07:08:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16604215,
    "owner_login": "vasantharaj1990",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16604215?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 155079260,
    "name": "postman-flask",
    "full_name": "tamkovich/postman-flask",
    "description": null,
    "fork": false,
    "created_at": "2018-10-28T14:21:43Z",
    "updated_at": "2019-07-18T18:58:18Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 35404746,
    "owner_login": "tamkovich",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/35404746?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 94663945,
    "name": "Pigeon",
    "full_name": "VictorDeon/Pigeon",
    "description": "Pigeon is a framework developed in python that was made to intermediate the use of RabbitMQ services in a quick and easy way, these services of communication between components / services through different types of context of exchange of messages",
    "fork": false,
    "created_at": "2017-06-18T04:01:36Z",
    "updated_at": "2018-07-22T06:04:56Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 14116020,
    "owner_login": "VictorDeon",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/14116020?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "develop",
      "framework",
      "services",
      "rent",
      "python",
      "developed",
      "message",
      "text",
      "type",
      "between",
      "types",
      "messages",
      "component",
      "media",
      "communication",
      "components",
      "exchange"
    ]
  },
  {
    "id": 122796266,
    "name": "webservice",
    "full_name": "banerjeeindranil854/webservice",
    "description": "RestfulWebservice client used as postman",
    "fork": false,
    "created_at": "2018-02-25T01:43:36Z",
    "updated_at": "2018-02-25T01:47:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36805063,
    "owner_login": "banerjeeindranil854",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/36805063?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "service",
      "client"
    ]
  },
  {
    "id": 95335669,
    "name": "rake",
    "full_name": "pigsy/rake",
    "description": "Rake is a full-featured dynamic RPC client for lets you test your RPC services like Paw or Postman for HTTP APIs.",
    "fork": false,
    "created_at": "2017-06-25T03:14:38Z",
    "updated_at": "2017-06-25T03:41:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1964774,
    "owner_login": "pigsy",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1964774?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "service",
      "client",
      "services",
      "full",
      "feature",
      "dynamic",
      "lets",
      "featured"
    ]
  },
  {
    "id": 244116772,
    "name": "aws-postman",
    "full_name": "a-bianchi/aws-postman",
    "description": "Mass mailing using the aws ses service and handling mailing lists.",
    "fork": false,
    "created_at": "2020-03-01T08:56:23Z",
    "updated_at": "2020-03-01T21:45:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18059992,
    "owner_login": "a-bianchi",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/18059992?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "mail",
      "list",
      "handling",
      "lists",
      "mailing"
    ]
  }
]