[
  {
    "id": 111750832,
    "name": "wsdl2postman",
    "full_name": "buianhthang/wsdl2postman",
    "description": "transform wsdl to postman collection",
    "fork": false,
    "created_at": "2017-11-23T01:50:07Z",
    "updated_at": "2018-08-12T14:37:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10458061,
    "owner_login": "buianhthang",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10458061?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "form",
      "transform",
      "wsdl"
    ]
  },
  {
    "id": 226131903,
    "name": "PostPy",
    "full_name": "DoctorWhoFR/PostPy",
    "description": "A python tool to transform postman documentation export into basic markdown for Github Wiki in exemple.",
    "fork": false,
    "created_at": "2019-12-05T15:24:35Z",
    "updated_at": "2020-01-08T19:34:08Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 26010905,
    "owner_login": "DoctorWhoFR",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/26010905?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "form",
      "tool",
      "document",
      "documentation",
      "export",
      "python",
      "markdown",
      "transform"
    ]
  },
  {
    "id": 223085769,
    "name": "url-shortener-api",
    "full_name": "Fantaso/url-shortener-api",
    "description": "Url shortener API with Django and django rest framework. Project consists to allow a user to transform a long web url into a pattern-consistent (encoded) small url easy to share and remember.",
    "fork": false,
    "created_at": "2019-11-21T04:08:56Z",
    "updated_at": "2019-12-05T20:44:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29681368,
    "owner_login": "Fantaso",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29681368?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "rest",
      "user",
      "code",
      "framework",
      "long",
      "small",
      "django",
      "transform",
      "consist",
      "ember",
      "django rest",
      "shortener"
    ]
  },
  {
    "id": 144690425,
    "name": "json-to-postman-form-data",
    "full_name": "randomdize/json-to-postman-form-data",
    "description": "transforming json key-value object to form-data for postman bulk edit.",
    "fork": false,
    "created_at": "2018-08-14T08:20:20Z",
    "updated_at": "2018-08-14T08:21:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8075375,
    "owner_login": "randomdize",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8075375?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "form",
      "json",
      "object",
      "edit",
      "transform",
      "transforming",
      "bulk"
    ]
  },
  {
    "id": 110963819,
    "name": "MyFirstApp",
    "full_name": "smmcgrath/MyFirstApp",
    "description": "Built in Node.js open source server framework. In this project I moved from client-side development (using JavaScript, HTML, and CSS) to building a server-side web application using the Express.js web framework hosted in Node.js runtime environment. The site includes a flatty style landing page including navigatation bar, sign-up forms, staff info etc. It has an uncluttered and minimal UI. The backend APIâ€™s communicated with databases designed using MongoDB, an example of a NoSQL database program using JSON-like objects with schemas. All APIs, including GET, PUT, UPDATE and DELETE were tested using Postman. Great experience using PuTTY open-source terminal emulator, working remotely over SSH network protocol. Securing my API with authentication; hashing passwords using Bcrypt and issuing tokens with JSON Web Token (JWT). New additions help to restrict access and ensure tokens are verified. Previous to this the back-end APIs could be easily accessed via the URL. User comments coudl be retrieved, new ones saved, deleted or updated. Hashing is a means of transforming a string of characters (passwords, in my case) into a different and larger set of characters, thus protecting our sensitive data. Bcrypt is the password hashing function used.",
    "fork": false,
    "created_at": "2017-11-16T11:34:16Z",
    "updated_at": "2018-12-15T19:14:11Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 30355322,
    "owner_login": "smmcgrath",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/30355322?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "form",
      "application",
      "rest",
      "server",
      "client",
      "database",
      "develop",
      "example",
      "sign",
      "environment",
      "auth",
      "tested",
      "framework",
      "help",
      "build",
      "function",
      "site",
      "source",
      "authentication",
      "update",
      "rent",
      "host",
      "delete",
      "development",
      "backend",
      "info",
      "access",
      "working",
      "program",
      "side",
      "web app",
      "open",
      "object",
      "case",
      "token",
      "esse",
      "building",
      "design",
      "were",
      "easily",
      "includes",
      "including",
      "mini",
      "schema",
      "designed",
      "retrieve",
      "objects",
      "style",
      "remote",
      "network",
      "terminal",
      "updated",
      "communicate",
      "comments",
      "hosted",
      "words",
      "tokens",
      "transform",
      "mean",
      "schemas",
      "accessed",
      "moved",
      "restrict",
      "protecting",
      "transforming",
      "minimal",
      "databases"
    ]
  }
]