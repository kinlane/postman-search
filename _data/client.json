[
  {
    "user": "UnexpectedEOF",
    "repo": "paypal-rest-postman-collections",
    "pulled": "User",
    "id": 15839239,
    "name": "paypal-rest-postman-collections",
    "full_name": "UnexpectedEOF/paypal-rest-postman-collections",
    "description": "A couple of PayPal API collection files for the Postman REST client.",
    "fork": false,
    "created_at": "2014-01-12T08:50:36Z",
    "updated_at": "2020-03-05T15:19:51Z",
    "forks": 18,
    "open_issues": 1,
    "watchers": 28,
    "network_count": 18,
    "subscribers_count": 4,
    "owner_id": 494743,
    "owner_login": "UnexpectedEOF",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/494743?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "file",
      "client",
      "files",
      "couple"
    ]
  },
  {
    "id": 156116510,
    "name": "grpcox",
    "full_name": "gusaul/grpcox",
    "description": "Like Postman, but for gRPC: web based GUI client for gRPC Development Testing",
    "fork": false,
    "created_at": "2018-11-04T19:22:25Z",
    "updated_at": "2020-03-23T04:03:34Z",
    "stargazers_count": 130,
    "watchers_count": 130,
    "forks": 21,
    "watchers": 130,
    "score": 1,
    "owner_id": 10978391,
    "owner_login": "gusaul",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10978391?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "based"
    ]
  },
  {
    "user": "matt-ball",
    "repo": "postman-cli",
    "pulled": "User",
    "id": 220328595,
    "name": "postman-cli",
    "full_name": "matt-ball/postman-cli",
    "description": "A client to facilitate local development of scripts for Postman",
    "fork": false,
    "created_at": "2019-11-07T21:03:56Z",
    "updated_at": "2020-03-25T18:26:04Z",
    "forks": 1,
    "open_issues": 3,
    "watchers": 18,
    "network_count": 1,
    "subscribers_count": 3,
    "owner_id": 8490181,
    "owner_login": "matt-ball",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8490181?v=4",
    "owner_type": "User",
    "tags": [
      "script",
      "client",
      "develop",
      "scripts",
      "local",
      "development",
      "facilitate"
    ]
  },
  {
    "user": "dustinrohde",
    "repo": "restcli",
    "pulled": "User",
    "id": 84590051,
    "name": "restcli",
    "full_name": "dustinrohde/restcli",
    "description": "An API client library and CLI written in Python. It's Postman for terminal lovers!",
    "fork": false,
    "created_at": "2017-03-10T18:37:57Z",
    "updated_at": "2020-03-28T20:29:06Z",
    "forks": 2,
    "open_issues": 1,
    "watchers": 9,
    "network_count": 2,
    "subscribers_count": 3,
    "owner_id": 744797,
    "owner_login": "dustinrohde",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/744797?v=4",
    "owner_type": "User",
    "tags": [
      "client",
      "library",
      "written",
      "terminal",
      "lovers"
    ]
  },
  {
    "user": "Azkae",
    "repo": "caribou",
    "pulled": "User",
    "id": 207002327,
    "name": "caribou",
    "full_name": "Azkae/caribou",
    "description": "Create your own REST client GUI.",
    "fork": false,
    "created_at": "2019-09-07T17:26:36Z",
    "updated_at": "2019-12-07T12:18:42Z",
    "forks": 0,
    "open_issues": 1,
    "watchers": 8,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 5298523,
    "owner_login": "Azkae",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5298523?v=4",
    "owner_type": "User",
    "tags": [
      "client"
    ]
  },
  {
    "user": "ptrnov",
    "repo": "yii2-postman4excel",
    "pulled": "User",
    "id": 63981134,
    "name": "yii2-postman4excel",
    "full_name": "ptrnov/yii2-postman4excel",
    "description": null,
    "fork": false,
    "created_at": "2016-07-22T20:24:31Z",
    "updated_at": "2017-12-02T15:11:07Z",
    "forks": 0,
    "open_issues": 2,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 11422990,
    "owner_login": "ptrnov",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11422990?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "Earthport",
    "repo": "rest-api-postman",
    "pulled": "Organization",
    "id": 148662512,
    "name": "rest-api-postman",
    "full_name": "Earthport/rest-api-postman",
    "description": "This repository contains Postman collections to help Earthport clients test their integration into Earthport's APIs",
    "fork": false,
    "created_at": "2018-09-13T15:56:25Z",
    "updated_at": "2019-10-16T12:55:10Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 40466066,
    "owner_login": "Earthport",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/40466066?v=4",
    "owner_type": "Organization",
    "tags": [
      "test",
      "collect",
      "collection",
      "collections",
      "repo",
      "repos",
      "repository",
      "client",
      "contain",
      "help",
      "integration",
      "clients"
    ]
  },
  {
    "user": "arfaram",
    "repo": "ezplatform_rest_api_postman",
    "pulled": "User",
    "id": 178227430,
    "name": "ezplatform_rest_api_postman",
    "full_name": "arfaram/ezplatform_rest_api_postman",
    "description": null,
    "fork": false,
    "created_at": "2019-03-28T15:05:49Z",
    "updated_at": "2020-01-26T10:22:54Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 0,
    "subscribers_count": 2,
    "owner_id": 793247,
    "owner_login": "arfaram",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/793247?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "jmanuelrd",
    "repo": "mr-postman",
    "pulled": "User",
    "id": 49012563,
    "name": "mr-postman",
    "full_name": "jmanuelrd/mr-postman",
    "description": "A wonderful mail client made in Ember",
    "fork": false,
    "created_at": "2016-01-04T17:35:31Z",
    "updated_at": "2016-04-10T21:04:35Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 11820683,
    "owner_login": "jmanuelrd",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11820683?v=4",
    "owner_type": "User",
    "tags": [
      "client",
      "mail",
      "wonderful"
    ]
  },
  {
    "user": "varvelworld",
    "repo": "pomelo-postman",
    "pulled": "User",
    "id": 24719420,
    "name": "pomelo-postman",
    "full_name": "varvelworld/pomelo-postman",
    "description": "A simple client for pomelo",
    "fork": false,
    "created_at": "2014-10-02T13:13:12Z",
    "updated_at": "2017-04-29T13:54:20Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 0,
    "owner_id": 3969341,
    "owner_login": "varvelworld",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3969341?v=4",
    "owner_type": "User",
    "tags": [
      "client",
      "pomelo"
    ]
  },
  {
    "id": 84590051,
    "name": "restcli",
    "full_name": "dustinrohde/restcli",
    "description": "An API client library and CLI written in Python. It's Postman for terminal lovers!",
    "fork": false,
    "created_at": "2017-03-10T18:37:57Z",
    "updated_at": "2019-12-09T08:23:29Z",
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks": 2,
    "watchers": 8,
    "score": 1,
    "owner_id": 744797,
    "owner_login": "dustinrohde",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/744797?v=4",
    "tags": [
      "client",
      "library",
      "written",
      "terminal",
      "lovers"
    ]
  },
  {
    "id": 207002327,
    "name": "caribou",
    "full_name": "Azkae/caribou",
    "description": "Create your own REST client GUI.",
    "fork": false,
    "created_at": "2019-09-07T17:26:36Z",
    "updated_at": "2019-12-07T12:18:42Z",
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks": 0,
    "watchers": 8,
    "score": 1,
    "owner_id": 5298523,
    "owner_login": "Azkae",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5298523?v=4",
    "tags": [
      "client"
    ]
  },
  {
    "id": 63981134,
    "name": "yii2-postman4excel",
    "full_name": "ptrnov/yii2-postman4excel",
    "description": null,
    "fork": false,
    "created_at": "2016-07-22T20:24:31Z",
    "updated_at": "2017-12-02T15:11:07Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 11422990,
    "owner_login": "ptrnov",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11422990?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 148662512,
    "name": "rest-api-postman",
    "full_name": "Earthport/rest-api-postman",
    "description": "This repository contains Postman collections to help Earthport clients test their integration into Earthport's APIs",
    "fork": false,
    "created_at": "2018-09-13T15:56:25Z",
    "updated_at": "2019-10-16T12:55:10Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 0,
    "watchers": 3,
    "score": 1,
    "owner_id": 40466066,
    "owner_login": "Earthport",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/40466066?v=4",
    "tags": [
      "test",
      "collect",
      "collection",
      "collections",
      "repo",
      "repos",
      "repository",
      "client",
      "contain",
      "help",
      "integration",
      "clients"
    ]
  },
  {
    "id": 178227430,
    "name": "ezplatform_rest_api_postman",
    "full_name": "arfaram/ezplatform_rest_api_postman",
    "description": null,
    "fork": false,
    "created_at": "2019-03-28T15:05:49Z",
    "updated_at": "2020-01-26T10:22:54Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 0,
    "watchers": 3,
    "score": 1,
    "owner_id": 793247,
    "owner_login": "arfaram",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/793247?v=4",
    "tags": []
  },
  {
    "id": 49012563,
    "name": "mr-postman",
    "full_name": "jmanuelrd/mr-postman",
    "description": "A wonderful mail client made in Ember",
    "fork": false,
    "created_at": "2016-01-04T17:35:31Z",
    "updated_at": "2016-04-10T21:04:35Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 11820683,
    "owner_login": "jmanuelrd",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11820683?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "mail",
      "wonderful"
    ]
  },
  {
    "id": 24719420,
    "name": "pomelo-postman",
    "full_name": "varvelworld/pomelo-postman",
    "description": "A simple client for pomelo",
    "fork": false,
    "created_at": "2014-10-02T13:13:12Z",
    "updated_at": "2017-04-29T13:54:20Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 3969341,
    "owner_login": "varvelworld",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3969341?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "pomelo"
    ]
  },
  {
    "id": 4742386,
    "name": "postman",
    "full_name": "boffey/postman",
    "description": "A jQuery form validation plugin designed to help programmers validate client side forms",
    "fork": false,
    "created_at": "2012-06-21T17:52:30Z",
    "updated_at": "2016-06-23T10:08:06Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 1876437,
    "owner_login": "boffey",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1876437?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "client",
      "sign",
      "help",
      "plugin",
      "program",
      "side",
      "design",
      "validation",
      "designed",
      "client side"
    ]
  },
  {
    "id": 240788242,
    "name": "nito-rest-client",
    "full_name": "adhenrique/nito-rest-client",
    "description": "A simple web rest client, like Postman",
    "fork": false,
    "created_at": "2020-02-15T21:10:07Z",
    "updated_at": "2020-02-15T21:11:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11527271,
    "owner_login": "adhenrique",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11527271?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "client"
    ]
  },
  {
    "id": 60695136,
    "name": "DouQing-express-json-postman",
    "full_name": "Alloy-Girls/DouQing-express-json-postman",
    "description": null,
    "fork": false,
    "created_at": "2016-06-08T12:10:28Z",
    "updated_at": "2016-06-25T05:33:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 19777946,
    "owner_login": "Alloy-Girls",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/19777946?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 171282980,
    "name": "Pengumpulan-CRUD-nodejs-API-postman-",
    "full_name": "salmasalsabila/Pengumpulan-CRUD-nodejs-API-postman-",
    "description": null,
    "fork": false,
    "created_at": "2019-02-18T12:47:05Z",
    "updated_at": "2019-02-18T13:23:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42332024,
    "owner_login": "salmasalsabila",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/42332024?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 159339215,
    "name": "RESTful-using-nodejs-in-postman",
    "full_name": "AnishaMohandass/RESTful-using-nodejs-in-postman",
    "description": null,
    "fork": false,
    "created_at": "2018-11-27T13:25:12Z",
    "updated_at": "2018-11-27T13:27:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42888835,
    "owner_login": "AnishaMohandass",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/42888835?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 193868090,
    "name": "postman-collection-property-list-benchmark",
    "full_name": "coditva/postman-collection-property-list-benchmark",
    "description": null,
    "fork": false,
    "created_at": "2019-06-26T08:57:52Z",
    "updated_at": "2019-07-15T11:06:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8445768,
    "owner_login": "coditva",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8445768?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 211705852,
    "name": "authentication-in-node-js",
    "full_name": "siddharth151199/authentication-in-node-js",
    "description": "use postman or rest client package in editor",
    "fork": false,
    "created_at": "2019-09-29T18:15:35Z",
    "updated_at": "2019-09-29T18:18:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47297731,
    "owner_login": "siddharth151199",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47297731?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "rest",
      "client",
      "package",
      "edit",
      "editor"
    ]
  },
  {
    "id": 61071496,
    "name": "rest-client-simple-ui",
    "full_name": "Kaylleur/rest-client-simple-ui",
    "description": "simple ui for a rest client like postman",
    "fork": false,
    "created_at": "2016-06-13T21:38:22Z",
    "updated_at": "2016-06-13T21:54:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5547158,
    "owner_login": "Kaylleur",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5547158?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "rest",
      "client"
    ]
  },
  {
    "id": 193153185,
    "name": "dialogflowbot",
    "full_name": "ira-ivakha/dialogflowbot",
    "description": "a small npm client for dialogflow with postman set",
    "fork": false,
    "created_at": "2019-06-21T19:55:22Z",
    "updated_at": "2019-06-21T19:55:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6670614,
    "owner_login": "ira-ivakha",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/6670614?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "client",
      "small",
      "dialogflow"
    ]
  },
  {
    "id": 220328595,
    "name": "postman-cli",
    "full_name": "matt-ball/postman-cli",
    "description": "A client to facilitate local development of scripts for Postman",
    "fork": false,
    "created_at": "2019-11-07T21:03:56Z",
    "updated_at": "2020-03-30T17:26:12Z",
    "stargazers_count": 19,
    "watchers_count": 19,
    "forks": 1,
    "watchers": 19,
    "score": 1,
    "owner_id": 8490181,
    "owner_login": "matt-ball",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8490181?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "client",
      "develop",
      "scripts",
      "local",
      "development",
      "facilitate"
    ]
  },
  {
    "id": 180657237,
    "name": "postman",
    "full_name": "lukas-conka/postman",
    "description": "Meu proprio postman feito em Node, simulando requisições cliente para server. Trabalhando com Content-Type e Status Code",
    "fork": false,
    "created_at": "2019-04-10T20:17:58Z",
    "updated_at": "2019-04-10T20:19:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10176368,
    "owner_login": "lukas-conka",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10176368?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "client",
      "proprio"
    ]
  },
  {
    "id": 171872810,
    "name": "postman",
    "full_name": "lavanyark/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-02-21T13:03:13Z",
    "updated_at": "2019-02-21T13:06:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47856568,
    "owner_login": "lavanyark",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47856568?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 95053234,
    "name": "request-factory",
    "full_name": "request-factory/request-factory",
    "description": "Cross-platform API-client made for mobile (iOS/Android)",
    "fork": false,
    "created_at": "2017-06-21T22:57:02Z",
    "updated_at": "2019-05-05T06:45:19Z",
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks": 1,
    "watchers": 8,
    "score": 1,
    "owner_id": 32758622,
    "owner_login": "request-factory",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/32758622?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "client",
      "mobile",
      "platform"
    ]
  },
  {
    "id": 157767529,
    "name": "postman-youtube",
    "full_name": "coderIlluminatus/postman-youtube",
    "description": "YouTube API Search with client-side sorting - Assignment for Postman 6 months internship",
    "fork": false,
    "created_at": "2018-11-15T20:18:18Z",
    "updated_at": "2018-11-16T07:11:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 16795028,
    "owner_login": "coderIlluminatus",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16795028?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "sign",
      "side",
      "intern",
      "sort",
      "internship"
    ]
  },
  {
    "id": 164642639,
    "name": "postman-libs",
    "full_name": "agilium/postman-libs",
    "description": null,
    "fork": false,
    "created_at": "2019-01-08T12:18:58Z",
    "updated_at": "2019-01-30T15:54:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 34066713,
    "owner_login": "agilium",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/34066713?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 28003204,
    "name": "postman-web",
    "full_name": "nguyentruongtho/postman-web",
    "description": "Standalone version of Postman Rest client which can run without chrome.",
    "fork": false,
    "created_at": "2014-12-14T18:16:31Z",
    "updated_at": "2016-04-18T09:01:26Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 1457567,
    "owner_login": "nguyentruongtho",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1457567?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "version",
      "chrome"
    ]
  },
  {
    "id": 229637797,
    "name": "tinytina-js",
    "full_name": "VonHeikemen/tinytina-js",
    "description": "Command-line http client. Is like the mix of curl and postman that nobody asked for.",
    "fork": false,
    "created_at": "2019-12-22T22:12:38Z",
    "updated_at": "2020-02-10T19:54:09Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 20980671,
    "owner_login": "VonHeikemen",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/20980671?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "client",
      "http",
      "line",
      "curl",
      "nobody"
    ]
  },
  {
    "id": 160471837,
    "name": "Postman-SqlClient",
    "full_name": "avinash24p/Postman-SqlClient",
    "description": "Node App to integrate Postman like app and sql client in a single page app",
    "fork": false,
    "created_at": "2018-12-05T06:31:11Z",
    "updated_at": "2018-12-05T06:38:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3741384,
    "owner_login": "avinash24p",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/3741384?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "integrate",
      "single"
    ]
  },
  {
    "id": 176674534,
    "name": "cgi-trello-postman",
    "full_name": "namrathasanjee/cgi-trello-postman",
    "description": null,
    "fork": false,
    "created_at": "2019-03-20T07:04:07Z",
    "updated_at": "2019-03-20T08:47:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48747995,
    "owner_login": "namrathasanjee",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/48747995?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 176529097,
    "name": "postman_same-response-as_keycloak",
    "full_name": "raketensilo/postman_same-response-as_keycloak",
    "description": "Using REST API client Postman to assert actual against expected Json responses",
    "fork": false,
    "created_at": "2019-03-19T14:24:52Z",
    "updated_at": "2019-04-02T13:45:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 25948645,
    "owner_login": "raketensilo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/25948645?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "response",
      "responses",
      "assert",
      "expect"
    ]
  },
  {
    "id": 179013151,
    "name": "postman-error-in-registering-usser",
    "full_name": "wadakarnitin/postman-error-in-registering-usser",
    "description": null,
    "fork": false,
    "created_at": "2019-04-02T06:28:33Z",
    "updated_at": "2019-04-02T06:30:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47222459,
    "owner_login": "wadakarnitin",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47222459?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 234305631,
    "name": "L42Hw_restPostman",
    "full_name": "johnmogi/L42Hw_restPostman",
    "description": null,
    "fork": false,
    "created_at": "2020-01-16T11:30:11Z",
    "updated_at": "2020-01-17T12:37:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3692575,
    "owner_login": "johnmogi",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3692575?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 94092482,
    "name": "PostmanCleaner",
    "full_name": "ivansams/PostmanCleaner",
    "description": "Cmd line app to aid source control of Postman (API client) collections.",
    "fork": false,
    "created_at": "2017-06-12T12:14:54Z",
    "updated_at": "2017-06-12T13:34:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11498645,
    "owner_login": "ivansams",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/11498645?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "client",
      "line",
      "source",
      "control"
    ]
  },
  {
    "id": 216602709,
    "name": "tsr-postman-tests",
    "full_name": "margiani/tsr-postman-tests",
    "description": "Postman test collection for tsrpay.com client API testing",
    "fork": false,
    "created_at": "2019-10-21T15:30:27Z",
    "updated_at": "2019-10-21T15:36:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15003884,
    "owner_login": "margiani",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/15003884?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "testing",
      "client"
    ]
  },
  {
    "id": 123305512,
    "name": "Postman-Collection-for-VMware-Fusion-API-1.0",
    "full_name": "vmwarecode/Postman-Collection-for-VMware-Fusion-API-1.0",
    "description": null,
    "fork": false,
    "created_at": "2018-02-28T15:40:14Z",
    "updated_at": "2018-02-28T15:40:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12194195,
    "owner_login": "vmwarecode",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/12194195?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 249271688,
    "name": "pulse-ox-data-collection-web-service",
    "full_name": "CoVital-Project/pulse-ox-data-collection-web-service",
    "description": "HTTPS API for receiving pulse oximetry from mobile clients",
    "fork": false,
    "created_at": "2020-03-22T21:01:24Z",
    "updated_at": "2020-03-30T02:26:55Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 1,
    "watchers": 2,
    "score": 1,
    "owner_id": 62354355,
    "owner_login": "CoVital-Project",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/62354355?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "mobile",
      "clients",
      "receiving"
    ]
  },
  {
    "id": 188455910,
    "name": "RestAPI-CRUD",
    "full_name": "abircse/RestAPI-CRUD",
    "description": "Rest API CRUD operation using php (server: xampp, client: postman)",
    "fork": false,
    "created_at": "2019-05-24T16:37:15Z",
    "updated_at": "2019-05-24T16:39:51Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 22006238,
    "owner_login": "abircse",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22006238?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "client",
      "operation"
    ]
  },
  {
    "id": 64883866,
    "name": "restful-web-service",
    "full_name": "hamishngcoder/restful-web-service",
    "description": "A project to Create Rest Api using postman rest client",
    "fork": false,
    "created_at": "2016-08-03T22:30:26Z",
    "updated_at": "2016-08-03T22:30:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17959100,
    "owner_login": "hamishngcoder",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17959100?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "rest",
      "client"
    ]
  },
  {
    "id": 91504946,
    "name": "vcd-postman",
    "full_name": "Boskey/vcd-postman",
    "description": "Repository of routing vCD REST API's that can be run using Postman client",
    "fork": false,
    "created_at": "2017-05-16T21:11:51Z",
    "updated_at": "2017-05-16T21:11:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1569878,
    "owner_login": "Boskey",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1569878?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "routing"
    ]
  },
  {
    "id": 178538644,
    "name": "RestFul-API-Testing-server",
    "full_name": "admindebu/RestFul-API-Testing-server",
    "description": "This is the Server of testing restful web service. and your tool - postman / rest client act as an client.",
    "fork": false,
    "created_at": "2019-03-30T09:31:42Z",
    "updated_at": "2019-06-08T19:00:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46689581,
    "owner_login": "admindebu",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/46689581?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "testing",
      "rest",
      "service",
      "tool",
      "client",
      "restful"
    ]
  },
  {
    "id": 121759902,
    "name": "REST_API_CRUD_GEOTargeting",
    "full_name": "deechris27/REST_API_CRUD_GEOTargeting",
    "description": "Node JS, Mongo DB - GeoJson, Express, Postman rest client. A complete rest crud project",
    "fork": false,
    "created_at": "2018-02-16T14:28:41Z",
    "updated_at": "2018-02-16T14:57:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11952481,
    "owner_login": "deechris27",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11952481?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "client",
      "complete",
      "crud"
    ]
  },
  {
    "id": 206338782,
    "name": "Salesforce-REST-API",
    "full_name": "amiller-smg3/Salesforce-REST-API",
    "description": "Simple REST API example of both client (Postman) and server side (Salesforce)",
    "fork": false,
    "created_at": "2019-09-04T14:28:18Z",
    "updated_at": "2020-01-03T15:49:57Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 54900550,
    "owner_login": "amiller-smg3",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/54900550?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "client",
      "example",
      "side",
      "both"
    ]
  },
  {
    "id": 166286435,
    "name": "rest-api-manager",
    "full_name": "rhabhishek/rest-api-manager",
    "description": "A client application to manage and test APIs. (One similar to Postman, RESTClient)",
    "fork": false,
    "created_at": "2019-01-17T19:45:17Z",
    "updated_at": "2019-01-17T19:45:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22307890,
    "owner_login": "rhabhishek",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22307890?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "application",
      "client",
      "manage"
    ]
  },
  {
    "id": 191523730,
    "name": "REST-CRUD",
    "full_name": "SowmyaBommu07/REST-CRUD",
    "description": "REST API - CRUD operations using PHP and MYSQL for the database and Postman as the REST client",
    "fork": false,
    "created_at": "2019-06-12T07:49:16Z",
    "updated_at": "2019-08-03T10:20:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 50733030,
    "owner_login": "SowmyaBommu07",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/50733030?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "client",
      "database",
      "operation",
      "operations"
    ]
  },
  {
    "id": 225678342,
    "name": "data-attribute-recommendation-postman-tutorial-sample",
    "full_name": "SAP-samples/data-attribute-recommendation-postman-tutorial-sample",
    "description": "Sample code and dataset example for anyone who wants to try out the data attribute recommendation machine learning service using a REST client.",
    "fork": false,
    "created_at": "2019-12-03T17:29:46Z",
    "updated_at": "2020-03-25T09:20:18Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 50221243,
    "owner_login": "SAP-samples",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/50221243?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "service",
      "client",
      "code",
      "example",
      "learn",
      "learning",
      "machine",
      "dataset"
    ]
  },
  {
    "id": 237320048,
    "name": "resty",
    "full_name": "beekman/resty",
    "description": "RESTy is an API Server client appliction. It’s a lot like Postman or httpie, but it runs in the browser.",
    "fork": false,
    "created_at": "2020-01-30T22:40:59Z",
    "updated_at": "2020-01-30T23:04:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 563233,
    "owner_login": "beekman",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/563233?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "http",
      "browser",
      "runs"
    ]
  },
  {
    "id": 77641712,
    "name": "basic-REST.API-with-MeteorJS",
    "full_name": "GAWKmdk/basic-REST.API-with-MeteorJS",
    "description": "Instead of using DDP client configurations here is a basic GET, POST and PUT Request sequence. Use with Postman",
    "fork": false,
    "created_at": "2016-12-29T21:45:56Z",
    "updated_at": "2017-06-28T17:12:16Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 23016977,
    "owner_login": "GAWKmdk",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/23016977?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "config",
      "configuration",
      "sequence",
      "configurations"
    ]
  },
  {
    "id": 161655015,
    "name": "rest-api-setup",
    "full_name": "bwainaina380/rest-api-setup",
    "description": "This is practice for setting up a REST API with routes and a server and testing that everything is working using Postman client",
    "fork": false,
    "created_at": "2018-12-13T15:03:27Z",
    "updated_at": "2018-12-17T12:57:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38376660,
    "owner_login": "bwainaina380",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38376660?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "server",
      "client",
      "route",
      "routes",
      "very",
      "working",
      "ever",
      "practice",
      "setting",
      "every"
    ]
  },
  {
    "id": 21752869,
    "name": "API-mongoDB-nodeJS",
    "full_name": "feernando-cortes/API-mongoDB-nodeJS",
    "description": "API desarrollada con mongoDB y node.js para cliente rest POSTMAN de un CRUD de trovadores.",
    "fork": false,
    "created_at": "2014-07-11T22:06:49Z",
    "updated_at": "2014-07-11T22:26:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8049029,
    "owner_login": "feernando-cortes",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/8049029?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "client",
      "node",
      "mongo",
      "desarrollada"
    ]
  },
  {
    "id": 31053659,
    "name": "restful-db-interface",
    "full_name": "skyupadhya/restful-db-interface",
    "description": "RESTFUL INVENTORY MANAGEMENT SYSTEM: Rest based inventory management system implemented using Bottle (python based) web framework. System testing was done using Postman REST client.",
    "fork": false,
    "created_at": "2015-02-20T06:27:44Z",
    "updated_at": "2016-10-02T00:42:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 11071792,
    "owner_login": "skyupadhya",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11071792?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "client",
      "based",
      "implement",
      "framework",
      "manage",
      "python",
      "system",
      "management",
      "implemented",
      "done",
      "inventory"
    ]
  },
  {
    "id": 203823567,
    "name": "Postgen",
    "full_name": "Phara0h/Postgen",
    "description": "A simple node script to convert postman collections to clean REST client libs for node.",
    "fork": false,
    "created_at": "2019-08-22T15:32:28Z",
    "updated_at": "2019-11-07T19:16:05Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 1054802,
    "owner_login": "Phara0h",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1054802?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "postman collection",
      "script",
      "client",
      "node",
      "convert",
      "postman collections",
      "clean"
    ]
  },
  {
    "id": 116728907,
    "name": "Level3RESTAPI",
    "full_name": "mohiuddin06617/Level3RESTAPI",
    "description": "This is a Level 3 ASP .Net Web API. I have use Authorization and Authentication to access the action. You can test with api client postman.  ",
    "fork": false,
    "created_at": "2018-01-08T21:14:43Z",
    "updated_at": "2018-01-08T21:50:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20150400,
    "owner_login": "mohiuddin06617",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20150400?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "client",
      "access",
      "action"
    ]
  },
  {
    "id": 115123665,
    "name": "crudApp",
    "full_name": "laffingDragons/crudApp",
    "description": "Using node and express and various modules, using POSTMAN rest  client manuplating Json data",
    "fork": false,
    "created_at": "2017-12-22T14:42:13Z",
    "updated_at": "2017-12-22T14:43:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32427753,
    "owner_login": "laffingDragons",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/32427753?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "rest",
      "client",
      "node",
      "express",
      " express",
      "module",
      "various",
      "modules"
    ]
  },
  {
    "id": 199857335,
    "name": "Rest-APIs",
    "full_name": "ShankeyGupta/Rest-APIs",
    "description": "This is my IBM summer internship project. I used Spring Boot & Jpa to create APIs that show the scenario of college - student Relation. I used Postman as client to test APIs.",
    "fork": false,
    "created_at": "2019-07-31T13:01:52Z",
    "updated_at": "2019-07-31T13:47:20Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 43706665,
    "owner_login": "ShankeyGupta",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/43706665?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "client",
      "intern",
      "student",
      "scenario",
      "college",
      "internship",
      "summer"
    ]
  },
  {
    "id": 95427428,
    "name": "REST-API-Web-Application",
    "full_name": "meghnadsaha/REST-API-Web-Application",
    "description": "A simple CRUD application     Framework - Jersey Jax-rs for creating RESTful APIs in Java    Editor - Eclipse    Database - mysql     Rest API client - Postman(for making REST API calls) (6) Hibernate to interact with database.",
    "fork": false,
    "created_at": "2017-06-26T08:52:49Z",
    "updated_at": "2017-06-26T08:54:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18301749,
    "owner_login": "meghnadsaha",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/18301749?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "call",
      "client",
      "database",
      "calls",
      "interact",
      "creating",
      "mysql",
      "making",
      "mysql "
    ]
  },
  {
    "id": 73001041,
    "name": "RetailManagerUsingRESTful",
    "full_name": "santoshsingh1056/RetailManagerUsingRESTful",
    "description": "A Retail Manager (using a RESTful client e.g. Chrome's Postman), can post a JSON payload to a shops endpoint containing details of the shop they want to add.",
    "fork": false,
    "created_at": "2016-11-06T15:49:47Z",
    "updated_at": "2016-11-06T16:01:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23295659,
    "owner_login": "santoshsingh1056",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23295659?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "contain",
      "endpoint",
      "load",
      "shop",
      "containing",
      "details"
    ]
  },
  {
    "id": 65252456,
    "name": "simpleRestAPI",
    "full_name": "zenithtekla/simpleRestAPI",
    "description": "RestAPI made simple, tested with Advanced REST client chromeApp, offered by chromerestclient.com, this App is much simpler, fast and light to perform testing than clumsy, complex Postman UI",
    "fork": false,
    "created_at": "2016-08-09T01:32:23Z",
    "updated_at": "2016-08-12T16:00:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11691367,
    "owner_login": "zenithtekla",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11691367?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "form",
      "rest",
      "client",
      "tested",
      "perform",
      "light",
      "chrome",
      "complex",
      "offered",
      "restclient",
      "much"
    ]
  },
  {
    "id": 185145000,
    "name": "Web-Services",
    "full_name": "geekyanurag/Web-Services",
    "description": "Rest api creation for 3 sets of api's using php and mysql and used postman as client.",
    "fork": false,
    "created_at": "2019-05-06T07:25:16Z",
    "updated_at": "2019-09-04T11:37:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34518493,
    "owner_login": "geekyanurag",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/34518493?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "client",
      "mysql",
      "creation",
      "mysql ",
      "sets"
    ]
  },
  {
    "id": 161524341,
    "name": "php_oop_rest_api",
    "full_name": "brankozecevic/php_oop_rest_api",
    "description": "This is a REST API using PHP and OOP principles. There is also MySQL database that you can use to import on your server (myblog.sql). This REST API is based on CRUD functionality (blog posts and blog categories). For testing use Postman app environment as a REST client.",
    "fork": false,
    "created_at": "2018-12-12T17:45:29Z",
    "updated_at": "2018-12-12T17:53:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45066671,
    "owner_login": "brankozecevic",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45066671?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "server",
      "client",
      "database",
      "based",
      "environment",
      "function",
      "import",
      "functional",
      "functionality",
      "blog",
      "posts",
      "principles"
    ]
  },
  {
    "id": 45817610,
    "name": "Messenger-App",
    "full_name": "venkatgunneri/Messenger-App",
    "description": "Messaging App, Creating Profiles, can share messages with sub resources as comments and likes. Code written in using REST API annotations and getting response in JSON. Postman API as a client. worked on resource URI's and collection URI's.  ",
    "fork": false,
    "created_at": "2015-11-09T05:43:56Z",
    "updated_at": "2015-11-09T05:43:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15709493,
    "owner_login": "venkatgunneri",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/15709493?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "file",
      "client",
      "files",
      "source",
      "response",
      "written",
      "resource",
      "message",
      "resources",
      "getting",
      "messages",
      "comments",
      "worked",
      "notation"
    ]
  },
  {
    "id": 202314760,
    "name": "SpringBootJacksonProjectBinding",
    "full_name": "BlitZC4/SpringBootJacksonProjectBinding",
    "description": "A SpringBoot Demo app using Jackson project in the background to print out the Json files that are embedded in the project on the clients screen when it sneds GET request through a browser or a REST client like postman.",
    "fork": false,
    "created_at": "2019-08-14T09:06:08Z",
    "updated_at": "2019-08-14T09:06:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49183125,
    "owner_login": "BlitZC4",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/49183125?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "file",
      "client",
      "files",
      "browser",
      "print",
      "clients",
      "embedded",
      "background"
    ]
  },
  {
    "id": 125879013,
    "name": "Simple-Auth-system",
    "full_name": "isildur93/Simple-Auth-system",
    "description": "Simple express app that allows you to login, signup, track session permanently and display values received via POST method. These values could be sent by ESP8266 or simply by Postman (or others REST api clients )",
    "fork": false,
    "created_at": "2018-03-19T15:23:33Z",
    "updated_at": "2018-03-22T13:16:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32146128,
    "owner_login": "isildur93",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32146128?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "express",
      "sign",
      " express",
      "method",
      "play",
      "allows",
      "login",
      "track",
      "clients",
      "display",
      "signup"
    ]
  },
  {
    "id": 194136086,
    "name": "API",
    "full_name": "VignaanVardhan/API",
    "description": "API to get the files and folders in a folder in a folder and get a file by ID,Ability to access this API via REST client like POSTMan ",
    "fork": false,
    "created_at": "2019-06-27T17:22:14Z",
    "updated_at": "2019-06-27T17:23:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38974958,
    "owner_login": "VignaanVardhan",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/38974958?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "client",
      "files",
      "access",
      "folder",
      "folders"
    ]
  },
  {
    "id": 91374388,
    "name": "JWT-Authentication",
    "full_name": "kpraneeth3456/JWT-Authentication",
    "description": "Project Title: JWT Authentication  Description: This project is a basic Authorization and Authentication which exchanges JSON web tokens between the client and the server for more security.  Execution: -Clone or download the repo from the GitHub link -npm install (to download the dependencies) -node index.js (To get the application running)  Working: -User has to enter his email and password to register his account.(Use any third-party rest-client like Postman on port 3000) -If the email already exists in the database it sends an error message and if the email does not exist it saves to the database. -If the user is signed up then he can go ahead and Sign-in with same username and password. -If the credentials are matched then a JSON web token will be sent to the client in the header. -If the username and password do not match then it sends back an error message.",
    "fork": false,
    "created_at": "2017-05-15T19:03:55Z",
    "updated_at": "2018-12-28T08:47:41Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 26414547,
    "owner_login": "kpraneeth3456",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26414547?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "data",
      "application",
      "rest",
      "script",
      "server",
      "client",
      "node",
      "database",
      "user",
      "sign",
      "mail",
      "send",
      "load",
      "read",
      "running",
      "more",
      "email",
      "name",
      "token",
      "message",
      "to do",
      "install",
      "between",
      "link",
      "header",
      "account",
      "download",
      "enter",
      "ready",
      "party",
      "register",
      "sends",
      "third",
      "dependencies",
      "tokens",
      "error",
      "match",
      "security",
      "exchange",
      "matched"
    ]
  },
  {
    "id": 177147352,
    "name": "fcm-oauth-generator",
    "full_name": "FP-GmbH/fcm-oauth-generator",
    "description": "FCM oAuth generator provides you with with a bearer token to sign on in postman or other client tools.",
    "fork": false,
    "created_at": "2019-03-22T13:43:05Z",
    "updated_at": "2019-03-22T13:55:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40230542,
    "owner_login": "FP-GmbH",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/40230542?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "tool",
      "client",
      "sign",
      "tools",
      "provide",
      "generator",
      "token",
      "provides",
      "bearer"
    ]
  },
  {
    "id": 193157969,
    "name": "jsonwebtoken",
    "full_name": "gloryer/jsonwebtoken",
    "description": "A demo back end server exposes user registration endpoint, user authentication endpoint, token endpoint and resource endpoint. The resource endpoint is protected by the JWT token. Only the client who possesses the valid token can access the resource. To get a token from the server, the client must authenticates itself to the server. To request the resource in the server, the client issue an http GET request to the resource endpoint, the server will verify the recieved jwt token. Once the token is valid, the server will send back the user information which indicated in the jwt token.  Front-end has not been implemented so far. The back-end is tested using Postman.",
    "fork": false,
    "created_at": "2019-06-21T20:43:09Z",
    "updated_at": "2019-06-21T20:52:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18592154,
    "owner_login": "gloryer",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/18592154?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "form",
      "server",
      "client",
      "http",
      "user",
      "implement",
      "format",
      "auth",
      "endpoint",
      "tested",
      "demo",
      "send",
      "source",
      "authentication",
      "info",
      "access",
      "infor",
      "resource",
      "information",
      "token",
      "esse",
      "implemented",
      "expose",
      "been",
      "authenticate",
      "exposes",
      "back end",
      "verify",
      "issue",
      "registration",
      "recieve"
    ]
  },
  {
    "id": 95364561,
    "name": "RetailManager",
    "full_name": "sangramkonde/RetailManager",
    "description": "A Retail Manager (using a RESTful client e.g Chrome's Postman),  wanting to keep track of their shops, does a RESTful POST to /shops with a JSON of shopName, shopAddress.number and shopAddress.postCode  to the Shops API (microservice)",
    "fork": false,
    "created_at": "2017-06-25T14:24:43Z",
    "updated_at": "2017-06-27T03:23:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29208425,
    "owner_login": "sangramkonde",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29208425?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "client",
      "shop",
      "micro",
      "track",
      "microservice",
      "keep"
    ]
  },
  {
    "id": 110963819,
    "name": "MyFirstApp",
    "full_name": "smmcgrath/MyFirstApp",
    "description": "Built in Node.js open source server framework. In this project I moved from client-side development (using JavaScript, HTML, and CSS) to building a server-side web application using the Express.js web framework hosted in Node.js runtime environment. The site includes a flatty style landing page including navigatation bar, sign-up forms, staff info etc. It has an uncluttered and minimal UI. The backend API’s communicated with databases designed using MongoDB, an example of a NoSQL database program using JSON-like objects with schemas. All APIs, including GET, PUT, UPDATE and DELETE were tested using Postman. Great experience using PuTTY open-source terminal emulator, working remotely over SSH network protocol. Securing my API with authentication; hashing passwords using Bcrypt and issuing tokens with JSON Web Token (JWT). New additions help to restrict access and ensure tokens are verified. Previous to this the back-end APIs could be easily accessed via the URL. User comments coudl be retrieved, new ones saved, deleted or updated. Hashing is a means of transforming a string of characters (passwords, in my case) into a different and larger set of characters, thus protecting our sensitive data. Bcrypt is the password hashing function used.",
    "fork": false,
    "created_at": "2017-11-16T11:34:16Z",
    "updated_at": "2018-12-15T19:14:11Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 30355322,
    "owner_login": "smmcgrath",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/30355322?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "form",
      "application",
      "rest",
      "server",
      "client",
      "database",
      "develop",
      "example",
      "sign",
      "environment",
      "auth",
      "tested",
      "framework",
      "help",
      "build",
      "function",
      "site",
      "source",
      "authentication",
      "update",
      "rent",
      "host",
      "delete",
      "development",
      "backend",
      "info",
      "access",
      "working",
      "program",
      "side",
      "web app",
      "open",
      "object",
      "case",
      "token",
      "esse",
      "building",
      "design",
      "were",
      "easily",
      "includes",
      "including",
      "mini",
      "schema",
      "designed",
      "retrieve",
      "objects",
      "style",
      "remote",
      "network",
      "terminal",
      "updated",
      "communicate",
      "comments",
      "hosted",
      "words",
      "tokens",
      "transform",
      "mean",
      "schemas",
      "accessed",
      "moved",
      "restrict",
      "protecting",
      "transforming",
      "minimal",
      "databases"
    ]
  },
  {
    "id": 238798167,
    "name": "Project2-DatabaseWebService",
    "full_name": "leo123nunes/Project2-DatabaseWebService",
    "description": "Olá, o projeto a seguir é um banco de dados MySQL utilizando Spring Boot em Java com o pgAdmin e Postman, para registrar clientes, pedidos e departamentos de produtos de uma empresa. O projeto possui uma pasta com as imagens do banco de dados finalizado em execução.",
    "fork": false,
    "created_at": "2020-02-06T22:30:38Z",
    "updated_at": "2020-02-20T15:42:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 53942734,
    "owner_login": "leo123nunes",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/53942734?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "util",
      "image",
      "utilizando",
      "projeto",
      "dados",
      "projet",
      "banco",
      "final",
      "empresa",
      "seguir"
    ]
  },
  {
    "id": 87771466,
    "name": "Mean-Hotel",
    "full_name": "regeanish/Mean-Hotel",
    "description": "Created a Hotel API where user can add, delete, update hotel name and reviews using NodeJS(Express) and MongoDB. Used RESTful API HTTP client POSTMAN for testing.  Additionally,  building UI for displaying information coming from the server & database about the hotel using AngularJS",
    "fork": false,
    "created_at": "2017-04-10T05:50:10Z",
    "updated_at": "2017-08-21T03:13:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17118506,
    "owner_login": "regeanish",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17118506?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "form",
      "server",
      "client",
      "database",
      "user",
      "format",
      "build",
      "update",
      "view",
      "delete",
      "info",
      "play",
      "name",
      "infor",
      "information",
      "building",
      "review",
      "display",
      "playing",
      "reviews",
      "hotel"
    ]
  },
  {
    "id": 106381305,
    "name": "postman-cli",
    "full_name": "qbicsoftware/postman-cli",
    "description": "A client software for dataset request and download from openBIS",
    "fork": false,
    "created_at": "2017-10-10T07:10:43Z",
    "updated_at": "2019-10-07T08:26:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8245829,
    "owner_login": "qbicsoftware",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8245829?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "client",
      "load",
      "open",
      "download",
      "software",
      "dataset"
    ]
  },
  {
    "id": 131155302,
    "name": "red5pro-api-client",
    "full_name": "red5pro/red5pro-api-client",
    "description": "A set of Postman clientside API calls grouped by functionality for administering Red5 Pro",
    "fork": false,
    "created_at": "2018-04-26T12:52:37Z",
    "updated_at": "2018-07-26T04:16:00Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 8452796,
    "owner_login": "red5pro",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/8452796?v=4",
    "pulled": 1,
    "tags": [
      "call",
      "client",
      "function",
      "calls",
      "functional",
      "side",
      "mini",
      "functionality",
      "clients",
      "group",
      "admin",
      "clientside"
    ]
  },
  {
    "id": 95715939,
    "name": "test-client",
    "full_name": "Trozdol/test-client",
    "description": "Bare bones client I use just to test APIs as I need. (yes I know about Postman and Curl)",
    "fork": false,
    "created_at": "2017-06-28T22:11:41Z",
    "updated_at": "2017-06-28T22:16:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 202224,
    "owner_login": "Trozdol",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/202224?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "client",
      "need",
      "bones"
    ]
  },
  {
    "id": 174249180,
    "name": "newman-reporter-diff",
    "full_name": "indeedeng-alpha/newman-reporter-diff",
    "description": "Showcase for comparing http requests using newman, the postman cli client.",
    "fork": false,
    "created_at": "2019-03-07T01:33:49Z",
    "updated_at": "2019-03-07T01:36:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31606812,
    "owner_login": "indeedeng-alpha",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/31606812?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "client",
      "requests",
      "http",
      "newman",
      "case",
      "comparing"
    ]
  },
  {
    "id": 212745338,
    "name": "FinalJavaTask",
    "full_name": "Jespert88/FinalJavaTask",
    "description": "Final java task where i have to build a RESTful Api with Java + spring + hibernate + mysql/postgresql + client(HTML / Postman))",
    "fork": false,
    "created_at": "2019-10-04T05:53:39Z",
    "updated_at": "2019-10-04T12:52:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22000801,
    "owner_login": "Jespert88",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22000801?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "build",
      "java",
      "spring",
      "task",
      "mysql",
      "postgres",
      "hibernate",
      "postgresql"
    ]
  },
  {
    "id": 159976766,
    "name": "NodeJS-MLab",
    "full_name": "Fazaarycode/NodeJS-MLab",
    "description": "Simple dataPull Push request app used along with Mlab + Postman . Use your own API Key for Mongodb client (db.js)",
    "fork": false,
    "created_at": "2018-12-01T18:51:21Z",
    "updated_at": "2018-12-01T18:53:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20859772,
    "owner_login": "Fazaarycode",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20859772?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "client",
      "long",
      "along"
    ]
  },
  {
    "id": 193598340,
    "name": "Task-Management-App_Nodejs",
    "full_name": "kewalpasad/Task-Management-App_Nodejs",
    "description": "Use Postman as a client to send request to the Node.js backend.",
    "fork": false,
    "created_at": "2019-06-24T23:54:14Z",
    "updated_at": "2019-08-24T21:59:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32657335,
    "owner_login": "kewalpasad",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/32657335?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "client",
      "send",
      "backend"
    ]
  },
  {
    "id": 204020403,
    "name": "gostman",
    "full_name": "ssebs/gostman",
    "description": "golang POSTman (http client)",
    "fork": false,
    "created_at": "2019-08-23T15:02:30Z",
    "updated_at": "2019-08-28T14:53:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8152823,
    "owner_login": "ssebs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8152823?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "http",
      "lang",
      "golang"
    ]
  },
  {
    "id": 112044930,
    "name": "java-http-postman",
    "full_name": "x0st/java-http-postman",
    "description": "One more http client in Java.",
    "fork": false,
    "created_at": "2017-11-26T00:40:17Z",
    "updated_at": "2019-02-23T17:49:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17602927,
    "owner_login": "x0st",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17602927?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "http",
      "more"
    ]
  },
  {
    "id": 73948533,
    "name": "javascript-at",
    "full_name": "theuggla/javascript-at",
    "description": "ranging from small programs to full applications testing out javascript concepts, both as standalone applications, servers and client applications",
    "fork": false,
    "created_at": "2016-11-16T18:24:52Z",
    "updated_at": "2018-12-12T14:01:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20565872,
    "owner_login": "theuggla",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20565872?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "application",
      "script",
      "server",
      "client",
      "full",
      "java",
      "program",
      "small",
      "applications",
      "concept",
      "javascript",
      "both",
      "servers",
      "concepts",
      "standalone",
      "ranging"
    ]
  },
  {
    "id": 184295216,
    "name": "Angular-7-CRUD",
    "full_name": "alexanderkounadis/Angular-7-CRUD",
    "description": "Angular 7 CRUD with Asp.Net Core Web API  CRUD Operations - Insert, update, delete and retrieve are implemented in Asp.Net Core Web API with Angular 7. First of all we'll build a Web API project in Asp.Net Core with required methods at server side using Entity Framework Core and SQL Server DB. Then Angular 7 Project consumes those methods from client side.  Points discussed :  - How to create Web API in Asp.Net Core with CRUD web methods.  - Enable CORS in Asp.Net Core.  - Angular Form Design with Validation.  Tools Used : VS Code, Visual Studio, SSMS, Postman.",
    "fork": false,
    "created_at": "2019-04-30T16:22:33Z",
    "updated_at": "2019-04-30T16:24:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 4921755,
    "owner_login": "alexanderkounadis",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/4921755?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "server",
      "client",
      "implement",
      "sign",
      "build",
      "update",
      "delete",
      "method",
      "side",
      "methods",
      "implemented",
      "consume",
      "require",
      "those",
      "retrieve",
      "required",
      "client side",
      "consumes"
    ]
  },
  {
    "id": 184295660,
    "name": "Angular-7-CRUD-WebAPI",
    "full_name": "alexanderkounadis/Angular-7-CRUD-WebAPI",
    "description": "Angular 7 CRUD with Asp.Net Core Web API  CRUD Operations - Insert, update, delete and retrieve are implemented in Asp.Net Core Web API with Angular 7. First of all we'll build a Web API project in Asp.Net Core with required methods at server side using Entity Framework Core and SQL Server DB. Then Angular 7 Project consumes those methods from client side.  Points discussed :  - How to create Web API in Asp.Net Core with CRUD web methods.  - Enable CORS in Asp.Net Core.  - Angular Form Design with Validation.  Tools Used : VS Code, Visual Studio, SSMS, Postman.",
    "fork": false,
    "created_at": "2019-04-30T16:25:54Z",
    "updated_at": "2019-04-30T16:27:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4921755,
    "owner_login": "alexanderkounadis",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/4921755?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "server",
      "client",
      "implement",
      "sign",
      "build",
      "update",
      "delete",
      "method",
      "side",
      "methods",
      "implemented",
      "consume",
      "require",
      "those",
      "retrieve",
      "required",
      "client side",
      "consumes"
    ]
  },
  {
    "id": 157969708,
    "name": "postman",
    "full_name": "vrytov/postman",
    "description": "Mail client.",
    "fork": false,
    "created_at": "2018-11-17T09:28:32Z",
    "updated_at": "2018-12-10T16:31:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45106449,
    "owner_login": "vrytov",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/45106449?v=4",
    "pulled": 1,
    "tags": [
      "client"
    ]
  },
  {
    "id": 154969818,
    "name": "postmanapi-python",
    "full_name": "ruipoliveira/postmanapi-python",
    "description": "Postman Python client library ",
    "fork": false,
    "created_at": "2018-10-27T13:51:55Z",
    "updated_at": "2018-12-21T10:39:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10942886,
    "owner_login": "ruipoliveira",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10942886?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "library"
    ]
  },
  {
    "id": 134267355,
    "name": "assemblyai-postman",
    "full_name": "AssemblyAI/assemblyai-postman",
    "description": "Postman client workspace",
    "fork": false,
    "created_at": "2018-05-21T12:39:21Z",
    "updated_at": "2018-05-28T20:17:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24515738,
    "owner_login": "AssemblyAI",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/24515738?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "workspace"
    ]
  },
  {
    "id": 22485961,
    "name": "simpleNW",
    "full_name": "msharma26/simpleNW",
    "description": "Postman like client for iPad",
    "fork": false,
    "created_at": "2014-07-31T21:37:01Z",
    "updated_at": "2016-01-03T01:09:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7759202,
    "owner_login": "msharma26",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/7759202?v=4",
    "pulled": 1,
    "tags": [
      "client"
    ]
  },
  {
    "id": 122796266,
    "name": "webservice",
    "full_name": "banerjeeindranil854/webservice",
    "description": "RestfulWebservice client used as postman",
    "fork": false,
    "created_at": "2018-02-25T01:43:36Z",
    "updated_at": "2018-02-25T01:47:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36805063,
    "owner_login": "banerjeeindranil854",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/36805063?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "service",
      "client"
    ]
  },
  {
    "id": 91918441,
    "name": "lather_ui",
    "full_name": "adamclmns/lather_ui",
    "description": "*PROOF OF CONCEPT* - A simple SOAP client UI. This project takes inspiration from Postman and SoapUI. Initial proof of concept is built on suds and tkinter",
    "fork": false,
    "created_at": "2017-05-20T21:53:42Z",
    "updated_at": "2019-05-25T15:30:31Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 2,
    "watchers": 2,
    "score": 1,
    "owner_id": 1242662,
    "owner_login": "adamclmns",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1242662?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "built",
      "concept",
      "proof",
      "inspiration"
    ]
  },
  {
    "id": 44820715,
    "name": "postit-note",
    "full_name": "alexbasson/postit-note",
    "description": "OS X native Postman-like HTTP client",
    "fork": false,
    "created_at": "2015-10-23T15:14:05Z",
    "updated_at": "2015-10-23T15:39:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 221066,
    "owner_login": "alexbasson",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/221066?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "native"
    ]
  },
  {
    "id": 235176690,
    "name": "sockman",
    "full_name": "kaito002/sockman",
    "description": "A websocket client, just like postman",
    "fork": false,
    "created_at": "2020-01-20T19:04:00Z",
    "updated_at": "2020-01-20T19:04:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5224042,
    "owner_login": "kaito002",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5224042?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "client",
      "websocket"
    ]
  },
  {
    "id": 205509468,
    "name": "USSD",
    "full_name": "AkwGaniu/USSD",
    "description": "USSD code for simple simulation with Postman client.",
    "fork": false,
    "created_at": "2019-08-31T07:07:11Z",
    "updated_at": "2019-08-31T07:32:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45771378,
    "owner_login": "AkwGaniu",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/45771378?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "code",
      "simulation"
    ]
  },
  {
    "id": 133266399,
    "name": "KTClient",
    "full_name": "roflanKisel/KTClient",
    "description": "Computer Systems and Networks: HTTP-client, analogue of Postman",
    "fork": false,
    "created_at": "2018-05-13T19:07:34Z",
    "updated_at": "2019-09-04T14:50:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29023595,
    "owner_login": "roflanKisel",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29023595?v=4",
    "pulled": 1,
    "tags": [
      "client"
    ]
  },
  {
    "id": 92972062,
    "name": "Basic-Authentication-SpringSecurity",
    "full_name": "Jodainc/Basic-Authentication-SpringSecurity",
    "description": "The Basic  Authentication with Spring Security 4 with client Postman",
    "fork": false,
    "created_at": "2017-05-31T17:38:32Z",
    "updated_at": "2017-05-31T17:50:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19319152,
    "owner_login": "Jodainc",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/19319152?v=4",
    "pulled": 1,
    "tags": [
      "client"
    ]
  },
  {
    "id": 160037471,
    "name": "sprint-boot-jpa-mysql",
    "full_name": "ChillSpike/sprint-boot-jpa-mysql",
    "description": "Spring Boot JPA with mysql using POSTMAN client",
    "fork": false,
    "created_at": "2018-12-02T10:49:46Z",
    "updated_at": "2018-12-02T18:21:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10113291,
    "owner_login": "ChillSpike",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10113291?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "mysql",
      "mysql "
    ]
  },
  {
    "id": 227624652,
    "name": "fx-dev-tools",
    "full_name": "jinfanx/fx-dev-tools",
    "description": "simple http client, like postman, but only main functions",
    "fork": false,
    "created_at": "2019-12-12T14:23:56Z",
    "updated_at": "2020-01-22T08:23:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33615730,
    "owner_login": "jinfanx",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/33615730?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "client",
      "http",
      "function",
      "main",
      "functions"
    ]
  },
  {
    "id": 21957860,
    "name": "zendesk-search-api-requests",
    "full_name": "ckumar1/zendesk-search-api-requests",
    "description": "Used to collaboratively share search requests saved in Postman client",
    "fork": false,
    "created_at": "2014-07-17T21:14:32Z",
    "updated_at": "2014-07-17T21:14:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5449665,
    "owner_login": "ckumar1",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5449665?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "client",
      "requests",
      "search",
      "collaboratively"
    ]
  },
  {
    "id": 163696353,
    "name": "iex-postman-scripts",
    "full_name": "nelsonvt/iex-postman-scripts",
    "description": "(BETA) This repository contains scripts for the Postman client to check stock prices and notify users when they exceed / fall below desired values.",
    "fork": false,
    "created_at": "2018-12-31T20:41:30Z",
    "updated_at": "2018-12-31T21:42:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31448347,
    "owner_login": "nelsonvt",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/31448347?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "repos",
      "repository",
      "script",
      "client",
      "user",
      "contain",
      "scripts",
      "users",
      "check",
      "notify",
      "stock",
      "below"
    ]
  },
  {
    "id": 148647607,
    "name": "TodoApi",
    "full_name": "tuankhoi2206/TodoApi",
    "description": "Asp.net core web api razor pages using Entityframework using Postman as a client",
    "fork": false,
    "created_at": "2018-09-13T14:10:41Z",
    "updated_at": "2019-10-26T12:24:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16678611,
    "owner_login": "tuankhoi2206",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16678611?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "framework",
      "core",
      "pages",
      "razor"
    ]
  },
  {
    "id": 136303478,
    "name": "server-upload-download",
    "full_name": "romanshutsman/server-upload-download",
    "description": "You can test it in POSTMAN or download client for this app https://git.io/vhaiL !",
    "fork": false,
    "created_at": "2018-06-06T09:13:11Z",
    "updated_at": "2018-07-02T11:25:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29098174,
    "owner_login": "romanshutsman",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29098174?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "client",
      "http",
      "https",
      "load",
      "download"
    ]
  },
  {
    "id": 247047034,
    "name": "quest",
    "full_name": "liyingxiu/quest",
    "description": "A very simple postman-like api client using material design. It is still in its early stages of development",
    "fork": false,
    "created_at": "2020-03-13T10:37:49Z",
    "updated_at": "2020-03-13T14:11:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37041840,
    "owner_login": "liyingxiu",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/37041840?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "client",
      "develop",
      "sign",
      "development",
      "very",
      "design",
      "still",
      "early",
      "material"
    ]
  },
  {
    "id": 240393509,
    "name": "newman-dr",
    "full_name": "k4l397/newman-dr",
    "description": "This is a javascript tool that wraps the newman postman client and runs all collections in a directory.",
    "fork": false,
    "created_at": "2020-02-14T00:08:03Z",
    "updated_at": "2020-02-16T17:41:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4959969,
    "owner_login": "k4l397",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/4959969?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "script",
      "tool",
      "client",
      "newman",
      "java",
      "javascript",
      "directory",
      "runs",
      "wraps"
    ]
  },
  {
    "id": 95335669,
    "name": "rake",
    "full_name": "pigsy/rake",
    "description": "Rake is a full-featured dynamic RPC client for lets you test your RPC services like Paw or Postman for HTTP APIs.",
    "fork": false,
    "created_at": "2017-06-25T03:14:38Z",
    "updated_at": "2017-06-25T03:41:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1964774,
    "owner_login": "pigsy",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1964774?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "service",
      "client",
      "services",
      "full",
      "feature",
      "dynamic",
      "lets",
      "featured"
    ]
  },
  {
    "id": 174132296,
    "name": "Email-sender-no-IMAP",
    "full_name": "rishav394/Email-sender-no-IMAP",
    "description": "Handles POST request to the site and sends the mail accordingly. Useful to send mail using curl, POSTMAN or other command lines tools when email clients are blocked by your org or college.",
    "fork": false,
    "created_at": "2019-03-06T11:29:01Z",
    "updated_at": "2019-04-21T07:39:34Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 18554373,
    "owner_login": "rishav394",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/18554373?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "tool",
      "client",
      "mail",
      "line",
      "send",
      "site",
      "tools",
      "email",
      "command",
      "curl",
      "command line",
      "lines",
      "e mail",
      "according",
      "clients",
      "sends",
      "college",
      "accordingly"
    ]
  }
]