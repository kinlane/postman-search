[
  {
    "id": 1924147,
    "name": "postman-app-support",
    "full_name": "postmanlabs/postman-app-support",
    "description": "Postman helps you be more efficient while working with APIs. Using Postman, you can construct complex HTTP requests quickly, organize them in collections and share them with your co-workers.",
    "fork": false,
    "created_at": "2011-06-20T15:11:21Z",
    "updated_at": "2020-03-28T23:13:04Z",
    "stargazers_count": 4326,
    "watchers_count": 4326,
    "forks": 639,
    "watchers": 4326,
    "score": 1,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "help",
      "more",
      "struct",
      "working",
      "helps",
      "complex",
      "while",
      "quickly",
      "efficient"
    ]
  },
  {
    "id": 203587744,
    "name": "postwoman",
    "full_name": "liyasthomas/postwoman",
    "description": "ðŸ‘½ A free, fast and beautiful API request builder (web alternative to Postman) https://postwoman.io",
    "fork": false,
    "created_at": "2019-08-21T13:15:24Z",
    "updated_at": "2020-03-30T03:19:25Z",
    "stargazers_count": 18028,
    "watchers_count": 18028,
    "forks": 1105,
    "watchers": 18028,
    "score": 1,
    "owner_id": 10395817,
    "owner_login": "liyasthomas",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/10395817?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "http",
      "https",
      "build",
      "native",
      "alternative",
      "free",
      "builder",
      "postwoman"
    ]
  },
  {
    "id": 24208331,
    "name": "postman",
    "full_name": "salesforce-marketingcloud/postman",
    "description": null,
    "fork": false,
    "created_at": "2014-09-18T23:13:13Z",
    "updated_at": "2020-03-19T09:15:42Z",
    "stargazers_count": 100,
    "watchers_count": 100,
    "forks": 47,
    "watchers": 100,
    "score": 1,
    "owner_id": 12401348,
    "owner_login": "salesforce-marketingcloud",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/12401348?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 41257354,
    "name": "moklr",
    "full_name": "sumory/moklr",
    "description": "another \"postman\", status server, http request mock.",
    "fork": false,
    "created_at": "2015-08-23T16:27:38Z",
    "updated_at": "2020-03-25T03:36:23Z",
    "stargazers_count": 89,
    "watchers_count": 89,
    "forks": 26,
    "watchers": 89,
    "score": 1,
    "owner_id": 1326893,
    "owner_login": "sumory",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1326893?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "server",
      "http",
      "stat",
      "mock",
      "status",
      "another",
      "\"postman\""
    ]
  },
  {
    "user": "sittinash",
    "repo": "elasticsearch-postman",
    "pulled": "User",
    "id": 107509977,
    "name": "elasticsearch-postman",
    "full_name": "sittinash/elasticsearch-postman",
    "description": "Collection of frequently-used Elasticsearch requests.",
    "fork": false,
    "created_at": "2017-10-19T07:01:59Z",
    "updated_at": "2020-03-11T14:28:46Z",
    "forks": 27,
    "open_issues": 0,
    "watchers": 21,
    "network_count": 27,
    "subscribers_count": 1,
    "owner_id": 7665806,
    "owner_login": "sittinash",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7665806?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "requests",
      "search"
    ]
  },
  {
    "id": 109502427,
    "name": "swagger2-postman-generator",
    "full_name": "djfdyuruiry/swagger2-postman-generator",
    "description": "Use Swagger v2 JSON Collections to generate Postman v1 collections which include sample request bodies",
    "fork": false,
    "created_at": "2017-11-04T14:38:57Z",
    "updated_at": "2020-03-06T04:14:53Z",
    "stargazers_count": 28,
    "watchers_count": 28,
    "forks": 14,
    "watchers": 28,
    "score": 1,
    "owner_id": 3433659,
    "owner_login": "djfdyuruiry",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3433659?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "generate",
      "sample",
      "bodies"
    ]
  },
  {
    "user": "TCGplayer",
    "repo": "Postman-Api",
    "pulled": "Organization",
    "id": 124442153,
    "name": "Postman-Api",
    "full_name": "TCGplayer/Postman-Api",
    "description": "A Postman collection containing requests for all of the current TCGPlayer API endpoints.",
    "fork": false,
    "created_at": "2018-03-08T20:06:13Z",
    "updated_at": "2020-01-31T22:22:49Z",
    "forks": 8,
    "open_issues": 2,
    "watchers": 19,
    "network_count": 8,
    "subscribers_count": 7,
    "owner_id": 29218133,
    "owner_login": "TCGplayer",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29218133?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "contain",
      "endpoint",
      "points",
      "endpoints",
      "rent",
      "containing",
      "current"
    ]
  },
  {
    "user": "twilio",
    "repo": "wireless-postman-collection",
    "pulled": "Organization",
    "id": 95825518,
    "name": "wireless-postman-collection",
    "full_name": "twilio/wireless-postman-collection",
    "description": "This repository includes a group of Programmable Wireless HTTP requests for your convenience. You can learn more about Programmable Wireless HTTP request formats in the Programmable Wireless Documentation.",
    "fork": false,
    "created_at": "2017-06-29T22:31:30Z",
    "updated_at": "2020-01-28T20:52:34Z",
    "forks": 11,
    "open_issues": 0,
    "watchers": 16,
    "network_count": 11,
    "subscribers_count": 14,
    "owner_id": 109142,
    "owner_login": "twilio",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/109142?v=4",
    "owner_type": "Organization",
    "tags": [
      "repo",
      "request",
      "form",
      "repos",
      "repository",
      "requests",
      "format",
      "learn",
      "more",
      "includes",
      "group"
    ]
  },
  {
    "user": "Rasbandit",
    "repo": "postman-test-server",
    "pulled": "User",
    "id": 153728688,
    "name": "postman-test-server",
    "full_name": "Rasbandit/postman-test-server",
    "description": null,
    "fork": false,
    "created_at": "2018-10-19T04:58:15Z",
    "updated_at": "2018-11-15T16:42:35Z",
    "forks": 34,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 34,
    "subscribers_count": 0,
    "owner_id": 22157796,
    "owner_login": "Rasbandit",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/22157796?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "id": 127435421,
    "name": "keycloak-postman-pre-request",
    "full_name": "alexatiks/keycloak-postman-pre-request",
    "description": "Postman pre-request script to fetch a token from Keycloak and set it to a collection variable to use in request headers.",
    "fork": false,
    "created_at": "2018-03-30T14:11:21Z",
    "updated_at": "2020-03-25T11:29:23Z",
    "stargazers_count": 22,
    "watchers_count": 22,
    "forks": 10,
    "watchers": 22,
    "score": 1,
    "owner_id": 17456292,
    "owner_login": "alexatiks",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17456292?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "script",
      "token",
      "header",
      "variable",
      "fetch"
    ]
  },
  {
    "id": 152237532,
    "name": "ResponseToFile-Postman",
    "full_name": "sivcan/ResponseToFile-Postman",
    "description": "This project helps in writing response (or any data) from a postman request to a file",
    "fork": false,
    "created_at": "2018-10-09T11:12:41Z",
    "updated_at": "2020-03-12T15:29:09Z",
    "stargazers_count": 15,
    "watchers_count": 15,
    "forks": 7,
    "watchers": 15,
    "score": 1,
    "owner_id": 12631777,
    "owner_login": "sivcan",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/12631777?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "request",
      "file",
      "help",
      "response",
      "helps",
      "writing"
    ]
  },
  {
    "user": "fedejousset",
    "repo": "Dynamics365WebApiPostmanCollection",
    "pulled": "User",
    "id": 148663809,
    "name": "Dynamics365WebApiPostmanCollection",
    "full_name": "fedejousset/Dynamics365WebApiPostmanCollection",
    "description": "This is a Postman collection that covers standard API requests for Dynamics 365. The collection aims to help Dynamics 365 Developers/Power Users to create, run and test different types of Web API request by providing authentication and request templates.",
    "fork": false,
    "created_at": "2018-09-13T16:06:50Z",
    "updated_at": "2020-03-03T09:00:17Z",
    "forks": 7,
    "open_issues": 1,
    "watchers": 26,
    "network_count": 7,
    "subscribers_count": 3,
    "owner_id": 20836210,
    "owner_login": "fedejousset",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20836210?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "collect",
      "collection",
      "create",
      "request",
      "requests",
      "auth",
      "help",
      "authentication",
      "rent",
      "plate",
      "template",
      "type",
      "types",
      "templates",
      "covers",
      "providing"
    ]
  },
  {
    "user": "kamranayub",
    "repo": "azure-storage-rest-postman",
    "pulled": "User",
    "id": 152349105,
    "name": "azure-storage-rest-postman",
    "full_name": "kamranayub/azure-storage-rest-postman",
    "description": "Postman collection to sign requests to Azure Storage Management REST API",
    "fork": false,
    "created_at": "2018-10-10T02:11:17Z",
    "updated_at": "2020-02-18T04:41:23Z",
    "forks": 11,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 11,
    "subscribers_count": 1,
    "owner_id": 563819,
    "owner_login": "kamranayub",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/563819?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "sign"
    ]
  },
  {
    "user": "OneNoteDev",
    "repo": "OneNoteAPIPostmanCollection",
    "pulled": "Organization",
    "id": 153196328,
    "name": "OneNoteAPIPostmanCollection",
    "full_name": "OneNoteDev/OneNoteAPIPostmanCollection",
    "description": "Postman collection for OneNote API requests.",
    "fork": false,
    "created_at": "2018-10-15T23:52:19Z",
    "updated_at": "2020-02-09T07:13:00Z",
    "forks": 5,
    "open_issues": 2,
    "watchers": 10,
    "network_count": 5,
    "subscribers_count": 22,
    "owner_id": 6225732,
    "owner_login": "OneNoteDev",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6225732?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "request",
      "requests"
    ]
  },
  {
    "user": "peter-evans",
    "repo": "postman-pre-request",
    "pulled": "User",
    "id": 76613131,
    "name": "postman-pre-request",
    "full_name": "peter-evans/postman-pre-request",
    "description": "Postman Pre-request script for HMAC Authentication with Kong",
    "fork": false,
    "created_at": "2016-12-16T02:13:54Z",
    "updated_at": "2019-04-19T15:38:27Z",
    "forks": 5,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 5,
    "subscribers_count": 2,
    "owner_id": 18365890,
    "owner_login": "peter-evans",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/18365890?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "script"
    ]
  },
  {
    "user": "sendwyre",
    "repo": "wyre-postman-collection",
    "pulled": "Organization",
    "id": 183311400,
    "name": "wyre-postman-collection",
    "full_name": "sendwyre/wyre-postman-collection",
    "description": "This repo is filled to the brim with sample Postman API requests that allow you to test our back-end endpoints.",
    "fork": false,
    "created_at": "2019-04-24T21:46:31Z",
    "updated_at": "2019-12-17T23:07:15Z",
    "forks": 6,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 6,
    "subscribers_count": 3,
    "owner_id": 6931243,
    "owner_login": "sendwyre",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/6931243?v=4",
    "owner_type": "Organization",
    "tags": [
      "test",
      "repo",
      "request",
      "requests",
      "endpoint",
      "points",
      "sample",
      "endpoints",
      "filled"
    ]
  },
  {
    "user": "joolfe",
    "repo": "postman-util-lib",
    "pulled": "User",
    "id": 223360362,
    "name": "postman-util-lib",
    "full_name": "joolfe/postman-util-lib",
    "description": ":rocket: A crypto utility library to be used from Postman Pre-request and Tests script tabs.",
    "fork": false,
    "created_at": "2019-11-22T08:40:45Z",
    "updated_at": "2020-03-02T02:19:37Z",
    "forks": 3,
    "open_issues": 1,
    "watchers": 4,
    "network_count": 3,
    "subscribers_count": 2,
    "owner_id": 1319632,
    "owner_login": "joolfe",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1319632?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "script",
      "util",
      "library",
      "utility",
      "crypto",
      "rocket",
      "tabs"
    ]
  },
  {
    "user": "Thingee",
    "repo": "postman-cinder",
    "pulled": "User",
    "id": 8426781,
    "name": "postman-cinder",
    "full_name": "Thingee/postman-cinder",
    "description": "A collection of requests for the Cinder RESTful API using Chrome extension Postman.",
    "fork": false,
    "created_at": "2013-02-26T06:38:55Z",
    "updated_at": "2014-05-03T06:02:03Z",
    "forks": 3,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 3,
    "subscribers_count": 1,
    "owner_id": 47583,
    "owner_login": "Thingee",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/47583?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "extension"
    ]
  },
  {
    "user": "QAS-Labs",
    "repo": "postman-samples",
    "pulled": "Organization",
    "id": 138645061,
    "name": "postman-samples",
    "full_name": "QAS-Labs/postman-samples",
    "description": null,
    "fork": false,
    "created_at": "2018-06-25T20:14:22Z",
    "updated_at": "2020-02-10T21:52:41Z",
    "forks": 3,
    "open_issues": 0,
    "watchers": 1,
    "network_count": 3,
    "subscribers_count": 6,
    "owner_id": 17824403,
    "owner_login": "QAS-Labs",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17824403?v=4",
    "owner_type": "Organization",
    "tags": []
  },
  {
    "user": "postmanlabs",
    "repo": "curl-to-postman",
    "pulled": "Organization",
    "id": 188996885,
    "name": "curl-to-postman",
    "full_name": "postmanlabs/curl-to-postman",
    "description": "Converts curl requests to Postman Collection v2 request objects",
    "fork": false,
    "created_at": "2019-05-28T09:25:26Z",
    "updated_at": "2020-03-27T16:08:07Z",
    "forks": 2,
    "open_issues": 1,
    "watchers": 3,
    "network_count": 2,
    "subscribers_count": 5,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "owner_type": "Organization",
    "tags": [
      "request",
      "requests",
      "object",
      "curl",
      "objects"
    ]
  },
  {
    "user": "HamedNN76",
    "repo": "postman-fetch",
    "pulled": "User",
    "id": 191059128,
    "name": "postman-fetch",
    "full_name": "HamedNN76/postman-fetch",
    "description": "A package for fetch from your postman collection easily with name of your request",
    "fork": false,
    "created_at": "2019-06-09T21:54:28Z",
    "updated_at": "2019-09-15T11:59:46Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 6,
    "network_count": 1,
    "subscribers_count": 0,
    "owner_id": 33554763,
    "owner_login": "HamedNN76",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/33554763?v=4",
    "owner_type": "User",
    "tags": [
      " postman",
      "collect",
      "collection",
      "request",
      "postman collection",
      "package",
      "name",
      "easily",
      "fetch"
    ]
  },
  {
    "user": "ingatlancom",
    "repo": "escher-postman",
    "pulled": "Organization",
    "id": 63689223,
    "name": "escher-postman",
    "full_name": "ingatlancom/escher-postman",
    "description": "Postman Pre-request Script generator for Escher authentication",
    "fork": false,
    "created_at": "2016-07-19T11:42:41Z",
    "updated_at": "2018-12-20T11:02:57Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 2,
    "subscribers_count": 4,
    "owner_id": 15819252,
    "owner_login": "ingatlancom",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/15819252?v=4",
    "owner_type": "Organization",
    "tags": [
      "request",
      "auth",
      "authentication",
      "generator"
    ]
  },
  {
    "user": "rosalexander",
    "repo": "oci-postman-prerequests",
    "pulled": "User",
    "id": 171567637,
    "name": "oci-postman-prerequests",
    "full_name": "rosalexander/oci-postman-prerequests",
    "description": "Prerequest scripts to use the Oracle Cloud Infrastructure REST API in Postman",
    "fork": false,
    "created_at": "2019-02-19T23:38:36Z",
    "updated_at": "2020-02-14T17:14:43Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 4,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 9373790,
    "owner_login": "rosalexander",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9373790?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "script",
      "scripts",
      "struct",
      "structure"
    ]
  },
  {
    "user": "anthonyvallee",
    "repo": "riot-api-postman",
    "pulled": "User",
    "id": 51416695,
    "name": "riot-api-postman",
    "full_name": "anthonyvallee/riot-api-postman",
    "description": "Postman request collection that can be parameterized for all of League of Legends' API methods.",
    "fork": false,
    "created_at": "2016-02-10T02:35:41Z",
    "updated_at": "2017-12-21T11:30:50Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 4,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 7561804,
    "owner_login": "anthonyvallee",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7561804?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "request",
      "method",
      "methods",
      "parameter",
      "parameterized"
    ]
  },
  {
    "user": "josephbuchma",
    "repo": "postman-ruby",
    "pulled": "User",
    "id": 88745456,
    "name": "postman-ruby",
    "full_name": "josephbuchma/postman-ruby",
    "description": "Parse & make http requests from Postman's (getpostman.com) exported collections (Collection V2)",
    "fork": false,
    "created_at": "2017-04-19T12:58:15Z",
    "updated_at": "2018-10-19T22:15:14Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 1,
    "subscribers_count": 2,
    "owner_id": 3718145,
    "owner_login": "josephbuchma",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/3718145?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "http",
      "export",
      "getpost",
      "exported"
    ]
  },
  {
    "user": "wcandillon",
    "repo": "courrier",
    "pulled": "User",
    "id": 54550890,
    "name": "courrier",
    "full_name": "wcandillon/courrier",
    "description": "Postman runner that can run requests in parallel",
    "fork": false,
    "created_at": "2016-03-23T10:26:41Z",
    "updated_at": "2019-04-06T06:13:16Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 6,
    "network_count": 1,
    "subscribers_count": 2,
    "owner_id": 306134,
    "owner_login": "wcandillon",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/306134?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "requests",
      "runner",
      "parallel"
    ]
  },
  {
    "user": "ddemaree",
    "repo": "lazy_postman",
    "pulled": "User",
    "id": 137880,
    "name": "lazy_postman",
    "full_name": "ddemaree/lazy_postman",
    "description": "Emails in, POST requests out",
    "fork": false,
    "created_at": "2009-02-26T03:30:56Z",
    "updated_at": "2019-08-13T14:04:07Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 2,
    "owner_id": 965,
    "owner_login": "ddemaree",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/965?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "requests",
      "mail"
    ]
  },
  {
    "user": "motivast",
    "repo": "motimize-postman",
    "pulled": "Organization",
    "id": 149724278,
    "name": "motimize-postman",
    "full_name": "motivast/motimize-postman",
    "description": "Collection of Postman requests to work with Motimize. Motimize is an open source self-hosted REST web service to optimize and compress images.",
    "fork": false,
    "created_at": "2018-09-21T07:09:06Z",
    "updated_at": "2019-09-14T03:25:18Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 32762369,
    "owner_login": "motivast",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32762369?v=4",
    "owner_type": "Organization",
    "tags": [
      "request",
      "service",
      "requests",
      "source",
      "host",
      "image",
      "open",
      "images",
      "hosted"
    ]
  },
  {
    "user": "ivastly",
    "repo": "php2curl",
    "pulled": "User",
    "id": 172375705,
    "name": "php2curl",
    "full_name": "ivastly/php2curl",
    "description": "tiny lib to convert data from PHP request to CURL command. Then, CURL command can be imported into Postman with 1 click, so it is PHP to Postman export tool.",
    "fork": false,
    "created_at": "2019-02-24T18:42:52Z",
    "updated_at": "2020-02-27T06:02:13Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 14,
    "network_count": 1,
    "subscribers_count": 1,
    "owner_id": 919655,
    "owner_login": "ivastly",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/919655?v=4",
    "owner_type": "User",
    "tags": [
      "data",
      "request",
      "tool",
      "convert",
      "export",
      "import",
      "command",
      "imported",
      "tiny"
    ]
  },
  {
    "user": "gauravsinghrawat",
    "repo": "postmanClone",
    "pulled": "User",
    "id": 223626730,
    "name": "postmanClone",
    "full_name": "gauravsinghrawat/postmanClone",
    "description": "This the demo working clone of Post man API to make different type of requests to test our server API.",
    "fork": false,
    "created_at": "2019-11-23T17:23:12Z",
    "updated_at": "2019-12-02T11:55:37Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 48629593,
    "owner_login": "gauravsinghrawat",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/48629593?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "request",
      "server",
      "requests",
      "demo",
      "rent",
      "working",
      "type",
      "clone"
    ]
  },
  {
    "id": 165998464,
    "name": "PostmanDemo",
    "full_name": "danielplawgo/PostmanDemo",
    "description": null,
    "fork": false,
    "created_at": "2019-01-16T07:55:35Z",
    "updated_at": "2019-12-11T10:15:17Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 70243,
    "owner_login": "danielplawgo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/70243?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 191059128,
    "name": "postman-fetch",
    "full_name": "HamedNN76/postman-fetch",
    "description": "A package for fetch from your postman collection easily with name of your request",
    "fork": false,
    "created_at": "2019-06-09T21:54:28Z",
    "updated_at": "2019-09-15T11:59:46Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 1,
    "watchers": 6,
    "score": 1,
    "owner_id": 33554763,
    "owner_login": "HamedNN76",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/33554763?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "request",
      "postman collection",
      "package",
      "name",
      "easily",
      "fetch"
    ]
  },
  {
    "id": 63689223,
    "name": "escher-postman",
    "full_name": "ingatlancom/escher-postman",
    "description": "Postman Pre-request Script generator for Escher authentication",
    "fork": false,
    "created_at": "2016-07-19T11:42:41Z",
    "updated_at": "2018-12-20T11:02:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 15819252,
    "owner_login": "ingatlancom",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/15819252?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "auth",
      "authentication",
      "generator"
    ]
  },
  {
    "id": 86136534,
    "name": "postman",
    "full_name": "spirinvladimir/postman",
    "description": "Match respond to request",
    "fork": false,
    "created_at": "2017-03-25T06:07:35Z",
    "updated_at": "2017-04-05T11:55:17Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 2780401,
    "owner_login": "spirinvladimir",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/2780401?v=4",
    "tags": [
      "request"
    ]
  },
  {
    "id": 51416695,
    "name": "riot-api-postman",
    "full_name": "anthonyvallee/riot-api-postman",
    "description": "Postman request collection that can be parameterized for all of League of Legends' API methods.",
    "fork": false,
    "created_at": "2016-02-10T02:35:41Z",
    "updated_at": "2017-12-21T11:30:50Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 7561804,
    "owner_login": "anthonyvallee",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7561804?v=4",
    "tags": [
      "collect",
      "collection",
      "request",
      "method",
      "methods",
      "parameter",
      "parameterized"
    ]
  },
  {
    "id": 171567637,
    "name": "oci-postman-prerequests",
    "full_name": "rosalexander/oci-postman-prerequests",
    "description": "Prerequest scripts to use the Oracle Cloud Infrastructure REST API in Postman",
    "fork": false,
    "created_at": "2019-02-19T23:38:36Z",
    "updated_at": "2020-02-14T17:14:43Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 9373790,
    "owner_login": "rosalexander",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9373790?v=4",
    "tags": [
      "request",
      "script",
      "scripts",
      "struct",
      "structure"
    ]
  },
  {
    "id": 88745456,
    "name": "postman-ruby",
    "full_name": "josephbuchma/postman-ruby",
    "description": "Parse & make http requests from Postman's (getpostman.com) exported collections (Collection V2)",
    "fork": false,
    "created_at": "2017-04-19T12:58:15Z",
    "updated_at": "2018-10-19T22:15:14Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 3718145,
    "owner_login": "josephbuchma",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/3718145?v=4",
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "http",
      "export",
      "getpost",
      "exported"
    ]
  },
  {
    "id": 54550890,
    "name": "courrier",
    "full_name": "wcandillon/courrier",
    "description": "Postman runner that can run requests in parallel",
    "fork": false,
    "created_at": "2016-03-23T10:26:41Z",
    "updated_at": "2019-04-06T06:13:16Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 1,
    "watchers": 6,
    "score": 1,
    "owner_id": 306134,
    "owner_login": "wcandillon",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/306134?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "runner",
      "parallel"
    ]
  },
  {
    "id": 137880,
    "name": "lazy_postman",
    "full_name": "ddemaree/lazy_postman",
    "description": "Emails in, POST requests out",
    "fork": false,
    "created_at": "2009-02-26T03:30:56Z",
    "updated_at": "2019-08-13T14:04:07Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 965,
    "owner_login": "ddemaree",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/965?v=4",
    "tags": [
      "request",
      "requests",
      "mail"
    ]
  },
  {
    "id": 79989875,
    "name": "postman-ultimate",
    "full_name": "LinYangxin/postman-ultimate",
    "description": null,
    "fork": false,
    "created_at": "2017-01-25T06:40:28Z",
    "updated_at": "2019-04-20T11:12:47Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 25339219,
    "owner_login": "LinYangxin",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25339219?v=4",
    "tags": []
  },
  {
    "id": 149724278,
    "name": "motimize-postman",
    "full_name": "motivast/motimize-postman",
    "description": "Collection of Postman requests to work with Motimize. Motimize is an open source self-hosted REST web service to optimize and compress images.",
    "fork": false,
    "created_at": "2018-09-21T07:09:06Z",
    "updated_at": "2019-09-14T03:25:18Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 32762369,
    "owner_login": "motivast",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32762369?v=4",
    "tags": [
      "request",
      "service",
      "requests",
      "source",
      "host",
      "image",
      "open",
      "images",
      "hosted"
    ]
  },
  {
    "id": 172375705,
    "name": "php2curl",
    "full_name": "ivastly/php2curl",
    "description": "tiny lib to convert data from PHP request to CURL command. Then, CURL command can be imported into Postman with 1 click, so it is PHP to Postman export tool.",
    "fork": false,
    "created_at": "2019-02-24T18:42:52Z",
    "updated_at": "2020-02-27T06:02:13Z",
    "stargazers_count": 14,
    "watchers_count": 14,
    "forks": 1,
    "watchers": 14,
    "score": 1,
    "owner_id": 919655,
    "owner_login": "ivastly",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/919655?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "tool",
      "convert",
      "export",
      "import",
      "command",
      "imported",
      "tiny"
    ]
  },
  {
    "id": 97756745,
    "name": "mean-test1",
    "full_name": "vpapazov/mean-test1",
    "description": "testing request/update of the data through postman. ",
    "fork": false,
    "created_at": "2017-07-19T20:08:24Z",
    "updated_at": "2017-07-19T20:10:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11355230,
    "owner_login": "vpapazov",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/11355230?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "data",
      "testing",
      "request",
      "update"
    ]
  },
  {
    "id": 118181235,
    "name": "express-practice",
    "full_name": "michaelbrian93/express-practice",
    "description": "a repo making POST, PUT, DELETE requests with Express & Postman",
    "fork": false,
    "created_at": "2018-01-19T21:37:25Z",
    "updated_at": "2018-01-19T21:38:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14987708,
    "owner_login": "michaelbrian93",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/14987708?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "request",
      "requests",
      "making"
    ]
  },
  {
    "id": 179223594,
    "name": "api-client",
    "full_name": "joeattardi/api-client",
    "description": "Graphical interface for making HTTP requests (like Postman)",
    "fork": false,
    "created_at": "2019-04-03T06:21:11Z",
    "updated_at": "2019-12-09T20:52:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 219285,
    "owner_login": "joeattardi",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/219285?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "face",
      "interface",
      "making"
    ]
  },
  {
    "id": 127477457,
    "name": "dcode-server",
    "full_name": "samuraijane/dcode-server",
    "description": "Fire GET requests in Postman at this URL:",
    "fork": false,
    "created_at": "2018-03-30T22:10:39Z",
    "updated_at": "2018-04-11T09:43:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8484986,
    "owner_login": "samuraijane",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/8484986?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 155580893,
    "name": "Dynamic-DateTime-in-Postman-Via-Pre-request-Script",
    "full_name": "tylerjhill/Dynamic-DateTime-in-Postman-Via-Pre-request-Script",
    "description": "Pre-request Script to Dynamically Set DateTime Value in Postman",
    "fork": false,
    "created_at": "2018-10-31T15:31:36Z",
    "updated_at": "2018-10-31T15:34:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17993565,
    "owner_login": "tylerjhill",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/17993565?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "call"
    ]
  },
  {
    "id": 138085669,
    "name": "Bookstore-API-testing-using-Mocha",
    "full_name": "Sachielsc/Bookstore-API-testing-using-Mocha",
    "description": "My third Mocha project (using Postman to send http request)",
    "fork": false,
    "created_at": "2018-06-20T21:03:44Z",
    "updated_at": "2018-06-25T03:28:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 22362358,
    "owner_login": "Sachielsc",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22362358?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "http",
      "send",
      "third"
    ]
  },
  {
    "id": 240015601,
    "name": "Postman-Pre-Request-Script-Get-Bearer-Token-POST-Request",
    "full_name": "anoop0/Postman-Pre-Request-Script-Get-Bearer-Token-POST-Request",
    "description": "How to make POST request / Get Bearer Token using OAuth2.0 using Pre-Request Script in Postman",
    "fork": false,
    "created_at": "2020-02-12T13:09:44Z",
    "updated_at": "2020-02-13T05:00:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3315158,
    "owner_login": "anoop0",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3315158?v=4",
    "pulled": 1,
    "tags": [
      "request"
    ]
  },
  {
    "id": 128285172,
    "name": "back-end-nodejs",
    "full_name": "gparasyris/back-end-nodejs",
    "description": "Simple Node JS Express server handling POST, GET, PUT, DELETE requests.",
    "fork": false,
    "created_at": "2018-04-06T01:50:22Z",
    "updated_at": "2018-08-12T15:25:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38101481,
    "owner_login": "gparasyris",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38101481?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "server",
      "requests",
      "handling"
    ]
  },
  {
    "id": 155191480,
    "name": "RESTful_BC_API",
    "full_name": "TheChronicMonster/RESTful_BC_API",
    "description": "Node.js + Express RESTful API that enables GET and POST requests via CURL and Postman",
    "fork": false,
    "created_at": "2018-10-29T10:15:20Z",
    "updated_at": "2018-10-30T16:43:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9493272,
    "owner_login": "TheChronicMonster",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9493272?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "enable",
      "enables"
    ]
  },
  {
    "id": 76613131,
    "name": "postman-pre-request",
    "full_name": "peter-evans/postman-pre-request",
    "description": "Postman Pre-request script for HMAC Authentication with Kong",
    "fork": false,
    "created_at": "2016-12-16T02:13:54Z",
    "updated_at": "2019-04-19T15:38:27Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 5,
    "watchers": 2,
    "score": 1,
    "owner_id": 18365890,
    "owner_login": "peter-evans",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/18365890?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script"
    ]
  },
  {
    "id": 223360362,
    "name": "postman-util-lib",
    "full_name": "joolfe/postman-util-lib",
    "description": ":rocket: A crypto utility library to be used from Postman Pre-request and Tests script tabs.",
    "fork": false,
    "created_at": "2019-11-22T08:40:45Z",
    "updated_at": "2020-03-02T02:19:37Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 3,
    "watchers": 4,
    "score": 1,
    "owner_id": 1319632,
    "owner_login": "joolfe",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1319632?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "util",
      "library",
      "utility",
      "crypto",
      "rocket",
      "tabs"
    ]
  },
  {
    "id": 188996885,
    "name": "curl-to-postman",
    "full_name": "postmanlabs/curl-to-postman",
    "description": "Converts curl requests to Postman Collection v2 request objects",
    "fork": false,
    "created_at": "2019-05-28T09:25:26Z",
    "updated_at": "2020-03-27T16:08:07Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 2,
    "watchers": 3,
    "score": 1,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "object",
      "curl",
      "objects"
    ]
  },
  {
    "id": 5662124,
    "name": "postman",
    "full_name": "hbnro/postman",
    "description": "Application handler through request/response for PHP",
    "fork": false,
    "created_at": "2012-09-03T17:50:58Z",
    "updated_at": "2015-07-18T16:01:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13387892,
    "owner_login": "hbnro",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13387892?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "response",
      "handle",
      "handler"
    ]
  },
  {
    "id": 13682491,
    "name": "postman",
    "full_name": "gajus/postman",
    "description": null,
    "fork": false,
    "created_at": "2013-10-18T15:57:04Z",
    "updated_at": "2019-07-16T07:35:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 973543,
    "owner_login": "gajus",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/973543?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 18597679,
    "name": "postman2",
    "full_name": "ypriyanka/postman2",
    "description": null,
    "fork": false,
    "created_at": "2014-04-09T13:13:07Z",
    "updated_at": "2014-05-13T09:28:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 6812598,
    "owner_login": "ypriyanka",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6812598?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 97601584,
    "name": "postman",
    "full_name": "yuralala8/postman",
    "description": "creating or saving new data by making a POST request",
    "fork": false,
    "created_at": "2017-07-18T13:29:04Z",
    "updated_at": "2017-10-13T15:07:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25855250,
    "owner_login": "yuralala8",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/25855250?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "creating",
      "making",
      "saving"
    ]
  },
  {
    "id": 87407755,
    "name": "postman",
    "full_name": "svenkat1/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-04-06T08:51:41Z",
    "updated_at": "2017-04-06T09:25:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26959203,
    "owner_login": "svenkat1",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26959203?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 93330449,
    "name": "postman",
    "full_name": "whendream/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-06-04T17:36:37Z",
    "updated_at": "2017-06-06T13:53:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4025357,
    "owner_login": "whendream",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/4025357?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 106374666,
    "name": "postman",
    "full_name": "fastneasylearning/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-10-10T06:02:41Z",
    "updated_at": "2017-10-10T06:02:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32664188,
    "owner_login": "fastneasylearning",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32664188?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 102098448,
    "name": "postman",
    "full_name": "rohan0793/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-09-01T09:43:46Z",
    "updated_at": "2017-09-01T09:43:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6614305,
    "owner_login": "rohan0793",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6614305?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 101792697,
    "name": "postman",
    "full_name": "qtzznn/postman",
    "description": "Get data example for request postman",
    "fork": false,
    "created_at": "2017-08-29T18:20:46Z",
    "updated_at": "2017-08-29T20:40:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29821379,
    "owner_login": "qtzznn",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29821379?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "request",
      "example"
    ]
  },
  {
    "id": 102611555,
    "name": "Postman",
    "full_name": "torishaw05/Postman",
    "description": null,
    "fork": false,
    "created_at": "2017-09-06T13:25:09Z",
    "updated_at": "2017-09-06T13:25:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30183181,
    "owner_login": "torishaw05",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/30183181?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 104840162,
    "name": "Postman",
    "full_name": "nuralexsusanto/Postman",
    "description": null,
    "fork": false,
    "created_at": "2017-09-26T05:33:39Z",
    "updated_at": "2017-09-26T05:36:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32288731,
    "owner_login": "nuralexsusanto",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/32288731?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 104051543,
    "name": "postman",
    "full_name": "go-wheel/postman",
    "description": "Batch HTTP requests, using postman format",
    "fork": false,
    "created_at": "2017-09-19T08:58:40Z",
    "updated_at": "2017-09-19T09:27:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32092526,
    "owner_login": "go-wheel",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/32092526?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "form",
      "requests",
      "format"
    ]
  },
  {
    "id": 110729696,
    "name": "postman",
    "full_name": "pts-mattdeluco/postman",
    "description": "Postman LCP API requests, scripts, and tests.",
    "fork": false,
    "created_at": "2017-11-14T18:38:29Z",
    "updated_at": "2017-11-14T18:39:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23040900,
    "owner_login": "pts-mattdeluco",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/23040900?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "tests",
      "script",
      "requests",
      "scripts"
    ]
  },
  {
    "id": 248709138,
    "name": "PostmanWSSEToken",
    "full_name": "lmaxim/PostmanWSSEToken",
    "description": "Pre-request script for Postman provide auth header generation for API calls in Emarsys",
    "fork": false,
    "created_at": "2020-03-20T08:52:19Z",
    "updated_at": "2020-03-20T09:05:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1670749,
    "owner_login": "lmaxim",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1670749?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "call",
      "auth",
      "calls",
      "provide",
      "header",
      "generation",
      "mars"
    ]
  },
  {
    "id": 230002629,
    "name": "metaman",
    "full_name": "yojji-io/metaman",
    "description": "Postman alternative request builder (workspaces included)",
    "fork": false,
    "created_at": "2019-12-24T20:55:42Z",
    "updated_at": "2020-02-01T22:14:57Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 1,
    "watchers": 2,
    "score": 1,
    "owner_id": 54585489,
    "owner_login": "yojji-io",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/54585489?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "build",
      "native",
      "included",
      "alternative",
      "workspace",
      "builder"
    ]
  },
  {
    "id": 193985537,
    "name": "cidade-estado-node-express",
    "full_name": "MunizMechanics/cidade-estado-node-express",
    "description": "Postman para as requests",
    "fork": false,
    "created_at": "2019-06-26T22:26:23Z",
    "updated_at": "2019-06-26T23:33:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22156851,
    "owner_login": "MunizMechanics",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/22156851?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 160838567,
    "name": "request_tests",
    "full_name": "tjallen27/request_tests",
    "description": "request tests with Postman",
    "fork": false,
    "created_at": "2018-12-07T15:05:35Z",
    "updated_at": "2018-12-08T16:20:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22148681,
    "owner_login": "tjallen27",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22148681?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "tests",
      "tests "
    ]
  },
  {
    "id": 109244893,
    "name": "tetration-postman",
    "full_name": "bbmorten/tetration-postman",
    "description": "Environment settings, pre-request script, and sample Postman scripts for accessing the Tetration API",
    "fork": false,
    "created_at": "2017-11-02T09:37:37Z",
    "updated_at": "2018-06-12T21:01:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 8436491,
    "owner_login": "bbmorten",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8436491?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "sample",
      "scripts",
      "access",
      "setting",
      "settings"
    ]
  },
  {
    "id": 80914274,
    "name": "postman-signing",
    "full_name": "ximik3/postman-signing",
    "description": "Postman script for automatic secure request signing.",
    "fork": false,
    "created_at": "2017-02-04T11:13:33Z",
    "updated_at": "2017-02-04T11:30:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 16223303,
    "owner_login": "ximik3",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16223303?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "auto",
      "automat",
      "sign",
      "automatic",
      "signing",
      "secure"
    ]
  },
  {
    "id": 183474860,
    "name": "postman-practice",
    "full_name": "atriacca/postman-practice",
    "description": null,
    "fork": false,
    "created_at": "2019-04-25T16:50:07Z",
    "updated_at": "2019-04-28T16:22:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47952462,
    "owner_login": "atriacca",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/47952462?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 168682665,
    "name": "postman-testing",
    "full_name": "JackWKelly/postman-testing",
    "description": null,
    "fork": false,
    "created_at": "2019-02-01T10:41:22Z",
    "updated_at": "2019-02-06T17:07:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47181493,
    "owner_login": "JackWKelly",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47181493?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 164734934,
    "name": "Postman_Analytics",
    "full_name": "thandon263/Postman_Analytics",
    "description": "This a postman analytics gathering function. Get results and average of time taken by the requests",
    "fork": false,
    "created_at": "2019-01-08T21:21:39Z",
    "updated_at": "2019-02-05T17:24:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18520509,
    "owner_login": "thandon263",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/18520509?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "requests",
      "function",
      "result",
      "results",
      "analytics"
    ]
  },
  {
    "id": 189791429,
    "name": "postman-kosmo",
    "full_name": "wileymab/postman-kosmo",
    "description": "Parameter management for Postman requests.",
    "fork": false,
    "created_at": "2019-06-02T01:03:18Z",
    "updated_at": "2019-06-02T04:22:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2964761,
    "owner_login": "wileymab",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2964761?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "manage",
      "management"
    ]
  },
  {
    "id": 114694664,
    "name": "Postman-Fundamentals",
    "full_name": "gsivaprabu/Postman-Fundamentals",
    "description": "Postman is used by over 3 million developers across the world. This course will show you the fundamentals of Postman, how you can issue requests, create automated API tests, and even document your API with Postman.",
    "fork": false,
    "created_at": "2017-12-18T22:38:26Z",
    "updated_at": "2017-12-20T04:06:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 2444608,
    "owner_login": "gsivaprabu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2444608?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "tests",
      "requests",
      "develop",
      "document",
      "auto",
      "automat",
      "course",
      "developer",
      "automate",
      "automated",
      "developers",
      "world",
      "issue",
      "fundamental",
      "fundamentals",
      "across",
      "million"
    ]
  },
  {
    "id": 46117925,
    "name": "wi-postman",
    "full_name": "werbasinnotec/wi-postman",
    "description": "Letterman will response and request all packages from a REST API",
    "fork": false,
    "created_at": "2015-11-13T11:22:50Z",
    "updated_at": "2015-11-16T15:05:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13216351,
    "owner_login": "werbasinnotec",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/13216351?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "response",
      "package",
      "packages"
    ]
  },
  {
    "id": 175797902,
    "name": "postman-splitter",
    "full_name": "cfitz1995/postman-splitter",
    "description": "Node.js command-line utility for importing/exports individual Postman requests",
    "fork": false,
    "created_at": "2019-03-15T10:19:51Z",
    "updated_at": "2019-03-15T10:40:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41369223,
    "owner_login": "cfitz1995",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/41369223?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "line",
      "util",
      "export",
      "import",
      "command",
      "utility",
      "exports"
    ]
  },
  {
    "id": 201135695,
    "name": "postman-read-file",
    "full_name": "matt-ball/postman-read-file",
    "description": "Read a local data file on a per request level.",
    "fork": false,
    "created_at": "2019-08-07T22:18:45Z",
    "updated_at": "2019-08-09T01:00:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8490181,
    "owner_login": "matt-ball",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8490181?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "file",
      "local",
      "level"
    ]
  },
  {
    "id": 162580169,
    "name": "postman-demo-api",
    "full_name": "flightcom/postman-demo-api",
    "description": null,
    "fork": false,
    "created_at": "2018-12-20T13:00:29Z",
    "updated_at": "2018-12-20T13:03:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4329156,
    "owner_login": "flightcom",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/4329156?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 102910061,
    "name": "postman-oraclebmc-apis-js",
    "full_name": "paasdtools/postman-oraclebmc-apis-js",
    "description": "JavaScript-based mechanism for making Oracle Bare Metal Cloud Services API requests from Postman",
    "fork": false,
    "created_at": "2017-09-08T22:36:32Z",
    "updated_at": "2017-09-08T22:43:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31580110,
    "owner_login": "paasdtools",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31580110?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 169608941,
    "name": "ermjson-to-postmanjson",
    "full_name": "joneldiablo/ermjson-to-postmanjson",
    "description": null,
    "fork": false,
    "created_at": "2019-02-07T17:06:57Z",
    "updated_at": "2019-02-07T17:52:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13206502,
    "owner_login": "joneldiablo",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13206502?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 157493695,
    "name": "swagger2postman",
    "full_name": "campfire-inc/swagger2postman",
    "description": null,
    "fork": false,
    "created_at": "2018-11-14T05:03:59Z",
    "updated_at": "2019-02-26T05:20:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22833307,
    "owner_login": "campfire-inc",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22833307?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 102173049,
    "name": "postman-amazon-apis-js",
    "full_name": "cpettools/postman-amazon-apis-js",
    "description": "JavaScript-based mechanism for making AWS REST API requests from Postman",
    "fork": false,
    "created_at": "2017-09-02T04:41:34Z",
    "updated_at": "2017-09-02T04:41:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15694756,
    "owner_login": "cpettools",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15694756?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 102172708,
    "name": "postman-oraclebmc-apis-js",
    "full_name": "cpettools/postman-oraclebmc-apis-js",
    "description": "JavaScript-based mechanism for making Oracle Bare Metal Cloud Services API requests from Postman",
    "fork": false,
    "created_at": "2017-09-02T04:32:28Z",
    "updated_at": "2017-09-02T04:34:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 15694756,
    "owner_login": "cpettools",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15694756?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 147647031,
    "name": "nodejs-postman-demo",
    "full_name": "impactotecnologico/nodejs-postman-demo",
    "description": null,
    "fork": false,
    "created_at": "2018-09-06T09:05:48Z",
    "updated_at": "2018-10-17T11:20:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5190774,
    "owner_login": "impactotecnologico",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5190774?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 219050422,
    "name": "postman-oclc-hmac",
    "full_name": "larrydeck/postman-oclc-hmac",
    "description": "Postman pre-request script to generate HMAC signatures and authorization headers for OCLC APIs.",
    "fork": false,
    "created_at": "2019-11-01T19:32:50Z",
    "updated_at": "2019-11-01T20:07:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 56116659,
    "owner_login": "larrydeck",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/56116659?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "sign",
      "auth",
      "generate",
      "header",
      "authorization",
      "signature",
      "signatures"
    ]
  },
  {
    "id": 86427538,
    "name": "request-promise-postman",
    "full_name": "tomalex0/request-promise-postman",
    "description": "Generate postman json from request-debug",
    "fork": false,
    "created_at": "2017-03-28T07:17:03Z",
    "updated_at": "2017-03-29T16:39:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 208168,
    "owner_login": "tomalex0",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/208168?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "json",
      "debug"
    ]
  },
  {
    "id": 102910117,
    "name": "postman-amazon-apis-js",
    "full_name": "paasdtools/postman-amazon-apis-js",
    "description": "JavaScript-based mechanism for making AWS REST API requests from Postman",
    "fork": false,
    "created_at": "2017-09-08T22:37:30Z",
    "updated_at": "2017-09-08T22:43:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31580110,
    "owner_login": "paasdtools",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31580110?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 116677681,
    "name": "node-postman-refactor-mongoose",
    "full_name": "vinoth112/node-postman-refactor-mongoose",
    "description": null,
    "fork": false,
    "created_at": "2018-01-08T13:05:11Z",
    "updated_at": "2018-02-08T09:57:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11039684,
    "owner_login": "vinoth112",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11039684?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 135809969,
    "name": "slack-postman-chatbot",
    "full_name": "oleh-polishchuk/slack-postman-chatbot",
    "description": null,
    "fork": false,
    "created_at": "2018-06-02T10:52:25Z",
    "updated_at": "2018-06-03T11:39:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16427424,
    "owner_login": "oleh-polishchuk",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16427424?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 138371634,
    "name": "swagger-to-postman",
    "full_name": "christherama/swagger-to-postman",
    "description": "Converts a Swagger JSON spec to a Postman collection with request bodies",
    "fork": false,
    "created_at": "2018-06-23T04:37:15Z",
    "updated_at": "2018-06-23T04:54:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1058113,
    "owner_login": "christherama",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1058113?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "spec",
      "bodies"
    ]
  },
  {
    "id": 130292196,
    "name": "postman-export-documenter",
    "full_name": "adepssimius/postman-export-documenter",
    "description": null,
    "fork": false,
    "created_at": "2018-04-20T01:33:17Z",
    "updated_at": "2018-04-20T03:16:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5257052,
    "owner_login": "adepssimius",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/5257052?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 131689759,
    "name": "ost-postman-script",
    "full_name": "hammadtq/ost-postman-script",
    "description": "A pre-request script to help test the OST Developer API",
    "fork": false,
    "created_at": "2018-05-01T08:04:10Z",
    "updated_at": "2018-05-03T11:02:21Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 11869286,
    "owner_login": "hammadtq",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11869286?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "script",
      "help"
    ]
  },
  {
    "id": 220307289,
    "name": "multiple-curl-to-postman",
    "full_name": "bhargavkaranam/multiple-curl-to-postman",
    "description": "Convert multiple cURL requests to Postman collection",
    "fork": false,
    "created_at": "2019-11-07T18:53:32Z",
    "updated_at": "2019-11-07T18:53:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8963298,
    "owner_login": "bhargavkaranam",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8963298?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "multiple"
    ]
  },
  {
    "id": 50537215,
    "name": "postman-ci-server",
    "full_name": "MTen/postman-ci-server",
    "description": null,
    "fork": false,
    "created_at": "2016-01-27T20:55:39Z",
    "updated_at": "2017-10-13T05:17:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5403486,
    "owner_login": "MTen",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5403486?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 183930959,
    "name": "postal_clirk",
    "full_name": "rwilcox/postal_clirk",
    "description": "Ever wanted to set up or run a single Postman request from exported postman collections. Here you go. Simple Postman requests only",
    "fork": false,
    "created_at": "2019-04-28T16:13:53Z",
    "updated_at": "2019-05-09T14:51:05Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 20831,
    "owner_login": "rwilcox",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20831?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "request",
      "postman collection",
      "requests",
      "postman collections",
      "export",
      "exported",
      "single",
      "wanted"
    ]
  },
  {
    "id": 186936119,
    "name": "request-app",
    "full_name": "nikokent/request-app",
    "description": "A Postman style request app for mobile",
    "fork": false,
    "created_at": "2019-05-16T02:28:55Z",
    "updated_at": "2019-05-17T01:07:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31290907,
    "owner_login": "nikokent",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31290907?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "mobile",
      "style"
    ]
  },
  {
    "id": 137878299,
    "name": "helloapi",
    "full_name": "anubhavg18/helloapi",
    "description": "Enter data to mongodb by postman requests",
    "fork": false,
    "created_at": "2018-06-19T10:47:02Z",
    "updated_at": "2018-06-19T10:56:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36505618,
    "owner_login": "anubhavg18",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/36505618?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "request",
      "requests",
      "mongo",
      "mongod",
      "mongodb"
    ]
  },
  {
    "id": 246346691,
    "name": "JIRA-API-testing-by-postman",
    "full_name": "NoorKanana/JIRA-API-testing-by-postman",
    "description": "Ceating a project called â€˜REST API Example Projectâ€™ and run basic JIRA Software scenario request by postman",
    "fork": false,
    "created_at": "2020-03-10T16:04:39Z",
    "updated_at": "2020-03-10T22:04:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 60195418,
    "owner_login": "NoorKanana",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/60195418?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "call",
      "scenario"
    ]
  },
  {
    "id": 207802742,
    "name": "Laravel-API-CRUD-Using-POSTMAN",
    "full_name": "CodeMechanix/Laravel-API-CRUD-Using-POSTMAN",
    "description": null,
    "fork": false,
    "created_at": "2019-09-11T12:05:47Z",
    "updated_at": "2020-03-04T04:39:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21336974,
    "owner_login": "CodeMechanix",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/21336974?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 196152526,
    "name": "oci-api-signing-postman-collection",
    "full_name": "CallanHP/oci-api-signing-postman-collection",
    "description": "This Postman collection implements pre-request scripts to perform the signing required to invoke the OCI APIs.",
    "fork": false,
    "created_at": "2019-07-10T07:15:11Z",
    "updated_at": "2019-11-22T02:31:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23567235,
    "owner_login": "CallanHP",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/23567235?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "form",
      "script",
      "implement",
      "sign",
      "scripts",
      "perform",
      "require",
      "required",
      "implements",
      "signing"
    ]
  },
  {
    "id": 65946016,
    "name": "pi-rest-api-postman-collections",
    "full_name": "rnsridharan/pi-rest-api-postman-collections",
    "description": null,
    "fork": false,
    "created_at": "2016-08-17T22:17:52Z",
    "updated_at": "2016-08-17T22:17:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5432537,
    "owner_login": "rnsridharan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5432537?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 229223450,
    "name": "postman-tutorial",
    "full_name": "Kalyanb447-github/postman-tutorial",
    "description": "Learn Http request and Rest Api using postman tool",
    "fork": false,
    "created_at": "2019-12-20T08:31:25Z",
    "updated_at": "2019-12-20T08:31:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40482381,
    "owner_login": "Kalyanb447-github",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/40482381?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "tool"
    ]
  },
  {
    "id": 166076660,
    "name": "AzureDatabricksPostmanCollection",
    "full_name": "GaryStrange/AzureDatabricksPostmanCollection",
    "description": "A collection of Azure Databricks API requests",
    "fork": false,
    "created_at": "2019-01-16T16:54:21Z",
    "updated_at": "2019-08-12T11:01:28Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 25485835,
    "owner_login": "GaryStrange",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/25485835?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests"
    ]
  },
  {
    "id": 126024343,
    "name": "postman",
    "full_name": "TakuCoder/postman",
    "description": "Postman is a REST API testing tool for Android devices. It helps to test REST API without desktops. can submit a HTTP request with several headers, parameters and raw request body by 6 different HTTP methods including GET, POST, HEAD, PUT, DELETE and PATCH. HTTP response can be shown as three styles including pretty, raw and preview. Response status code and headers are also supported in Postman-Android. Currently in Development Stage",
    "fork": false,
    "created_at": "2018-03-20T13:47:04Z",
    "updated_at": "2020-03-09T08:39:18Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 2,
    "watchers": 3,
    "score": 1,
    "owner_id": 13318707,
    "owner_login": "TakuCoder",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/13318707?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "request",
      "tool",
      "code",
      "help",
      "response",
      "rent",
      "stat",
      "view",
      "method",
      "ever",
      "support",
      "methods",
      "including",
      "header",
      "status",
      "parameter",
      "review",
      "style",
      "helps",
      "desktop",
      "three",
      "supported",
      "several",
      "devices",
      "desktops"
    ]
  },
  {
    "id": 66883313,
    "name": "api-practice",
    "full_name": "Brionnaw/api-practice",
    "description": "requesting api using postman",
    "fork": false,
    "created_at": "2016-08-29T21:50:03Z",
    "updated_at": "2016-08-29T21:52:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17984128,
    "owner_login": "Brionnaw",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17984128?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "requesting"
    ]
  },
  {
    "id": 207537810,
    "name": "APIChainingInPostman",
    "full_name": "raghwendra-sonu/APIChainingInPostman",
    "description": "https://medium.com/@Raghwendra.sonu/postman-chain-api-requests-get-data-from-response-of-one-api-and-refer-in-another-api-d3bb184c2dd1",
    "fork": false,
    "created_at": "2019-09-10T11:11:50Z",
    "updated_at": "2019-11-14T03:44:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7844894,
    "owner_login": "raghwendra-sonu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7844894?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "requests",
      "http",
      "https",
      "response",
      "chai",
      "another"
    ]
  },
  {
    "id": 125142339,
    "name": "ApiToPostman",
    "full_name": "gregambrose/ApiToPostman",
    "description": "Takes HTTP requests and makes them into collections that can be imported into POSTMAN",
    "fork": false,
    "created_at": "2018-03-14T02:16:48Z",
    "updated_at": "2018-11-27T20:47:59Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 2172948,
    "owner_login": "gregambrose",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/2172948?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "import",
      "imported",
      "makes"
    ]
  },
  {
    "id": 203404634,
    "name": "APICollectionPostmanNewman",
    "full_name": "romaricpoton/APICollectionPostmanNewman",
    "description": null,
    "fork": false,
    "created_at": "2019-08-20T15:33:29Z",
    "updated_at": "2019-08-20T17:36:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36893205,
    "owner_login": "romaricpoton",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/36893205?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 217399342,
    "name": "api.postman",
    "full_name": "pscarpioni/api.postman",
    "description": "This repository contains requests about Integra Commerce API",
    "fork": false,
    "created_at": "2019-10-24T21:35:24Z",
    "updated_at": "2020-01-06T21:29:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22650213,
    "owner_login": "pscarpioni",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22650213?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "request",
      "repos",
      "repository",
      "requests",
      "contain"
    ]
  },
  {
    "id": 100196377,
    "name": "apig-postman",
    "full_name": "nwayve/apig-postman",
    "description": null,
    "fork": false,
    "created_at": "2017-08-13T18:25:38Z",
    "updated_at": "2017-08-13T18:25:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1729221,
    "owner_login": "nwayve",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1729221?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 148436698,
    "name": "APITesting-Postman",
    "full_name": "rizwanr5s/APITesting-Postman",
    "description": null,
    "fork": false,
    "created_at": "2018-09-12T07:02:15Z",
    "updated_at": "2018-09-18T04:06:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43171492,
    "owner_login": "rizwanr5s",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/43171492?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 179918929,
    "name": "API_Postman",
    "full_name": "PansyLi/API_Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-04-07T04:44:15Z",
    "updated_at": "2019-04-07T04:46:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47636396,
    "owner_login": "PansyLi",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/47636396?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 74160474,
    "name": "url_shortener_api",
    "full_name": "Anubhav722/url_shortener_api",
    "description": "Use Postman for POST requests",
    "fork": false,
    "created_at": "2016-11-18T19:35:12Z",
    "updated_at": "2016-11-18T19:45:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20791676,
    "owner_login": "Anubhav722",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20791676?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 149461323,
    "name": "public-api-postman-collection",
    "full_name": "serhii-sanduliak/public-api-postman-collection",
    "description": "A collection of example requests to demonstrate and test the TransferWise public API",
    "fork": false,
    "created_at": "2018-09-19T14:12:33Z",
    "updated_at": "2018-09-21T10:34:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40859346,
    "owner_login": "serhii-sanduliak",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/40859346?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "request",
      "requests",
      "example",
      "demo",
      "public",
      "demonstrate"
    ]
  },
  {
    "id": 184620739,
    "name": "POSTMAN-TEST-API",
    "full_name": "lineageispig/POSTMAN-TEST-API",
    "description": null,
    "fork": false,
    "created_at": "2019-05-02T17:11:38Z",
    "updated_at": "2019-05-02T17:20:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22027966,
    "owner_login": "lineageispig",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22027966?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 206759837,
    "name": "Postman-RiotAPI",
    "full_name": "AusHick/Postman-RiotAPI",
    "description": "A fully parameterized Postman request collection for use with the Riot API",
    "fork": false,
    "created_at": "2019-09-06T09:25:20Z",
    "updated_at": "2019-10-02T23:09:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5475079,
    "owner_login": "AusHick",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5475079?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "full",
      "ully",
      "fully",
      "parameter",
      "parameterized"
    ]
  },
  {
    "id": 230401721,
    "name": "API-testing",
    "full_name": "AndHubert/API-testing",
    "description": "API request in Postman - Run Collections",
    "fork": false,
    "created_at": "2019-12-27T08:15:16Z",
    "updated_at": "2019-12-27T08:24:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 58653385,
    "owner_login": "AndHubert",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/58653385?v=4",
    "pulled": 1,
    "tags": [
      "request"
    ]
  },
  {
    "id": 114933920,
    "name": "pan-postman",
    "full_name": "stealthllama/pan-postman",
    "description": "Postman collection for PAN-OS API requests",
    "fork": false,
    "created_at": "2017-12-20T21:44:43Z",
    "updated_at": "2020-03-25T20:19:12Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 5359553,
    "owner_login": "stealthllama",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5359553?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests"
    ]
  },
  {
    "id": 12794353,
    "name": "Twilio-postman",
    "full_name": "devinrader/Twilio-postman",
    "description": "A set of collections for POSTman that let you simulate Twilio webhook requests",
    "fork": false,
    "created_at": "2013-09-12T20:44:42Z",
    "updated_at": "2014-07-18T17:17:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1095289,
    "owner_login": "devinrader",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1095289?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "webhook",
      "simulate"
    ]
  },
  {
    "id": 102266370,
    "name": "D7_post_man_collection_sample",
    "full_name": "shamsher327/D7_post_man_collection_sample",
    "description": "Post request example for sending auth request after login using POSTMAN",
    "fork": false,
    "created_at": "2017-09-03T13:26:30Z",
    "updated_at": "2017-09-03T13:26:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 7940616,
    "owner_login": "shamsher327",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7940616?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "example",
      "auth",
      "send",
      "login",
      "sending"
    ]
  },
  {
    "id": 178805655,
    "name": "postman-collections",
    "full_name": "darshanasbg/postman-collections",
    "description": "Postman request templates",
    "fork": false,
    "created_at": "2019-04-01T07:08:10Z",
    "updated_at": "2020-02-15T05:36:50Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 4,
    "watchers": 5,
    "score": 1,
    "owner_id": 1617810,
    "owner_login": "darshanasbg",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1617810?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "plate",
      "template",
      "templates"
    ]
  },
  {
    "id": 51990997,
    "name": "postman-collections",
    "full_name": "grantorchard/postman-collections",
    "description": null,
    "fork": false,
    "created_at": "2016-02-18T08:08:19Z",
    "updated_at": "2019-09-11T12:19:54Z",
    "stargazers_count": 10,
    "watchers_count": 10,
    "forks": 3,
    "watchers": 10,
    "score": 1,
    "owner_id": 7535071,
    "owner_login": "grantorchard",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7535071?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 97042735,
    "name": "postman-collection",
    "full_name": "shandor-bk12/postman-collection",
    "description": null,
    "fork": false,
    "created_at": "2017-07-12T19:00:58Z",
    "updated_at": "2017-07-12T19:03:58Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 6,
    "watchers": 2,
    "score": 1,
    "owner_id": 25012563,
    "owner_login": "shandor-bk12",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25012563?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 81733446,
    "name": "PostmanCollectionSorter",
    "full_name": "ivansams/PostmanCollectionSorter",
    "description": "Cmd line app to sort the requests within Postman collections to match the order object. Postman randomly shuffles requests when outputting collections in order to make source control difficult even with minor changes. If this is run before each update to a collection, it allows you to see incremental changes to each version in history instead of the entire collection being shuffled.",
    "fork": false,
    "created_at": "2017-02-12T14:53:04Z",
    "updated_at": "2017-02-21T05:23:27Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 11498645,
    "owner_login": "ivansams",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/11498645?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "line",
      "source",
      "update",
      "version",
      "allows",
      "object",
      "control",
      "within",
      "order",
      "sort",
      "output",
      "being",
      "instead",
      "match",
      "entire",
      "random",
      "history"
    ]
  },
  {
    "id": 155793008,
    "name": "mainflux-postman-collection",
    "full_name": "chombium/mainflux-postman-collection",
    "description": "A postman collection to send requests to Mainflux",
    "fork": false,
    "created_at": "2018-11-02T00:35:59Z",
    "updated_at": "2018-11-02T00:41:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 781503,
    "owner_login": "chombium",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/781503?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "request",
      "postman collection",
      "requests",
      "send"
    ]
  },
  {
    "id": 155561935,
    "name": "node-recap-postman-collection",
    "full_name": "virgilbugnariu/node-recap-postman-collection",
    "description": null,
    "fork": false,
    "created_at": "2018-10-31T13:27:07Z",
    "updated_at": "2018-10-31T13:30:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12611206,
    "owner_login": "virgilbugnariu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/12611206?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 49595749,
    "name": "okta-opp-postman-collection",
    "full_name": "pmcdowell-okta/okta-opp-postman-collection",
    "description": "A postman collection which simulates an Okta On Premise Provisioning agent request",
    "fork": false,
    "created_at": "2016-01-13T19:14:45Z",
    "updated_at": "2016-01-13T19:14:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16439251,
    "owner_login": "pmcdowell-okta",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16439251?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "request",
      "postman collection",
      "agent",
      "simulate",
      "simulates"
    ]
  },
  {
    "id": 161351660,
    "name": "Postman-Redfish-Collections",
    "full_name": "donzef/Postman-Redfish-Collections",
    "description": "Postman collections for Redfish requests against HPE servers",
    "fork": false,
    "created_at": "2018-12-11T15:08:16Z",
    "updated_at": "2020-03-13T14:46:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42031605,
    "owner_login": "donzef",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42031605?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "server",
      "requests",
      "servers"
    ]
  },
  {
    "id": 150748703,
    "name": "unite-tenant-administration-postman-collection",
    "full_name": "Mercateo/unite-tenant-administration-postman-collection",
    "description": "A collection of example requests that can be made to the Unite-Tenant-Administration APIs",
    "fork": false,
    "created_at": "2018-09-28T13:58:54Z",
    "updated_at": "2018-09-28T14:32:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7766597,
    "owner_login": "Mercateo",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7766597?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "example",
      "mini"
    ]
  },
  {
    "id": 153112588,
    "name": "Automated-API-Testing-Using-Postman-Collections",
    "full_name": "TSQAteam/Automated-API-Testing-Using-Postman-Collections",
    "description": "A Postman Collection is an executable API Description. Organize requests into folders. Document the collection with descriptions, tests, and more. Send requests individually, or use collection runner to send all the requests in the collection.",
    "fork": false,
    "created_at": "2018-10-15T12:53:59Z",
    "updated_at": "2018-10-24T09:46:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42575108,
    "owner_login": "TSQAteam",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/42575108?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "request",
      "tests",
      "script",
      "requests",
      "send",
      "runner",
      "more",
      "desc",
      "folder",
      "description",
      "descriptions",
      "folders",
      "executable"
    ]
  },
  {
    "id": 145168093,
    "name": "spring-boot-postman-collection-executor-coverage-report",
    "full_name": "rajaramkushwaha/spring-boot-postman-collection-executor-coverage-report",
    "description": null,
    "fork": false,
    "created_at": "2018-08-17T21:28:50Z",
    "updated_at": "2018-08-18T14:07:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14159015,
    "owner_login": "rajaramkushwaha",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/14159015?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 186640659,
    "name": "ES_demo",
    "full_name": "noonlit/ES_demo",
    "description": "Postman collection with example requests to Elasticsearch.",
    "fork": false,
    "created_at": "2019-05-14T14:33:54Z",
    "updated_at": "2019-05-14T14:39:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11314452,
    "owner_login": "noonlit",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11314452?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "example",
      "search"
    ]
  },
  {
    "id": 179155642,
    "name": "https-github.com-salesforce-marketingcloud-postman-blob-master-SFMC.json.postman_collection",
    "full_name": "rishithm/https-github.com-salesforce-marketingcloud-postman-blob-master-SFMC.json.postman_collection",
    "description": null,
    "fork": false,
    "created_at": "2019-04-02T20:43:36Z",
    "updated_at": "2019-04-02T20:43:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49211728,
    "owner_login": "rishithm",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/49211728?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 176755194,
    "name": "Useless-Team",
    "full_name": "DaniloOlegovich/Useless-Team",
    "description": "First collection of requests by POSTMAN",
    "fork": false,
    "created_at": "2019-03-20T14:45:59Z",
    "updated_at": "2019-03-20T17:41:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48756373,
    "owner_login": "DaniloOlegovich",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/48756373?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests"
    ]
  },
  {
    "id": 144314919,
    "name": "VaporAuthTemplateRequestExamples",
    "full_name": "jottenlips/VaporAuthTemplateRequestExamples",
    "description": "ðŸ’§ Sample requests and documentation for creating your first authenticated Vapor API ðŸ’§",
    "fork": false,
    "created_at": "2018-08-10T17:30:22Z",
    "updated_at": "2019-02-19T22:30:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14910912,
    "owner_login": "jottenlips",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/14910912?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "document",
      "auth",
      "documentation",
      "creating",
      "authenticate",
      "authenticated"
    ]
  },
  {
    "id": 226686927,
    "name": "web_postman",
    "full_name": "rafaelhks/web_postman",
    "description": "Web app to make REST requests",
    "fork": false,
    "created_at": "2019-12-08T15:15:59Z",
    "updated_at": "2020-02-14T01:39:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32396805,
    "owner_login": "rafaelhks",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/32396805?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 225828921,
    "name": "KinveyPostmanRequests",
    "full_name": "mkapostolov/KinveyPostmanRequests",
    "description": "Sample Postman requests for Kinvey REST API",
    "fork": false,
    "created_at": "2019-12-04T09:29:17Z",
    "updated_at": "2020-01-02T12:55:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 16541687,
    "owner_login": "mkapostolov",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16541687?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 187020334,
    "name": "rest_api",
    "full_name": "Alpha-github/rest_api",
    "description": "Create a web server using flask and test for API requests using postman",
    "fork": false,
    "created_at": "2019-05-16T12:09:04Z",
    "updated_at": "2019-05-16T13:57:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37172066,
    "owner_login": "Alpha-github",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/37172066?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "request",
      "server",
      "requests",
      "flask"
    ]
  },
  {
    "id": 60636134,
    "name": "soap_rest_templates",
    "full_name": "1tallgirl/soap_rest_templates",
    "description": "Holds Boomerang SOAP and POSTman REST request templates for web services.",
    "fork": false,
    "created_at": "2016-06-07T18:20:45Z",
    "updated_at": "2016-06-07T18:20:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7917344,
    "owner_login": "1tallgirl",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7917344?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "service",
      "services",
      "plate",
      "template",
      "templates"
    ]
  },
  {
    "id": 232880272,
    "name": "SMGR-REST-SIP-Entities",
    "full_name": "chuckpaquette/SMGR-REST-SIP-Entities",
    "description": "Postman code for visualization of the data structure returned by SMGR SIP entity REST request ",
    "fork": false,
    "created_at": "2020-01-09T18:46:21Z",
    "updated_at": "2020-01-09T18:55:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31207295,
    "owner_login": "chuckpaquette",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31207295?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "code",
      "struct",
      "structure",
      "entity",
      "returned",
      "visual",
      "visualization"
    ]
  },
  {
    "id": 225776758,
    "name": "express_Sequelize_RESTfulAPI_ReturnData",
    "full_name": "DJMare/express_Sequelize_RESTfulAPI_ReturnData",
    "description": "An express app connecting to mySQL database and implementing RESTful API to return data from a GET request in Postman.",
    "fork": false,
    "created_at": "2019-12-04T04:10:35Z",
    "updated_at": "2019-12-07T00:40:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35668707,
    "owner_login": "DJMare",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35668707?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "database",
      "express",
      "implement",
      " express",
      "connect",
      "implementing",
      "connecting"
    ]
  },
  {
    "id": 169559184,
    "name": "RESTful-API",
    "full_name": "jainanant1/RESTful-API",
    "description": "A NodeJS code where the five major (GET,POST,PUT,PATCH,DELETE) requests are written and are tested using POSTMAN.",
    "fork": false,
    "created_at": "2019-02-07T11:10:54Z",
    "updated_at": "2019-02-07T11:11:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21207431,
    "owner_login": "jainanant1",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/21207431?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "requests",
      "code",
      "tested",
      "written",
      "five"
    ]
  },
  {
    "id": 196154866,
    "name": "RestApiDemo",
    "full_name": "cb-surendra/RestApiDemo",
    "description": "Rest Api demo create in Node.js also used the postman api to listen the request, post, delete and fetch etc. ",
    "fork": false,
    "created_at": "2019-07-10T07:29:34Z",
    "updated_at": "2019-07-12T09:23:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52435992,
    "owner_login": "cb-surendra",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/52435992?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "request",
      "demo",
      "list",
      "delete",
      "fetch",
      "postman api",
      "listen"
    ]
  },
  {
    "id": 141100390,
    "name": "RESTful-API",
    "full_name": "Mayurgupta3/RESTful-API",
    "description": "A RESTful API is an application program interface that uses HTTP requests to GET, PUT, POST and DELETE data using Postman Application.",
    "fork": false,
    "created_at": "2018-07-16T07:11:40Z",
    "updated_at": "2019-04-02T09:31:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16776443,
    "owner_login": "Mayurgupta3",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16776443?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "application",
      "requests",
      "face",
      "program",
      "uses",
      "interface"
    ]
  },
  {
    "id": 92623621,
    "name": "node-jwt-mocha-todo-rest-api",
    "full_name": "rdbhagat999/node-jwt-mocha-todo-rest-api",
    "description": "Nodejs rest api with authentication using jsonwebtoken. Use postman chrome extension to send requests to endpoints ",
    "fork": false,
    "created_at": "2017-05-27T20:55:04Z",
    "updated_at": "2017-05-31T01:48:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20500206,
    "owner_login": "rdbhagat999",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20500206?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "rest",
      "json",
      "requests",
      "auth",
      "endpoint",
      "points",
      "send",
      "endpoints",
      "authentication",
      "extension",
      "rest api",
      "token",
      "chrome",
      "jsonwebtoken"
    ]
  },
  {
    "id": 120206246,
    "name": "Mongo_rest_api",
    "full_name": "WingChhun/Mongo_rest_api",
    "description": "Example of a REST api for a sports team with players, will test making endpoint requests using POSTMAN.",
    "fork": false,
    "created_at": "2018-02-04T17:23:55Z",
    "updated_at": "2018-02-04T17:40:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16395923,
    "owner_login": "WingChhun",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16395923?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "requests",
      "endpoint",
      "play",
      "making",
      "sports"
    ]
  },
  {
    "id": 190126346,
    "name": "Restful-Explore-California-App",
    "full_name": "davidenoma/Restful-Explore-California-App",
    "description": "A restful spring boot micro service based on spring data JPA and spring rest. It allows requests to the web service that returns information about tours, tour packages and tour ratings about locations in california.",
    "fork": false,
    "created_at": "2019-06-04T04:01:22Z",
    "updated_at": "2019-06-06T14:43:04Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 24875399,
    "owner_login": "davidenoma",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/24875399?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "rest",
      "service",
      "requests",
      "based",
      "format",
      "boot",
      "restful",
      "spring",
      "package",
      "rating",
      "info",
      "infor",
      "allows",
      "information",
      "micro",
      "spring boot",
      "location",
      "turns",
      "returns",
      "packages",
      "tours"
    ]
  },
  {
    "id": 226784070,
    "name": "express_Sequelize_RESTfulAPI_ParameterizedRoute",
    "full_name": "DJMare/express_Sequelize_RESTfulAPI_ParameterizedRoute",
    "description": "An express app connecting to mySQL database and implementing RESTful API to return specific id data from a GET request in Postman.",
    "fork": false,
    "created_at": "2019-12-09T04:24:28Z",
    "updated_at": "2019-12-10T02:32:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35668707,
    "owner_login": "DJMare",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35668707?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "database",
      "express",
      "implement",
      " express",
      "spec",
      "connect",
      "specific",
      "implementing",
      "connecting"
    ]
  },
  {
    "id": 135473441,
    "name": "P11-build-rest-api",
    "full_name": "TJaySteno/P11-build-rest-api",
    "description": "This REST API handles requests for a course rating website. Using MongoDB, stores the reviews users make on different courses.",
    "fork": false,
    "created_at": "2018-05-30T17:00:49Z",
    "updated_at": "2020-01-10T22:14:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26858794,
    "owner_login": "TJaySteno",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/26858794?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "user",
      "site",
      "users",
      "rent",
      "view",
      "course",
      "website",
      "rating",
      "store",
      "handle",
      "review",
      "reviews",
      "handles"
    ]
  },
  {
    "id": 226435408,
    "name": "express_Sequelize_RESTfulAPI_SpecifyColumnsToReturn",
    "full_name": "DJMare/express_Sequelize_RESTfulAPI_SpecifyColumnsToReturn",
    "description": "An express app connecting to mySQL database and implementing RESTful API to return specific columns of data from a GET request in Postman.",
    "fork": false,
    "created_at": "2019-12-07T00:55:44Z",
    "updated_at": "2019-12-07T19:59:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35668707,
    "owner_login": "DJMare",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35668707?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "database",
      "express",
      "implement",
      " express",
      "spec",
      "connect",
      "specific",
      "implementing",
      "connecting",
      "columns"
    ]
  },
  {
    "id": 117588375,
    "name": "RESTfulAPI_Ruby",
    "full_name": "samuelgedaly/RESTfulAPI_Ruby",
    "description": "Completed RESTful API using PostgreSQL database, you should be able to Create, Read, Uptade and Delete (CRUD) a Cause. I used Postman to send the different http requests with the following url: http://localhost:3000/api/v1/causes.",
    "fork": false,
    "created_at": "2018-01-15T19:47:05Z",
    "updated_at": "2018-01-19T17:58:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 27719250,
    "owner_login": "samuelgedaly",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/27719250?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "database",
      "requests",
      "http",
      "send",
      "local",
      "rent",
      "host",
      "uses",
      "following",
      "should",
      "cause"
    ]
  },
  {
    "id": 23479725,
    "name": "REST-request-collection",
    "full_name": "borgius/REST-request-collection",
    "description": "This repository contains a collection of request you could use with the Postman Chrome extension in order to try out the Telekom Global SMS API.",
    "fork": false,
    "created_at": "2014-08-29T22:40:53Z",
    "updated_at": "2018-03-15T07:54:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 868919,
    "owner_login": "borgius",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/868919?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "repo",
      "request",
      "repos",
      "repository",
      "contain",
      "extension",
      "order"
    ]
  },
  {
    "id": 179158889,
    "name": "Creating-a-RESTFul-API-With-CRUD-Operations-Using-Flask-and-POSTMAN",
    "full_name": "KrishnaGupta72/Creating-a-RESTFul-API-With-CRUD-Operations-Using-Flask-and-POSTMAN",
    "description": "In this project, We'll show you how to perform CREATE/READ/UPDATE/DELETE requests using Python, Flask and POSTMAN(an API testing app)",
    "fork": false,
    "created_at": "2019-04-02T21:08:00Z",
    "updated_at": "2019-04-02T21:11:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46058679,
    "owner_login": "KrishnaGupta72",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/46058679?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "request",
      "form",
      "requests",
      "perform"
    ]
  },
  {
    "id": 227244981,
    "name": "Sequelize_RESTfulAPI_ParameterizedRoute_HelperFunction",
    "full_name": "DJMare/Sequelize_RESTfulAPI_ParameterizedRoute_HelperFunction",
    "description": "An express app connecting to mySQL database and implementing RESTful API to return specific id data using parameterized routes and helper function from a GET request in Postman that returns JSON data.",
    "fork": false,
    "created_at": "2019-12-11T00:56:05Z",
    "updated_at": "2019-12-11T22:14:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35668707,
    "owner_login": "DJMare",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35668707?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "database",
      "express",
      "implement",
      " express",
      "help",
      "route",
      "function",
      "spec",
      "routes",
      "connect",
      "specific",
      "parameter",
      "implementing",
      "connecting",
      "turns",
      "returns",
      "parameterized",
      "helper"
    ]
  },
  {
    "id": 162643106,
    "name": "REST-employeeApp",
    "full_name": "Marqueb82/REST-employeeApp",
    "description": "RESTful web service created using spring and tested with Postman.  Uses general get and post requests for mapping and service will allow user to add, remove, view all and view specific employess based upon their ID.",
    "fork": false,
    "created_at": "2018-12-20T23:50:03Z",
    "updated_at": "2019-02-06T05:53:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33797265,
    "owner_login": "Marqueb82",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33797265?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "service",
      "requests",
      "user",
      "based",
      "tested",
      "spec",
      "view",
      "spring",
      "specific",
      "general",
      "upon"
    ]
  },
  {
    "id": 81371954,
    "name": "EmployeeCRUD-Spring-MVC-Hibernate",
    "full_name": "Ajinkyashinde15/EmployeeCRUD-Spring-MVC-Hibernate",
    "description": "I have created web services REST API using Spring Web MVC framework with Hibernate technology. Postman used to tested and constructed requests to REST API .",
    "fork": false,
    "created_at": "2017-02-08T20:19:11Z",
    "updated_at": "2017-02-08T21:07:26Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 11631994,
    "owner_login": "Ajinkyashinde15",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/11631994?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "service",
      "requests",
      "tested",
      "framework",
      "services",
      "struct",
      "tech",
      "technology",
      "constructed"
    ]
  },
  {
    "id": 195168480,
    "name": "Manual",
    "full_name": "gabomare/Manual",
    "description": "Manua del uso del API REST y del FRONT END. JSON con la colecciÃ³n de requests para probar en POSTMAN",
    "fork": false,
    "created_at": "2019-07-04T04:26:22Z",
    "updated_at": "2019-07-04T04:27:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41311674,
    "owner_login": "gabomare",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/41311674?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 224601109,
    "name": "todo-basic-express-mongo",
    "full_name": "nenadjeremic/todo-basic-express-mongo",
    "description": "Basic TODO REST API using ExpressJS and MongoDB. Performs basic CRUD functionalities. Contains folder with examples of API requests that could be imported in Postman.",
    "fork": false,
    "created_at": "2019-11-28T08:06:05Z",
    "updated_at": "2019-11-28T08:55:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23355906,
    "owner_login": "nenadjeremic",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/23355906?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "form",
      "requests",
      "example",
      "function",
      "import",
      "functional",
      "examples",
      "folder",
      "imported",
      "functionalities"
    ]
  },
  {
    "id": 107671514,
    "name": "lara-api",
    "full_name": "binoysarker/lara-api",
    "description": "My first REST API using laravel and Postman. I have worked with the users,posts,likes using different relational statement like polymorphic relation and i also use separate requests and policies with this.   ",
    "fork": false,
    "created_at": "2017-10-20T11:45:33Z",
    "updated_at": "2017-10-20T11:47:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26120595,
    "owner_login": "binoysarker",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26120595?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "user",
      "users",
      "rent",
      "stat",
      "laravel",
      "posts",
      "worked"
    ]
  },
  {
    "id": 150223648,
    "name": "Crypto_APIs",
    "full_name": "Harshrajsinh96/Crypto_APIs",
    "description": "Created REST APIs for a blockchain crypto-currency where Wallet and Transactions entities were handled using SQLAlchemy mapper in Flask framework and the data was persisted in SQLite DB. Whole setup with GET/POST/DELETE request was tested on Postman.",
    "fork": false,
    "created_at": "2018-09-25T07:20:06Z",
    "updated_at": "2018-09-27T00:31:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31783541,
    "owner_login": "Harshrajsinh96",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/31783541?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "request",
      "tested",
      "framework",
      "action",
      "chai",
      "currency",
      "handle",
      "were",
      "setup",
      "crypto",
      "blockchain"
    ]
  },
  {
    "id": 202314760,
    "name": "SpringBootJacksonProjectBinding",
    "full_name": "BlitZC4/SpringBootJacksonProjectBinding",
    "description": "A SpringBoot Demo app using Jackson project in the background to print out the Json files that are embedded in the project on the clients screen when it sneds GET request through a browser or a REST client like postman.",
    "fork": false,
    "created_at": "2019-08-14T09:06:08Z",
    "updated_at": "2019-08-14T09:06:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49183125,
    "owner_login": "BlitZC4",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/49183125?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "file",
      "client",
      "files",
      "browser",
      "print",
      "clients",
      "embedded",
      "background"
    ]
  },
  {
    "id": 235759435,
    "name": "api-gateway-test2",
    "full_name": "mark-kumoco/api-gateway-test2",
    "description": "Simple REST app. Start app with: ./mvnw spring-boot:run or .\\mvnw.cmd spring-boot:run Then, browse to localhost:8080. These endpoints are created: /hello, /topics, /topics/{id}. To make a HTTP POST request you can use Postman, of course.",
    "fork": false,
    "created_at": "2020-01-23T09:11:11Z",
    "updated_at": "2020-01-27T11:47:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 59822149,
    "owner_login": "mark-kumoco",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/59822149?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "request",
      "endpoint",
      "points",
      "endpoints",
      "local",
      "boot",
      "host",
      "course",
      "spring",
      "mvnw",
      "hello"
    ]
  },
  {
    "id": 166755938,
    "name": "Dec-api",
    "full_name": "Pal0720/Dec-api",
    "description": "Build a RESTful API/MICROSERVICE with the following implementations :   The API/Microservice must perform these basic CRUD Operations :              - Accepts a request to add a new entry into the database.        - Accepts a request to update an existing entry into the database.        - Accepts a request to retrieve all the existing entries from the database.        - Accepts a request to retrieve a single entry with respect to a particular field (ID, Name, etc.. )  from the database.    a. Products : Products Table Schema : Decathlon_Products ProductID  | ProductName  | ProductSport | ProductLevel | ProductDescription  | AssociatedStores |    b. Stores : DB Table Schema : Decathlon_Stores StoreID  | StoreName  | StoreCity |       Note : 1. 'AssociatedStores' is the field to capture the StoreIDs in which the product is available. It can be multiple stores.  2. Both Products and Stores API can be called separately and together to perform the above mentioned functions. For Ex: Expose one endpoint (for example: /stores/{store_id}/products/{product_id} ) to retrieve the details of the product associated to a store. Expose one endpoint ( /stores/store_id/products ) to list all the products available in that particular store.  3. IDs and names cannot be updated.  4. You can use Spring Boot(Java) or Django Framework (with Python) or any framework you are comfortable with to build the application with Maven.  5. You can use an in-memory database : H2/Apache Derby.  6. You can use Postman as the REST Client to send requests.   Security : Implement a Basic Authorization security mechanism, which is validated on all requests.",
    "fork": false,
    "created_at": "2019-01-21T05:53:07Z",
    "updated_at": "2019-01-21T06:55:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 29477534,
    "owner_login": "Pal0720",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/29477534?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "script",
      "service",
      "call",
      "database",
      "requests",
      "example",
      "implement",
      "endpoint",
      "framework",
      "build",
      "function",
      "send",
      "spec",
      "list",
      "update",
      "implementation",
      "perform",
      "store",
      "name",
      "product",
      "multiple",
      "available",
      "functions",
      "following",
      "retrieve",
      "products",
      "single",
      "updated",
      "details",
      "mechanism",
      "security",
      "memory",
      "names",
      "comfortable",
      "cannot",
      "implementations"
    ]
  },
  {
    "id": 227184883,
    "name": "Test",
    "full_name": "HirjiHaanee/Test",
    "description": "Testing the POSTMAN fetch request",
    "fork": false,
    "created_at": "2019-12-10T18:03:18Z",
    "updated_at": "2019-12-10T18:04:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 51484288,
    "owner_login": "HirjiHaanee",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/51484288?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "fetch"
    ]
  },
  {
    "id": 213884680,
    "name": "postmantest",
    "full_name": "Dheonardo/postmantest",
    "description": "Testing untuk request response Postman",
    "fork": false,
    "created_at": "2019-10-09T10:08:02Z",
    "updated_at": "2019-10-10T01:48:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 56345243,
    "owner_login": "Dheonardo",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/56345243?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "response",
      "untuk"
    ]
  },
  {
    "id": 76462435,
    "name": "testPostman",
    "full_name": "sivi999/testPostman",
    "description": null,
    "fork": false,
    "created_at": "2016-12-14T13:34:26Z",
    "updated_at": "2016-12-14T13:34:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17929097,
    "owner_login": "sivi999",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17929097?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 232342999,
    "name": "TestPostman",
    "full_name": "jmr-1/TestPostman",
    "description": null,
    "fork": false,
    "created_at": "2020-01-07T14:32:54Z",
    "updated_at": "2020-01-07T14:39:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 55402017,
    "owner_login": "jmr-1",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/55402017?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 234736877,
    "name": "Postman-Test",
    "full_name": "dionysisr/Postman-Test",
    "description": "This repository was created by postman request",
    "fork": false,
    "created_at": "2020-01-18T13:13:38Z",
    "updated_at": "2020-01-18T13:13:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10625950,
    "owner_login": "dionysisr",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10625950?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "repo",
      "request",
      "repos",
      "repository"
    ]
  },
  {
    "id": 246107509,
    "name": "postman-test",
    "full_name": "guilherme-rojas-movile/postman-test",
    "description": null,
    "fork": false,
    "created_at": "2020-03-09T18:05:58Z",
    "updated_at": "2020-03-09T18:06:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 60233385,
    "owner_login": "guilherme-rojas-movile",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/60233385?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 187878348,
    "name": "Postman_Newman",
    "full_name": "YuriyPent/Postman_Newman",
    "description": "Install, run, pre-request script, test",
    "fork": false,
    "created_at": "2019-05-21T16:47:41Z",
    "updated_at": "2019-06-24T08:14:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12219558,
    "owner_login": "YuriyPent",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12219558?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "script"
    ]
  },
  {
    "id": 228181791,
    "name": "DZ8Postman",
    "full_name": "KenGooru/DZ8Postman",
    "description": "Postman Pre-request Script and Test",
    "fork": false,
    "created_at": "2019-12-15T12:38:09Z",
    "updated_at": "2019-12-15T12:48:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 57724915,
    "owner_login": "KenGooru",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/57724915?v=4",
    "pulled": 1,
    "tags": [
      "request"
    ]
  },
  {
    "id": 211079105,
    "name": "postman-test-scripts-poc",
    "full_name": "cboiam/postman-test-scripts-poc",
    "description": "Poc of the automated pre request scripts and test scripts in postman",
    "fork": false,
    "created_at": "2019-09-26T12:03:47Z",
    "updated_at": "2019-11-14T17:03:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38038695,
    "owner_login": "cboiam",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38038695?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "request",
      "script",
      "auto",
      "automat",
      "scripts",
      "automate",
      "automated",
      "pre request"
    ]
  },
  {
    "id": 183202101,
    "name": "gemma-postman-tests",
    "full_name": "VNG-Realisatie/gemma-postman-tests",
    "description": null,
    "fork": false,
    "created_at": "2019-04-24T10:02:56Z",
    "updated_at": "2019-12-16T14:01:15Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 34739001,
    "owner_login": "VNG-Realisatie",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34739001?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 219190469,
    "name": "SampleIntegrationTest",
    "full_name": "AntonTzvetanov/SampleIntegrationTest",
    "description": "Integration Tests usin request created from Postman ",
    "fork": false,
    "created_at": "2019-11-02T17:39:27Z",
    "updated_at": "2019-12-12T15:23:16Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 44603288,
    "owner_login": "AntonTzvetanov",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/44603288?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "request"
    ]
  },
  {
    "id": 168756533,
    "name": "Postman-Newman-API-Testing-FCOM-Test-Phrase-",
    "full_name": "shasha131/Postman-Newman-API-Testing-FCOM-Test-Phrase-",
    "description": "How to use postman/Newman to do data driven(large data file) API request and testing ",
    "fork": false,
    "created_at": "2019-02-01T20:31:43Z",
    "updated_at": "2019-02-01T20:35:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41800014,
    "owner_login": "shasha131",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/41800014?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "data",
      "testing",
      "request",
      "file",
      "to do",
      "drive",
      "driven"
    ]
  },
  {
    "id": 164997909,
    "name": "testrail",
    "full_name": "bharath411/testrail",
    "description": "This repository contains testrail restapi requests in postman collections.",
    "fork": false,
    "created_at": "2019-01-10T05:45:51Z",
    "updated_at": "2019-01-11T17:02:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 8632970,
    "owner_login": "bharath411",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8632970?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "collections",
      "repo",
      "request",
      "postman collection",
      "repos",
      "repository",
      "rest",
      "requests",
      "contain",
      "postman collections",
      "restapi",
      "testrail"
    ]
  },
  {
    "id": 151523020,
    "name": "sslcommerz_session_request_postman",
    "full_name": "NayemSayed/sslcommerz_session_request_postman",
    "description": "Postman example to initiate payment request to SSLCOMMERZ payment gateway using Sandbox(Test Environment)",
    "fork": false,
    "created_at": "2018-10-04T05:30:17Z",
    "updated_at": "2018-10-04T05:37:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29351158,
    "owner_login": "NayemSayed",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29351158?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "example",
      "gateway",
      "payment",
      "initiate"
    ]
  },
  {
    "id": 197917540,
    "name": "Complaint-Lodging",
    "full_name": "Shekhar-Shashank/Complaint-Lodging",
    "description": "It is an android complaint lodging app in which the front end is designed in android studio using java language. The restful API that the app interacts with is made using python flask. The database used is sqlite. And the language used to parse the data from the server is Json. For testing the requests like get and post we used postman as a dummy request generator.",
    "fork": false,
    "created_at": "2019-07-20T10:50:35Z",
    "updated_at": "2019-07-26T06:59:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52148699,
    "owner_login": "Shekhar-Shashank",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/52148699?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "data",
      "testing",
      "request",
      "rest",
      "server",
      "database",
      "requests",
      "sign",
      "interact",
      "front",
      "java",
      "restful",
      "python",
      "generator",
      "lang",
      "design",
      "parse",
      "flask",
      "designed",
      "android",
      "front end",
      "plain",
      "language",
      "dummy",
      "sqlite",
      "studio",
      "complaint"
    ]
  },
  {
    "id": 249174449,
    "name": "postmanJson",
    "full_name": "PinkaCourt/postmanJson",
    "description": null,
    "fork": false,
    "created_at": "2020-03-22T12:03:41Z",
    "updated_at": "2020-03-22T12:03:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 50292671,
    "owner_login": "PinkaCourt",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/50292671?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 91568417,
    "name": "PostmanJson",
    "full_name": "Angael/PostmanJson",
    "description": null,
    "fork": false,
    "created_at": "2017-05-17T11:23:35Z",
    "updated_at": "2017-05-17T11:23:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21974933,
    "owner_login": "Angael",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/21974933?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 120617349,
    "name": "Flask-Parsing-JSON-data",
    "full_name": "umer7/Flask-Parsing-JSON-data",
    "description": "JSON data from a POST request in Flask",
    "fork": false,
    "created_at": "2018-02-07T13:16:51Z",
    "updated_at": "2018-02-07T13:26:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24353882,
    "owner_login": "umer7",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/24353882?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request"
    ]
  },
  {
    "id": 114962946,
    "name": "tcp-postman",
    "full_name": "neshoj/tcp-postman",
    "description": "Angular4 implementation of an app that sends JSON request to a back end server that initiates tcp requests to a target server. Best for POS driven solutions.",
    "fork": false,
    "created_at": "2017-12-21T04:35:10Z",
    "updated_at": "2018-10-12T06:13:45Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 19221354,
    "owner_login": "neshoj",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19221354?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "server",
      "requests",
      "implement",
      "send",
      "implementation",
      "drive",
      "solution",
      "driven",
      "sends",
      "back end",
      "solutions",
      "initiate"
    ]
  },
  {
    "id": 55680778,
    "name": "xpath-postman",
    "full_name": "raviteja548/xpath-postman",
    "description": "Involves a sequence of steps in conversion of set of set of xpath to json request and further this request will be embedded in postman",
    "fork": false,
    "created_at": "2016-04-07T09:14:47Z",
    "updated_at": "2016-04-07T09:17:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6497927,
    "owner_login": "raviteja548",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6497927?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "json",
      "version",
      "path",
      "sequence",
      "steps",
      "embedded"
    ]
  },
  {
    "id": 193157969,
    "name": "jsonwebtoken",
    "full_name": "gloryer/jsonwebtoken",
    "description": "A demo back end server exposes user registration endpoint, user authentication endpoint, token endpoint and resource endpoint. The resource endpoint is protected by the JWT token. Only the client who possesses the valid token can access the resource. To get a token from the server, the client must authenticates itself to the server. To request the resource in the server, the client issue an http GET request to the resource endpoint, the server will verify the recieved jwt token. Once the token is valid, the server will send back the user information which indicated in the jwt token.  Front-end has not been implemented so far. The back-end is tested using Postman.",
    "fork": false,
    "created_at": "2019-06-21T20:43:09Z",
    "updated_at": "2019-06-21T20:52:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18592154,
    "owner_login": "gloryer",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/18592154?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "form",
      "server",
      "client",
      "http",
      "user",
      "implement",
      "format",
      "auth",
      "endpoint",
      "tested",
      "demo",
      "send",
      "source",
      "authentication",
      "info",
      "access",
      "infor",
      "resource",
      "information",
      "token",
      "esse",
      "implemented",
      "expose",
      "been",
      "authenticate",
      "exposes",
      "back end",
      "verify",
      "issue",
      "registration",
      "recieve"
    ]
  },
  {
    "id": 216589130,
    "name": "Get-and-post",
    "full_name": "Aizaz299/Get-and-post",
    "description": "Simple code for the understanding of the get and post requests. I used json middleware. I creating new course as well by using post request through postman. ",
    "fork": false,
    "created_at": "2019-10-21T14:29:37Z",
    "updated_at": "2019-10-22T14:03:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13184390,
    "owner_login": "Aizaz299",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13184390?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "json",
      "requests",
      "code",
      "creating",
      "course",
      "under",
      "middleware",
      "understanding"
    ]
  },
  {
    "id": 119091462,
    "name": "Zadanie_17_5",
    "full_name": "martinproxy0/Zadanie_17_5",
    "description": " 17. ExpressJS - ekspresowe tworzenie aplikacji w NodeJS Wyzwania: Dowiesz siÄ™ czym jest ExpressJS Nauczysz siÄ™ korzystaÄ‡ z routingu Poznasz czym sÄ… szablony 17.1. Wprowadzenie do Expressa Express jest jednym z najpopularniejszych frameworkÃ³w dla aplikacji pisanych w Node.js. Jest bardzo lekki i pozwala na lepszÄ… organizacjÄ™ aplikacji w modelu MVC. Ok, zwolnijmy. JuÅ¼ na samym starcie pojawiÅ‚y siÄ™ dwa pojÄ™cia, ktÃ³rych do tej pory nie omÃ³wiliÅ›my zbyt dokÅ‚adnie: framework i MVC. Na poczÄ…tku przypomnijmy sobie czym jest framework.  Czym sÄ… frameworki? Framework to swego rodzaju szkielet, na ktÃ³rym opieramy budowÄ™ naszej aplikacji. Jest pewnym poziomem abstrakcji, na ktÃ³rej konstruujemy naszÄ… aplikacjÄ™.  Czym jest abstrakcja? Abstrakcja w inÅ¼ynierii oprogramowania to technika, dziÄ™ki ktÃ³rej jesteÅ›my w stanie zapanowaÄ‡ nad zÅ‚oÅ¼onoÅ›ciÄ… systemu. Najzwyczajniej w Å›wiecie nie da siÄ™ myÅ›leÄ‡ na wielu pÅ‚aszczyznach na raz, dlatego programiÅ›ci dzielÄ… problemy na pewne poziomy i to na nich rozwiÄ…zujÄ… mniejsze problemy. PrzykÅ‚adowo - programista korzystajÄ…cy z Reacta nie martwi siÄ™ o niÅ¼szy poziom abstrakcji, z ktÃ³rego nieÅ›wiadomie korzysta uÅ¼ywajÄ…c Reacta. KorzystajÄ…c z komputera takÅ¼e nie zastanawiamy siÄ™ za bardzo co dzieje siÄ™ w Å›rodku procesora czy teÅ¼ w jaki sposÃ³b jest skonstruowany. Tym poziomem abstrakcji po prostu nie zawracamy sobie gÅ‚owy. UÅ¼ywajÄ…c JavaScriptu nie myÅ›limy w jaki sposÃ³b parser analizuje skÅ‚adniÄ™ jÄ™zyka. JeÅ›li nie jest to nam potrzebne, to moÅ¼emy zajÄ…Ä‡ siÄ™ tym, co jest dla nas naprawdÄ™ istotne - pisaniem aplikacji internetowych!  Express to wÅ‚aÅ›nie kolejny, wyÅ¼szy poziom abstrakcji, dziÄ™ki ktÃ³remu moÅ¼emy skupiÄ‡ siÄ™ na wÅ‚aÅ›ciwym problemie. Zawiera zbiÃ³r generycznych (moÅ¼liwych do zastosowania w wielu miejscach / uniwersalnych) funkcjonalnoÅ›ci, ktÃ³re powtarzajÄ… siÄ™ w obrÄ™bie kaÅ¼dej aplikacji. CaÅ‚y zamysÅ‚ frameworka opiera siÄ™ na zasadzie - nie wymyÅ›laj koÅ‚a na nowo, bo moÅ¼na budowaÄ‡ na podstawie dobrych, uniwersalnych rozwiÄ…zaÅ„. Po wykonaniu tego samego zadania wiele razy, czÅ‚owiek instynktownie szuka sposobu na automatyzacjÄ™ problemu - szczegÃ³lnie leniwy programista. :)  Framework ma niestety jednÄ… wadÄ™, ktÃ³ra bywa momentami rÃ³wnieÅ¼ zaletÄ… - narzuca programiÅ›cie sposÃ³b w jaki naleÅ¼y rozwiÄ…zaÄ‡ problem. Takie podejÅ›cie z jednej strony nieco nas ogranicza, bo nie pozwala nam 'grzebaÄ‡' w rozwiÄ…zaniu, a z drugiej strony zmniejsza iloÅ›Ä‡ miejsc, w ktÃ³rych moglibyÅ›my popeÅ‚niÄ‡ jakiÅ› bÅ‚Ä…d. ZaletÄ… takiego podejÅ›cia jest teÅ¼ to, Å¼e programiÅ›ci korzystajÄ…cy z frameworkÃ³w czÄ™sto borykajÄ… siÄ™ z podobnymi problemami, przez co Å‚atwo jest znaleÅºÄ‡ rozwiÄ…zania, bo ktoÅ› juÅ¼ na pewno zetknÄ…Å‚ siÄ™ z czymÅ›, co sprawia nam kÅ‚opot :)  WracajÄ…c do Expressa - jest on niewielkim frameworkiem, ktÃ³ry daje programiÅ›cie przyjemnÄ… podstawkÄ™ do tworzenia aplikacji, ale nie narzuca Å¼adnych praktyk - moÅ¼e o tym Å›wiadczyÄ‡ chociaÅ¼by fakt, Å¼e wiele znanych frameworkÃ³w opiera swojÄ… budowÄ™ na Express. MoÅ¼na do nich zaliczyÄ‡ przykÅ‚adowo Loopbacka, Sailsa czy Krakena.  Model-View-Controller Ok, wiemy juÅ¼ czym jest framework - pora na pojÄ™cie MVC :) Jest to skrÃ³t od ang. Model View Controller (Model Widok Kontroler). Jest jednym z najczÄ™Å›ciej przewijajÄ…cych siÄ™ wzorcÃ³w architektonicznych w internecie. PopularnoÅ›ciÄ… pomaÅ‚u wypiera go architektura Flux, o ktÃ³rej coraz czÄ™Å›ciej sÅ‚ychaÄ‡ (szczegÃ³lnie w Å›rodowisku Reacta), ale o tym wzorcu powiemy sobie jeszcze przy okazji omawiania Reduxa - wrÃ³Ä‡my do MVC.  GÅ‚Ã³wnym zaÅ‚oÅ¼eniem przyjÄ™tym podczas projektowania MVC byÅ‚o oddzielenie warstwy prezentacji od logiki biznesowej aplikacji. To podejÅ›cie umoÅ¼liwia tworzenie narzÄ™dzi dziaÅ‚ajÄ…cych bez graficznego interfejsu (zastÄ™puje go wtedy tzw. Command Line Interface, a.k.a. CLI) i jest dalej popularne w Å›rodowisku Unixowym. Tak wiÄ™c:  Model jest reprezentacjÄ… logiki aplikacji / problemu z jakim siÄ™ zmagamy / domenÄ…. Widok opisuje w jaki sposÃ³b coÅ› wyÅ›wietliÄ‡. W React sÄ… to komponenty (szczegÃ³lnie te prezentacyjne). Kontroler przyjmuje dane od uÅ¼ytkownika aplikacji i reaguje na jego dziaÅ‚ania w obrÄ™bie widoku. Aktualizuje widok i model aplikacji. O samej architekturze moÅ¼na napisaÄ‡ osobny moduÅ‚ tym bardziej, Å¼e jak juÅ¼ wczeÅ›niej wspomnieliÅ›my bardzo czÄ™sto przewija siÄ™ on w Å›rodowisku front-end developerÃ³w i jest czÄ™Å›ciÄ… skÅ‚adowÄ… wielu frameworkÃ³w. Sama implementacja MVC wymaga wiedzy na temat programowania obiektowego i wzorcÃ³w projektowych. Zainteresowanych zapraszam do przeczytania tej ksiÄ…Å¼ki na temat wzorcÃ³w projektowych stosowanych w JavaScripcie.  Express dostarcza wielu funkcjonalnoÅ›ci do tworzenia aplikacji webowych. Jak juÅ¼ wspomniaÅ‚em, uÅ‚atwia on przede wszystkim szybki rozwÃ³j aplikacji opartych na Node.js. Podstawowymi cechami tego frameworka sÄ…:  serwowanie plikÃ³w statycznych za pomocÄ… jednej komendy konfigurowanie middleware, czyli poÅ›rednika miÄ™dzy Å¼Ä…daniem a odpowiedziÄ… w momencie, kiedy uÅ¼ytkownik wykonuje jakieÅ› akcje, np. wysyÅ‚a formularz, middleware moÅ¼e wykonaÄ‡ pewne czynnoÅ›ci zanim dane zostanÄ… zapisane. Nie sprowadza siÄ™ to oczywiÅ›cie tylko do zapisu danych, ale szerzej na temat tego zagadnienia powiemy sobie w dalszym rozdziale definiowanie tablicy routingu, czyli Å›cieÅ¼ek (adresÃ³w), ktÃ³re wyÅ›wietlajÄ… odpowiednie treÅ›ci, przyjmujÄ… i zapisujÄ… dane, bÄ…dÅº odpytane o dane zwracajÄ… je. BazujÄ… na protokole HTTP oraz URI (ang. Uniform Resource Identifier) pozwala na dynamiczne tworzenie stron HTML bazujÄ…cych na argumentach przekazanych do istniejÄ…cych szablonÃ³w Nie przejmuj siÄ™, jeÅ›li powyÅ¼sze opisy wydajÄ… siÄ™ byÄ‡ nieco zagmatwane. Kolejne rozdziaÅ‚y rozjaÅ›niÄ… sprawÄ™! Zanim jednak przejdziemy do omawiania poszczegÃ³lnych funkcjonalnoÅ›ci Expressa, przeprowadzimy proces instalacji.  JeÅ›li masz wÄ…tpliwoÅ›ci do powyÅ¼szego materiaÅ‚u, to - zanim zatwierdzisz - zapytaj na czacie :) ZapoznaÅ‚e(a)m siÄ™! 17.2. Instalacja ExpressJS Framework Express instalujemy uÅ¼ywajÄ…c npm, analogicznie do innych pakietÃ³w, ktÃ³re dodawaliÅ›my juÅ¼ we wczeÅ›niejszych moduÅ‚ach. Dla przypomnienia, wystarczy, Å¼e zainicjujesz swÃ³j projekt - npm init, a nastÄ™pnie uÅ¼yjesz komendy npm install express --save, ktÃ³ra zapisze zainstalowany pakiet w katalogu node_modules/ i doda go do sekcji dependencies w pliku package.json.  Razem z Expressem naleÅ¼y zainstalowaÄ‡ jeszcze jeden waÅ¼ny moduÅ‚ - body-parser, ktÃ³ry jest pakietem pozwalajÄ…cym na obsÅ‚ugÄ™ rÃ³Å¼nych formatÃ³w danych w middleware takich jak JSON, text czy tzw. surowe dane (ang. raw data). Aby go zainstalowaÄ‡, wpisz npm install body-parser --save.  Pierwsza aplikacja w ExpressJS SprawdÅºmy teraz, czy wszystko dziaÅ‚a tak jak powinno. Testowa aplikacja, jakÄ… stworzymy przy uÅ¼yciu Expressa, bÄ™dzie przedstawiaÅ‚a podstawowÄ… zasadÄ™ dziaÅ‚ania tego frameworka. Aplikacja uruchomi serwer oraz bÄ™dzie nasÅ‚uchiwaÄ‡ na porcie 3000 w oczekiwaniu na poÅ‚Ä…czenie - dokÅ‚adnie w taki sam sposÃ³b, jak w przypadku serwera HTTP napisanego w â€œczystym\" Node.js. NasÅ‚uchiwanie oznacza nic innego jak oczekiwanie na poÅ‚Ä…czenie - po wystÄ…pieniu Å¼Ä…dania, serwer odpowie nam klasycznym â€œHello world\".  Zanim zaczniemy tworzyÄ‡ aplikacjÄ™, musimy wytÅ‚umaczyÄ‡ sobie pewne pojÄ™cia.  Opis pojÄ™cia routingu Routing to sposÃ³b okreÅ›lania jak aplikacja bÄ™dzie odpowiadaÄ‡ na Å¼Ä…dania klienta na dane endpointy przy uÅ¼yciu konkretnych metod HTTP. Przypomnijmy sobie w jaki sposÃ³b wyglÄ…daÅ‚y metody HTTP:  GET - najprostsza z metod HTTP - sÅ‚uÅ¼y do pobierania zasobÃ³w z serwera. Pobranymi zasobami mogÄ… byÄ‡ np. pliki HTML, CSS, JavaScript czy obiekty JSON / XML. POST - ta metoda jest uÅ¼ywana do wysyÅ‚ania danych do serwera. Stosuje siÄ™ jÄ… np. przy formularzach lub przy wstawianiu zdjÄ™Ä‡ i wysyÅ‚aniu ich jako zaÅ‚Ä…cznik. Zwykle dane te wysyÅ‚ane sÄ… jako para klucz-wartoÅ›Ä‡. PUT - dziaÅ‚a podobnie jak POST, czyli rÃ³wnieÅ¼ sÅ‚uÅ¼y do wysyÅ‚ania danych. RÃ³Å¼nicÄ… jest ograniczenie do wysÅ‚ania tylko jednej porcji danych - np. jednego pola. Metoda ta najczÄ™Å›ciej uÅ¼ywana jest do aktualizacji istniejÄ…cych danych DELETE - metoda, ktÃ³ra sÅ‚uÅ¼y do usuwania danych z serwera. Chodzi oczywiÅ›cie o dane, ktÃ³re zostaÅ‚y wskazane przy wysyÅ‚aniu Å¼Ä…dania. Kolejnym pojÄ™ciem jest URI (nazywane rÃ³wnieÅ¼ PATH) - jest to wÅ‚aÅ›nie wspomniany wczeÅ›niej endpoint, ktÃ³ry zawiera polecenia do wykonania gdy zostanie wywoÅ‚any przez Å¼Ä…danie.  Czas start! Na poczÄ…tek stwÃ³rzmy plik server.js w katalogu z projektem. Po zainstalowaniu powyÅ¼szych zaleÅ¼noÅ›ci, drzewo projektu powinno wyglÄ…daÄ‡ w nastÄ™pujÄ…cy sposÃ³b:   Aby mieÄ‡ moÅ¼liwoÅ›Ä‡ skorzystania z zainstalowanych zaleÅ¼noÅ›ci, na poczÄ…tku naleÅ¼y zadeklarowaÄ‡ zmiennÄ…, w ktÃ³rej bÄ™dziemy przechowywaÄ‡ funkcjonalnoÅ›ci pakietu Expressa.  var express = require('express'); Jak widzisz, kaÅ¼da paczka JS'a dziaÅ‚a dokÅ‚adnie w taki sam sposÃ³b. Koncepcja moduÅ‚Ã³w bÄ™dzie przewijaÄ‡ siÄ™ aÅ¼ do koÅ„ca tego kursu. NastÄ™pnym krokiem bÄ™dzie stworzenie aplikacji Express:  var app = express(); NaszÄ… aplikacjÄ™ przypisaliÅ›my do zmiennej app. Teraz moÅ¼emy sprawiÄ‡, aby odpowiadaÅ‚a prostym Hello world w momencie, w ktÃ³rym odbierzemy wysÅ‚ane zapytanie GET na adres strony domowej:  app.get('/', function(req, res) {     res.send('Hello world'); }); PowyÅ¼szy kod rejestruje pierwszy routing (proces przetwarzania otrzymanego adresu Å¼Ä…dania i na jego podstawie decydowanie, co powinno zostaÄ‡ uruchomione) na wysÅ‚ane Å¼Ä…danie GET po wejÅ›ciu na stronÄ™ gÅ‚Ã³wnÄ… ( http://localhost:3000/ ). Jako callback na wystÄ…pienie tego zdarzenia wywoÅ‚ywana jest funkcja, ktÃ³ra w przypadku udanej odpowiedzi wyÅ›le wiadomoÅ›Ä‡ Hello world.  To jednak jeszcze nie koniec. ZarejestrowaliÅ›my obsÅ‚ugÄ™ pierwszego routingu, ale naleÅ¼y zainicjowaÄ‡ nasÅ‚uchiwanie serwera na to i inne zdarzenia. Dopiszmy wiÄ™c:  var server = app.listen(3000, function() {     console.log('PrzykÅ‚adowa aplikacja nasÅ‚uchuje na http://localhost:3000'); }); Po zapisaniu powyÅ¼szego kodu, naleÅ¼y uruchomiÄ‡ go komendÄ… node server.js (lub za pomocÄ… Nodemona, ktÃ³rego poznaliÅ›my w pierwszym module) - teraz po ponownym wejÅ›ciu na adres http://localhost:3000/ powinniÅ›my zobaczyÄ‡ nastÄ™pujÄ…cy widok:   Jest to znak, Å¼e nasza aplikacja dziaÅ‚a!  JeÅ›li masz wÄ…tpliwoÅ›ci do powyÅ¼szego materiaÅ‚u, to - zanim zatwierdzisz - zapytaj na czacie :) ZapoznaÅ‚e(a)m siÄ™! 17.3. Route, czyli Å›cieÅ¼ka wyznaczona dla uÅ¼ytkownika aplikacji Wykorzystanie endpointÃ³w RozwiÅ„my teraz trochÄ™ aplikacjÄ™ stworzonÄ… w poprzednim podrozdziale. Aktualnie kod w pliku server.js wyglÄ…da nastÄ™pujÄ…co:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('PrzykÅ‚adowa aplikacja nasÅ‚uchuje na http://localhost:3000'); }); Endpointy statyczne Na poczÄ…tek zmodyfikujemy lekko Å¼Ä…danie GET i do strony gÅ‚Ã³wnej zamiast Hello world! wpiszmy Hello GET! oraz dodamy linijkÄ™ drukujÄ…cÄ… otrzymane Å¼Ä…danie (po stronie serwera) jak poniÅ¼ej:  app.get('/', function (req, res) {     console.log('OtrzymaÅ‚em Å¼Ä…danie GET do strony gÅ‚Ã³wnej');     res.send('Hello GET!'); }); Warto w tym miejscu wspomnieÄ‡ o narzÄ™dziu Postman - moÅ¼esz pobraÄ‡ je ze strony https://www.getpostman.com/. UÅ¼ywa siÄ™ go do testowania endpointÃ³w. Postman jest prosty i intuicyjny w obsÅ‚udze - wystarczy, Å¼e podasz adres oraz metodÄ™ HTTP, jakiej chcesz uÅ¼yÄ‡ w odpowiednich polach iâ€¦ juÅ¼ :) Pozostaje tylko wysÅ‚anie requesta i sprawdzenie czy response zgadza siÄ™ z naszymi oczekiwaniami.   Dodajmy teÅ¼ inne metody HTTP do naszej aplikacji. Zacznijmy od POST. Dla tej i kolejnej metody wykonamy podobne operacje. Chodzi tutaj o to, aby zaobserwowaÄ‡ dziaÅ‚anie zarejestrowanych endpointÃ³w.  app.post('/', function (req, res) {     console.log('OtrzymaÅ‚em Å¼Ä…danie POST do strony gÅ‚Ã³wnej');     res.send('Hello POST!'); }); Do tego czasu oba nasze zapytania kierowaliÅ›my do strony domowej. Dodajmy teraz obsÅ‚ugÄ™ Å¼Ä…dania z metodÄ… DELETE oraz innÄ… Å›cieÅ¼kÄ…:  app.delete('/del_user', function (req, res) {     console.log('OtrzymaÅ‚em Å¼Ä…danie DELETE do strony /del_user');     res.send('Hello DELETE!'); }); DLA CHÄ˜TNYCH: Przetestuj powyÅ¼sze zapytanie w Postmanie! :)  Dla praktyki, dodajmy jeszcze kilka innych endpointÃ³w, a nastÄ™pnie przejdÅºmy do testowania.  app.get('/list_user', function (req, res) {     console.log('OtrzymaÅ‚em Å¼Ä…danie GET do strony /list_user');     res.send('Strona z listÄ… uÅ¼ytkownikÃ³w!'); });  app.get('/ab*cd', function(req, res) {     console.log('OtrzymaÅ‚em Å¼Ä…danie GET do strony /ab*cd');     res.send('WzÃ³r pasuje'); }); Po dodaniu powyÅ¼szych fragmentÃ³w kodu zapisz plik server.js, a nastÄ™pnie ponownie uÅ¼yj komendy node server.js chyba, Å¼e uÅ¼ywasz Nodemona :)  Zerknijmy na endpoint /list_user   OtrzymaliÅ›my to, czego oczekiwaliÅ›my. SprawdÅºmy jeszcze inne.    JeÅ›li jednak uÅ¼yliÅ›my endpointa, ktÃ³rego nie zdefiniowaliÅ›my, otrzymamy odpowiedÅº jak na ostatnim obrazku.  Endpointy dynamiczne Istnieje rÃ³wnieÅ¼ inny typ endpointÃ³w, ktÃ³re nazywa siÄ™ dynamicznymi. UÅ¼ywanie ich pozwala na przekazywanie parametrÃ³w i bazowanie na nich. WrÃ³Ä‡my na moment do kodu stworzonego na samym poczÄ…tku:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('PrzykÅ‚adowa aplikacja nasÅ‚uchuje na http://localhost:3000'); }); Najpierw zmodyfikujemy trochÄ™ bazowy kod. UsuÅ„my linijki 8-10, ktÃ³re miaÅ‚y nam tylko pokazaÄ‡ podstawowe informacje na temat serwera. Zamiast tego napiszmy po prostu: app.listen(3000);  Tworzenie dynamicznego routingu pozwala na przekazywanie parametrÃ³w, wiÄ™c sprÃ³bujmy najpierw z przykÅ‚adowym id. Zamiast odwoÅ‚aÄ‡ siÄ™ do strony domowej ('/'), odwoÅ‚ajmy siÄ™ do zmiennego parametru id. Parametr zmienny od statycznego rozrÃ³Å¼nia siÄ™ poprzez dodanie dwukropka (:) przed nazwÄ™. W naszym przykÅ‚adzie endpoint bÄ™dzie wiÄ™c wyglÄ…daÅ‚ nastÄ™pujÄ…co:  /:id ZmieÅ„my jeszcze odpowiedÅº z Hello world na 'Identyfikator, ktÃ³ry zostaÅ‚ dopisany to ' + req.params.id.  Czym jest req.params.id? req jest obiektem reprezentujÄ…cym zapytanie HTTP (ang. request). Posiada on rÃ³Å¼ne parametry, jak na przykÅ‚ad body (czyli ciaÅ‚o zapytania), nagÅ‚Ã³wki HTTP oraz parametry (params), ktÃ³re mamy zamiar odczytaÄ‡.  Parametr, ktÃ³ry wstawiliÅ›my jako czÄ™Å›Ä‡ adresu w metodzie GET, przekazujemy jako id. W poniÅ¼szym przypadku wyÅ›wietli siÄ™ komunikat Identyfikator ktÃ³ry zostaÅ‚ dopisany to 123, o ile zapytanie wysÅ‚ano na adres http://localhost:3000/123.   PoprÃ³buj z rÃ³Å¼nymi innymi parametrami i sprawdÅº czy aplikacja dziaÅ‚a tak, jak tego oczekujesz.  ObsÅ‚uga bÅ‚Ä™du 404 za pomocÄ… ExpressJS Co jeÅ›li serwer nie rozpozna Å¼Ä…dania? W Expressie odpowiedÅº 404 nie jest wynikiem bÅ‚Ä™du, wiÄ™c nie jest wyÅ‚apywany w trakcie dziaÅ‚ania aplikacji. Spowodowane jest to tym, Å¼e 404 zwykle oznacza brak moÅ¼liwoÅ›ci wykonania danej czynnoÅ›ci, a nie bÅ‚Ä…d wystÄ™pujÄ…cy z powodu jakiejÅ› 'wpadki' programisty. Innymi sÅ‚owy, Express wykonaÅ‚ wszystkie funkcje middleware (ktÃ³re poznamy w kolejnym rozdziale) oraz route'y i dopiero wtedy dowiedziaÅ‚ siÄ™, Å¼e Å¼aden z nich nie odpowiedziaÅ‚ na Å¼Ä…danie - taki przypadek moÅ¼emy obsÅ‚uÅ¼yÄ‡ poprzez dodanie funkcji middleware na samym koÅ„cu (poniÅ¼ej pozostaÅ‚ych funkcji), aby obsÅ‚ugiwaÅ‚a status 404.  PowrÃ³Ä‡my znÃ³w do poprzedniego szablonu z metodÄ… GET na stronÄ™ domowÄ… ('/'), ktÃ³ra zwraca nam Hello world!. Dopiszmy teraz metodÄ™ middleware, ktÃ³ra obsÅ‚uÅ¼y nam bÅ‚Ä…d 404.  Na samym koÅ„cu, poniÅ¼ej fragmentu z nasÅ‚uchiwaniem dodajmy obsÅ‚ugÄ™ odpowiedzi 404:  app.use(function (req, res, next) {     res.status(404).send('Wybacz, nie mogliÅ›my odnaleÅºÄ‡ tego, czego Å¼Ä…dasz!') }); Po ponownym uruchomieniu skryptu, w przeglÄ…darce powinieneÅ› zobaczyÄ‡ Hello world!. SprÃ³buj teraz dopisaÄ‡ coÅ› na koniec adresu (tak jak w poprzednim rozdziale dopisaliÅ›my id). PowinieneÅ› otrzymaÄ‡ nastÄ™pujÄ…cy komunikat:   Parametr next, ktÃ³ry przekazujemy do funkcji jest funkcjÄ…, ktÃ³ra pozwala â€œiÅ›Ä‡ dalej\" do kolejnej funkcji middleware lub zakoÅ„czenia Å¼Ä…dania.  MoÅ¼na w ten sposÃ³b stworzyÄ‡ takÅ¼e obsÅ‚ugÄ™ pozostaÅ‚ych bÅ‚Ä™dÃ³w. NajczÄ™Å›ciej obsÅ‚ugiwane bÅ‚Ä™dy to:  400 - bad request - wystÄ™puje gdy serwer nie moÅ¼e przetworzyÄ‡ zapytania 401 - unauthorized - wystÄ™puje gdy wymagane jest uwierzytelnienie, a nie zostaÅ‚o dostarczone 403 - forbidden - Å¼Ä…danie jest poprawne, jednak serwer odmawia odpowiedzi, moÅ¼e to wystÄ…piÄ‡ w przypadku gdy np. uÅ¼ytkownik jest zalogowany ale nie ma uprawnieÅ„ do wykonania Å¼Ä…dania 404 - not found - zasoby nie zostaÅ‚y znalezione 500 - internal server error - wystÄ™puje gdy wystÄ™pujÄ… nieznane warunki i nie ma Å¼adnej konkretnej wiadomoÅ›ci Zadanie: Operacje CRUD na pliku JSON StwÃ³rzmy teraz aplikacjÄ™, ktÃ³ra bÄ™dzie otwieraÄ‡ zewnÄ™trzne pliki .json oraz edytowaÄ‡ je. Zanim zaczniemy, w folderze projektu stwÃ³rz plik server.js, a nastÄ™pnie zainicjalizuj projekt poprzez wpisanie npm init w konsoli.  PrzejdÅºmy do pobrania potrzebnych zaleÅ¼noÅ›ci - tym razem bÄ™dzie nam potrzebny Express oraz body-parser. Jak siÄ™ zapewne domyÅ›lasz, moÅ¼esz zainstalowaÄ‡ je za pomocÄ… komendy npm install --save express body-parser. Po pobraniu paczek, moÅ¼emy Å›miaÅ‚o przejÅ›Ä‡ do pisania kodu - na poczÄ…tek przypisz zaleÅ¼noÅ›ci do zmiennych w pliku server.js. Dodaj takÅ¼e linijkÄ™ var fs = require('fs') - fs bÄ™dzie nam potrzebny do operacji na plikach. Nie musimy go instalowaÄ‡, bo jest on wbudowany w Node :)  Skoro zaleÅ¼noÅ›ci mamy juÅ¼ zaÅ‚atwione, zadeklaruj zmiennÄ… app, ktÃ³ra wywoÅ‚a funkcjÄ™ express() oraz zmiennÄ… stringifyFile (na razie bez zadeklarowanej wartoÅ›ci).  TuÅ¼ pod deklaracjÄ… zmiennych dodaj takÅ¼e linijkÄ™ app.use(bodyParser.json()); - to pozwoli Ci wykorzystaÄ‡ middleware body-parser, ktÃ³re zainstalowaliÅ›my przed chwilÄ…. body-parser jest nam potrzebny, aby korzystaÄ‡ z formatu application/json - pÃ³ki co nie przejmuj siÄ™ pojÄ™ciem middleware, zajmiemy siÄ™ nim nieco dalej w tym kursie :)  StwÃ³rz teraz endpoint GET /getNote, gdzie po wywoÅ‚aniu zostanie wczytany TwÃ³j zewnÄ™trzny plik JSON oraz wyÅ›wietlona zostanie jego zawartoÅ›Ä‡. PrzykÅ‚Ä…dowy plik test.json:  {\"menu\": {    \"id\": \"file\",    \"value\": \"File\",    \"popup\": {      \"menuitem\": [        {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},        {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},        {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}      ]    }  }} Metoda ktÃ³ra pozwoli nam na odczytanie pliku to readFile, ktÃ³rÄ… moÅ¼na wywoÅ‚aÄ‡ z zadeklarowanego wczeÅ›niej fs. Jako parametry przyjmuje ona najpierw plik, nastÄ™pnie opcje (np. kodowanie) i funkcjÄ™, ktÃ³ra wywoÅ‚a siÄ™ po zaÅ‚adowaniu. W naszym przypadku bÄ™dzie to wiÄ™c nastÄ™pujÄ…cy kod: fs.readFile('./test.json', 'utf8', function(err, data) {     if (err) throw err;     stringifyFile = data     res.send(data); }); Teraz pora na stworzenie endpointa, ktÃ³ry po wywoÅ‚aniu nadpisze nam podany plik. Stworzymy do tego dynamiczny endpoint, ktÃ³ry dopisze do pliku string, ktÃ³ry przekaÅ¼emy jako parametr. StwÃ³rz tym razem POST na /updateNote/:note. Po jego wywoÅ‚aniu tekst, ktÃ³ry znajduje siÄ™ w miejscu /:note powinniÅ›my dopisaÄ‡ do wczytanego pliku poprzez dodanie req.params.note do zmiennej stringifyFile, ktÃ³ra przechowuje aktualnÄ… zawartoÅ›Ä‡ pliku.  Po przypisaniu powyÅ¼szej zmiennej, naleÅ¼y ponownie odwoÅ‚aÄ‡ siÄ™ do moduÅ‚u fs tym razem uÅ¼ywajÄ…c metody writeFile. PomoÅ¼e nam w tym nastÄ™pujÄ…cy fragment kodu:  fs.writeFile('./test.json', stringifyFile, function(err) {     If (err) throw err;     console.log('file updated'); }); Na koÅ„cu pliku dodaj nasÅ‚uchiwanie na porcie 3000.  Zapisz plik i uruchom aplikacjÄ™ wpisujÄ…c node server.js w konsoli.  OtwÃ³rz Postmana, ustaw metodÄ™ zapytania na GET, a w pole adresu wpisz http://localhost:3000/getNote. Jako response powinieneÅ› otrzymaÄ‡ TwÃ³j stworzony wczeÅ›niej plik JSON. Po zmianie z GET na POST oraz wpisaniu /updateNote/test zamiast /getNote oraz wysÅ‚aniu requesta, TwÃ³j plik JSON powinien zostaÄ‡ zaktualizowany o sÅ‚owo test :)  Po ukoÅ„czeniu zadania, wrzuÄ‡ swÃ³j kod na Githuba i przekaÅ¼ link do repozytorium mentorowi :)  PodglÄ…d zadania  https://github.com/martinproxy0/Zadanie_17_3.git   Wyslij link  17.4. Serwowanie plikÃ³w statycznych Express posiada wbudowanÄ… moÅ¼liwoÅ›Ä‡ serwowania plikÃ³w statycznych - takimi plikami sÄ… na przykÅ‚ad obrazki, pliki CSS czy JS. Aby serwowaÄ‡ te pliki statycznie, wystarczy uÅ¼yÄ‡ express.static. Pliki statyczne to pliki, ktÃ³re zostajÄ… dostarczone do klienta bez generowania, modyfikacji czy przetwarzania - jedyne, co trzeba z nimi zrobiÄ‡, to przekazaÄ‡ nazwÄ™ katalogu, w ktÃ³rym sÄ… przetrzymywane, do express.static - to wystarczy aby zaczÄ…Ä‡ je serwowaÄ‡. SprÃ³bujmy przedstawiÄ‡ to sobie na przykÅ‚adzie.  ZaÅ‚Ã³Å¼my, Å¼e przetrzymujesz swoje zdjÄ™cia i pliki CSS w katalogu assets/. Aby zaczÄ…Ä‡ je serwowaÄ‡, moÅ¼esz wiÄ™c uÅ¼yÄ‡ nastÄ™pujÄ…cej linijki:  app.use(express.static('assets')); Zmodyfikujmy wiÄ™c caÅ‚kowicie naszÄ… aplikacjÄ™. Najpierw stwÃ³rzmy w katalogu projektu nowy katalog o nazwie assets/. WrzuÄ‡my do niego jakiekolwiek zdjÄ™cie/obrazek. W pliku server.js wrÃ³Ä‡my do poprzedniego stanu (zanim zaczÄ™liÅ›my zajmowaÄ‡ siÄ™ routingiem):  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, 'localhost', function() {     var host = server.address().address;     var port = server.address().port;      console.log('PrzykÅ‚adowa aplikacja nasÅ‚uchuje na http://' + host + ':' + port); }); W tym przykÅ‚adzie sami definiujemy port i adres, ale w prawdziwej aplikacji moglibyÅ›my tych wartoÅ›ci nie znaÄ‡. CzÄ™stym przykÅ‚adem jest sytuacja w ktÃ³rej adres i port sÄ… zdefiniowane w osobnym pliku konfiguracyjnym. Ten plik byÅ‚by inny na naszym komputerze niÅ¼ na serwerze na ktÃ³rym bÄ™dziemy publikowaÄ‡ aplikacjÄ™ - ale nasz kod ma dziaÅ‚aÄ‡ w obu lokalizacjach. Dlatego do wyÅ›wietlenia linka potrzebowalibyÅ›my pobrania tych danych za pomocÄ… metody .address().  Pozostaje teraz jedynie w linii nr 3 dodaÄ‡ to, o czym powiedzieliÅ›my sobie chwilkÄ™ temu, czyli linijkÄ™ app.use(express.static('assets'));  Dla przypomnienia, w nawiasach do express.static przekazujemy katalog, w ktÃ³rym znajdujÄ… siÄ™ pliki, ktÃ³re chcemy serwowaÄ‡. Po zapisaniu pliku server.js, moÅ¼emy uruchomiÄ‡ aplikacjÄ™. Teraz, aby zobaczyÄ‡ nasz obrazek, wystarczy Å¼e po http://localhost:3000/ podamy nazwÄ™ pliku z rozszerzeniem - u mnie wyglÄ…da to tak:   StwÃ³rz sobie teraz prosty plik index.html, ktÃ³ry bÄ™dzie miaÅ‚ formularz z dwoma inputami typu text (o nazwach first_name i last_name) oraz jednym typu submit. Element  posiada atrybuty takie jak action oraz method. Atrybut action pozwala okreÅ›liÄ‡, gdzie wysÅ‚aÄ‡ dane z formularza w momencie, gdy zostanie on zatwierdzony. W naszym przypadku bÄ™dzie to http://localhost:3000/userform. Atrybut method okreÅ›la metodÄ™, jakiej chcemy uÅ¼yÄ‡ - w naszym przypadku niech bÄ™dzie to GET.  PrzykÅ‚adowo, TwÃ³j index.html moÅ¼e wyglÄ…daÄ‡ tak:                          Node Hello world example                                                 First Name:                                            Last Name:                                           Gdy juÅ¼ bÄ™dzie gotowy, wrzuÄ‡ go do katalogu /assets.  Teraz czas na modyfikacjÄ™ pliku server.js. Najpierw zmieÅ„my to, co chcemy wysyÅ‚aÄ‡, gdy zostanie wysÅ‚ane Å¼Ä…danie do strony domowej.  ZamieÅ„ wiÄ™c res.send('Hello world') na res.sendFile('/index.html') - jak siÄ™ zapewne domyÅ›lasz, res.sendFile() wysyÅ‚a w odpowiedzi plik zamiast wiadomoÅ›ci.  Musimy rÃ³wnieÅ¼ dodaÄ‡ obsÅ‚ugÄ™ Å¼Ä…dania na endpoint, do ktÃ³rego bÄ™dziemy kierowaÄ‡ nasz formularz.  app.get('/userform', function (req, res) {     const response = {         first_name: req.query.first_name,         last_name: req.query.last_name     };     res.end(JSON.stringify(response)); }); W czasie przetwarzania Å¼Ä…dania, tworzymy nowy obiekt response, ktÃ³ry ma klucze first_name oraz last_name. Do poszczegÃ³lnych wÅ‚aÅ›ciwoÅ›ci przypisujemy dane, ktÃ³re otrzymujemy w obiekcie req (od ang. request), czyli w obiekcie z Å¼Ä…daniem. Na koniec wyÅ›wietlamy nasz obiekt przetworzony na typ string za pomocÄ… metody JSON.stringify. Po zapisaniu pliku server.js, aplikacja powinna pokazywaÄ‡ formularz, jak poniÅ¼ej.   Po wpisaniu wartoÅ›ci do inputÃ³w i wysÅ‚aniu ich, powinieneÅ› zostaÄ‡ przekierowany do strony /userform, a po znaku zapytania powinny zostaÄ‡ wyÅ›wietlone parametry umieszczone przez Ciebie w inputach.   Zadanie: Å»onglujemy danymi pomiÄ™dzy endpointami Napisz kod obsÅ‚ugujÄ…cy formularz zgodnie z wskazÃ³wkami z tego submoduÅ‚u, a nastÄ™pnie wyÅ›lij swÃ³j kod na repozytorium oraz przekaÅ¼ go do sprawdzenia mentorowi.  PodglÄ…d zadania  https://github.com/martinproxy0/Zadanie_17_4.git   Wyslij link 17.5. Middleware - poÅ›rednik miÄ™dzy Å¼Ä…daniem a odpowiedziÄ…",
    "fork": false,
    "created_at": "2018-01-26T19:03:05Z",
    "updated_at": "2018-01-26T19:03:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13038633,
    "owner_login": "martinproxy0",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13038633?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "data",
      "request",
      "form",
      "file",
      "application",
      "server",
      "call",
      "node",
      "json",
      "http",
      "user",
      "develop",
      "express",
      "auto",
      "example",
      "automat",
      "implement",
      "format",
      " express",
      "auth",
      "endpoint",
      "framework",
      "route",
      "https",
      "function",
      "demo",
      "send",
      "local",
      "list",
      "star",
      "source",
      "read",
      "front",
      "update",
      "response",
      "stat",
      "host",
      "start",
      "delete",
      "face",
      "package",
      "method",
      "info",
      "developer",
      "system",
      "name",
      "html",
      "action",
      "module",
      "program",
      "infor",
      "github",
      "model",
      "tech",
      "esse",
      "text",
      "getpost",
      "problem",
      "install",
      "parse",
      "link",
      "proxy",
      "folder",
      "status",
      "require",
      "middleware",
      "parser",
      "console",
      "intern",
      "note",
      "popular",
      "party",
      "write",
      "query",
      "sets",
      "updated",
      "dynamic",
      "modules",
      "routing",
      "role",
      "world",
      "address",
      "dependencies",
      "found",
      "error",
      "internal",
      "listen",
      "jest",
      "kurs",
      "rake",
      "ekspresowe",
      "kazan",
      "wars"
    ]
  },
  {
    "id": 248947913,
    "name": "laravel-model-export",
    "full_name": "tobyokeke/laravel-model-export",
    "description": "Creates properties for JS from migrations and properties for Postman using request inputs from controllers in Laravel",
    "fork": false,
    "created_at": "2020-03-21T09:53:43Z",
    "updated_at": "2020-03-21T10:14:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11715286,
    "owner_login": "tobyokeke",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11715286?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "control",
      "controller",
      "properties"
    ]
  },
  {
    "id": 226374949,
    "name": "Databases-Demo",
    "full_name": "HamadAli248/Databases-Demo",
    "description": "Learning Databases and send,requesting data by APIs from postman",
    "fork": false,
    "created_at": "2019-12-06T17:08:17Z",
    "updated_at": "2019-12-06T17:12:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 51701042,
    "owner_login": "HamadAli248",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/51701042?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "request",
      "send",
      "requesting"
    ]
  },
  {
    "id": 142351951,
    "name": "jekshop-api",
    "full_name": "slpkej/jekshop-api",
    "description": "Created a node api using express/bodyparser and mongo and mongoose for the database. Used Postman to send web requests to the backend.",
    "fork": false,
    "created_at": "2018-07-25T20:42:50Z",
    "updated_at": "2018-07-25T20:58:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41170480,
    "owner_login": "slpkej",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/41170480?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "node",
      "database",
      "requests",
      "express",
      "mongo",
      " express",
      "send",
      "backend",
      "mongoose",
      "parse",
      "parser"
    ]
  },
  {
    "id": 251298533,
    "name": "RequestLogger",
    "full_name": "Ayorinde-Codes/RequestLogger",
    "description": "A Laravel package that logs requests ip, agent(browser or postman), payload request, payload response, Time of execution and url in the database within any request call",
    "fork": false,
    "created_at": "2020-03-30T12:32:05Z",
    "updated_at": "2020-03-30T17:52:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47367086,
    "owner_login": "Ayorinde-Codes",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/47367086?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "request",
      "call",
      "database",
      "requests",
      "load",
      "response",
      "package",
      "browser",
      "within",
      "agent",
      "execution",
      "logs"
    ]
  },
  {
    "id": 174263023,
    "name": "postman-newman-circleci",
    "full_name": "jordanahaines/postman-newman-circleci",
    "description": "Companion repo for a post on how to use Newmand and CircleCI to schedule automated tests for requests defined in Postman",
    "fork": false,
    "created_at": "2019-03-07T03:14:56Z",
    "updated_at": "2019-03-07T03:14:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6641613,
    "owner_login": "jordanahaines",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/6641613?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "request",
      "tests",
      "tests ",
      "requests",
      "auto",
      "automat",
      "automate",
      "automated",
      "define",
      "schedule"
    ]
  },
  {
    "id": 58562066,
    "name": "relay",
    "full_name": "owainlewis/relay",
    "description": "Relay lets you write HTTP requests as easy to read, structured YAML and dispatch them easily using a CLI. Similar to tools like Postman",
    "fork": false,
    "created_at": "2016-05-11T16:29:24Z",
    "updated_at": "2019-08-11T06:28:20Z",
    "stargazers_count": 24,
    "watchers_count": 24,
    "forks": 0,
    "watchers": 24,
    "score": 1,
    "owner_id": 733944,
    "owner_login": "owainlewis",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/733944?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "tool",
      "requests",
      "read",
      "tools",
      "struct",
      "structure",
      "easily",
      "write",
      "lets",
      "patch"
    ]
  },
  {
    "id": 200848624,
    "name": "PostmanCli",
    "full_name": "Borhan10/PostmanCli",
    "description": null,
    "fork": false,
    "created_at": "2019-08-06T12:38:56Z",
    "updated_at": "2019-08-06T12:49:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4346304,
    "owner_login": "Borhan10",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/4346304?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 106381305,
    "name": "postman-cli",
    "full_name": "qbicsoftware/postman-cli",
    "description": "A client software for dataset request and download from openBIS",
    "fork": false,
    "created_at": "2017-10-10T07:10:43Z",
    "updated_at": "2019-10-07T08:26:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8245829,
    "owner_login": "qbicsoftware",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8245829?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "client",
      "load",
      "open",
      "download",
      "software",
      "dataset"
    ]
  },
  {
    "id": 174249180,
    "name": "newman-reporter-diff",
    "full_name": "indeedeng-alpha/newman-reporter-diff",
    "description": "Showcase for comparing http requests using newman, the postman cli client.",
    "fork": false,
    "created_at": "2019-03-07T01:33:49Z",
    "updated_at": "2019-03-07T01:36:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31606812,
    "owner_login": "indeedeng-alpha",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/31606812?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "client",
      "requests",
      "http",
      "newman",
      "case",
      "comparing"
    ]
  },
  {
    "id": 63832212,
    "name": "AjaxExplorer",
    "full_name": "saveenchad/AjaxExplorer",
    "description": "The Super Endpoint Explorer (SEE) app will allow the end user to craft requests to a remote end-point by filling out various form fields, send the request and show the response, and save common request configurations for later playback. The form of the tool is roughly like the Chrome Extension called Postman or an OSX HTTP exploration like Paw but obviously less polished and feature laden.",
    "fork": false,
    "created_at": "2016-07-21T03:01:18Z",
    "updated_at": "2016-07-28T03:31:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9758723,
    "owner_login": "saveenchad",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/9758723?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "form",
      "tool",
      "call",
      "requests",
      "user",
      "send",
      "response",
      "config",
      "play",
      "feature",
      "configuration",
      "various",
      "remote",
      "common",
      "configurations",
      "fields"
    ]
  },
  {
    "id": 157698357,
    "name": "postman-plugins",
    "full_name": "kamalaknn/postman-plugins",
    "description": null,
    "fork": false,
    "created_at": "2018-11-15T11:10:11Z",
    "updated_at": "2018-11-15T11:11:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8401064,
    "owner_login": "kamalaknn",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/8401064?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 207091776,
    "name": "practice-3",
    "full_name": "martynow173/practice-3",
    "description": "Just backend requests handling, use postman. Additional functionality and code refactoring: user ratings, comments, sorting based on them, many-to-many relationship between categories and products. Role system - https://github.com/spatie/laravel-permission",
    "fork": false,
    "created_at": "2019-09-08T09:47:16Z",
    "updated_at": "2019-09-16T15:06:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25533512,
    "owner_login": "martynow173",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25533512?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "requests",
      "http",
      "user",
      "based",
      "code",
      "https",
      "function",
      "functional",
      "backend",
      "rating",
      "system",
      "github",
      "laravel",
      "product",
      "between",
      "functionality",
      "handling",
      "many",
      "actor",
      "products",
      "sort",
      "comments",
      "relationship"
    ]
  },
  {
    "id": 161702588,
    "name": "flight-api",
    "full_name": "omarabdeljelil/flight-api",
    "description": "Flight API (created with laravel 5.7) all the HTTP requests are tested with Postman/fiddler. it includes data validation and require user's Token validation for PUT,POST and DELETE requests",
    "fork": false,
    "created_at": "2018-12-13T22:32:39Z",
    "updated_at": "2018-12-15T18:42:45Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 24657418,
    "owner_login": "omarabdeljelil",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/24657418?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "data",
      "request",
      "requests",
      "user",
      "tested",
      "laravel",
      "light",
      "includes",
      "validation",
      "require",
      "fiddler"
    ]
  },
  {
    "id": 223620810,
    "name": "Fiddler2Postman",
    "full_name": "liyinchigithub/Fiddler2Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-11-23T16:38:07Z",
    "updated_at": "2019-11-23T16:38:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19643260,
    "owner_login": "liyinchigithub",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/19643260?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 51991274,
    "name": "AspNet_WebApi2_Versioning",
    "full_name": "Apollo013/AspNet_WebApi2_Versioning",
    "description": "Demonstrates 5 techniques for API versioning using route uri, query string parameters, custom request header & accept header (content-type). Requires Fiddler or POSTMAN to test.",
    "fork": false,
    "created_at": "2016-02-18T08:13:42Z",
    "updated_at": "2016-10-19T13:48:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9936358,
    "owner_login": "Apollo013",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9936358?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "route",
      "version",
      "custom",
      "tech",
      "type",
      "header",
      "parameter",
      "query",
      "content",
      "versioning",
      "technique",
      "techniques"
    ]
  },
  {
    "id": 23707456,
    "name": "LearningStudio-HelloWorld-Java",
    "full_name": "PearsonDevelopersNetwork/LearningStudio-HelloWorld-Java",
    "description": "Start exploring the APIs right away with this fully-functional application that works right out of the box. Using your browser, you can get started with running any GET request to see how data is returned; try more advanced calls (creating and updating information) by pointing your preferred API console at it (e.g., Postman or Fiddler). You will need a key and sandbox prior to using it, available through the PDN website. ",
    "fork": false,
    "created_at": "2014-09-05T15:12:33Z",
    "updated_at": "2014-09-05T15:47:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 3,
    "watchers": 0,
    "score": 1,
    "owner_id": 5207678,
    "owner_login": "PearsonDevelopersNetwork",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5207678?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "call",
      "format",
      "function",
      "calls",
      "full",
      "site",
      "star",
      "running",
      "more",
      "creating",
      "start",
      "website",
      "functional",
      "info",
      "need",
      "infor",
      "browser",
      "information",
      "ully",
      "fully",
      "right",
      "available",
      "started",
      "advance",
      "advanced",
      "console",
      "exploring",
      "sandbox",
      "updating",
      "returned",
      "preferred",
      "prior",
      "pointing"
    ]
  },
  {
    "id": 23707476,
    "name": "LearningStudio-HelloWorld-Ruby",
    "full_name": "PearsonDevelopersNetwork/LearningStudio-HelloWorld-Ruby",
    "description": "Start exploring the APIs right away with this fully-functional application that works right out of the box. Using your browser, you can get started with running any GET request to see how data is returned; try more advanced calls (creating and updating information) by pointing your preferred API console at it (e.g., Postman or Fiddler). You will need a key and sandbox prior to using it, available through the PDN website. ",
    "fork": false,
    "created_at": "2014-09-05T15:13:01Z",
    "updated_at": "2014-10-20T22:02:15Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 5207678,
    "owner_login": "PearsonDevelopersNetwork",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5207678?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "call",
      "format",
      "function",
      "calls",
      "full",
      "site",
      "star",
      "running",
      "more",
      "creating",
      "start",
      "website",
      "functional",
      "info",
      "need",
      "infor",
      "browser",
      "information",
      "ully",
      "fully",
      "right",
      "available",
      "started",
      "advance",
      "advanced",
      "console",
      "exploring",
      "sandbox",
      "updating",
      "returned",
      "preferred",
      "prior",
      "pointing"
    ]
  },
  {
    "id": 23707434,
    "name": "LearningStudio-HelloWorld-PHP",
    "full_name": "PearsonDevelopersNetwork/LearningStudio-HelloWorld-PHP",
    "description": "Start exploring the APIs right away with this fully-functional application that works right out of the box. Using your browser, you can get started with running any GET request to see how data is returned; try more advanced calls (creating and updating information) by pointing your preferred API console at it (e.g., Postman or Fiddler). You will need a key and sandbox prior to using it, available through the PDN website. ",
    "fork": false,
    "created_at": "2014-09-05T15:11:56Z",
    "updated_at": "2016-05-07T12:23:55Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 5207678,
    "owner_login": "PearsonDevelopersNetwork",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5207678?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "call",
      "format",
      "function",
      "calls",
      "full",
      "site",
      "star",
      "running",
      "more",
      "creating",
      "start",
      "website",
      "functional",
      "info",
      "need",
      "infor",
      "browser",
      "information",
      "ully",
      "fully",
      "right",
      "available",
      "started",
      "advance",
      "advanced",
      "console",
      "exploring",
      "sandbox",
      "updating",
      "returned",
      "preferred",
      "prior",
      "pointing"
    ]
  },
  {
    "id": 23707466,
    "name": "LearningStudio-HelloWorld-CSharp",
    "full_name": "PearsonDevelopersNetwork/LearningStudio-HelloWorld-CSharp",
    "description": "Start exploring the APIs right away with this fully-functional application that works right out of the box. Using your browser, you can get started with running any GET request to see how data is returned; try more advanced calls (creating and updating information) by pointing your preferred API console at it (e.g., Postman or Fiddler). You will need a key and sandbox prior to using it, available through the PDN website. ",
    "fork": false,
    "created_at": "2014-09-05T15:12:47Z",
    "updated_at": "2015-05-26T01:31:35Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 5207678,
    "owner_login": "PearsonDevelopersNetwork",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5207678?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "call",
      "format",
      "function",
      "calls",
      "full",
      "site",
      "star",
      "running",
      "more",
      "creating",
      "start",
      "website",
      "functional",
      "info",
      "need",
      "infor",
      "browser",
      "information",
      "ully",
      "fully",
      "right",
      "available",
      "started",
      "advance",
      "advanced",
      "console",
      "exploring",
      "sandbox",
      "updating",
      "returned",
      "preferred",
      "prior",
      "pointing"
    ]
  },
  {
    "id": 23707448,
    "name": "LearningStudio-HelloWorld-Python",
    "full_name": "PearsonDevelopersNetwork/LearningStudio-HelloWorld-Python",
    "description": "Start exploring the APIs right away with this fully-functional application that works right out of the box. Using your browser, you can get started with running any GET request to see how data is returned; try more advanced calls (creating and updating information) by pointing your preferred API console at it (e.g., Postman or Fiddler). You will need a key and sandbox prior to using it, available through the PDN website. ",
    "fork": false,
    "created_at": "2014-09-05T15:12:14Z",
    "updated_at": "2014-09-05T15:48:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5207678,
    "owner_login": "PearsonDevelopersNetwork",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5207678?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "call",
      "format",
      "function",
      "calls",
      "full",
      "site",
      "star",
      "running",
      "more",
      "creating",
      "start",
      "website",
      "functional",
      "info",
      "need",
      "infor",
      "browser",
      "information",
      "ully",
      "fully",
      "right",
      "available",
      "started",
      "advance",
      "advanced",
      "console",
      "exploring",
      "sandbox",
      "updating",
      "returned",
      "preferred",
      "prior",
      "pointing"
    ]
  },
  {
    "id": 126534347,
    "name": "startnow-node101-vstda-api",
    "full_name": "Fragomeli/startnow-node101-vstda-api",
    "description": "making HTTP requests GET, POST, DELETE and logging them using Postman.",
    "fork": false,
    "created_at": "2018-03-23T20:12:16Z",
    "updated_at": "2018-03-23T20:12:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36241358,
    "owner_login": "Fragomeli",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36241358?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "making",
      "logging"
    ]
  },
  {
    "id": 159976766,
    "name": "NodeJS-MLab",
    "full_name": "Fazaarycode/NodeJS-MLab",
    "description": "Simple dataPull Push request app used along with Mlab + Postman . Use your own API Key for Mongodb client (db.js)",
    "fork": false,
    "created_at": "2018-12-01T18:51:21Z",
    "updated_at": "2018-12-01T18:53:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20859772,
    "owner_login": "Fazaarycode",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20859772?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "client",
      "long",
      "along"
    ]
  },
  {
    "id": 193598340,
    "name": "Task-Management-App_Nodejs",
    "full_name": "kewalpasad/Task-Management-App_Nodejs",
    "description": "Use Postman as a client to send request to the Node.js backend.",
    "fork": false,
    "created_at": "2019-06-24T23:54:14Z",
    "updated_at": "2019-08-24T21:59:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32657335,
    "owner_login": "kewalpasad",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/32657335?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "client",
      "send",
      "backend"
    ]
  },
  {
    "id": 170088463,
    "name": "Node-and-Express-App",
    "full_name": "anthonygilbertt/Node-and-Express-App",
    "description": "A Node and Express application that has built in data validation using Joi and sends requests via Postman",
    "fork": false,
    "created_at": "2019-02-11T07:49:59Z",
    "updated_at": "2019-02-22T16:31:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26334011,
    "owner_login": "anthonygilbertt",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/26334011?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "application",
      "requests",
      "send",
      "built",
      "validation",
      "sends"
    ]
  },
  {
    "id": 235514019,
    "name": "Node-HTTP-Server-Example",
    "full_name": "Sundarm-Soni/Node-HTTP-Server-Example",
    "description": "Implemented Node HTTP Server using Node.js. Checked  and verified the HTTP request and response using Postman.",
    "fork": false,
    "created_at": "2020-01-22T06:36:24Z",
    "updated_at": "2020-01-22T06:40:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35427921,
    "owner_login": "Sundarm-Soni",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/35427921?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "response"
    ]
  },
  {
    "id": 95006486,
    "name": "Node-Todo-API",
    "full_name": "SalmanMujtaba/Node-Todo-API",
    "description": null,
    "fork": false,
    "created_at": "2017-06-21T13:22:13Z",
    "updated_at": "2017-09-04T03:28:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22648593,
    "owner_login": "SalmanMujtaba",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22648593?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 83179676,
    "name": "api_hw2",
    "full_name": "colechristenson/api_hw2",
    "description": "Test different requests against a node.js server using postman. Node.js server is set up with express.",
    "fork": false,
    "created_at": "2017-02-26T03:20:14Z",
    "updated_at": "2017-02-26T03:42:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22686955,
    "owner_login": "colechristenson",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22686955?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "server",
      "node",
      "requests",
      "express",
      " express",
      "rent"
    ]
  },
  {
    "id": 105598245,
    "name": "GamingShop",
    "full_name": "Zahermah/GamingShop",
    "description": "Building a shop for fun using postman request and learning node.js and trying MongoDB",
    "fork": false,
    "created_at": "2017-10-03T00:12:31Z",
    "updated_at": "2017-10-03T00:17:45Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15321471,
    "owner_login": "Zahermah",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/15321471?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "node",
      "learn",
      "shop",
      "learning",
      "trying"
    ]
  },
  {
    "id": 142746863,
    "name": "My_first_cryptocurrency",
    "full_name": "HP213/My_first_cryptocurrency",
    "description": "Using Blockchain, I made my first cryptocurrency, I suggest using postman for better understanding. Baiscally we made an decentralized system of transferring cryptocurrency. It is runnig locally on http://127.0.0.1:5001/ you can chage port according to requirement and new user. Post request is made to add transactions and create a new node and get request to block new mine and get chain. Everything mentioned in code with comments, we have made three ports http://127.0.0.1:5002/, http://127.0.0.1:5003/, http://127.0.0.1:5004/, to show connections between three miners \"A\" \"B\" and \"C\". You can make more  ",
    "fork": false,
    "created_at": "2018-07-29T09:17:12Z",
    "updated_at": "2018-07-29T09:18:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34127674,
    "owner_login": "HP213",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34127674?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "request",
      "call",
      "node",
      "http",
      "user",
      "code",
      "local",
      "more",
      "connect",
      "very",
      "system",
      "action",
      "chai",
      "currency",
      "between",
      "under",
      "crypto",
      "require",
      "connection",
      "according",
      "locally",
      "comments",
      "mine",
      "three",
      "better",
      "transactions",
      "understanding",
      "cryptocurrency",
      "suggest"
    ]
  },
  {
    "id": 219425300,
    "name": "Fullstack_Vue_Express",
    "full_name": "edivera/Fullstack_Vue_Express",
    "description": "MEVN tutorial. Express apis tested with postman. Makes requests from vue front end to backend using axios.",
    "fork": false,
    "created_at": "2019-11-04T05:37:50Z",
    "updated_at": "2019-11-24T08:13:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22969075,
    "owner_login": "edivera",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22969075?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "request",
      "requests",
      "tested",
      "front",
      "backend",
      "tutorial",
      "front end",
      "axios"
    ]
  },
  {
    "id": 217643420,
    "name": "express_http_RequestAndResponse_CheckingAgainstArray-",
    "full_name": "DJMare/express_http_RequestAndResponse_CheckingAgainstArray-",
    "description": "A simple express http request and response app using req.query to check against an array and view in Postman. ",
    "fork": false,
    "created_at": "2019-10-26T02:12:41Z",
    "updated_at": "2019-12-03T04:38:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35668707,
    "owner_login": "DJMare",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35668707?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "http",
      "express",
      " express",
      "response",
      "view",
      "check",
      "query",
      "array"
    ]
  },
  {
    "id": 40326550,
    "name": "Angular-Directive-Project",
    "full_name": "sn0112358/Angular-Directive-Project",
    "description": "Angular-Directive-Project Directives range from very basic to extremely complex. This project will build up to some somewhat difficult directives. Keep in mind that the format we're learning for directives is the same format used to build some extremely complex things in angular. Using directives often and well is one way to show you're a talented developer.  Starting Out  We've included only a few things for you to begin with. index.html, app.js, styles.css. At this point the best way to get more comfortable with angular is to initialize an app without relying heavily on boilerplate code (reusable code that starts out your projects for you).  You'll notice that in the index.html we've included the angular-route CDN. Yes, we'll be using angular's router here. Put an ng-view into your index.html.  In your app.js set up a config and set up our first route for when a user is at the '/home' url. If you're having trouble remembering how to set up the router go look at how you set up the router on the previous project. One way these projects will be beneficial to you is allowing you to look back at something *you** did and seeing how you got that something to work.* You may also want add an otherwise that defaults to /home. Create a controller and a template file for this route in your app folder. Don't forget to include the controller as a script in your index.html Check that everything is hooked up correctly. Try adding a div with some text in your home template just to make sure it's showing up. Once you've got that going you're ready to start on some directives. Now let's make our directive. We'll start with a simple one that we can use to display information passed to it.  Step 1. Start your directive  Woot. When you're initializing your directive just remember that it works very similarly to how you start up a controller or a service. It can also be very helpful to think of your directive as a route.  Create your directive. You'll use the directive method on your angular module. It takes two arguments, the name string and the callback function, which will return the object that represents your directive. When naming your directive give it a name with two words; dirDisplay would be nice, but anything works. Just remember it's best practice to give a directive a camel case name so that it's clear in your html what it is. Also we're going to need a template html for our directive. We could do it inline, but let's make another file instead. Just name it something that makes sense for the name of your directive and put it in the same directory as your directive file. For your template just make a  and inside a  tag that says User. Now in your home route html add in your directive. It will look like this if you named it dirDisplay:  Start up your app and go to the home route. Check and make sure you see User where your directive was placed. If you're not seeing it at this point it could mean a few things. Here's some more common issues. You didn't link your directive in your index as a script. Your name for your directive doesn't match the name in your html. Remember camel case becomes snake case so myDirective becomes . You're file path to your html template is wrong. You have to think of file paths in angular as relative to the index. Here's some code to see just for this part, and just for the directive's js file.  var app = angular.module('directivePractice'); app.directive('dirDisplay', function(){   return {     templateUrl: 'app/directives/dirDisplay.html'   }; }); What we're returning is the directive object. You won't see anymore code in this tutorial so it's important you get things working right and refer back to what you've already done to advance from now on.  Step 2. Advancing directives  Your directive should be loaded up now, but it's not really doing much. Let's make it better.  In your home controller. Make a variable on your $scope called user. Set it's value to {   name: \"Geoff McMammy\",   age: 43,   email: \"geofdude@gmail.com\" } Now inside your directive's html specifically inside the  tags display our new user's name. Then inside maybe some  tags display his email and age. This is going to work exactly the same as if it was just inside your home controller. Reload the page and make sure it works. This is still very cosmetic and really not all that useful. It needs functionality.  Add into your directive's object the link property. The link property's value is a function definition that takes (generally) three parameters. scope, element, and attributes. Unlike in other places with angular injection these parameter names don't carry meaning. The first parameter will always represent your $scope for that directive, the second will always be the element that wraps your whole directive, and the third will always be an object containing all the properties and values of the attributes on your directive in the dom. Try the following to get a feel for all three.  Add two attributes to your directive in your html. Like this -  Now in the link property you've added console.log the three parameters in the function. You'll see an object for scope that should look identical to the $scope of your html function. For element you'll see an object the represents the DOM wrapper for your directive. For attributes you'll see an object that will look like this:  {   test: \"myTest\",   myCheck: \"checkItOut\" } An important thing to notice is how it has again converted snake case to camel case for you. my-check became myCheck. Don't forget this. You'll run into this issue one day. It counts for both attributes and directive names.  To feel some of what the link function could do let's try this.  Add a ng-show to both the email and age wrappers. This should be familiar to you. Now inside your link function add a click event listener to your element property. It's going to look just like jQuery. element.on('click', function(){  }) Inside the click listener's callback add a toggle for the ng-show property you passed in. Along with a console.log to make sure things are connecting when you click. Try it out. Don't call for a mentor when it doesn't work. Let's talk about that first. You should see the console.log firing, but why isn't it toggling. This is going to be a common problem when working with the link function and event listeners. What we have here is an angular digest problem. The value is changing on the scope object, but the change isn't being reflected by our DOM. That's because angular isn't aware of the change yet. Anytime we cause an event to happen using something like jQuery or even angular's jQLite we need to let angular know that we've made a change.  Add this line of code in place of your console.log, scope.$apply(). Now try it out. It should be working now, so if you're still having issues it's time to debug. What we've done is forced angular to run it's digest cycle. This is where angular checks the scope object for changes and then applies those to the DOM. This is another good lesson to learn for later. You'll most likely hit this when making changes to your element using event listeners.  Step 3. Directive's re-usability.  Now our directive has some extremely basic functionality. One of a directive's greatest advantages though is its ability to be placed anywhere and still be functional. Let's say instead we had a list of users instead of just one.  Change the $scope property in your home controller to be users and give it this array as its value: [  {    name: \"Geoff McMammy\",    age: 43,    email: \"geofdude@gmail.com\",    city: \"Provo\"  },  {    name: \"Frederick Deeder\",    age: 26,    email: \"fredeed@gmail.com\",    city: \"Austin\"  },  {    name: \"Spencer Rentz\",    age: 35,    email: \"spencerrentz@gmail.com\",    city: \"Sacramento\"  },  {    name: \"Geddup Ngo\",    age: 43,    email: \"geddupngo@gmail.com\",    city: \"Orlando\"  },  {    name: \"Donst Opbie Leevin\",    age: 67,    email: \"gernee@gmail.com\",    city: \"Phoenix\"  } ] Now in your home HTML add a ng-repeat to the directive call. Tell it to repeat for each user in users. Reload your page. It's working! But why? How does each directive instance know what information to display?  In the link function console.log the scope parameter. Make sure it's outside of your click listener. You'll see five print outs in your console. Open up any one of them and look to the bottom. Open up the user property. It's exactly what we would want! But again why would that be the case? Don't get too caught up in this next bit if it's too hard to understand, but the ng-repeat is essentially making new tiny scope objects for each individual user in our users array. Now each of our directives is still getting a user property on the scope object just like the directive wanted in the beginning. Woot.  Step 4. Ramp it up with Isolate Scope.  Directives can do so much more. So let's make that happen. That means we should make.... a new directive!!! This directive's purpose will be to display a selected User and the weather in his/her/its location. Link it up just like the last one.  Create a js file for our directive and name it dirWeather. Make an html file named dirWeather.html. Link it up in your index.html and add the template to your new directive object. In your directive's template give it an  tag that says Weather just so we can know it's working. Above your ng-repeat on dirDisplay add your new dirWeather directive. If it's not working check the instructions above as to some common reasons why before asking a mentor for help. If you're seeing the Weather text on your page then we're ready to try out the dreaded Isolate Scope. The isolate scope object is one of the stranger API's in angular. I'm sorry but it is. Just refer to this for now.  scope: {  string: '@',  link: '=',  func: '&' } The properties on the scope object represent the attributes on the directive in the html. Our example scope object here would look something like this in the html.  The hard part here is the @, =, and &. They each have very important and distinct meanings.  @ says take in my attribute value as a string. = says take in my attribute value as a two-way bound variable from the parent scope. & says take in my attribute value as a reference to a function on the parent scope. It's also critical to point out that once you add a scope object you have no isolated your directive's scope. Meaning, aside from the values passed in through attributes, this directive has no connection to the $scope of its parent.  That being said let's isolate our directive's scope. :worried:  Add the scope property to your dirWeather. Give it the value of an object with a property of currentUser whose value is '='. Remember in your html this will look like current-user. This is the third time I've said so don't expect it again. This means that whatever comes into the currentUser attribute is going to be a value of the parent's scope object.  For now test this out by passing in users[0]. Find a way to show that users information inside your dirWeather's html. Remember inside your directive now the user is represented by currentUser. Step 5. &? &!?  The '=' value on your scope object has created a two-way binding between users[0] and currentUser. Now let's try out the '&'.  On your home controller add a function called getWeather. It takes one parameter called city. This function will make a call to a service so we'll need to create that. Make a weather service. Name it something cool and creative like weatherService. Inside the weather service make a function called getWeather that also takes one parameter, city. Make an $http get to this url - 'http://api.openweathermap.org/data/2.5/weather?q=' After the q= add on the city parameter. If you want you can test this out in postman. See what kind of data you get back. If it's the weather of that city then... you win! Use $q to return a promise that only resolves with the data you want. Temperature (preferably not in Kelvin) and the weather description. Use console.log on the data coming from the $http request to get to what you want. You'll need to add both on an object that you resolve your new promise with. On your home controller have it return the result of invoking the get getWeather function on the service. You should be returning a promise. Now in your home route's HTML pass in the getWeather function to the dirWeather directive through an attribute called weather-call. Add the attribute to your isolate scope object. That was a lot of linking, but let's walk through it. Your controller has a function linked to the service, which is in turn linked to your directive. So if you run the weatherCall function in your directive it will go through your controller to your service and then back.  Now things get a little bit tricky. Angular's way of passing along arguments through a directive to your controller are tricky, but once you understand how to do it, it's not hard. I'm going to give an example here of how it works.   Here's how it would look in your HTML. But where's the data supposed to be coming from? It seems that you'd rather be able to pass in data from your directive. Well you still can, you just have to essentially tell angular what do use as an argument to replace data when it calls that function in your controller. The actualy function call inside the directive will look like this.  $scope.passFunc({data: wantedData}) So what you'll do is pass in an object where the property name is what the argument is named in the HTML where you call the directive. That might sound confusing, but just look at the two code blocks above for a pattern. Note that pass-func becomes $scope.passFunc and data is being replaced with wantedData with the {data: wantedData} object. In our directive we want to replace city in the attribute call, for something else inside the directive. You'll follow the same pattern as above.  For now let's get things set up for that function call.  Add to the dirWeather directive object a property called controller. It's value will be a function. Yes, this is a controller specifically for your one directive. It works the same as any other controller, except you don't give it a name. It's $scope object will only be accessible within an instance of your directive. Don't forget to inject $scope in the function.  Inside your controller function run the weatherCall function with the city property from the currentUser on your $scope. Here's where you need to make sure you've passed in a city argument in the attribute function call, and then replace that with your currentUser's city using an object with a city property. The function call should return a promise, so call .then afterward and add the data onto your $scope to display both the weather and temperature of the currentUser's city. The properties can be named whatever makes sense to you.  You may also want to find a way to get rid of all the decimal places on your temperature. Now you should have everything hooked up so it shows Geoff's data and the weather data for Provo. But is that good enough?  Step 6. Ramping up our ramp up.  Now let's change this so it shows the weather data for whichever user we select. We're going to need to use '&' again.  Make a function on the home controller that takes in a parameter and sets a property on the $scope to be that parameter. Maybe you see where this is going.  We want to get this function into our dirDisplay controller. But in order to do that we need to isolate dirDisplay's scope. This also means we need to pass in each individual user through the scope object as well.  To make it easier on ourselves, let's pass the current user from our ng-repeat into our directive through a user attribute. This way we can leave our two-way bindings as they are. Also pass our new function that sets our current user from our home controller into our directive through a setUser attribute.  You'll need to add an argument in there again. Go with user. Your scope object in dirDisplay should have two properties. setUser with the value of '&' and user with the value of '='. As before we're going to need to do some tricky stuff to get our argument back to our controller.  Call the setUser function inside our click event listener and pass in an object the sets our user argument to be the user on our directive's scope object. If you've forgotten this part go back up and take a look at how you did it before or the example in this README.  Whatever user you click on now should show up in the dirWeather directive as the current user. But we're missing one thing, we want to be able to see the weather for that user too. We'll have to do one more thing that will seem a little bit tricky at first, but it's good to learn if you don't know it already since it's actually used quite frequently.  We need to step up a change listener on our currentUser in the dirWeather directive. We'll use angular's $watch functionality. $watch is a method on your $scope that will watch for changes in a variable you give it. It works in two ways.  $scope.$watch('property', function(value){  console.log(\"When $scope.property changes its new value is: \", value) }); And  $scope.$watch(function(){  return myVar }, function(value){  console.log(\"When myVar changes its new value is: \", value); }); Remove the immediate function call that we have in there now. Maybe just comment it out for now because we'll use it in a bit. Now call the $watch method on your scope and have it watch currentUser. Either way of using $watch is fine. Have its callback run the $scope.weatherCall function just like you had it before.  One thing to note is that $scope.$watch will always run once to begin with. Since that's what we want here it's great, but just be aware of that.  If you've reached this point congratulate yourself. You've messed with some serious stuff today, namely directives. There are still a lot of things about directives that we can't possibly cover in a single project. If you like what we've done so far then you're in a good place to keep going. A developer who understands directives well can build a really clean looking code base. Just look at your home.html. It could have just two lines in it. If you're feeling good move on now to Step 7.  Step 7. Finishing touches  Try to work out these problems on your own.  There should be a way to let the user know that the weather data is loading. Something that appears while our $http request is retrieving our data. The $http request shouldn't fire on both opening and closing a user's information. A color change for the currently active user would be nicer than showing that user's info inside the dirWeather modal. Or at least less redundant. Whatever else you want. We still haven't explored transclusion and ng-transclude so give that a try if you're feeling adventurous. Just know that it's a way for deciding where to put the HTML child elements of a directive. It's cool stuff that can involve some criss-crossing of scopes.",
    "fork": false,
    "created_at": "2015-08-06T20:56:18Z",
    "updated_at": "2019-03-11T21:13:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 14,
    "watchers": 0,
    "score": 1,
    "owner_id": 13667207,
    "owner_login": "sn0112358",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13667207?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "data",
      "request",
      "form",
      "file",
      "script",
      "service",
      "call",
      "http",
      "user",
      "develop",
      "code",
      "example",
      "contain",
      "format",
      "convert",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "function",
      "load",
      "calls",
      "spec",
      "list",
      "star",
      "read",
      "import",
      "users",
      "learn",
      "rent",
      "more",
      "plate",
      "view",
      "config",
      "start",
      "connect",
      "email",
      "very",
      "functional",
      "method",
      "struct",
      "info",
      "developer",
      "play",
      "need",
      "access",
      "name",
      "working",
      "html",
      "converte",
      "learning",
      "module",
      "check",
      "side",
      "tutorial",
      "infor",
      "long",
      "open",
      "object",
      "print",
      "ever",
      "information",
      "template",
      "case",
      "result",
      "control",
      "esse",
      "text",
      "problem",
      "practice",
      "making",
      "to do",
      "place",
      "between",
      "link",
      "under",
      "right",
      "specific",
      "showing",
      "along",
      "variable",
      "included",
      "lines",
      "getting",
      "desc",
      "within",
      "folder",
      "functionality",
      "order",
      "advance",
      "parameter",
      "following",
      "controller",
      "reference",
      "those",
      "done",
      "ready",
      "debug",
      "needs",
      "find",
      "objects",
      "repl",
      "style",
      "console",
      "useful",
      "note",
      "angular",
      "containing",
      "current",
      "should",
      "single",
      "location",
      "easier",
      "connection",
      "sets",
      "default",
      "common",
      "event",
      "connecting",
      "description",
      "display",
      "both",
      "router",
      "best",
      "words",
      "directory",
      "usable",
      "projects",
      "things",
      "another",
      "complex",
      "added",
      "being",
      "third",
      "select",
      "fire",
      "wrapper",
      "doing",
      "correct",
      "path",
      "cause",
      "while",
      "media",
      "going",
      "keep",
      "replace",
      "stuff",
      "home",
      "boiler",
      "expect",
      "issue",
      "still",
      "having",
      "instead",
      "boilerplate",
      "three",
      "definition",
      "currently",
      "adding",
      "better",
      "helpful",
      "talk",
      "little",
      "match",
      "lesson",
      "ember",
      "makes",
      "instruction",
      "previous",
      "city",
      "named",
      "general",
      "instance",
      "familiar",
      "important",
      "become",
      "forge",
      "explore",
      "mean",
      "inside",
      "properties",
      "onto",
      "passing",
      "listen",
      "weather",
      "something",
      "names",
      "reusable",
      "inject",
      "array",
      "least",
      "shows",
      "comfortable",
      "tiny",
      "always",
      "clean",
      "cool",
      "five",
      "namely",
      "invoking",
      "initial",
      "returning",
      "actually",
      "wrappers",
      "wraps",
      "talent",
      "whole",
      "element",
      "directives",
      "elements",
      "essential",
      "sense",
      "arent",
      "much",
      "every",
      "wanted"
    ]
  },
  {
    "id": 215762789,
    "name": "postbaby",
    "full_name": "neshoj/postbaby",
    "description": "When creating this, Postman kept requesting me to upgrade my postman v6.X and it kept going in circles, i found out there is postwoman.io and i wanted to learn electron. So here we are",
    "fork": false,
    "created_at": "2019-10-17T10:11:53Z",
    "updated_at": "2019-10-17T10:11:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19221354,
    "owner_login": "neshoj",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19221354?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "learn",
      "creating",
      "going",
      "found",
      "electron",
      "requesting",
      "postwoman",
      "kept",
      "wanted"
    ]
  },
  {
    "id": 218969039,
    "name": "JavaScript-PostmanClone",
    "full_name": "Amer15/JavaScript-PostmanClone",
    "description": "Postman clone build with Vanilla JS which supports GET and POST requests",
    "fork": false,
    "created_at": "2019-11-01T11:00:47Z",
    "updated_at": "2019-11-01T11:07:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52877053,
    "owner_login": "Amer15",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/52877053?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "build",
      "support",
      "clone"
    ]
  },
  {
    "id": 64819586,
    "name": "postman-loader-javascript",
    "full_name": "rathahin/postman-loader-javascript",
    "description": "A utilities to load postman as request configuration",
    "fork": false,
    "created_at": "2016-08-03T06:04:35Z",
    "updated_at": "2016-08-03T06:04:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4031452,
    "owner_login": "rathahin",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/4031452?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "util",
      "load",
      "config",
      "configuration",
      "utilities"
    ]
  },
  {
    "id": 233209869,
    "name": "Java_TravellingPostmanProblem",
    "full_name": "stdiohakacy/Java_TravellingPostmanProblem",
    "description": null,
    "fork": false,
    "created_at": "2020-01-11T09:52:22Z",
    "updated_at": "2020-01-11T09:53:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42318548,
    "owner_login": "stdiohakacy",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42318548?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 192989538,
    "name": "javaUnirest",
    "full_name": "johnnycupcakes/javaUnirest",
    "description": "Simple implementation for making HTTP raw requests using Postman and the HS API",
    "fork": false,
    "created_at": "2019-06-20T21:27:41Z",
    "updated_at": "2019-06-20T21:29:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11359253,
    "owner_login": "johnnycupcakes",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11359253?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "implement",
      "implementation",
      "making"
    ]
  },
  {
    "id": 142798122,
    "name": "Multithread-Web-Server",
    "full_name": "xzhang007/Multithread-Web-Server",
    "description": "Developed a web server in Java capable of handling HTTP requests and parsing those requests, and sending out various HTTP responses. â€¢ Handles basic user authentication and CGI which could execute concurrently using multithreading and synchronized method. And it could send binary files like images over network. â€¢ Using GitHub repository to control versions and Postman to test as well as factory design pattern.",
    "fork": false,
    "created_at": "2018-07-29T21:54:31Z",
    "updated_at": "2018-11-07T23:21:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16105149,
    "owner_login": "xzhang007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16105149?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "request",
      "file",
      "repos",
      "repository",
      "server",
      "requests",
      "user",
      "sign",
      "auth",
      "files",
      "send",
      "read",
      "authentication",
      "response",
      "rent",
      "version",
      "image",
      "method",
      "control",
      "design",
      "various",
      "images",
      "responses",
      "sync",
      "handling",
      "sending",
      "those",
      "actor",
      "current",
      "network",
      "execute",
      "currently",
      "reading",
      "versions",
      "parsing",
      "capable"
    ]
  },
  {
    "id": 73997186,
    "name": "Mars-Colony-App",
    "full_name": "HaninMustafa/Mars-Colony-App",
    "description": "MARS COLONY APP - Web-Based Application: A mobile first responsive layout that uses Angular2 to implement GET and POST HTTP requests with our internal API to save colonistâ€™s info and alien encounter and use localStorage to save colonist object",
    "fork": false,
    "created_at": "2016-11-17T06:25:10Z",
    "updated_at": "2017-02-06T18:30:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21347476,
    "owner_login": "HaninMustafa",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/21347476?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "implement",
      "local",
      "info",
      "uses",
      "object",
      "mobile",
      "intern",
      "internal",
      "responsive"
    ]
  },
  {
    "id": 21957860,
    "name": "zendesk-search-api-requests",
    "full_name": "ckumar1/zendesk-search-api-requests",
    "description": "Used to collaboratively share search requests saved in Postman client",
    "fork": false,
    "created_at": "2014-07-17T21:14:32Z",
    "updated_at": "2014-07-17T21:14:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5449665,
    "owner_login": "ckumar1",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5449665?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "client",
      "requests",
      "search",
      "collaboratively"
    ]
  },
  {
    "id": 174132296,
    "name": "Email-sender-no-IMAP",
    "full_name": "rishav394/Email-sender-no-IMAP",
    "description": "Handles POST request to the site and sends the mail accordingly. Useful to send mail using curl, POSTMAN or other command lines tools when email clients are blocked by your org or college.",
    "fork": false,
    "created_at": "2019-03-06T11:29:01Z",
    "updated_at": "2019-04-21T07:39:34Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 18554373,
    "owner_login": "rishav394",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/18554373?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "tool",
      "client",
      "mail",
      "line",
      "send",
      "site",
      "tools",
      "email",
      "command",
      "curl",
      "command line",
      "lines",
      "e mail",
      "according",
      "clients",
      "sends",
      "college",
      "accordingly"
    ]
  }
]