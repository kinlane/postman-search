[
  {
    "id": 19074246,
    "name": "postman",
    "full_name": "zachlatta/postman",
    "description": "CLI tool for batch-sending email via any SMTP server.",
    "fork": false,
    "created_at": "2014-04-23T15:10:50Z",
    "updated_at": "2020-03-29T05:16:42Z",
    "stargazers_count": 743,
    "watchers_count": 743,
    "forks": 49,
    "watchers": 743,
    "score": 1,
    "owner_id": 992248,
    "owner_login": "zachlatta",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/992248?v=4",
    "pulled": 1,
    "tags": [
      "tool",
      "server",
      "mail",
      "send",
      "email",
      "sending",
      "batch"
    ]
  },
  {
    "user": "fedepaol",
    "repo": "PostmanLib--Rings-Twice--Android",
    "pulled": "User",
    "id": 3071734,
    "name": "PostmanLib--Rings-Twice--Android",
    "full_name": "fedepaol/PostmanLib--Rings-Twice--Android",
    "description": "An android library to make easier the interaction with a remote server",
    "fork": false,
    "created_at": "2011-12-29T23:33:28Z",
    "updated_at": "2020-02-16T10:16:14Z",
    "forks": 14,
    "open_issues": 3,
    "watchers": 98,
    "network_count": 14,
    "subscribers_count": 9,
    "owner_id": 200560,
    "owner_login": "fedepaol",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/200560?v=4",
    "owner_type": "User",
    "tags": [
      "server",
      "interact",
      "library",
      "action",
      "android",
      "interaction",
      "remote",
      "easier"
    ]
  },
  {
    "id": 41257354,
    "name": "moklr",
    "full_name": "sumory/moklr",
    "description": "another \"postman\", status server, http request mock.",
    "fork": false,
    "created_at": "2015-08-23T16:27:38Z",
    "updated_at": "2020-03-25T03:36:23Z",
    "stargazers_count": 89,
    "watchers_count": 89,
    "forks": 26,
    "watchers": 89,
    "score": 1,
    "owner_id": 1326893,
    "owner_login": "sumory",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1326893?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "server",
      "http",
      "stat",
      "mock",
      "status",
      "another",
      "\"postman\""
    ]
  },
  {
    "id": 67780262,
    "name": "mockserver",
    "full_name": "flftfqwxf/mockserver",
    "description": "Mockserver is a  mock data tools and switch between mock data and real data,【一个用于前后分离时模拟数据的web系统，并可在直实数据与实际数据中自由切换】",
    "fork": false,
    "created_at": "2016-09-09T08:17:19Z",
    "updated_at": "2020-03-05T10:26:03Z",
    "stargazers_count": 317,
    "watchers_count": 317,
    "forks": 97,
    "watchers": 317,
    "score": 1,
    "owner_id": 5468564,
    "owner_login": "flftfqwxf",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5468564?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "tool",
      "server",
      "mock",
      "tools",
      "between"
    ]
  },
  {
    "user": "prakhar1989",
    "repo": "Postman-demo-server",
    "pulled": "User",
    "id": 17968936,
    "name": "Postman-demo-server",
    "full_name": "prakhar1989/Postman-demo-server",
    "description": "Demo server for postman",
    "fork": false,
    "created_at": "2014-03-21T05:05:14Z",
    "updated_at": "2019-10-10T08:10:31Z",
    "forks": 8,
    "open_issues": 0,
    "watchers": 4,
    "network_count": 8,
    "subscribers_count": 1,
    "owner_id": 649249,
    "owner_login": "prakhar1989",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/649249?v=4",
    "owner_type": "User",
    "tags": [
      " postman",
      "server"
    ]
  },
  {
    "id": 1354660,
    "name": "postman-server",
    "full_name": "obeattie/postman-server",
    "description": "The Postman node.js server.",
    "fork": false,
    "created_at": "2011-02-11T11:06:22Z",
    "updated_at": "2016-04-18T07:51:33Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 5,
    "watchers": 6,
    "score": 1,
    "owner_id": 5988,
    "owner_login": "obeattie",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5988?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "node"
    ]
  },
  {
    "user": "duyn9uyen",
    "repo": "postman-jenkins-demo",
    "pulled": "User",
    "id": 113126861,
    "name": "postman-jenkins-demo",
    "full_name": "duyn9uyen/postman-jenkins-demo",
    "description": "A demo project on running Postman API tests with Newman on a Jenkins build server",
    "fork": false,
    "created_at": "2017-12-05T03:24:38Z",
    "updated_at": "2018-10-04T10:20:27Z",
    "forks": 6,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 6,
    "subscribers_count": 1,
    "owner_id": 6518508,
    "owner_login": "duyn9uyen",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6518508?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "tests",
      "server",
      "tests ",
      "build",
      "demo",
      "running"
    ]
  },
  {
    "user": "asmoker",
    "repo": "btrackers-postman",
    "pulled": "User",
    "id": 109074200,
    "name": "btrackers-postman",
    "full_name": "asmoker/btrackers-postman",
    "description": "btrackers-postman - BitTorrent Trackers Postman, fetch BitTorrent Trackers URL list from ngosang/trackerslist and post to your aria2 server via jsonrpc.",
    "fork": false,
    "created_at": "2017-11-01T02:01:02Z",
    "updated_at": "2019-12-26T07:53:38Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 12,
    "network_count": 2,
    "subscribers_count": 1,
    "owner_id": 5378517,
    "owner_login": "asmoker",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/5378517?v=4",
    "owner_type": "User",
    "tags": [
      "server",
      "json",
      "list",
      "rent",
      "track",
      "fetch",
      "tracker"
    ]
  },
  {
    "user": "johnny-tu",
    "repo": "postman-workshop-Fundamentals",
    "pulled": "User",
    "id": 207337154,
    "name": "postman-workshop-Fundamentals",
    "full_name": "johnny-tu/postman-workshop-Fundamentals",
    "description": null,
    "fork": false,
    "created_at": "2019-09-09T15:05:52Z",
    "updated_at": "2019-12-14T20:36:59Z",
    "forks": 3,
    "open_issues": 0,
    "watchers": 7,
    "network_count": 3,
    "subscribers_count": 1,
    "owner_id": 11577116,
    "owner_login": "johnny-tu",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11577116?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "yannickbodin",
    "repo": "EIP_Postman_Library",
    "pulled": "User",
    "id": 99006652,
    "name": "EIP_Postman_Library",
    "full_name": "yannickbodin/EIP_Postman_Library",
    "description": "Library of rest webservices call for EfficientIP SOLIDserver appliances",
    "fork": false,
    "created_at": "2017-08-01T13:52:20Z",
    "updated_at": "2018-12-05T11:41:49Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 2,
    "subscribers_count": 1,
    "owner_id": 30628007,
    "owner_login": "yannickbodin",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/30628007?v=4",
    "owner_type": "User",
    "tags": [
      "rest",
      "service",
      "server",
      "call",
      "services",
      "webservice",
      "webservices",
      "rest web"
    ]
  },
  {
    "user": "czardoz",
    "repo": "postman-mock-server",
    "pulled": "User",
    "id": 39189142,
    "name": "postman-mock-server",
    "full_name": "czardoz/postman-mock-server",
    "description": "Serves responses from a Postman Collection through a real HTTP server",
    "fork": false,
    "created_at": "2015-07-16T09:43:07Z",
    "updated_at": "2018-12-03T06:35:18Z",
    "forks": 1,
    "open_issues": 1,
    "watchers": 6,
    "network_count": 1,
    "subscribers_count": 2,
    "owner_id": 3726484,
    "owner_login": "czardoz",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3726484?v=4",
    "owner_type": "User",
    "tags": [
      "server",
      "response",
      "responses"
    ]
  },
  {
    "user": "DIPSAS",
    "repo": "EhrStore.Postman",
    "pulled": "Organization",
    "id": 175819935,
    "name": "EhrStore.Postman",
    "full_name": "DIPSAS/EhrStore.Postman",
    "description": "Some postman scripts to test and verify the features of an openEHR server ",
    "fork": false,
    "created_at": "2019-03-15T12:54:01Z",
    "updated_at": "2020-02-14T09:06:48Z",
    "forks": 1,
    "open_issues": 1,
    "watchers": 5,
    "network_count": 1,
    "subscribers_count": 3,
    "owner_id": 10976610,
    "owner_login": "DIPSAS",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10976610?v=4",
    "owner_type": "Organization",
    "tags": [
      "test",
      " postman",
      "script",
      "server",
      "scripts",
      "open",
      "feature",
      "features",
      "postman scripts",
      "verify"
    ]
  },
  {
    "user": "vishnoitanuj",
    "repo": "Blockchain-Cryptocurrency",
    "pulled": "User",
    "id": 158826019,
    "name": "Blockchain-Cryptocurrency",
    "full_name": "vishnoitanuj/Blockchain-Cryptocurrency",
    "description": "A basic implementation of blockchain based on flask server. It servers the basics of crypto-currency technology. The genesis, block constructor and its use are explained in the read-me file. Any suggestions are welcomed.",
    "fork": false,
    "created_at": "2018-11-23T11:50:24Z",
    "updated_at": "2020-02-13T17:04:10Z",
    "forks": 2,
    "open_issues": 1,
    "watchers": 3,
    "network_count": 2,
    "subscribers_count": 0,
    "owner_id": 26393267,
    "owner_login": "vishnoitanuj",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26393267?v=4",
    "owner_type": "User",
    "tags": [
      "file",
      "server",
      "based",
      "implement",
      "read",
      "implementation",
      "struct",
      "tech",
      "chai",
      "currency",
      "flask",
      "crypto",
      "blockchain",
      "plain",
      "servers",
      "basics",
      "technology",
      "explain",
      "suggest",
      "welcome"
    ]
  },
  {
    "user": "gauravsinghrawat",
    "repo": "postmanClone",
    "pulled": "User",
    "id": 223626730,
    "name": "postmanClone",
    "full_name": "gauravsinghrawat/postmanClone",
    "description": "This the demo working clone of Post man API to make different type of requests to test our server API.",
    "fork": false,
    "created_at": "2019-11-23T17:23:12Z",
    "updated_at": "2019-12-02T11:55:37Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 48629593,
    "owner_login": "gauravsinghrawat",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/48629593?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "request",
      "server",
      "requests",
      "demo",
      "rent",
      "working",
      "type",
      "clone"
    ]
  },
  {
    "id": 165998464,
    "name": "PostmanDemo",
    "full_name": "danielplawgo/PostmanDemo",
    "description": null,
    "fork": false,
    "created_at": "2019-01-16T07:55:35Z",
    "updated_at": "2019-12-11T10:15:17Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 70243,
    "owner_login": "danielplawgo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/70243?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 39189142,
    "name": "postman-mock-server",
    "full_name": "czardoz/postman-mock-server",
    "description": "Serves responses from a Postman Collection through a real HTTP server",
    "fork": false,
    "created_at": "2015-07-16T09:43:07Z",
    "updated_at": "2018-12-03T06:35:18Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 1,
    "watchers": 6,
    "score": 1,
    "owner_id": 3726484,
    "owner_login": "czardoz",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3726484?v=4",
    "tags": [
      "server",
      "response",
      "responses"
    ]
  },
  {
    "id": 175819935,
    "name": "EhrStore.Postman",
    "full_name": "DIPSAS/EhrStore.Postman",
    "description": "Some postman scripts to test and verify the features of an openEHR server ",
    "fork": false,
    "created_at": "2019-03-15T12:54:01Z",
    "updated_at": "2020-02-14T09:06:48Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 1,
    "watchers": 5,
    "score": 1,
    "owner_id": 10976610,
    "owner_login": "DIPSAS",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10976610?v=4",
    "tags": [
      "test",
      " postman",
      "script",
      "server",
      "scripts",
      "open",
      "feature",
      "features",
      "postman scripts",
      "verify"
    ]
  },
  {
    "id": 60532197,
    "name": "yaoyi-postman-express-json",
    "full_name": "YKKKY/yaoyi-postman-express-json",
    "description": null,
    "fork": false,
    "created_at": "2016-06-06T13:57:28Z",
    "updated_at": "2016-06-26T10:17:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 18323447,
    "owner_login": "YKKKY",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/18323447?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 158826019,
    "name": "Blockchain-Cryptocurrency",
    "full_name": "vishnoitanuj/Blockchain-Cryptocurrency",
    "description": "A basic implementation of blockchain based on flask server. It servers the basics of crypto-currency technology. The genesis, block constructor and its use are explained in the read-me file. Any suggestions are welcomed.",
    "fork": false,
    "created_at": "2018-11-23T11:50:24Z",
    "updated_at": "2020-02-13T17:04:10Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 2,
    "watchers": 3,
    "score": 1,
    "owner_id": 26393267,
    "owner_login": "vishnoitanuj",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26393267?v=4",
    "tags": [
      "file",
      "server",
      "based",
      "implement",
      "read",
      "implementation",
      "struct",
      "tech",
      "chai",
      "currency",
      "flask",
      "crypto",
      "blockchain",
      "plain",
      "servers",
      "basics",
      "technology",
      "explain",
      "suggest",
      "welcome"
    ]
  },
  {
    "id": 217169536,
    "name": "postman-cli",
    "full_name": "stt-systems/postman-cli",
    "description": "Python CLI tool for 📧 emails sending using SMTP server",
    "fork": false,
    "created_at": "2019-10-23T23:10:43Z",
    "updated_at": "2020-02-28T07:47:57Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 2,
    "watchers": 2,
    "score": 1,
    "owner_id": 47316673,
    "owner_login": "stt-systems",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/47316673?v=4",
    "tags": [
      "tool",
      "server",
      "mail",
      "send",
      "email",
      "emails",
      "sending"
    ]
  },
  {
    "id": 21312672,
    "name": "stubman",
    "full_name": "dorzey/stubman",
    "description": "Turns a Postman collection into a stub server.",
    "fork": false,
    "created_at": "2014-06-28T23:05:24Z",
    "updated_at": "2016-08-24T09:55:05Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 61307,
    "owner_login": "dorzey",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/61307?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "server"
    ]
  },
  {
    "id": 166621102,
    "name": "NodeJS",
    "full_name": "zhiji95/NodeJS",
    "description": "And node js server with instruction of postman and npm",
    "fork": false,
    "created_at": "2019-01-20T03:59:13Z",
    "updated_at": "2019-01-20T04:21:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33732707,
    "owner_login": "zhiji95",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33732707?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "node",
      "struct",
      "instruction"
    ]
  },
  {
    "id": 127814359,
    "name": "NODE-API-SERVER",
    "full_name": "dragomir1/NODE-API-SERVER",
    "description": "Node API server using Postman to make CRUD operations.",
    "fork": false,
    "created_at": "2018-04-02T21:25:05Z",
    "updated_at": "2018-04-02T21:26:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16617178,
    "owner_login": "dragomir1",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16617178?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "operation",
      "operations"
    ]
  },
  {
    "id": 237809510,
    "name": "httpServerProj",
    "full_name": "ZhiroMusikyan/httpServerProj",
    "description": " Creating test server for handling Requests and Responses via Postman",
    "fork": false,
    "created_at": "2020-02-02T17:38:01Z",
    "updated_at": "2020-02-02T20:53:16Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 40068920,
    "owner_login": "ZhiroMusikyan",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/40068920?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "server",
      "handling"
    ]
  },
  {
    "id": 35385485,
    "name": "jenkman",
    "full_name": "timemachine3030/jenkman",
    "description": "Jenkins CI testing of node API servers with Postman/Newman",
    "fork": false,
    "created_at": "2015-05-10T19:48:48Z",
    "updated_at": "2018-02-08T16:20:09Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 338063,
    "owner_login": "timemachine3030",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/338063?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "server",
      "node",
      "servers"
    ]
  },
  {
    "id": 64861848,
    "name": "todo-api",
    "full_name": "Finble/todo-api",
    "description": "node.js app + express server.js + heroku (using postman)",
    "fork": false,
    "created_at": "2016-08-03T16:34:23Z",
    "updated_at": "2016-08-03T16:34:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7348626,
    "owner_login": "Finble",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7348626?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "node",
      "express",
      " express",
      "heroku"
    ]
  },
  {
    "id": 218393489,
    "name": "Programmeren-4-RESTful-API",
    "full_name": "LucJoostenNL/Programmeren-4-RESTful-API",
    "description": "In this assignment from school I have been asked to create a RESTful API with several routes. I used Node JS in combination with Javascript to create a local server that provides an API, and it persists through that API data in a local database.",
    "fork": false,
    "created_at": "2019-10-29T22:15:40Z",
    "updated_at": "2019-11-03T12:30:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 57142966,
    "owner_login": "LucJoostenNL",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/57142966?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "script",
      "server",
      "database",
      "sign",
      "route",
      "local",
      "routes",
      "provide",
      "ever",
      "been",
      "assignment",
      "provides",
      "several",
      "school"
    ]
  },
  {
    "id": 86855803,
    "name": "slack-bots",
    "full_name": "nathan-hega/slack-bots",
    "description": "A Node.js / Express server that integrates with Slack slash commands.",
    "fork": false,
    "created_at": "2017-03-31T20:00:02Z",
    "updated_at": "2017-04-24T21:56:47Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 2591298,
    "owner_login": "nathan-hega",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2591298?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "command",
      "integrate",
      "commands",
      "integrates"
    ]
  },
  {
    "id": 128285172,
    "name": "back-end-nodejs",
    "full_name": "gparasyris/back-end-nodejs",
    "description": "Simple Node JS Express server handling POST, GET, PUT, DELETE requests.",
    "fork": false,
    "created_at": "2018-04-06T01:50:22Z",
    "updated_at": "2018-08-12T15:25:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38101481,
    "owner_login": "gparasyris",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38101481?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "server",
      "requests",
      "handling"
    ]
  },
  {
    "id": 148734817,
    "name": "todo-api-server",
    "full_name": "alsanchez-dev/todo-api-server",
    "description": "A todo server API with Auth, JWT, crypto-js no front-end but Postman",
    "fork": false,
    "created_at": "2018-09-14T04:14:25Z",
    "updated_at": "2018-10-15T19:28:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17913398,
    "owner_login": "alsanchez-dev",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17913398?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "front",
      "todo",
      "crypto"
    ]
  },
  {
    "id": 97892221,
    "name": "postman",
    "full_name": "rupakg/postman",
    "description": "A simple serverless application with an email service.",
    "fork": false,
    "created_at": "2017-07-21T01:21:50Z",
    "updated_at": "2018-06-05T03:42:27Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 1,
    "watchers": 4,
    "score": 1,
    "owner_id": 8188,
    "owner_login": "rupakg",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/8188?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "service",
      "server",
      "mail",
      "email",
      "serverless"
    ]
  },
  {
    "id": 2173059,
    "name": "Postman",
    "full_name": "frequence-web/Postman",
    "description": "Nano HTTP Webserver",
    "fork": false,
    "created_at": "2011-08-08T12:06:38Z",
    "updated_at": "2017-05-31T03:26:41Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 966225,
    "owner_login": "frequence-web",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/966225?v=4",
    "pulled": 1,
    "tags": [
      "server"
    ]
  },
  {
    "id": 164047649,
    "name": "postman",
    "full_name": "sharkattack51/postman",
    "description": "easy pub/sub messaging server using websocket.",
    "fork": false,
    "created_at": "2019-01-04T02:31:54Z",
    "updated_at": "2020-03-16T10:32:33Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 698447,
    "owner_login": "sharkattack51",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/698447?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "messaging",
      "websocket"
    ]
  },
  {
    "id": 246964852,
    "name": "postman",
    "full_name": "alexanderdang/postman",
    "description": null,
    "fork": false,
    "created_at": "2020-03-13T01:36:31Z",
    "updated_at": "2020-03-18T01:52:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 55205218,
    "owner_login": "alexanderdang",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/55205218?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 222993825,
    "name": "postman",
    "full_name": "venkatesulu-byni/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-11-20T17:41:46Z",
    "updated_at": "2019-11-20T17:41:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43978738,
    "owner_login": "venkatesulu-byni",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/43978738?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 13200106,
    "name": "postman",
    "full_name": "iamedu/postman",
    "description": "Clojure smtp server",
    "fork": false,
    "created_at": "2013-09-29T21:13:24Z",
    "updated_at": "2013-09-30T10:12:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 154848,
    "owner_login": "iamedu",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/154848?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "smtp"
    ]
  },
  {
    "id": 180657237,
    "name": "postman",
    "full_name": "lukas-conka/postman",
    "description": "Meu proprio postman feito em Node, simulando requisições cliente para server. Trabalhando com Content-Type e Status Code",
    "fork": false,
    "created_at": "2019-04-10T20:17:58Z",
    "updated_at": "2019-04-10T20:19:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10176368,
    "owner_login": "lukas-conka",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10176368?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "client",
      "proprio"
    ]
  },
  {
    "id": 171872810,
    "name": "postman",
    "full_name": "lavanyark/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-02-21T13:03:13Z",
    "updated_at": "2019-02-21T13:06:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47856568,
    "owner_login": "lavanyark",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47856568?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 131571248,
    "name": "mock-server",
    "full_name": "danghung-dev/mock-server",
    "description": "mock server for postman",
    "fork": false,
    "created_at": "2018-04-30T08:15:47Z",
    "updated_at": "2018-05-03T04:46:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5670932,
    "owner_login": "danghung-dev",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5670932?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "mock"
    ]
  },
  {
    "id": 83190724,
    "name": "nodejs-postman",
    "full_name": "ValerioSevilla/nodejs-postman",
    "description": "Example of a Node.js server exposing a simple REST API and tests for that API using Postman",
    "fork": false,
    "created_at": "2017-02-26T07:20:10Z",
    "updated_at": "2018-01-14T12:12:23Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 614661,
    "owner_login": "ValerioSevilla",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/614661?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "server",
      "tests ",
      "exposing"
    ]
  },
  {
    "id": 116638921,
    "name": "postman-Learning",
    "full_name": "divyaaa1812/postman-Learning",
    "description": null,
    "fork": false,
    "created_at": "2018-01-08T06:30:13Z",
    "updated_at": "2018-01-08T06:30:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35126910,
    "owner_login": "divyaaa1812",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/35126910?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 169819235,
    "name": "postman-app",
    "full_name": "prominentmajesty/postman-app",
    "description": null,
    "fork": false,
    "created_at": "2019-02-09T01:05:09Z",
    "updated_at": "2019-02-09T01:07:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39302159,
    "owner_login": "prominentmajesty",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/39302159?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 136947403,
    "name": "rest-api-test-postman-newman",
    "full_name": "FachrulCH/rest-api-test-postman-newman",
    "description": "Test REST API using postman/newman against mock server made by json-server",
    "fork": false,
    "created_at": "2018-06-11T15:43:19Z",
    "updated_at": "2018-06-11T15:45:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10245158,
    "owner_login": "FachrulCH",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10245158?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "json",
      "newman",
      "mock"
    ]
  },
  {
    "id": 195340400,
    "name": "Firebse-Sample-API-POSTMAN-Collection",
    "full_name": "AnilDeshpande/Firebse-Sample-API-POSTMAN-Collection",
    "description": null,
    "fork": false,
    "created_at": "2019-07-05T04:47:49Z",
    "updated_at": "2019-07-05T04:52:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 7361268,
    "owner_login": "AnilDeshpande",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7361268?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 143494286,
    "name": "API",
    "full_name": "ces-hackathon/API",
    "description": "Postman API documentation for creating mock server API and postman test scripts",
    "fork": false,
    "created_at": "2018-08-04T03:23:55Z",
    "updated_at": "2018-08-05T03:00:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42081563,
    "owner_login": "ces-hackathon",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/42081563?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "script",
      "server",
      "document",
      "documentation",
      "scripts",
      "mock",
      "creating"
    ]
  },
  {
    "id": 211289220,
    "name": "api-tests-postman-mockserver",
    "full_name": "NageshJoy007/api-tests-postman-mockserver",
    "description": "Write your api tests in a smart way using postman mock server.",
    "fork": false,
    "created_at": "2019-09-27T09:55:53Z",
    "updated_at": "2019-09-27T10:38:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16208506,
    "owner_login": "NageshJoy007",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/16208506?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "tests",
      "server",
      "tests ",
      "mock",
      "smart"
    ]
  },
  {
    "id": 207676318,
    "name": "RestAPITestingPostmanJenkins",
    "full_name": "qdoan1651/RestAPITestingPostmanJenkins",
    "description": null,
    "fork": false,
    "created_at": "2019-09-10T22:45:51Z",
    "updated_at": "2020-03-16T18:09:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17006414,
    "owner_login": "qdoan1651",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/17006414?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 246822435,
    "name": "CapturePostmanApi",
    "full_name": "SereetsiKC/CapturePostmanApi",
    "description": null,
    "fork": false,
    "created_at": "2020-03-12T11:57:14Z",
    "updated_at": "2020-03-12T11:57:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15948852,
    "owner_login": "SereetsiKC",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15948852?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 159636679,
    "name": "postmanapitest",
    "full_name": "vikrantmulani/postmanapitest",
    "description": "This is a very basic Postman API of json server test with a collection and environment file.",
    "fork": false,
    "created_at": "2018-11-29T08:58:20Z",
    "updated_at": "2018-11-29T09:27:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29890738,
    "owner_login": "vikrantmulani",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29890738?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "file",
      "server",
      "json",
      "environment",
      "very",
      "json server"
    ]
  },
  {
    "id": 161351660,
    "name": "Postman-Redfish-Collections",
    "full_name": "donzef/Postman-Redfish-Collections",
    "description": "Postman collections for Redfish requests against HPE servers",
    "fork": false,
    "created_at": "2018-12-11T15:08:16Z",
    "updated_at": "2020-03-13T14:46:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42031605,
    "owner_login": "donzef",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42031605?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "server",
      "requests",
      "servers"
    ]
  },
  {
    "id": 225230216,
    "name": "PostmanDjango",
    "full_name": "seyhak/PostmanDjango",
    "description": "Simple server with one SQLite tabel for recieving POST data using Django REST",
    "fork": false,
    "created_at": "2019-12-01T21:00:31Z",
    "updated_at": "2019-12-01T21:50:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25822349,
    "owner_login": "seyhak",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/25822349?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "server"
    ]
  },
  {
    "id": 188455910,
    "name": "RestAPI-CRUD",
    "full_name": "abircse/RestAPI-CRUD",
    "description": "Rest API CRUD operation using php (server: xampp, client: postman)",
    "fork": false,
    "created_at": "2019-05-24T16:37:15Z",
    "updated_at": "2019-05-24T16:39:51Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 22006238,
    "owner_login": "abircse",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22006238?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "client",
      "operation"
    ]
  },
  {
    "id": 193897888,
    "name": "rest-crud-showcase",
    "full_name": "leskivan/rest-crud-showcase",
    "description": "simple REST crud with json server and postman collection",
    "fork": false,
    "created_at": "2019-06-26T12:14:38Z",
    "updated_at": "2019-06-26T12:16:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26364658,
    "owner_login": "leskivan",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26364658?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "server",
      "json",
      "crud",
      "json server"
    ]
  },
  {
    "id": 186605066,
    "name": "Session21_169992_PostManagementRESTful",
    "full_name": "linhnv2590/Session21_169992_PostManagementRESTful",
    "description": null,
    "fork": false,
    "created_at": "2019-05-14T11:06:08Z",
    "updated_at": "2019-05-14T11:08:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4588820,
    "owner_login": "linhnv2590",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/4588820?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 104488567,
    "name": "RESTApplication",
    "full_name": "adsoftmar/RESTApplication",
    "description": " REST Client = PostMan (HTTP tool pluggin from Chrom), MyTestDB = SQL database, Node.js HTTP server ",
    "fork": false,
    "created_at": "2017-09-22T15:14:11Z",
    "updated_at": "2017-09-22T15:18:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28847525,
    "owner_login": "adsoftmar",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/28847525?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "tool",
      "server",
      "database",
      "pluggin"
    ]
  },
  {
    "id": 187020334,
    "name": "rest_api",
    "full_name": "Alpha-github/rest_api",
    "description": "Create a web server using flask and test for API requests using postman",
    "fork": false,
    "created_at": "2019-05-16T12:09:04Z",
    "updated_at": "2019-05-16T13:57:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37172066,
    "owner_login": "Alpha-github",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/37172066?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "request",
      "server",
      "requests",
      "flask"
    ]
  },
  {
    "id": 152749039,
    "name": "fake-rest-api-using-json-server",
    "full_name": "tareque20/fake-rest-api-using-json-server",
    "description": "Simple rest api test using json server",
    "fork": false,
    "created_at": "2018-10-12T12:43:14Z",
    "updated_at": "2018-10-12T13:05:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7992389,
    "owner_login": "tareque20",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7992389?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "rest",
      "server",
      "json",
      "rest api",
      "json server"
    ]
  },
  {
    "id": 206338782,
    "name": "Salesforce-REST-API",
    "full_name": "amiller-smg3/Salesforce-REST-API",
    "description": "Simple REST API example of both client (Postman) and server side (Salesforce)",
    "fork": false,
    "created_at": "2019-09-04T14:28:18Z",
    "updated_at": "2020-01-03T15:49:57Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 54900550,
    "owner_login": "amiller-smg3",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/54900550?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "client",
      "example",
      "side",
      "both"
    ]
  },
  {
    "id": 161655015,
    "name": "rest-api-setup",
    "full_name": "bwainaina380/rest-api-setup",
    "description": "This is practice for setting up a REST API with routes and a server and testing that everything is working using Postman client",
    "fork": false,
    "created_at": "2018-12-13T15:03:27Z",
    "updated_at": "2018-12-17T12:57:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38376660,
    "owner_login": "bwainaina380",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38376660?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "server",
      "client",
      "route",
      "routes",
      "very",
      "working",
      "ever",
      "practice",
      "setting",
      "every"
    ]
  },
  {
    "id": 164301156,
    "name": "mock-server-backend",
    "full_name": "abhi11210646/mock-server-backend",
    "description": "Create Fake REST API endpoints. Similar to Postman's mock server",
    "fork": false,
    "created_at": "2019-01-06T11:36:02Z",
    "updated_at": "2019-02-21T18:24:01Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 16542492,
    "owner_login": "abhi11210646",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16542492?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "endpoint",
      "points",
      "endpoints",
      "mock"
    ]
  },
  {
    "id": 188034720,
    "name": "nestjs-rest-api",
    "full_name": "Belchenkov/nestjs-rest-api",
    "description": "Explore the Nest JS Node.js framework which allows you to build fast and scalable server-side apps and APIs.",
    "fork": false,
    "created_at": "2019-05-22T12:31:38Z",
    "updated_at": "2019-05-25T09:41:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16445267,
    "owner_login": "Belchenkov",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16445267?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "framework",
      "build",
      "side",
      "allows",
      "apps"
    ]
  },
  {
    "id": 216312388,
    "name": "React_RestAPI",
    "full_name": "bobkrstic/React_RestAPI",
    "description": "CRUD with React.js and local JSON-Server. Adding books to the library with titles and ratings. Data is stored on a local json server and routes tested with Postman. Check README file for instructions on how to start the app. ",
    "fork": false,
    "created_at": "2019-10-20T05:29:50Z",
    "updated_at": "2019-10-31T03:15:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17989216,
    "owner_login": "bobkrstic",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/17989216?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "file",
      "server",
      "json",
      "tested",
      "route",
      "local",
      "routes",
      "star",
      "library",
      "start",
      "rating",
      "struct",
      "store",
      "book",
      "books",
      "title",
      "instruction",
      "json server",
      "stored"
    ]
  },
  {
    "id": 172431881,
    "name": "RESTful-CRUD-Node-Server",
    "full_name": "BenDixon311/RESTful-CRUD-Node-Server",
    "description": "NBA Roster Updater. I created this simple server using Node.js with MongoDB as my data store and Mongoose to model the data. Currently no front-end. Has ability to create, read, update, and delete through Postman.",
    "fork": false,
    "created_at": "2019-02-25T04:01:25Z",
    "updated_at": "2019-04-29T00:48:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14797940,
    "owner_login": "BenDixon311",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/14797940?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "server",
      "read",
      "front",
      "update",
      "rent",
      "delete",
      "store",
      "model"
    ]
  },
  {
    "id": 101423688,
    "name": "RESTful-In-Peace-Server",
    "full_name": "TahsinAnwarAkif/RESTful-In-Peace-Server",
    "description": "A Hospital Management  CRUD Project Developed with Spring Boot, MySQL, Maven, Postman & AngularJS (for front end in the same server). Client Code with Angular can be found in: https://github.com/TahsinAnwarAkif/RESTful-In-Peace-Client",
    "fork": false,
    "created_at": "2017-08-25T16:46:54Z",
    "updated_at": "2017-12-05T19:25:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24354345,
    "owner_login": "TahsinAnwarAkif",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/24354345?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "http",
      "https",
      "front",
      "github",
      "front end",
      "found"
    ]
  },
  {
    "id": 161524341,
    "name": "php_oop_rest_api",
    "full_name": "brankozecevic/php_oop_rest_api",
    "description": "This is a REST API using PHP and OOP principles. There is also MySQL database that you can use to import on your server (myblog.sql). This REST API is based on CRUD functionality (blog posts and blog categories). For testing use Postman app environment as a REST client.",
    "fork": false,
    "created_at": "2018-12-12T17:45:29Z",
    "updated_at": "2018-12-12T17:53:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45066671,
    "owner_login": "brankozecevic",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45066671?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "server",
      "client",
      "database",
      "based",
      "environment",
      "function",
      "import",
      "functional",
      "functionality",
      "blog",
      "posts",
      "principles"
    ]
  },
  {
    "id": 187129166,
    "name": "otte-express-lab",
    "full_name": "JessOtte/otte-express-lab",
    "description": "Task: Build a REST API with an Express server. Create a module that contains routes for your front-end to communicate with. Test the endpoints with Postman.",
    "fork": false,
    "created_at": "2019-05-17T01:58:15Z",
    "updated_at": "2019-05-20T01:13:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40188802,
    "owner_login": "JessOtte",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/40188802?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "contain",
      "endpoint",
      "points",
      "route",
      "endpoints",
      "routes",
      "front",
      "module",
      "communicate"
    ]
  },
  {
    "id": 206587682,
    "name": "PHP-Restful-Api-OOP-",
    "full_name": "Hossam-PHP/PHP-Restful-Api-OOP-",
    "description": "Project Run steps 1- You have sql file import it . (hossamapi.sql) 2- Put project folder in xampp/htdocs or any local server you want . 3- Go to postman and run this api urls :- 1. READ BOOKS ( Read All ): (Get) http://localhost/api/book/read.php2. CREATE BOOK : (POST) http://localhost/api/book/create.php Data to insert : { \"name\" : \"Amazing keivy 20.0\", \"isbn\" : \"4-7555-66777\", \"author\" : \"The best pillow for amazing readers.\", \"category_id\" : 2, \"publish_date\" : \"2018-06-01 00:35:07\" }3. UPDATE BOOK : (Post) http://localhost/api/book/update.php Data to update : { \"id\" : \"66\", \"name\" : \"Amazing keivy 20.0\", \"isbn\" : \"4-7555-66777\", \"author\" : \"The best pillow for amazing readers.\", \"category_id\" : 2, \"publish_date\" : \"2018-06-01 00:35:07\" }4. DELETE BOOK : (Delete) http://localhost/api/book/delete.php Data to delete : { \"id\" : \"66\" } ############################## 5. READ ONE BOOK : (Get) http://localhost/api/book/read_one.php?id=60 ############################## 6. SEARCH BOOKS : (Get) http://localhost/api/book/search.php?s=Amazing ############################## 7. PAGINATE BOOKS : (Get) http://localhost/api/book/read_paging.php ############################## 8. READ CATEGORIES : (Get) http://localhost/api/category/read.php",
    "fork": false,
    "created_at": "2019-09-05T14:45:35Z",
    "updated_at": "2019-09-09T13:45:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 54269560,
    "owner_login": "Hossam-PHP",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/54269560?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "file",
      "server",
      "http",
      "auth",
      "local",
      "read",
      "import",
      "update",
      "host",
      "delete",
      "name",
      "search",
      "book",
      "docs",
      "folder",
      "best",
      "steps",
      "insert",
      "amazing",
      "urls"
    ]
  },
  {
    "id": 91374388,
    "name": "JWT-Authentication",
    "full_name": "kpraneeth3456/JWT-Authentication",
    "description": "Project Title: JWT Authentication  Description: This project is a basic Authorization and Authentication which exchanges JSON web tokens between the client and the server for more security.  Execution: -Clone or download the repo from the GitHub link -npm install (to download the dependencies) -node index.js (To get the application running)  Working: -User has to enter his email and password to register his account.(Use any third-party rest-client like Postman on port 3000) -If the email already exists in the database it sends an error message and if the email does not exist it saves to the database. -If the user is signed up then he can go ahead and Sign-in with same username and password. -If the credentials are matched then a JSON web token will be sent to the client in the header. -If the username and password do not match then it sends back an error message.",
    "fork": false,
    "created_at": "2017-05-15T19:03:55Z",
    "updated_at": "2018-12-28T08:47:41Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 26414547,
    "owner_login": "kpraneeth3456",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26414547?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "data",
      "application",
      "rest",
      "script",
      "server",
      "client",
      "node",
      "database",
      "user",
      "sign",
      "mail",
      "send",
      "load",
      "read",
      "running",
      "more",
      "email",
      "name",
      "token",
      "message",
      "to do",
      "install",
      "between",
      "link",
      "header",
      "account",
      "download",
      "enter",
      "ready",
      "party",
      "register",
      "sends",
      "third",
      "dependencies",
      "tokens",
      "error",
      "match",
      "security",
      "exchange",
      "matched"
    ]
  },
  {
    "id": 215877357,
    "name": "busticketing",
    "full_name": "Mir00r/busticketing",
    "description": "Bus Reservation System_ and tried to implement an Admin portal which can be operated over browsers and a series of REST APIs to interact with the system using mobile applications or frontend applications written for the browsers. The complete systems has two important actors :  1. Admin user 2. End user  The _Admin user_ can access this application on browser (laptop or mobile/tablet, doesn't really matter as this is built using bootstrap, material design and is completely responsive) and can perform the following actions :  1. Signup 2. Login (Spring sessions) 3. Update their profile 4. Create an agency 5. Add buses to the agency 6. Add trips consisting of predefined stops and buses   The _End user_ can use their mobile application (yet to be built, however the REST APIs are ready and could be used via Postman or Swagger) to perform the following actions :  1. Signup 2. Login (and get a JWT token)  3. List all available stops 4. Search a trip between any two stops 5. Filter search results with a date option 6. Book a ticket for a given trip schedule  Admin interface and REST APIs both have their independent authentication mechanisms, the web application uses the cookie based authentication (provided by default by Spring security) and the REST API uses the JWT authentication for access. This application assumes the availability of 'MongoDB' installation on the localhost where the server will run or the use of docker-compose to boot up a mysqldb container and link the application with it within the realm of docker.  Any changes that the admin users will do on the web portal will impact the search results of the end users, there will be certain use cases which you may find missing here, I hope you will appreciate that the overall idea was to present a way to create such an application completely inside the realm of Spring Boot and not to actually building a fully functional reservation system.  The admin user interface is completely written in material design using Bootstrap v4 and is responsive to suite a variety of devices. The template engine used to render the admin views is Thymeleaf since the library is extremely extensible and its natural templating capability ensures templates can be prototyped without a back-end – which makes development very fast when compared with other popular template engines such as JSP.",
    "fork": false,
    "created_at": "2019-10-17T20:11:48Z",
    "updated_at": "2019-12-18T20:19:33Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 11166444,
    "owner_login": "Mir00r",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11166444?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "file",
      "application",
      "server",
      "user",
      "based",
      "develop",
      "implement",
      "contain",
      "sign",
      "auth",
      "build",
      "function",
      "local",
      "full",
      "read",
      "import",
      "interact",
      "built",
      "authentication",
      "front",
      "users",
      "library",
      "boot",
      "plate",
      "view",
      "host",
      "development",
      "face",
      "written",
      "very",
      "perform",
      "functional",
      "provide",
      "system",
      "access",
      "action",
      "side",
      "browser",
      "search",
      "web app",
      "mysql",
      "docker",
      "uses",
      "ever",
      "template",
      "case",
      "result",
      "interface",
      "token",
      "complete",
      "building",
      "design",
      "ully",
      "type",
      "fully",
      "install",
      "between",
      "link",
      "frontend",
      "available",
      "results",
      "applications",
      "within",
      "provided",
      "cases",
      "following",
      "mobile",
      "ready",
      "find",
      "given",
      "container",
      "popular",
      "actor",
      "suite",
      "define",
      "default",
      "templates",
      "both",
      "such",
      "engine",
      "sessions",
      "mechanism",
      "profile",
      "schedule",
      "consist",
      "render",
      "admin",
      "pact",
      "security",
      "makes",
      "systems",
      "important",
      "inside",
      "compose",
      "fully functional",
      "material",
      "series",
      "ticket",
      "responsive",
      "operate",
      "compare",
      "prototype",
      "completely",
      "idea",
      "consisting",
      "actually",
      "devices",
      "reservation",
      "predefined"
    ]
  },
  {
    "id": 221031251,
    "name": "PostmanTest_example",
    "full_name": "Eka-2019/PostmanTest_example",
    "description": "some example simple tests in postman + fake server and basic authorization",
    "fork": false,
    "created_at": "2019-11-11T17:12:12Z",
    "updated_at": "2019-11-11T17:29:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49332402,
    "owner_login": "Eka-2019",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/49332402?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "tests",
      "server",
      "tests ",
      "example",
      "auth",
      "fake",
      "authorization"
    ]
  },
  {
    "id": 142451555,
    "name": "postmango",
    "full_name": "agilov/postmango",
    "description": "Mock server that works with postman mock server file format",
    "fork": false,
    "created_at": "2018-07-26T14:20:40Z",
    "updated_at": "2019-08-18T14:45:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 825624,
    "owner_login": "agilov",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/825624?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "form",
      "file",
      "server",
      "format",
      "mock"
    ]
  },
  {
    "id": 119582645,
    "name": "PostmanMockHousehold",
    "full_name": "JConrad10/PostmanMockHousehold",
    "description": null,
    "fork": false,
    "created_at": "2018-01-30T19:18:08Z",
    "updated_at": "2018-01-30T19:18:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35972846,
    "owner_login": "JConrad10",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/35972846?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 66381229,
    "name": "postman2mockingjay",
    "full_name": "amishyn/postman2mockingjay",
    "description": null,
    "fork": false,
    "created_at": "2016-08-23T15:51:10Z",
    "updated_at": "2016-08-23T15:51:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4602,
    "owner_login": "amishyn",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/4602?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 105784380,
    "name": "RetroPostmanMock",
    "full_name": "MikeRzDev/RetroPostmanMock",
    "description": "An android library to mock server responses with retrofit and also using a mapper from a postman definition",
    "fork": false,
    "created_at": "2017-10-04T15:22:26Z",
    "updated_at": "2017-10-04T15:23:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6407124,
    "owner_login": "MikeRzDev",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6407124?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "response",
      "library",
      "mock",
      "responses",
      "android",
      "definition",
      "retrofit"
    ]
  },
  {
    "id": 134956663,
    "name": "postman_requests_mock",
    "full_name": "marcogiusti/postman_requests_mock",
    "description": null,
    "fork": false,
    "created_at": "2018-05-26T11:46:32Z",
    "updated_at": "2018-06-17T07:01:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 154377,
    "owner_login": "marcogiusti",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/154377?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 189068075,
    "name": "MEDIUM_postman_mock",
    "full_name": "AlekhyaAkella/MEDIUM_postman_mock",
    "description": null,
    "fork": false,
    "created_at": "2019-05-28T16:51:29Z",
    "updated_at": "2019-05-30T12:31:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47712386,
    "owner_login": "AlekhyaAkella",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47712386?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 220929967,
    "name": "Postman_Mock_Server",
    "full_name": "Serg-Pogrebnyak/Postman_Mock_Server",
    "description": null,
    "fork": false,
    "created_at": "2019-11-11T07:58:47Z",
    "updated_at": "2020-01-13T14:56:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33331545,
    "owner_login": "Serg-Pogrebnyak",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/33331545?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 189006585,
    "name": "mediumclone-postman-mock",
    "full_name": "Ganesh-Chandra/mediumclone-postman-mock",
    "description": null,
    "fork": false,
    "created_at": "2019-05-28T10:26:53Z",
    "updated_at": "2019-05-30T10:56:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35104706,
    "owner_login": "Ganesh-Chandra",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35104706?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 249094573,
    "name": "frontendWithAPI",
    "full_name": "Paul-O-95/frontendWithAPI",
    "description": "Integrating Frontend app with API using postman mock server",
    "fork": false,
    "created_at": "2020-03-22T01:52:09Z",
    "updated_at": "2020-03-22T10:51:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 52981401,
    "owner_login": "Paul-O-95",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/52981401?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "mock",
      "rating"
    ]
  },
  {
    "id": 109270196,
    "name": "mock-server",
    "full_name": "shixuev5/mock-server",
    "description": "基于postman api工作流的 mock server，集成业务api接口打包，请求mock，代理转发，参数校验",
    "fork": false,
    "created_at": "2017-11-02T13:44:17Z",
    "updated_at": "2018-01-11T09:52:02Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 3207014,
    "owner_login": "shixuev5",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/3207014?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "mock",
      "postman api"
    ]
  },
  {
    "id": 65392187,
    "name": "stromtrooper",
    "full_name": "sandeep89/stromtrooper",
    "description": "A mock server to depict usage of postman collections for mocking twitter api responses. (Name=>https://en.wikipedia.org/wiki/Stormtrooper_(Star_Wars))",
    "fork": false,
    "created_at": "2016-08-10T15:05:47Z",
    "updated_at": "2016-08-15T12:43:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5467034,
    "owner_login": "sandeep89",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5467034?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "postman collection",
      "server",
      "http",
      "postman collections",
      "https",
      "response",
      "mock",
      "responses",
      "wiki",
      "twitter",
      "wikipedia",
      "depict"
    ]
  },
  {
    "id": 165355829,
    "name": "api-hub",
    "full_name": "harenlewis/api-hub",
    "description": "A mock server application where in development or dummy APIs can be created and accessed by multiple users. Similar to Postman's advanced mock server.",
    "fork": false,
    "created_at": "2019-01-12T06:37:09Z",
    "updated_at": "2019-01-15T19:46:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12905568,
    "owner_login": "harenlewis",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/12905568?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "server",
      "user",
      "develop",
      "users",
      "mock",
      "development",
      "access",
      "esse",
      "multiple",
      "advance",
      "advanced",
      "dummy",
      "accessed"
    ]
  },
  {
    "id": 197917540,
    "name": "Complaint-Lodging",
    "full_name": "Shekhar-Shashank/Complaint-Lodging",
    "description": "It is an android complaint lodging app in which the front end is designed in android studio using java language. The restful API that the app interacts with is made using python flask. The database used is sqlite. And the language used to parse the data from the server is Json. For testing the requests like get and post we used postman as a dummy request generator.",
    "fork": false,
    "created_at": "2019-07-20T10:50:35Z",
    "updated_at": "2019-07-26T06:59:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52148699,
    "owner_login": "Shekhar-Shashank",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/52148699?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "data",
      "testing",
      "request",
      "rest",
      "server",
      "database",
      "requests",
      "sign",
      "interact",
      "front",
      "java",
      "restful",
      "python",
      "generator",
      "lang",
      "design",
      "parse",
      "flask",
      "designed",
      "android",
      "front end",
      "plain",
      "language",
      "dummy",
      "sqlite",
      "studio",
      "complaint"
    ]
  },
  {
    "id": 249174449,
    "name": "postmanJson",
    "full_name": "PinkaCourt/postmanJson",
    "description": null,
    "fork": false,
    "created_at": "2020-03-22T12:03:41Z",
    "updated_at": "2020-03-22T12:03:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 50292671,
    "owner_login": "PinkaCourt",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/50292671?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 91568417,
    "name": "PostmanJson",
    "full_name": "Angael/PostmanJson",
    "description": null,
    "fork": false,
    "created_at": "2017-05-17T11:23:35Z",
    "updated_at": "2017-05-17T11:23:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21974933,
    "owner_login": "Angael",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/21974933?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 114962946,
    "name": "tcp-postman",
    "full_name": "neshoj/tcp-postman",
    "description": "Angular4 implementation of an app that sends JSON request to a back end server that initiates tcp requests to a target server. Best for POS driven solutions.",
    "fork": false,
    "created_at": "2017-12-21T04:35:10Z",
    "updated_at": "2018-10-12T06:13:45Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 19221354,
    "owner_login": "neshoj",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19221354?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "server",
      "requests",
      "implement",
      "send",
      "implementation",
      "drive",
      "solution",
      "driven",
      "sends",
      "back end",
      "solutions",
      "initiate"
    ]
  },
  {
    "id": 193157969,
    "name": "jsonwebtoken",
    "full_name": "gloryer/jsonwebtoken",
    "description": "A demo back end server exposes user registration endpoint, user authentication endpoint, token endpoint and resource endpoint. The resource endpoint is protected by the JWT token. Only the client who possesses the valid token can access the resource. To get a token from the server, the client must authenticates itself to the server. To request the resource in the server, the client issue an http GET request to the resource endpoint, the server will verify the recieved jwt token. Once the token is valid, the server will send back the user information which indicated in the jwt token.  Front-end has not been implemented so far. The back-end is tested using Postman.",
    "fork": false,
    "created_at": "2019-06-21T20:43:09Z",
    "updated_at": "2019-06-21T20:52:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18592154,
    "owner_login": "gloryer",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/18592154?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "form",
      "server",
      "client",
      "http",
      "user",
      "implement",
      "format",
      "auth",
      "endpoint",
      "tested",
      "demo",
      "send",
      "source",
      "authentication",
      "info",
      "access",
      "infor",
      "resource",
      "information",
      "token",
      "esse",
      "implemented",
      "expose",
      "been",
      "authenticate",
      "exposes",
      "back end",
      "verify",
      "issue",
      "registration",
      "recieve"
    ]
  },
  {
    "id": 110963819,
    "name": "MyFirstApp",
    "full_name": "smmcgrath/MyFirstApp",
    "description": "Built in Node.js open source server framework. In this project I moved from client-side development (using JavaScript, HTML, and CSS) to building a server-side web application using the Express.js web framework hosted in Node.js runtime environment. The site includes a flatty style landing page including navigatation bar, sign-up forms, staff info etc. It has an uncluttered and minimal UI. The backend API’s communicated with databases designed using MongoDB, an example of a NoSQL database program using JSON-like objects with schemas. All APIs, including GET, PUT, UPDATE and DELETE were tested using Postman. Great experience using PuTTY open-source terminal emulator, working remotely over SSH network protocol. Securing my API with authentication; hashing passwords using Bcrypt and issuing tokens with JSON Web Token (JWT). New additions help to restrict access and ensure tokens are verified. Previous to this the back-end APIs could be easily accessed via the URL. User comments coudl be retrieved, new ones saved, deleted or updated. Hashing is a means of transforming a string of characters (passwords, in my case) into a different and larger set of characters, thus protecting our sensitive data. Bcrypt is the password hashing function used.",
    "fork": false,
    "created_at": "2017-11-16T11:34:16Z",
    "updated_at": "2018-12-15T19:14:11Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 30355322,
    "owner_login": "smmcgrath",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/30355322?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "form",
      "application",
      "rest",
      "server",
      "client",
      "database",
      "develop",
      "example",
      "sign",
      "environment",
      "auth",
      "tested",
      "framework",
      "help",
      "build",
      "function",
      "site",
      "source",
      "authentication",
      "update",
      "rent",
      "host",
      "delete",
      "development",
      "backend",
      "info",
      "access",
      "working",
      "program",
      "side",
      "web app",
      "open",
      "object",
      "case",
      "token",
      "esse",
      "building",
      "design",
      "were",
      "easily",
      "includes",
      "including",
      "mini",
      "schema",
      "designed",
      "retrieve",
      "objects",
      "style",
      "remote",
      "network",
      "terminal",
      "updated",
      "communicate",
      "comments",
      "hosted",
      "words",
      "tokens",
      "transform",
      "mean",
      "schemas",
      "accessed",
      "moved",
      "restrict",
      "protecting",
      "transforming",
      "minimal",
      "databases"
    ]
  },
  {
    "id": 131944978,
    "name": "CRUD-App-",
    "full_name": "Umang080799/CRUD-App-",
    "description": "I made a Crud App using Node.js,Express.js and Mongoose.js. I built out a book Schema for creating,reading,updating and deleting books.  Used Express Scripts to create routes that will form the basis for a restful API.  Used POSTMAN to perform actions on the routes All the book details were altered as JSON objects. I created and used Google Chrome to confirm the changes made on the local host server port 8080. ",
    "fork": false,
    "created_at": "2018-05-03T05:16:37Z",
    "updated_at": "2020-02-23T04:56:22Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 35209670,
    "owner_login": "Umang080799",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/35209670?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "rest",
      "server",
      "route",
      "local",
      "routes",
      "read",
      "built",
      "restful",
      "host",
      "creating",
      "perform",
      "action",
      "book",
      "object",
      "were",
      "objects",
      "books",
      "details",
      "updating",
      "reading"
    ]
  },
  {
    "id": 119091462,
    "name": "Zadanie_17_5",
    "full_name": "martinproxy0/Zadanie_17_5",
    "description": " 17. ExpressJS - ekspresowe tworzenie aplikacji w NodeJS Wyzwania: Dowiesz się czym jest ExpressJS Nauczysz się korzystać z routingu Poznasz czym są szablony 17.1. Wprowadzenie do Expressa Express jest jednym z najpopularniejszych frameworków dla aplikacji pisanych w Node.js. Jest bardzo lekki i pozwala na lepszą organizację aplikacji w modelu MVC. Ok, zwolnijmy. Już na samym starcie pojawiły się dwa pojęcia, których do tej pory nie omówiliśmy zbyt dokładnie: framework i MVC. Na początku przypomnijmy sobie czym jest framework.  Czym są frameworki? Framework to swego rodzaju szkielet, na którym opieramy budowę naszej aplikacji. Jest pewnym poziomem abstrakcji, na której konstruujemy naszą aplikację.  Czym jest abstrakcja? Abstrakcja w inżynierii oprogramowania to technika, dzięki której jesteśmy w stanie zapanować nad złożonością systemu. Najzwyczajniej w świecie nie da się myśleć na wielu płaszczyznach na raz, dlatego programiści dzielą problemy na pewne poziomy i to na nich rozwiązują mniejsze problemy. Przykładowo - programista korzystający z Reacta nie martwi się o niższy poziom abstrakcji, z którego nieświadomie korzysta używając Reacta. Korzystając z komputera także nie zastanawiamy się za bardzo co dzieje się w środku procesora czy też w jaki sposób jest skonstruowany. Tym poziomem abstrakcji po prostu nie zawracamy sobie głowy. Używając JavaScriptu nie myślimy w jaki sposób parser analizuje składnię języka. Jeśli nie jest to nam potrzebne, to możemy zająć się tym, co jest dla nas naprawdę istotne - pisaniem aplikacji internetowych!  Express to właśnie kolejny, wyższy poziom abstrakcji, dzięki któremu możemy skupić się na właściwym problemie. Zawiera zbiór generycznych (możliwych do zastosowania w wielu miejscach / uniwersalnych) funkcjonalności, które powtarzają się w obrębie każdej aplikacji. Cały zamysł frameworka opiera się na zasadzie - nie wymyślaj koła na nowo, bo można budować na podstawie dobrych, uniwersalnych rozwiązań. Po wykonaniu tego samego zadania wiele razy, człowiek instynktownie szuka sposobu na automatyzację problemu - szczególnie leniwy programista. :)  Framework ma niestety jedną wadę, która bywa momentami również zaletą - narzuca programiście sposób w jaki należy rozwiązać problem. Takie podejście z jednej strony nieco nas ogranicza, bo nie pozwala nam 'grzebać' w rozwiązaniu, a z drugiej strony zmniejsza ilość miejsc, w których moglibyśmy popełnić jakiś błąd. Zaletą takiego podejścia jest też to, że programiści korzystający z frameworków często borykają się z podobnymi problemami, przez co łatwo jest znaleźć rozwiązania, bo ktoś już na pewno zetknął się z czymś, co sprawia nam kłopot :)  Wracając do Expressa - jest on niewielkim frameworkiem, który daje programiście przyjemną podstawkę do tworzenia aplikacji, ale nie narzuca żadnych praktyk - może o tym świadczyć chociażby fakt, że wiele znanych frameworków opiera swoją budowę na Express. Można do nich zaliczyć przykładowo Loopbacka, Sailsa czy Krakena.  Model-View-Controller Ok, wiemy już czym jest framework - pora na pojęcie MVC :) Jest to skrót od ang. Model View Controller (Model Widok Kontroler). Jest jednym z najczęściej przewijających się wzorców architektonicznych w internecie. Popularnością pomału wypiera go architektura Flux, o której coraz częściej słychać (szczególnie w środowisku Reacta), ale o tym wzorcu powiemy sobie jeszcze przy okazji omawiania Reduxa - wróćmy do MVC.  Głównym założeniem przyjętym podczas projektowania MVC było oddzielenie warstwy prezentacji od logiki biznesowej aplikacji. To podejście umożliwia tworzenie narzędzi działających bez graficznego interfejsu (zastępuje go wtedy tzw. Command Line Interface, a.k.a. CLI) i jest dalej popularne w środowisku Unixowym. Tak więc:  Model jest reprezentacją logiki aplikacji / problemu z jakim się zmagamy / domeną. Widok opisuje w jaki sposób coś wyświetlić. W React są to komponenty (szczególnie te prezentacyjne). Kontroler przyjmuje dane od użytkownika aplikacji i reaguje na jego działania w obrębie widoku. Aktualizuje widok i model aplikacji. O samej architekturze można napisać osobny moduł tym bardziej, że jak już wcześniej wspomnieliśmy bardzo często przewija się on w środowisku front-end developerów i jest częścią składową wielu frameworków. Sama implementacja MVC wymaga wiedzy na temat programowania obiektowego i wzorców projektowych. Zainteresowanych zapraszam do przeczytania tej książki na temat wzorców projektowych stosowanych w JavaScripcie.  Express dostarcza wielu funkcjonalności do tworzenia aplikacji webowych. Jak już wspomniałem, ułatwia on przede wszystkim szybki rozwój aplikacji opartych na Node.js. Podstawowymi cechami tego frameworka są:  serwowanie plików statycznych za pomocą jednej komendy konfigurowanie middleware, czyli pośrednika między żądaniem a odpowiedzią w momencie, kiedy użytkownik wykonuje jakieś akcje, np. wysyła formularz, middleware może wykonać pewne czynności zanim dane zostaną zapisane. Nie sprowadza się to oczywiście tylko do zapisu danych, ale szerzej na temat tego zagadnienia powiemy sobie w dalszym rozdziale definiowanie tablicy routingu, czyli ścieżek (adresów), które wyświetlają odpowiednie treści, przyjmują i zapisują dane, bądź odpytane o dane zwracają je. Bazują na protokole HTTP oraz URI (ang. Uniform Resource Identifier) pozwala na dynamiczne tworzenie stron HTML bazujących na argumentach przekazanych do istniejących szablonów Nie przejmuj się, jeśli powyższe opisy wydają się być nieco zagmatwane. Kolejne rozdziały rozjaśnią sprawę! Zanim jednak przejdziemy do omawiania poszczególnych funkcjonalności Expressa, przeprowadzimy proces instalacji.  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.2. Instalacja ExpressJS Framework Express instalujemy używając npm, analogicznie do innych pakietów, które dodawaliśmy już we wcześniejszych modułach. Dla przypomnienia, wystarczy, że zainicjujesz swój projekt - npm init, a następnie użyjesz komendy npm install express --save, która zapisze zainstalowany pakiet w katalogu node_modules/ i doda go do sekcji dependencies w pliku package.json.  Razem z Expressem należy zainstalować jeszcze jeden ważny moduł - body-parser, który jest pakietem pozwalającym na obsługę różnych formatów danych w middleware takich jak JSON, text czy tzw. surowe dane (ang. raw data). Aby go zainstalować, wpisz npm install body-parser --save.  Pierwsza aplikacja w ExpressJS Sprawdźmy teraz, czy wszystko działa tak jak powinno. Testowa aplikacja, jaką stworzymy przy użyciu Expressa, będzie przedstawiała podstawową zasadę działania tego frameworka. Aplikacja uruchomi serwer oraz będzie nasłuchiwać na porcie 3000 w oczekiwaniu na połączenie - dokładnie w taki sam sposób, jak w przypadku serwera HTTP napisanego w “czystym\" Node.js. Nasłuchiwanie oznacza nic innego jak oczekiwanie na połączenie - po wystąpieniu żądania, serwer odpowie nam klasycznym “Hello world\".  Zanim zaczniemy tworzyć aplikację, musimy wytłumaczyć sobie pewne pojęcia.  Opis pojęcia routingu Routing to sposób określania jak aplikacja będzie odpowiadać na żądania klienta na dane endpointy przy użyciu konkretnych metod HTTP. Przypomnijmy sobie w jaki sposób wyglądały metody HTTP:  GET - najprostsza z metod HTTP - służy do pobierania zasobów z serwera. Pobranymi zasobami mogą być np. pliki HTML, CSS, JavaScript czy obiekty JSON / XML. POST - ta metoda jest używana do wysyłania danych do serwera. Stosuje się ją np. przy formularzach lub przy wstawianiu zdjęć i wysyłaniu ich jako załącznik. Zwykle dane te wysyłane są jako para klucz-wartość. PUT - działa podobnie jak POST, czyli również służy do wysyłania danych. Różnicą jest ograniczenie do wysłania tylko jednej porcji danych - np. jednego pola. Metoda ta najczęściej używana jest do aktualizacji istniejących danych DELETE - metoda, która służy do usuwania danych z serwera. Chodzi oczywiście o dane, które zostały wskazane przy wysyłaniu żądania. Kolejnym pojęciem jest URI (nazywane również PATH) - jest to właśnie wspomniany wcześniej endpoint, który zawiera polecenia do wykonania gdy zostanie wywołany przez żądanie.  Czas start! Na początek stwórzmy plik server.js w katalogu z projektem. Po zainstalowaniu powyższych zależności, drzewo projektu powinno wyglądać w następujący sposób:   Aby mieć możliwość skorzystania z zainstalowanych zależności, na początku należy zadeklarować zmienną, w której będziemy przechowywać funkcjonalności pakietu Expressa.  var express = require('express'); Jak widzisz, każda paczka JS'a działa dokładnie w taki sam sposób. Koncepcja modułów będzie przewijać się aż do końca tego kursu. Następnym krokiem będzie stworzenie aplikacji Express:  var app = express(); Naszą aplikację przypisaliśmy do zmiennej app. Teraz możemy sprawić, aby odpowiadała prostym Hello world w momencie, w którym odbierzemy wysłane zapytanie GET na adres strony domowej:  app.get('/', function(req, res) {     res.send('Hello world'); }); Powyższy kod rejestruje pierwszy routing (proces przetwarzania otrzymanego adresu żądania i na jego podstawie decydowanie, co powinno zostać uruchomione) na wysłane żądanie GET po wejściu na stronę główną ( http://localhost:3000/ ). Jako callback na wystąpienie tego zdarzenia wywoływana jest funkcja, która w przypadku udanej odpowiedzi wyśle wiadomość Hello world.  To jednak jeszcze nie koniec. Zarejestrowaliśmy obsługę pierwszego routingu, ale należy zainicjować nasłuchiwanie serwera na to i inne zdarzenia. Dopiszmy więc:  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Po zapisaniu powyższego kodu, należy uruchomić go komendą node server.js (lub za pomocą Nodemona, którego poznaliśmy w pierwszym module) - teraz po ponownym wejściu na adres http://localhost:3000/ powinniśmy zobaczyć następujący widok:   Jest to znak, że nasza aplikacja działa!  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.3. Route, czyli ścieżka wyznaczona dla użytkownika aplikacji Wykorzystanie endpointów Rozwińmy teraz trochę aplikację stworzoną w poprzednim podrozdziale. Aktualnie kod w pliku server.js wygląda następująco:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Endpointy statyczne Na początek zmodyfikujemy lekko żądanie GET i do strony głównej zamiast Hello world! wpiszmy Hello GET! oraz dodamy linijkę drukującą otrzymane żądanie (po stronie serwera) jak poniżej:  app.get('/', function (req, res) {     console.log('Otrzymałem żądanie GET do strony głównej');     res.send('Hello GET!'); }); Warto w tym miejscu wspomnieć o narzędziu Postman - możesz pobrać je ze strony https://www.getpostman.com/. Używa się go do testowania endpointów. Postman jest prosty i intuicyjny w obsłudze - wystarczy, że podasz adres oraz metodę HTTP, jakiej chcesz użyć w odpowiednich polach i… już :) Pozostaje tylko wysłanie requesta i sprawdzenie czy response zgadza się z naszymi oczekiwaniami.   Dodajmy też inne metody HTTP do naszej aplikacji. Zacznijmy od POST. Dla tej i kolejnej metody wykonamy podobne operacje. Chodzi tutaj o to, aby zaobserwować działanie zarejestrowanych endpointów.  app.post('/', function (req, res) {     console.log('Otrzymałem żądanie POST do strony głównej');     res.send('Hello POST!'); }); Do tego czasu oba nasze zapytania kierowaliśmy do strony domowej. Dodajmy teraz obsługę żądania z metodą DELETE oraz inną ścieżką:  app.delete('/del_user', function (req, res) {     console.log('Otrzymałem żądanie DELETE do strony /del_user');     res.send('Hello DELETE!'); }); DLA CHĘTNYCH: Przetestuj powyższe zapytanie w Postmanie! :)  Dla praktyki, dodajmy jeszcze kilka innych endpointów, a następnie przejdźmy do testowania.  app.get('/list_user', function (req, res) {     console.log('Otrzymałem żądanie GET do strony /list_user');     res.send('Strona z listą użytkowników!'); });  app.get('/ab*cd', function(req, res) {     console.log('Otrzymałem żądanie GET do strony /ab*cd');     res.send('Wzór pasuje'); }); Po dodaniu powyższych fragmentów kodu zapisz plik server.js, a następnie ponownie użyj komendy node server.js chyba, że używasz Nodemona :)  Zerknijmy na endpoint /list_user   Otrzymaliśmy to, czego oczekiwaliśmy. Sprawdźmy jeszcze inne.    Jeśli jednak użyliśmy endpointa, którego nie zdefiniowaliśmy, otrzymamy odpowiedź jak na ostatnim obrazku.  Endpointy dynamiczne Istnieje również inny typ endpointów, które nazywa się dynamicznymi. Używanie ich pozwala na przekazywanie parametrów i bazowanie na nich. Wróćmy na moment do kodu stworzonego na samym początku:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Najpierw zmodyfikujemy trochę bazowy kod. Usuńmy linijki 8-10, które miały nam tylko pokazać podstawowe informacje na temat serwera. Zamiast tego napiszmy po prostu: app.listen(3000);  Tworzenie dynamicznego routingu pozwala na przekazywanie parametrów, więc spróbujmy najpierw z przykładowym id. Zamiast odwołać się do strony domowej ('/'), odwołajmy się do zmiennego parametru id. Parametr zmienny od statycznego rozróżnia się poprzez dodanie dwukropka (:) przed nazwę. W naszym przykładzie endpoint będzie więc wyglądał następująco:  /:id Zmieńmy jeszcze odpowiedź z Hello world na 'Identyfikator, który został dopisany to ' + req.params.id.  Czym jest req.params.id? req jest obiektem reprezentującym zapytanie HTTP (ang. request). Posiada on różne parametry, jak na przykład body (czyli ciało zapytania), nagłówki HTTP oraz parametry (params), które mamy zamiar odczytać.  Parametr, który wstawiliśmy jako część adresu w metodzie GET, przekazujemy jako id. W poniższym przypadku wyświetli się komunikat Identyfikator który został dopisany to 123, o ile zapytanie wysłano na adres http://localhost:3000/123.   Popróbuj z różnymi innymi parametrami i sprawdź czy aplikacja działa tak, jak tego oczekujesz.  Obsługa błędu 404 za pomocą ExpressJS Co jeśli serwer nie rozpozna żądania? W Expressie odpowiedź 404 nie jest wynikiem błędu, więc nie jest wyłapywany w trakcie działania aplikacji. Spowodowane jest to tym, że 404 zwykle oznacza brak możliwości wykonania danej czynności, a nie błąd występujący z powodu jakiejś 'wpadki' programisty. Innymi słowy, Express wykonał wszystkie funkcje middleware (które poznamy w kolejnym rozdziale) oraz route'y i dopiero wtedy dowiedział się, że żaden z nich nie odpowiedział na żądanie - taki przypadek możemy obsłużyć poprzez dodanie funkcji middleware na samym końcu (poniżej pozostałych funkcji), aby obsługiwała status 404.  Powróćmy znów do poprzedniego szablonu z metodą GET na stronę domową ('/'), która zwraca nam Hello world!. Dopiszmy teraz metodę middleware, która obsłuży nam błąd 404.  Na samym końcu, poniżej fragmentu z nasłuchiwaniem dodajmy obsługę odpowiedzi 404:  app.use(function (req, res, next) {     res.status(404).send('Wybacz, nie mogliśmy odnaleźć tego, czego żądasz!') }); Po ponownym uruchomieniu skryptu, w przeglądarce powinieneś zobaczyć Hello world!. Spróbuj teraz dopisać coś na koniec adresu (tak jak w poprzednim rozdziale dopisaliśmy id). Powinieneś otrzymać następujący komunikat:   Parametr next, który przekazujemy do funkcji jest funkcją, która pozwala “iść dalej\" do kolejnej funkcji middleware lub zakończenia żądania.  Można w ten sposób stworzyć także obsługę pozostałych błędów. Najczęściej obsługiwane błędy to:  400 - bad request - występuje gdy serwer nie może przetworzyć zapytania 401 - unauthorized - występuje gdy wymagane jest uwierzytelnienie, a nie zostało dostarczone 403 - forbidden - żądanie jest poprawne, jednak serwer odmawia odpowiedzi, może to wystąpić w przypadku gdy np. użytkownik jest zalogowany ale nie ma uprawnień do wykonania żądania 404 - not found - zasoby nie zostały znalezione 500 - internal server error - występuje gdy występują nieznane warunki i nie ma żadnej konkretnej wiadomości Zadanie: Operacje CRUD na pliku JSON Stwórzmy teraz aplikację, która będzie otwierać zewnętrzne pliki .json oraz edytować je. Zanim zaczniemy, w folderze projektu stwórz plik server.js, a następnie zainicjalizuj projekt poprzez wpisanie npm init w konsoli.  Przejdźmy do pobrania potrzebnych zależności - tym razem będzie nam potrzebny Express oraz body-parser. Jak się zapewne domyślasz, możesz zainstalować je za pomocą komendy npm install --save express body-parser. Po pobraniu paczek, możemy śmiało przejść do pisania kodu - na początek przypisz zależności do zmiennych w pliku server.js. Dodaj także linijkę var fs = require('fs') - fs będzie nam potrzebny do operacji na plikach. Nie musimy go instalować, bo jest on wbudowany w Node :)  Skoro zależności mamy już załatwione, zadeklaruj zmienną app, która wywoła funkcję express() oraz zmienną stringifyFile (na razie bez zadeklarowanej wartości).  Tuż pod deklaracją zmiennych dodaj także linijkę app.use(bodyParser.json()); - to pozwoli Ci wykorzystać middleware body-parser, które zainstalowaliśmy przed chwilą. body-parser jest nam potrzebny, aby korzystać z formatu application/json - póki co nie przejmuj się pojęciem middleware, zajmiemy się nim nieco dalej w tym kursie :)  Stwórz teraz endpoint GET /getNote, gdzie po wywołaniu zostanie wczytany Twój zewnętrzny plik JSON oraz wyświetlona zostanie jego zawartość. Przykłądowy plik test.json:  {\"menu\": {    \"id\": \"file\",    \"value\": \"File\",    \"popup\": {      \"menuitem\": [        {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},        {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},        {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}      ]    }  }} Metoda która pozwoli nam na odczytanie pliku to readFile, którą można wywołać z zadeklarowanego wcześniej fs. Jako parametry przyjmuje ona najpierw plik, następnie opcje (np. kodowanie) i funkcję, która wywoła się po załadowaniu. W naszym przypadku będzie to więc następujący kod: fs.readFile('./test.json', 'utf8', function(err, data) {     if (err) throw err;     stringifyFile = data     res.send(data); }); Teraz pora na stworzenie endpointa, który po wywołaniu nadpisze nam podany plik. Stworzymy do tego dynamiczny endpoint, który dopisze do pliku string, który przekażemy jako parametr. Stwórz tym razem POST na /updateNote/:note. Po jego wywołaniu tekst, który znajduje się w miejscu /:note powinniśmy dopisać do wczytanego pliku poprzez dodanie req.params.note do zmiennej stringifyFile, która przechowuje aktualną zawartość pliku.  Po przypisaniu powyższej zmiennej, należy ponownie odwołać się do modułu fs tym razem używając metody writeFile. Pomoże nam w tym następujący fragment kodu:  fs.writeFile('./test.json', stringifyFile, function(err) {     If (err) throw err;     console.log('file updated'); }); Na końcu pliku dodaj nasłuchiwanie na porcie 3000.  Zapisz plik i uruchom aplikację wpisując node server.js w konsoli.  Otwórz Postmana, ustaw metodę zapytania na GET, a w pole adresu wpisz http://localhost:3000/getNote. Jako response powinieneś otrzymać Twój stworzony wcześniej plik JSON. Po zmianie z GET na POST oraz wpisaniu /updateNote/test zamiast /getNote oraz wysłaniu requesta, Twój plik JSON powinien zostać zaktualizowany o słowo test :)  Po ukończeniu zadania, wrzuć swój kod na Githuba i przekaż link do repozytorium mentorowi :)  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_3.git   Wyslij link  17.4. Serwowanie plików statycznych Express posiada wbudowaną możliwość serwowania plików statycznych - takimi plikami są na przykład obrazki, pliki CSS czy JS. Aby serwować te pliki statycznie, wystarczy użyć express.static. Pliki statyczne to pliki, które zostają dostarczone do klienta bez generowania, modyfikacji czy przetwarzania - jedyne, co trzeba z nimi zrobić, to przekazać nazwę katalogu, w którym są przetrzymywane, do express.static - to wystarczy aby zacząć je serwować. Spróbujmy przedstawić to sobie na przykładzie.  Załóżmy, że przetrzymujesz swoje zdjęcia i pliki CSS w katalogu assets/. Aby zacząć je serwować, możesz więc użyć następującej linijki:  app.use(express.static('assets')); Zmodyfikujmy więc całkowicie naszą aplikację. Najpierw stwórzmy w katalogu projektu nowy katalog o nazwie assets/. Wrzućmy do niego jakiekolwiek zdjęcie/obrazek. W pliku server.js wróćmy do poprzedniego stanu (zanim zaczęliśmy zajmować się routingiem):  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, 'localhost', function() {     var host = server.address().address;     var port = server.address().port;      console.log('Przykładowa aplikacja nasłuchuje na http://' + host + ':' + port); }); W tym przykładzie sami definiujemy port i adres, ale w prawdziwej aplikacji moglibyśmy tych wartości nie znać. Częstym przykładem jest sytuacja w której adres i port są zdefiniowane w osobnym pliku konfiguracyjnym. Ten plik byłby inny na naszym komputerze niż na serwerze na którym będziemy publikować aplikację - ale nasz kod ma działać w obu lokalizacjach. Dlatego do wyświetlenia linka potrzebowalibyśmy pobrania tych danych za pomocą metody .address().  Pozostaje teraz jedynie w linii nr 3 dodać to, o czym powiedzieliśmy sobie chwilkę temu, czyli linijkę app.use(express.static('assets'));  Dla przypomnienia, w nawiasach do express.static przekazujemy katalog, w którym znajdują się pliki, które chcemy serwować. Po zapisaniu pliku server.js, możemy uruchomić aplikację. Teraz, aby zobaczyć nasz obrazek, wystarczy że po http://localhost:3000/ podamy nazwę pliku z rozszerzeniem - u mnie wygląda to tak:   Stwórz sobie teraz prosty plik index.html, który będzie miał formularz z dwoma inputami typu text (o nazwach first_name i last_name) oraz jednym typu submit. Element  posiada atrybuty takie jak action oraz method. Atrybut action pozwala określić, gdzie wysłać dane z formularza w momencie, gdy zostanie on zatwierdzony. W naszym przypadku będzie to http://localhost:3000/userform. Atrybut method określa metodę, jakiej chcemy użyć - w naszym przypadku niech będzie to GET.  Przykładowo, Twój index.html może wyglądać tak:                          Node Hello world example                                                 First Name:                                            Last Name:                                           Gdy już będzie gotowy, wrzuć go do katalogu /assets.  Teraz czas na modyfikację pliku server.js. Najpierw zmieńmy to, co chcemy wysyłać, gdy zostanie wysłane żądanie do strony domowej.  Zamień więc res.send('Hello world') na res.sendFile('/index.html') - jak się zapewne domyślasz, res.sendFile() wysyła w odpowiedzi plik zamiast wiadomości.  Musimy również dodać obsługę żądania na endpoint, do którego będziemy kierować nasz formularz.  app.get('/userform', function (req, res) {     const response = {         first_name: req.query.first_name,         last_name: req.query.last_name     };     res.end(JSON.stringify(response)); }); W czasie przetwarzania żądania, tworzymy nowy obiekt response, który ma klucze first_name oraz last_name. Do poszczególnych właściwości przypisujemy dane, które otrzymujemy w obiekcie req (od ang. request), czyli w obiekcie z żądaniem. Na koniec wyświetlamy nasz obiekt przetworzony na typ string za pomocą metody JSON.stringify. Po zapisaniu pliku server.js, aplikacja powinna pokazywać formularz, jak poniżej.   Po wpisaniu wartości do inputów i wysłaniu ich, powinieneś zostać przekierowany do strony /userform, a po znaku zapytania powinny zostać wyświetlone parametry umieszczone przez Ciebie w inputach.   Zadanie: Żonglujemy danymi pomiędzy endpointami Napisz kod obsługujący formularz zgodnie z wskazówkami z tego submodułu, a następnie wyślij swój kod na repozytorium oraz przekaż go do sprawdzenia mentorowi.  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_4.git   Wyslij link 17.5. Middleware - pośrednik między żądaniem a odpowiedzią",
    "fork": false,
    "created_at": "2018-01-26T19:03:05Z",
    "updated_at": "2018-01-26T19:03:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13038633,
    "owner_login": "martinproxy0",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13038633?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "data",
      "request",
      "form",
      "file",
      "application",
      "server",
      "call",
      "node",
      "json",
      "http",
      "user",
      "develop",
      "express",
      "auto",
      "example",
      "automat",
      "implement",
      "format",
      " express",
      "auth",
      "endpoint",
      "framework",
      "route",
      "https",
      "function",
      "demo",
      "send",
      "local",
      "list",
      "star",
      "source",
      "read",
      "front",
      "update",
      "response",
      "stat",
      "host",
      "start",
      "delete",
      "face",
      "package",
      "method",
      "info",
      "developer",
      "system",
      "name",
      "html",
      "action",
      "module",
      "program",
      "infor",
      "github",
      "model",
      "tech",
      "esse",
      "text",
      "getpost",
      "problem",
      "install",
      "parse",
      "link",
      "proxy",
      "folder",
      "status",
      "require",
      "middleware",
      "parser",
      "console",
      "intern",
      "note",
      "popular",
      "party",
      "write",
      "query",
      "sets",
      "updated",
      "dynamic",
      "modules",
      "routing",
      "role",
      "world",
      "address",
      "dependencies",
      "found",
      "error",
      "internal",
      "listen",
      "jest",
      "kurs",
      "rake",
      "ekspresowe",
      "kazan",
      "wars"
    ]
  },
  {
    "id": 163893574,
    "name": "golangProject",
    "full_name": "RedaZenagui/golangProject",
    "description": "Creating a server that exposes a graphql endpoint that returns a struct taken from gRPC service when queried via something like postman.",
    "fork": false,
    "created_at": "2019-01-02T21:53:35Z",
    "updated_at": "2019-01-03T15:43:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37189636,
    "owner_login": "RedaZenagui",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/37189636?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "service",
      "server",
      "endpoint",
      "struct",
      "expose",
      "turns",
      "returns",
      "exposes",
      "graph",
      "something",
      "graphql"
    ]
  },
  {
    "id": 245247187,
    "name": "postman-proto",
    "full_name": "cwoolum/postman-proto",
    "description": null,
    "fork": false,
    "created_at": "2020-03-05T19:12:50Z",
    "updated_at": "2020-03-13T19:06:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 942415,
    "owner_login": "cwoolum",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/942415?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 226541388,
    "name": "gocrudapi",
    "full_name": "patabhi/gocrudapi",
    "description": "crud api in golang with postgres database. 1> Run server.go file. 2> Test the api using postman.",
    "fork": false,
    "created_at": "2019-12-07T16:16:52Z",
    "updated_at": "2020-01-22T17:53:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38621057,
    "owner_login": "patabhi",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/38621057?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "file",
      "server",
      "database",
      "lang",
      "crud",
      "golang",
      "postgres",
      "crud api"
    ]
  },
  {
    "id": 163505082,
    "name": "MongoDB-project",
    "full_name": "ifatimazahid/MongoDB-project",
    "description": "This MongoDB project includes creating own API server through a software POSTMAN by the help of the data contained in the MONGO database.",
    "fork": false,
    "created_at": "2018-12-29T11:17:35Z",
    "updated_at": "2018-12-29T12:01:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43816455,
    "owner_login": "ifatimazahid",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/43816455?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "server",
      "database",
      "contain",
      "help",
      "creating",
      "includes",
      "software",
      "contained"
    ]
  },
  {
    "id": 87771466,
    "name": "Mean-Hotel",
    "full_name": "regeanish/Mean-Hotel",
    "description": "Created a Hotel API where user can add, delete, update hotel name and reviews using NodeJS(Express) and MongoDB. Used RESTful API HTTP client POSTMAN for testing.  Additionally,  building UI for displaying information coming from the server & database about the hotel using AngularJS",
    "fork": false,
    "created_at": "2017-04-10T05:50:10Z",
    "updated_at": "2017-08-21T03:13:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17118506,
    "owner_login": "regeanish",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17118506?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "form",
      "server",
      "client",
      "database",
      "user",
      "format",
      "build",
      "update",
      "view",
      "delete",
      "info",
      "play",
      "name",
      "infor",
      "information",
      "building",
      "review",
      "display",
      "playing",
      "reviews",
      "hotel"
    ]
  },
  {
    "id": 140987980,
    "name": "face-recognition-api",
    "full_name": "shijiahu/face-recognition-api",
    "description": "- Built a facial recognition system, using React.js as front-end, Node.js and Express.js as back-end server, PostgreSQL as database, Postman as testing tool - Enabling sign up/sign in, recognize face from images features - Deployed the app to Heroku",
    "fork": false,
    "created_at": "2018-07-15T00:49:09Z",
    "updated_at": "2018-11-06T00:21:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 23464077,
    "owner_login": "shijiahu",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23464077?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "tool",
      "server",
      "database",
      "sign",
      "front",
      "image",
      "face",
      "system",
      "feature",
      "features",
      "images",
      "recognition",
      "facial",
      "sign up"
    ]
  },
  {
    "id": 140487882,
    "name": "face-recognition",
    "full_name": "shijiahu/face-recognition",
    "description": "- Built a facial recognition system, using React.js as front-end, Node.js and Express.js as back-end server, PostgreSQL as database, Postman as testing tool - Enabling sign up/sign in, recognize face from images features - Deployed the app to Heroku",
    "fork": false,
    "created_at": "2018-07-10T21:13:56Z",
    "updated_at": "2018-11-05T23:53:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23464077,
    "owner_login": "shijiahu",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23464077?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "tool",
      "server",
      "database",
      "sign",
      "front",
      "image",
      "face",
      "system",
      "feature",
      "features",
      "images",
      "recognition",
      "facial",
      "sign up"
    ]
  },
  {
    "id": 201312005,
    "name": "food-delivery-server-goit",
    "full_name": "SerhiiY/food-delivery-server-goit",
    "description": "A course task with using node.js server. All queries were tested by Postman. App can give products list or user by id and write a new product or user to the database. On master branch used http module, on express-hw branch express.js is used.",
    "fork": false,
    "created_at": "2019-08-08T18:06:53Z",
    "updated_at": "2019-09-10T10:36:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34281627,
    "owner_login": "SerhiiY",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/34281627?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "server",
      "node",
      "database",
      "http",
      "user",
      "express",
      " express",
      "tested",
      "list",
      "course",
      "task",
      "module",
      "product",
      "were",
      "queries",
      "products",
      "write",
      "master"
    ]
  },
  {
    "id": 36652610,
    "name": "Postman-MeteorJs",
    "full_name": "MeteorLyon/Postman-MeteorJs",
    "description": "The Postman chrome plugin is a cool application. The problem is when you sync your collections, you don't own your data, so it's no more cool. The aim of the project is to allow every one to get the same cool app, but that can be installed on it's own server, so you own your datas.",
    "fork": false,
    "created_at": "2015-06-01T10:03:53Z",
    "updated_at": "2015-06-01T10:03:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9386284,
    "owner_login": "MeteorLyon",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9386284?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "data",
      "application",
      "server",
      "more",
      "very",
      "plugin",
      "ever",
      "problem",
      "install",
      "chrome",
      "sync",
      "installed",
      "cool",
      "every"
    ]
  },
  {
    "id": 177793199,
    "name": "yhcr-proxy-server-api-tests",
    "full_name": "thatinterfaceguy/yhcr-proxy-server-api-tests",
    "description": "Docker compose file, postman environment and collection for running tests against YHCR FHIR proxy servers locally",
    "fork": false,
    "created_at": "2019-03-26T13:23:38Z",
    "updated_at": "2019-04-30T10:28:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 45122994,
    "owner_login": "thatinterfaceguy",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/45122994?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "file",
      "tests",
      "server",
      "tests ",
      "call",
      "environment",
      "local",
      "running",
      "proxy",
      "locally",
      "servers",
      "compose"
    ]
  },
  {
    "id": 167654063,
    "name": "PostmanToSwagger_GO",
    "full_name": "LiuKaHo/PostmanToSwagger_GO",
    "description": null,
    "fork": false,
    "created_at": "2019-01-26T05:37:05Z",
    "updated_at": "2019-02-18T14:59:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15521041,
    "owner_login": "LiuKaHo",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/15521041?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 91486511,
    "name": "PostmanToSwagger",
    "full_name": "mikeatphizzle/PostmanToSwagger",
    "description": null,
    "fork": false,
    "created_at": "2017-05-16T17:35:25Z",
    "updated_at": "2020-03-30T17:36:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28737593,
    "owner_login": "mikeatphizzle",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/28737593?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 162207368,
    "name": "SwaggerToPostman",
    "full_name": "dangerousplay/SwaggerToPostman",
    "description": null,
    "fork": false,
    "created_at": "2018-12-18T00:29:53Z",
    "updated_at": "2018-12-19T16:27:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 24483153,
    "owner_login": "dangerousplay",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/24483153?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 112542858,
    "name": "swagger2postman",
    "full_name": "Bdthomson/swagger2postman",
    "description": null,
    "fork": false,
    "created_at": "2017-11-30T00:16:30Z",
    "updated_at": "2018-06-13T17:09:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7236299,
    "owner_login": "Bdthomson",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7236299?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 157397938,
    "name": "MyTibiaHelper",
    "full_name": "Aniquir/MyTibiaHelper",
    "description": "This is an application that helps in guiding characters in the popular game. Used technologies: Java, Spring / Spring Boot, Hibernate, PostgreSQL, Git, Maven, Trello, Postman. Application is built in the microservers architecture.",
    "fork": false,
    "created_at": "2018-11-13T15:01:04Z",
    "updated_at": "2019-01-07T15:37:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29151031,
    "owner_login": "Aniquir",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29151031?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "server",
      "help",
      "built",
      "tech",
      "micro",
      "game",
      "helps",
      "popular",
      "servers",
      "technologies",
      "guiding"
    ]
  },
  {
    "id": 83179676,
    "name": "api_hw2",
    "full_name": "colechristenson/api_hw2",
    "description": "Test different requests against a node.js server using postman. Node.js server is set up with express.",
    "fork": false,
    "created_at": "2017-02-26T03:20:14Z",
    "updated_at": "2017-02-26T03:42:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22686955,
    "owner_login": "colechristenson",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22686955?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "server",
      "node",
      "requests",
      "express",
      " express",
      "rent"
    ]
  },
  {
    "id": 236575420,
    "name": "wpx17-node-2-lecture",
    "full_name": "ackentdev/wpx17-node-2-lecture",
    "description": "This is a repo built to show how to create a basic RESTful server and run tests on postman for a bootcamp",
    "fork": false,
    "created_at": "2020-01-27T19:31:56Z",
    "updated_at": "2020-01-27T19:34:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 49373960,
    "owner_login": "ackentdev",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/49373960?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "repo",
      "tests",
      "server",
      "tests ",
      "built",
      "boot",
      "bootcamp"
    ]
  },
  {
    "id": 210765017,
    "name": "owlfuse-funx",
    "full_name": "rustiphyde/owlfuse-funx",
    "description": "The server side of OwlFuse built in JavaScript, Node.js, Express, Busboy, and Firebase and tested on Postman",
    "fork": false,
    "created_at": "2019-09-25T05:47:16Z",
    "updated_at": "2020-03-27T06:23:14Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 30541772,
    "owner_login": "rustiphyde",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/30541772?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "server",
      "tested",
      "built",
      "side"
    ]
  },
  {
    "id": 210008069,
    "name": "nodeapp",
    "full_name": "treetrunkz/nodeapp",
    "description": "This is a nodejs application. It is a todo list that can be accessed and created by multiple users. The API is accessed by Postman. The server and interface is set up to POST and GET dynamically. To populate node_modules `npm install ejs, express, mongoose, body-parser --save -g` + tsc -w",
    "fork": false,
    "created_at": "2019-09-21T15:24:15Z",
    "updated_at": "2019-09-22T14:09:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44754821,
    "owner_login": "treetrunkz",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44754821?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "server",
      "call",
      "node",
      "user",
      "express",
      "mongo",
      " express",
      "list",
      "users",
      "face",
      "access",
      "module",
      "interface",
      "nodejs",
      "esse",
      "multiple",
      "mongoose",
      "install",
      "parse",
      "todo",
      "parser",
      "dynamic",
      "modules",
      "dynamically",
      "accessed"
    ]
  },
  {
    "id": 104284014,
    "name": "BookAPI-Web-Services",
    "full_name": "akshaymittal143/BookAPI-Web-Services",
    "description": "Node.js is a simple and powerful tool for back-end development. When combined with express, you can create lightweight, fast, scalable APIs quickly and simply. which will walk through how to stand up a lightweight Express server serving truly RESTful services using Node.js, Mongoose, and MongoDB. We will implement all of the RESTful verbs to get, add, and update data from our service. We will also spend some time working through unit and end to end integration tests for our services.",
    "fork": false,
    "created_at": "2017-09-21T01:00:22Z",
    "updated_at": "2017-10-09T01:01:01Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 8115184,
    "owner_login": "akshaymittal143",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8115184?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "data",
      "tests",
      "service",
      "tool",
      "server",
      "tests ",
      "develop",
      "express",
      "implement",
      " express",
      "integration",
      "services",
      "update",
      "development",
      "working",
      "light",
      "unit",
      "combine",
      "powerful",
      "quickly",
      "verb",
      "end to end",
      "lightweight",
      "combined"
    ]
  },
  {
    "id": 225753441,
    "name": "Task-management-app",
    "full_name": "KenC1014/Task-management-app",
    "description": "This contains all server side Node.js files for task management application. This is a pure backend application. All the endpoints are accessible via Postman. Express server and Mongoose are used.",
    "fork": false,
    "created_at": "2019-12-04T01:38:27Z",
    "updated_at": "2020-01-29T08:02:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26831001,
    "owner_login": "KenC1014",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26831001?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "application",
      "server",
      "contain",
      "endpoint",
      "points",
      "files",
      "manage",
      "endpoints",
      "backend",
      "access",
      "task",
      "side",
      "management",
      "pure"
    ]
  },
  {
    "id": 169577059,
    "name": "project-back-end",
    "full_name": "skhetarpaul/project-back-end",
    "description": "This is a server side project using Node and Express.js. The purpose is to provide its users a functionality to search some best restaurants sorted and arranged according to their star ratings. Screenshots of working back end system has been uploaded to *project_postman_results* directory in the root folder here.",
    "fork": false,
    "created_at": "2019-02-07T13:35:57Z",
    "updated_at": "2020-01-18T07:42:30Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 38581265,
    "owner_login": "skhetarpaul",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38581265?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "server",
      "user",
      "function",
      "load",
      "star",
      "users",
      "functional",
      "rating",
      "provide",
      "system",
      "working",
      "side",
      "search",
      "result",
      "results",
      "folder",
      "functionality",
      "upload",
      "been",
      "according",
      "sort",
      "best",
      "directory",
      "back end",
      "restaurant",
      "arranged",
      "restaurants"
    ]
  },
  {
    "id": 230839273,
    "name": "FitnessTracker",
    "full_name": "aking27/FitnessTracker",
    "description": "I used React Native to create a fitness tracker mobile application for iOS and Android. In order to update and maintain server data, I used a combination of the RESTful API and Postman. Additionally, the Expo framework and Node.js were used to build the application on my machine. This app allows users to sign into their account to log exercise/nutritional information, create fitness goals, and view their progress. ",
    "fork": false,
    "created_at": "2019-12-30T03:16:39Z",
    "updated_at": "2020-02-10T03:28:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26031938,
    "owner_login": "aking27",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26031938?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "application",
      "server",
      "user",
      "sign",
      "format",
      "framework",
      "build",
      "users",
      "update",
      "view",
      "info",
      "infor",
      "allows",
      "information",
      "main",
      "were",
      "track",
      "account",
      "order",
      "mobile",
      "machine",
      "progress",
      "exercise",
      "goal",
      "tracker",
      "nutritional",
      "goals"
    ]
  },
  {
    "id": 184552369,
    "name": "ztm-expressjs-server",
    "full_name": "kobekyoko/ztm-expressjs-server",
    "description": "Simple server using Express.js: Udemy: Zero to Mastery Course by @aneagoie",
    "fork": false,
    "created_at": "2019-05-02T09:12:54Z",
    "updated_at": "2019-05-15T04:07:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 49667068,
    "owner_login": "kobekyoko",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/49667068?v=4",
    "pulled": 1,
    "tags": [
      "server"
    ]
  },
  {
    "id": 196665534,
    "name": "rots-api",
    "full_name": "kidconway/rots-api",
    "description": "NodeJs server with Express.  Uses PostgreSQL.  App uses get, post, put, and delete routes.  Tested with Postman",
    "fork": false,
    "created_at": "2019-07-13T01:39:25Z",
    "updated_at": "2019-07-13T01:42:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22283044,
    "owner_login": "kidconway",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22283044?v=4",
    "pulled": 1,
    "tags": [
      "server",
      "route",
      "routes",
      "delete",
      "uses"
    ]
  },
  {
    "id": 94404919,
    "name": "ExecutorAPI",
    "full_name": "yogibaba2/ExecutorAPI",
    "description": "An express server to expose selenium and postman framework to web applications for easy and efficient use",
    "fork": false,
    "created_at": "2017-06-15T05:56:57Z",
    "updated_at": "2017-07-19T16:53:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20608853,
    "owner_login": "yogibaba2",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20608853?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "application",
      "server",
      "express",
      " express",
      "framework",
      "web app",
      "applications",
      "expose",
      "efficient",
      "selenium"
    ]
  },
  {
    "id": 241475063,
    "name": "Wiki-Db-API",
    "full_name": "marcochin/Wiki-Db-API",
    "description": "Created a server that has a db that simulates wikipedia. You have an article title and an article content. An API is created for you to manipulate data on the db. It handles GET POST PUT PATCH DELETE. Use Postman to interact with the API. There is no UI. Used mongoose to interact with mongodb. Used express to send API handle route calls and send back responses.",
    "fork": false,
    "created_at": "2020-02-18T21:50:37Z",
    "updated_at": "2020-02-18T21:57:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11529866,
    "owner_login": "marcochin",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/11529866?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "server",
      "call",
      "express",
      "mongo",
      " express",
      "route",
      "send",
      "calls",
      "interact",
      "response",
      "mongod",
      "mongodb",
      "handle",
      "mongoose",
      "responses",
      "content",
      "simulate",
      "wiki",
      "title",
      "article",
      "handles",
      "wikipedia",
      "simulates",
      "manipulate"
    ]
  },
  {
    "id": 160960516,
    "name": "golangTest",
    "full_name": "RedaZenagui/golangTest",
    "description": "Creating a server that exposes a graphql endpoint that returns \"This is the answer about the Query !\" when queried via something like curl or postman.",
    "fork": false,
    "created_at": "2018-12-08T17:04:27Z",
    "updated_at": "2018-12-08T20:55:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37189636,
    "owner_login": "RedaZenagui",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/37189636?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "server",
      "endpoint",
      "curl",
      "expose",
      "turns",
      "returns",
      "exposes",
      "graph",
      "something",
      "graphql"
    ]
  },
  {
    "id": 234382436,
    "name": "custom-Go-CRUD-server-template",
    "full_name": "cloudcooksco/custom-Go-CRUD-server-template",
    "description": "This is a custom Go server to handle typical CRUD services ie. website forms. This is a template, and does not come fully assembled with a db. Tested with postman - fully functional as of jan-16-2020",
    "fork": false,
    "created_at": "2020-01-16T18:14:35Z",
    "updated_at": "2020-01-16T18:14:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45404661,
    "owner_login": "cloudcooksco",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45404661?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "form",
      "service",
      "server",
      "function",
      "services",
      "full",
      "site",
      "plate",
      "website",
      "functional",
      "template",
      "custom",
      "ully",
      "handle",
      "fully",
      "fully functional",
      "typical"
    ]
  },
  {
    "id": 73948533,
    "name": "javascript-at",
    "full_name": "theuggla/javascript-at",
    "description": "ranging from small programs to full applications testing out javascript concepts, both as standalone applications, servers and client applications",
    "fork": false,
    "created_at": "2016-11-16T18:24:52Z",
    "updated_at": "2018-12-12T14:01:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20565872,
    "owner_login": "theuggla",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20565872?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "application",
      "script",
      "server",
      "client",
      "full",
      "java",
      "program",
      "small",
      "applications",
      "concept",
      "javascript",
      "both",
      "servers",
      "concepts",
      "standalone",
      "ranging"
    ]
  },
  {
    "id": 142798122,
    "name": "Multithread-Web-Server",
    "full_name": "xzhang007/Multithread-Web-Server",
    "description": "Developed a web server in Java capable of handling HTTP requests and parsing those requests, and sending out various HTTP responses. • Handles basic user authentication and CGI which could execute concurrently using multithreading and synchronized method. And it could send binary files like images over network. • Using GitHub repository to control versions and Postman to test as well as factory design pattern.",
    "fork": false,
    "created_at": "2018-07-29T21:54:31Z",
    "updated_at": "2018-11-07T23:21:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16105149,
    "owner_login": "xzhang007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16105149?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "request",
      "file",
      "repos",
      "repository",
      "server",
      "requests",
      "user",
      "sign",
      "auth",
      "files",
      "send",
      "read",
      "authentication",
      "response",
      "rent",
      "version",
      "image",
      "method",
      "control",
      "design",
      "various",
      "images",
      "responses",
      "sync",
      "handling",
      "sending",
      "those",
      "actor",
      "current",
      "network",
      "execute",
      "currently",
      "reading",
      "versions",
      "parsing",
      "capable"
    ]
  },
  {
    "id": 175274059,
    "name": "GitHubSearch",
    "full_name": "KamilWysocki1990/GitHubSearch",
    "description": "MVP||This application give u opportunity  to search through repository in GitHub resources along with data to recognize owner of repository . It can also transfer us to the place where we can check chosen repository in browser. In app is implemented method in RxJava for handle bigger data flow which can help reduce time for waiting to get data on screen. Technlogoy used : Java, RxJava2, Retrofit 2, RecyclerView, MVP, ButterKnife, Glide, CardView, LifeCycleObserver, Architecture Components, Postman.     ",
    "fork": false,
    "created_at": "2019-03-12T18:31:09Z",
    "updated_at": "2019-03-21T17:01:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35812584,
    "owner_login": "KamilWysocki1990",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/35812584?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "data",
      "repos",
      "repository",
      "application",
      "server",
      "implement",
      "help",
      "source",
      "method",
      "check",
      "browser",
      "search",
      "resource",
      "long",
      "resources",
      "handle",
      "place",
      "unit",
      "along",
      "implemented",
      "unity",
      "in browser"
    ]
  },
  {
    "id": 210782397,
    "name": "Backend-Server_typescript",
    "full_name": "martinc278/Backend-Server_typescript",
    "description": "Created and deployed a backend server using typescript, used Framework Nest and tested with postman",
    "fork": false,
    "created_at": "2019-09-25T07:27:30Z",
    "updated_at": "2019-11-13T08:51:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33938608,
    "owner_login": "martinc278",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/33938608?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "script",
      "server",
      "tested",
      "backend",
      "type",
      "deployed",
      "types",
      "typescript"
    ]
  },
  {
    "id": 149984325,
    "name": "ShopifyTrialStore",
    "full_name": "ysodiqakanni/ShopifyTrialStore",
    "description": "This repository is based on a challenge by shopify to create an API for performing some basic CRUDs in a defined e-commerce style. Development still in progress. For review purpose, check the ProductsController, it's the most up to date. Language: C# ASP.net web API with 3 layer architecture Technologies: Entity Framework, Dependency Injection, SQL server, NUnit, Postman",
    "fork": false,
    "created_at": "2018-09-23T12:54:41Z",
    "updated_at": "2018-10-12T16:07:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22787351,
    "owner_login": "ysodiqakanni",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/22787351?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "repo",
      "form",
      "repos",
      "repository",
      "server",
      "based",
      "view",
      "perform",
      "shop",
      "check",
      "review",
      "style",
      "define",
      "commerce",
      "progress",
      "still",
      "performing",
      "challenge",
      "shopify"
    ]
  },
  {
    "id": 184295216,
    "name": "Angular-7-CRUD",
    "full_name": "alexanderkounadis/Angular-7-CRUD",
    "description": "Angular 7 CRUD with Asp.Net Core Web API  CRUD Operations - Insert, update, delete and retrieve are implemented in Asp.Net Core Web API with Angular 7. First of all we'll build a Web API project in Asp.Net Core with required methods at server side using Entity Framework Core and SQL Server DB. Then Angular 7 Project consumes those methods from client side.  Points discussed :  - How to create Web API in Asp.Net Core with CRUD web methods.  - Enable CORS in Asp.Net Core.  - Angular Form Design with Validation.  Tools Used : VS Code, Visual Studio, SSMS, Postman.",
    "fork": false,
    "created_at": "2019-04-30T16:22:33Z",
    "updated_at": "2019-04-30T16:24:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 4921755,
    "owner_login": "alexanderkounadis",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/4921755?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "server",
      "client",
      "implement",
      "sign",
      "build",
      "update",
      "delete",
      "method",
      "side",
      "methods",
      "implemented",
      "consume",
      "require",
      "those",
      "retrieve",
      "required",
      "client side",
      "consumes"
    ]
  },
  {
    "id": 184295660,
    "name": "Angular-7-CRUD-WebAPI",
    "full_name": "alexanderkounadis/Angular-7-CRUD-WebAPI",
    "description": "Angular 7 CRUD with Asp.Net Core Web API  CRUD Operations - Insert, update, delete and retrieve are implemented in Asp.Net Core Web API with Angular 7. First of all we'll build a Web API project in Asp.Net Core with required methods at server side using Entity Framework Core and SQL Server DB. Then Angular 7 Project consumes those methods from client side.  Points discussed :  - How to create Web API in Asp.Net Core with CRUD web methods.  - Enable CORS in Asp.Net Core.  - Angular Form Design with Validation.  Tools Used : VS Code, Visual Studio, SSMS, Postman.",
    "fork": false,
    "created_at": "2019-04-30T16:25:54Z",
    "updated_at": "2019-04-30T16:27:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4921755,
    "owner_login": "alexanderkounadis",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/4921755?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "server",
      "client",
      "implement",
      "sign",
      "build",
      "update",
      "delete",
      "method",
      "side",
      "methods",
      "implemented",
      "consume",
      "require",
      "those",
      "retrieve",
      "required",
      "client side",
      "consumes"
    ]
  }
]