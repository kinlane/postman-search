[
  {
    "id": 52270857,
    "name": "postman-collection",
    "full_name": "postmanlabs/postman-collection",
    "description": "Javascript module that allows a developer to work with Postman Collections",
    "fork": false,
    "created_at": "2016-02-22T12:08:36Z",
    "updated_at": "2020-04-01T03:39:52Z",
    "stargazers_count": 190,
    "watchers_count": 190,
    "forks": 81,
    "watchers": 190,
    "score": 1,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "develop",
      "developer",
      "module",
      "allows"
    ]
  },
  {
    "id": 100892025,
    "name": "postman",
    "full_name": "taylonr/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-08-20T22:22:37Z",
    "updated_at": "2020-03-29T16:34:47Z",
    "stargazers_count": 30,
    "watchers_count": 30,
    "forks": 69,
    "watchers": 30,
    "score": 1,
    "owner_id": 928403,
    "owner_login": "taylonr",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/928403?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 114906655,
    "name": "http-hmac-postman",
    "full_name": "acquia/http-hmac-postman",
    "description": "A postman prescript for connecting to HMAC protected API's",
    "fork": false,
    "created_at": "2017-12-20T16:10:32Z",
    "updated_at": "2020-03-18T19:08:55Z",
    "stargazers_count": 30,
    "watchers_count": 30,
    "forks": 34,
    "watchers": 30,
    "score": 1,
    "owner_id": 514789,
    "owner_login": "acquia",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/514789?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "connect",
      "connecting",
      "prescript"
    ]
  },
  {
    "id": 91872205,
    "name": "postman-to-k6",
    "full_name": "loadimpact/postman-to-k6",
    "description": "Converts Postman collections to k6 script code",
    "fork": false,
    "created_at": "2017-05-20T07:15:44Z",
    "updated_at": "2020-03-31T20:27:17Z",
    "stargazers_count": 84,
    "watchers_count": 84,
    "forks": 20,
    "watchers": 84,
    "score": 1,
    "owner_id": 2271486,
    "owner_login": "loadimpact",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/2271486?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "script",
      "code"
    ]
  },
  {
    "user": "postmanlabs",
    "repo": "postman-updater-linux",
    "pulled": "Organization",
    "id": 93946991,
    "name": "postman-updater-linux",
    "full_name": "postmanlabs/postman-updater-linux",
    "description": "A simple bash script to update Postman from the command line (for Linux)",
    "fork": false,
    "created_at": "2017-06-10T15:09:01Z",
    "updated_at": "2020-01-02T07:20:08Z",
    "forks": 9,
    "open_issues": 2,
    "watchers": 37,
    "network_count": 9,
    "subscribers_count": 2,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "owner_type": "Organization",
    "tags": [
      "script",
      "line",
      "update",
      "command",
      "command line",
      "bash"
    ]
  },
  {
    "id": 127435421,
    "name": "keycloak-postman-pre-request",
    "full_name": "alexatiks/keycloak-postman-pre-request",
    "description": "Postman pre-request script to fetch a token from Keycloak and set it to a collection variable to use in request headers.",
    "fork": false,
    "created_at": "2018-03-30T14:11:21Z",
    "updated_at": "2020-03-25T11:29:23Z",
    "stargazers_count": 22,
    "watchers_count": 22,
    "forks": 10,
    "watchers": 22,
    "score": 1,
    "owner_id": 17456292,
    "owner_login": "alexatiks",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17456292?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "script",
      "token",
      "header",
      "variable",
      "fetch"
    ]
  },
  {
    "user": "Avinash-Raj",
    "repo": "docs-from-POSTMAN",
    "pulled": "User",
    "id": 58204352,
    "name": "docs-from-POSTMAN",
    "full_name": "Avinash-Raj/docs-from-POSTMAN",
    "description": "Python script which generates docs from POSTMAN collection url",
    "fork": false,
    "created_at": "2016-05-06T12:01:15Z",
    "updated_at": "2020-01-07T06:28:35Z",
    "forks": 5,
    "open_issues": 3,
    "watchers": 8,
    "network_count": 5,
    "subscribers_count": 1,
    "owner_id": 3929632,
    "owner_login": "Avinash-Raj",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/3929632?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "script",
      "generate",
      "docs",
      "generates"
    ]
  },
  {
    "user": "cameronoxley",
    "repo": "Newman-to-Slack",
    "pulled": "User",
    "id": 46280288,
    "name": "Newman-to-Slack",
    "full_name": "cameronoxley/Newman-to-Slack",
    "description": "Runs a Newman test script and outputs the summary to a Slack webhook",
    "fork": false,
    "created_at": "2015-11-16T14:38:21Z",
    "updated_at": "2019-05-04T13:20:02Z",
    "forks": 10,
    "open_issues": 1,
    "watchers": 17,
    "network_count": 10,
    "subscribers_count": 2,
    "owner_id": 1674847,
    "owner_login": "cameronoxley",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1674847?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "script",
      "output",
      "webhook",
      "summary"
    ]
  },
  {
    "user": "walis85300",
    "repo": "postman-course",
    "pulled": "User",
    "id": 223619379,
    "name": "postman-course",
    "full_name": "walis85300/postman-course",
    "description": null,
    "fork": false,
    "created_at": "2019-11-23T16:27:46Z",
    "updated_at": "2020-02-25T02:58:28Z",
    "forks": 12,
    "open_issues": 1,
    "watchers": 2,
    "network_count": 12,
    "subscribers_count": 1,
    "owner_id": 4245976,
    "owner_login": "walis85300",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/4245976?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "id": 70889596,
    "name": "dakiya",
    "full_name": "rupeshmore/dakiya",
    "description": "Dakiya: converts Postman collections to load testing tool scripts",
    "fork": false,
    "created_at": "2016-10-14T08:23:38Z",
    "updated_at": "2020-03-31T08:32:55Z",
    "stargazers_count": 25,
    "watchers_count": 25,
    "forks": 6,
    "watchers": 25,
    "score": 1,
    "owner_id": 13160174,
    "owner_login": "rupeshmore",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/13160174?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "collections",
      "testing",
      "script",
      "tool",
      "convert",
      "scripts",
      "load",
      "converts"
    ]
  },
  {
    "user": "jivanim",
    "repo": "cs122b-tests",
    "pulled": "User",
    "id": 182436341,
    "name": "cs122b-tests",
    "full_name": "jivanim/cs122b-tests",
    "description": "Postman (newman) test scripts for HWs ",
    "fork": false,
    "created_at": "2019-04-20T17:39:59Z",
    "updated_at": "2019-09-29T00:04:30Z",
    "forks": 8,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 8,
    "subscribers_count": 0,
    "owner_id": 28543183,
    "owner_login": "jivanim",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/28543183?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "script",
      "newman",
      "scripts"
    ]
  },
  {
    "user": "peter-evans",
    "repo": "postman-pre-request",
    "pulled": "User",
    "id": 76613131,
    "name": "postman-pre-request",
    "full_name": "peter-evans/postman-pre-request",
    "description": "Postman Pre-request script for HMAC Authentication with Kong",
    "fork": false,
    "created_at": "2016-12-16T02:13:54Z",
    "updated_at": "2019-04-19T15:38:27Z",
    "forks": 5,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 5,
    "subscribers_count": 2,
    "owner_id": 18365890,
    "owner_login": "peter-evans",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/18365890?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "script"
    ]
  },
  {
    "user": "theScimus",
    "repo": "postman_to_jmeter_converter",
    "pulled": "User",
    "id": 98522484,
    "name": "postman_to_jmeter_converter",
    "full_name": "theScimus/postman_to_jmeter_converter",
    "description": "A small script that converts postman tests into JMeter load tests",
    "fork": false,
    "created_at": "2017-07-27T10:13:01Z",
    "updated_at": "2019-03-08T00:53:07Z",
    "forks": 3,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 3,
    "subscribers_count": 1,
    "owner_id": 30462947,
    "owner_login": "theScimus",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/30462947?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      " postman",
      "tests",
      "script",
      "tests ",
      "convert",
      "load",
      "postman tests",
      "small",
      "converts"
    ]
  },
  {
    "user": "kyleweishaar-zz",
    "repo": "JIRA-postman",
    "pulled": "User",
    "id": 140581261,
    "name": "JIRA-postman",
    "full_name": "kyleweishaar-zz/JIRA-postman",
    "description": "A script that runs postman collection to build a bunch of JIRA tasks",
    "fork": false,
    "created_at": "2018-07-11T13:45:54Z",
    "updated_at": "2018-10-11T17:16:54Z",
    "forks": 4,
    "open_issues": 0,
    "watchers": 1,
    "network_count": 4,
    "subscribers_count": 1,
    "owner_id": 22196349,
    "owner_login": "kyleweishaar-zz",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22196349?v=4",
    "owner_type": "User",
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "script",
      "build",
      "task",
      "tasks",
      "runs",
      "bunch"
    ]
  },
  {
    "user": "nikandlv",
    "repo": "postman-patcher",
    "pulled": "User",
    "id": 202850800,
    "name": "postman-patcher",
    "full_name": "nikandlv/postman-patcher",
    "description": "Allows postman to render javascript in preview",
    "fork": false,
    "created_at": "2019-08-17T07:37:10Z",
    "updated_at": "2020-03-18T04:07:46Z",
    "forks": 1,
    "open_issues": 3,
    "watchers": 20,
    "network_count": 1,
    "subscribers_count": 1,
    "owner_id": 14939611,
    "owner_login": "nikandlv",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/14939611?v=4",
    "owner_type": "User",
    "tags": [
      " postman",
      "script",
      "java",
      "view",
      "review",
      "javascript",
      "render"
    ]
  },
  {
    "user": "matt-ball",
    "repo": "postman-cli",
    "pulled": "User",
    "id": 220328595,
    "name": "postman-cli",
    "full_name": "matt-ball/postman-cli",
    "description": "A client to facilitate local development of scripts for Postman",
    "fork": false,
    "created_at": "2019-11-07T21:03:56Z",
    "updated_at": "2020-03-25T18:26:04Z",
    "forks": 1,
    "open_issues": 3,
    "watchers": 18,
    "network_count": 1,
    "subscribers_count": 3,
    "owner_id": 8490181,
    "owner_login": "matt-ball",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8490181?v=4",
    "owner_type": "User",
    "tags": [
      "script",
      "client",
      "develop",
      "scripts",
      "local",
      "development",
      "facilitate"
    ]
  },
  {
    "user": "joolfe",
    "repo": "postman-util-lib",
    "pulled": "User",
    "id": 223360362,
    "name": "postman-util-lib",
    "full_name": "joolfe/postman-util-lib",
    "description": ":rocket: A crypto utility library to be used from Postman Pre-request and Tests script tabs.",
    "fork": false,
    "created_at": "2019-11-22T08:40:45Z",
    "updated_at": "2020-03-02T02:19:37Z",
    "forks": 3,
    "open_issues": 1,
    "watchers": 4,
    "network_count": 3,
    "subscribers_count": 2,
    "owner_id": 1319632,
    "owner_login": "joolfe",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1319632?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "script",
      "util",
      "library",
      "utility",
      "crypto",
      "rocket",
      "tabs"
    ]
  },
  {
    "user": "devopsfaith",
    "repo": "krakend-postman",
    "pulled": "Organization",
    "id": 155447231,
    "name": "krakend-postman",
    "full_name": "devopsfaith/krakend-postman",
    "description": "Create automatic POSTMAN collection descriptions from you KrakenD config file",
    "fork": false,
    "created_at": "2018-10-30T19:50:51Z",
    "updated_at": "2020-01-23T07:44:47Z",
    "forks": 1,
    "open_issues": 1,
    "watchers": 8,
    "network_count": 1,
    "subscribers_count": 2,
    "owner_id": 23139751,
    "owner_login": "devopsfaith",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/23139751?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "file",
      "script",
      "auto",
      "automat",
      "config",
      "automatic",
      "desc",
      "description",
      "descriptions",
      "rake"
    ]
  },
  {
    "user": "DIPSAS",
    "repo": "EhrStore.Postman",
    "pulled": "Organization",
    "id": 175819935,
    "name": "EhrStore.Postman",
    "full_name": "DIPSAS/EhrStore.Postman",
    "description": "Some postman scripts to test and verify the features of an openEHR server ",
    "fork": false,
    "created_at": "2019-03-15T12:54:01Z",
    "updated_at": "2020-02-14T09:06:48Z",
    "forks": 1,
    "open_issues": 1,
    "watchers": 5,
    "network_count": 1,
    "subscribers_count": 3,
    "owner_id": 10976610,
    "owner_login": "DIPSAS",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10976610?v=4",
    "owner_type": "Organization",
    "tags": [
      "test",
      " postman",
      "script",
      "server",
      "scripts",
      "open",
      "feature",
      "features",
      "postman scripts",
      "verify"
    ]
  },
  {
    "user": "ViBiOh",
    "repo": "postman-to-gatling",
    "pulled": "User",
    "id": 53139482,
    "name": "postman-to-gatling",
    "full_name": "ViBiOh/postman-to-gatling",
    "description": "Convert your Postman scripts to Gatling scripts",
    "fork": false,
    "created_at": "2016-03-04T14:07:54Z",
    "updated_at": "2020-01-28T13:38:37Z",
    "forks": 0,
    "open_issues": 1,
    "watchers": 5,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 2349470,
    "owner_login": "ViBiOh",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2349470?v=4",
    "owner_type": "User",
    "tags": [
      "script",
      "scripts"
    ]
  },
  {
    "user": "rosalexander",
    "repo": "oci-postman-prerequests",
    "pulled": "User",
    "id": 171567637,
    "name": "oci-postman-prerequests",
    "full_name": "rosalexander/oci-postman-prerequests",
    "description": "Prerequest scripts to use the Oracle Cloud Infrastructure REST API in Postman",
    "fork": false,
    "created_at": "2019-02-19T23:38:36Z",
    "updated_at": "2020-02-14T17:14:43Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 4,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 9373790,
    "owner_login": "rosalexander",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9373790?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "script",
      "scripts",
      "struct",
      "structure"
    ]
  },
  {
    "user": "tutagomes",
    "repo": "Postman-Testing",
    "pulled": "User",
    "id": 161397888,
    "name": "Postman-Testing",
    "full_name": "tutagomes/Postman-Testing",
    "description": "A repository to store some data and testing scripts used by my tutorial about postman testing.",
    "fork": false,
    "created_at": "2018-12-11T21:47:16Z",
    "updated_at": "2020-03-24T22:53:24Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 1,
    "subscribers_count": 2,
    "owner_id": 7077493,
    "owner_login": "tutagomes",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7077493?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      " postman",
      "repo",
      "data",
      "testing",
      "repos",
      "repository",
      "script",
      "scripts",
      "store",
      "tutorial"
    ]
  },
  {
    "user": "ashwanikumar04",
    "repo": "postman-collections-scripts",
    "pulled": "User",
    "id": 157519056,
    "name": "postman-collections-scripts",
    "full_name": "ashwanikumar04/postman-collections-scripts",
    "description": "This shows the usage to update segregated scripts from collections json and then merge them using gulp",
    "fork": false,
    "created_at": "2018-11-14T08:52:21Z",
    "updated_at": "2019-07-15T17:09:06Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 1,
    "subscribers_count": 1,
    "owner_id": 3656437,
    "owner_login": "ashwanikumar04",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3656437?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "collections",
      "script",
      "json",
      "scripts",
      "update",
      "gulp",
      "shows"
    ]
  },
  {
    "id": 203184926,
    "name": "postmanHacks",
    "full_name": "avin3sh/postmanHacks",
    "description": "NodeJS scripts related to Postman",
    "fork": false,
    "created_at": "2019-08-19T14:04:38Z",
    "updated_at": "2019-08-19T14:12:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3116732,
    "owner_login": "avin3sh",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3116732?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "scripts",
      "related"
    ]
  },
  {
    "user": "EkoGroszek",
    "repo": "PostmanCI",
    "pulled": "User",
    "id": 193785070,
    "name": "PostmanCI",
    "full_name": "EkoGroszek/PostmanCI",
    "description": null,
    "fork": false,
    "created_at": "2019-06-25T21:21:31Z",
    "updated_at": "2019-06-26T08:33:05Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 1,
    "subscribers_count": 0,
    "owner_id": 44210792,
    "owner_login": "EkoGroszek",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44210792?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "id": 175819935,
    "name": "EhrStore.Postman",
    "full_name": "DIPSAS/EhrStore.Postman",
    "description": "Some postman scripts to test and verify the features of an openEHR server ",
    "fork": false,
    "created_at": "2019-03-15T12:54:01Z",
    "updated_at": "2020-02-14T09:06:48Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 1,
    "watchers": 5,
    "score": 1,
    "owner_id": 10976610,
    "owner_login": "DIPSAS",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10976610?v=4",
    "tags": [
      "test",
      " postman",
      "script",
      "server",
      "scripts",
      "open",
      "feature",
      "features",
      "postman scripts",
      "verify"
    ]
  },
  {
    "id": 60532197,
    "name": "yaoyi-postman-express-json",
    "full_name": "YKKKY/yaoyi-postman-express-json",
    "description": null,
    "fork": false,
    "created_at": "2016-06-06T13:57:28Z",
    "updated_at": "2016-06-26T10:17:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 18323447,
    "owner_login": "YKKKY",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/18323447?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 53139482,
    "name": "postman-to-gatling",
    "full_name": "ViBiOh/postman-to-gatling",
    "description": "Convert your Postman scripts to Gatling scripts",
    "fork": false,
    "created_at": "2016-03-04T14:07:54Z",
    "updated_at": "2020-01-28T13:38:37Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 0,
    "watchers": 5,
    "score": 1,
    "owner_id": 2349470,
    "owner_login": "ViBiOh",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2349470?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "scripts"
    ]
  },
  {
    "id": 171567637,
    "name": "oci-postman-prerequests",
    "full_name": "rosalexander/oci-postman-prerequests",
    "description": "Prerequest scripts to use the Oracle Cloud Infrastructure REST API in Postman",
    "fork": false,
    "created_at": "2019-02-19T23:38:36Z",
    "updated_at": "2020-02-14T17:14:43Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 9373790,
    "owner_login": "rosalexander",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9373790?v=4",
    "tags": [
      "request",
      "script",
      "scripts",
      "struct",
      "structure"
    ]
  },
  {
    "id": 161397888,
    "name": "Postman-Testing",
    "full_name": "tutagomes/Postman-Testing",
    "description": "A repository to store some data and testing scripts used by my tutorial about postman testing.",
    "fork": false,
    "created_at": "2018-12-11T21:47:16Z",
    "updated_at": "2020-03-24T22:53:24Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 7077493,
    "owner_login": "tutagomes",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7077493?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "repo",
      "data",
      "testing",
      "repos",
      "repository",
      "script",
      "scripts",
      "store",
      "tutorial"
    ]
  },
  {
    "id": 127486982,
    "name": "postman-collection",
    "full_name": "RudiShumpert/postman-collection",
    "description": "A Postman collection of scripts to leverage the Launch, by Adobe API's",
    "fork": false,
    "created_at": "2018-03-31T01:06:40Z",
    "updated_at": "2018-04-19T16:19:36Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 37945125,
    "owner_login": "RudiShumpert",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/37945125?v=4",
    "tags": [
      "collect",
      "collection",
      "script",
      "scripts",
      "ever",
      "leverage"
    ]
  },
  {
    "id": 200718610,
    "name": "ATX-Postman",
    "full_name": "damcfarl/ATX-Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-08-05T19:45:22Z",
    "updated_at": "2020-02-24T12:31:33Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 22107424,
    "owner_login": "damcfarl",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22107424?v=4",
    "tags": []
  },
  {
    "id": 157519056,
    "name": "postman-collections-scripts",
    "full_name": "ashwanikumar04/postman-collections-scripts",
    "description": "This shows the usage to update segregated scripts from collections json and then merge them using gulp",
    "fork": false,
    "created_at": "2018-11-14T08:52:21Z",
    "updated_at": "2019-07-15T17:09:06Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 1,
    "watchers": 2,
    "score": 1,
    "owner_id": 3656437,
    "owner_login": "ashwanikumar04",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3656437?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "script",
      "json",
      "scripts",
      "update",
      "gulp",
      "shows"
    ]
  },
  {
    "id": 136649572,
    "name": "cryptocurrency",
    "full_name": "onkarpandit/cryptocurrency",
    "description": "My own cryptocurrency implementation with blockchain and frontend using java script.Hosted locally on postman.",
    "fork": false,
    "created_at": "2018-06-08T17:47:40Z",
    "updated_at": "2020-02-13T15:50:13Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 16364136,
    "owner_login": "onkarpandit",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16364136?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "call",
      "implement",
      "local",
      "front",
      "java",
      "implementation",
      "chai",
      "currency",
      "frontend",
      "crypto",
      "blockchain",
      "locally",
      "cryptocurrency"
    ]
  },
  {
    "id": 238918893,
    "name": "Beekeeping",
    "full_name": "NikolaSimunoski/Beekeeping",
    "description": "Backend Beekeeping Notes (Node.js, Javascript, MySql, npm, Postman )",
    "fork": false,
    "created_at": "2020-02-07T12:40:18Z",
    "updated_at": "2020-02-07T13:02:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47476124,
    "owner_login": "NikolaSimunoski",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47476124?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "keep"
    ]
  },
  {
    "id": 218393489,
    "name": "Programmeren-4-RESTful-API",
    "full_name": "LucJoostenNL/Programmeren-4-RESTful-API",
    "description": "In this assignment from school I have been asked to create a RESTful API with several routes. I used Node JS in combination with Javascript to create a local server that provides an API, and it persists through that API data in a local database.",
    "fork": false,
    "created_at": "2019-10-29T22:15:40Z",
    "updated_at": "2019-11-03T12:30:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 57142966,
    "owner_login": "LucJoostenNL",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/57142966?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "script",
      "server",
      "database",
      "sign",
      "route",
      "local",
      "routes",
      "provide",
      "ever",
      "been",
      "assignment",
      "provides",
      "several",
      "school"
    ]
  },
  {
    "id": 248478381,
    "name": "k6-load-testing",
    "full_name": "TechGeekD/k6-load-testing",
    "description": "Create & run k6 load testing script",
    "fork": false,
    "created_at": "2020-03-19T10:51:13Z",
    "updated_at": "2020-03-23T10:44:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8087460,
    "owner_login": "TechGeekD",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8087460?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "script",
      "load"
    ]
  },
  {
    "id": 122210073,
    "name": "redox_integrations_demo",
    "full_name": "cloudmine/redox_integrations_demo",
    "description": "This repo houses a Postman collection and Javascript snippets which form a Redox demo.",
    "fork": false,
    "created_at": "2018-02-20T14:38:02Z",
    "updated_at": "2018-02-21T21:43:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 1031632,
    "owner_login": "cloudmine",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1031632?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "repo",
      "form",
      "script",
      "demo",
      "uses",
      "snippet",
      "snippets",
      "houses"
    ]
  },
  {
    "id": 76613131,
    "name": "postman-pre-request",
    "full_name": "peter-evans/postman-pre-request",
    "description": "Postman Pre-request script for HMAC Authentication with Kong",
    "fork": false,
    "created_at": "2016-12-16T02:13:54Z",
    "updated_at": "2019-04-19T15:38:27Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 5,
    "watchers": 2,
    "score": 1,
    "owner_id": 18365890,
    "owner_login": "peter-evans",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/18365890?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script"
    ]
  },
  {
    "id": 220328595,
    "name": "postman-cli",
    "full_name": "matt-ball/postman-cli",
    "description": "A client to facilitate local development of scripts for Postman",
    "fork": false,
    "created_at": "2019-11-07T21:03:56Z",
    "updated_at": "2020-03-30T17:26:12Z",
    "stargazers_count": 19,
    "watchers_count": 19,
    "forks": 1,
    "watchers": 19,
    "score": 1,
    "owner_id": 8490181,
    "owner_login": "matt-ball",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8490181?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "client",
      "develop",
      "scripts",
      "local",
      "development",
      "facilitate"
    ]
  },
  {
    "id": 223360362,
    "name": "postman-util-lib",
    "full_name": "joolfe/postman-util-lib",
    "description": ":rocket: A crypto utility library to be used from Postman Pre-request and Tests script tabs.",
    "fork": false,
    "created_at": "2019-11-22T08:40:45Z",
    "updated_at": "2020-03-02T02:19:37Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 3,
    "watchers": 4,
    "score": 1,
    "owner_id": 1319632,
    "owner_login": "joolfe",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1319632?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "util",
      "library",
      "utility",
      "crypto",
      "rocket",
      "tabs"
    ]
  },
  {
    "id": 76925252,
    "name": "postman",
    "full_name": "jeylabs/postman",
    "description": "Mail List Subscription Package for jEyLaBs",
    "fork": false,
    "created_at": "2016-12-20T05:13:58Z",
    "updated_at": "2016-12-20T05:48:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11975707,
    "owner_login": "jeylabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11975707?v=4",
    "pulled": 1,
    "tags": [
      "script"
    ]
  },
  {
    "id": 28899066,
    "name": "postman",
    "full_name": "foonster/postman",
    "description": "Postman is a generic PHP processing script to the e-mail gateway that \n parses the results of any form and sends them to the specified users. This \n script has many formatting and operational options, most of which can be \n specified within a variable file \"_variables.php\" each form.\n",
    "fork": false,
    "created_at": "2015-01-07T04:59:40Z",
    "updated_at": "2018-07-26T21:34:17Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 1919734,
    "owner_login": "foonster",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1919734?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "file",
      "script",
      "user",
      "format",
      "mail",
      "operation",
      "send",
      "spec",
      "users",
      "result",
      "parse",
      "results",
      "variable",
      "within",
      "process",
      "many",
      "gateway",
      "variables",
      "sends",
      "generic",
      "operationa",
      "options",
      "parses"
    ]
  },
  {
    "id": 150690100,
    "name": "POSTMAN",
    "full_name": "nrocap/POSTMAN",
    "description": "all useful postman scripts ",
    "fork": false,
    "created_at": "2018-09-28T05:29:08Z",
    "updated_at": "2018-09-28T05:29:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43664142,
    "owner_login": "nrocap",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/43664142?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "scripts",
      "useful",
      "postman scripts"
    ]
  },
  {
    "id": 150250621,
    "name": "postman",
    "full_name": "xiaohaibuhuai/postman",
    "description": null,
    "fork": false,
    "created_at": "2018-09-25T10:55:14Z",
    "updated_at": "2018-09-25T10:59:23Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15794936,
    "owner_login": "xiaohaibuhuai",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/15794936?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 174323190,
    "name": "postman",
    "full_name": "olomazhuk/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-03-07T10:30:06Z",
    "updated_at": "2019-05-14T06:10:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17740121,
    "owner_login": "olomazhuk",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/17740121?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 169678255,
    "name": "postman",
    "full_name": "Ajara1992/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-02-08T03:08:56Z",
    "updated_at": "2019-02-08T03:08:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33674183,
    "owner_login": "Ajara1992",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/33674183?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 179265436,
    "name": "Postman",
    "full_name": "OlgaDudar/Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-04-03T10:18:59Z",
    "updated_at": "2019-04-03T10:22:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16580307,
    "owner_login": "OlgaDudar",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16580307?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 198783687,
    "name": "Postman",
    "full_name": "thebadalov/Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-07-25T07:47:16Z",
    "updated_at": "2019-07-30T08:09:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40571118,
    "owner_login": "thebadalov",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/40571118?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 197210289,
    "name": "postman",
    "full_name": "gracet37/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-07-16T14:31:02Z",
    "updated_at": "2019-07-16T14:31:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45392690,
    "owner_login": "gracet37",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45392690?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 209203738,
    "name": "POSTMAN",
    "full_name": "Anirban-Talukder/POSTMAN",
    "description": "Having all the automation scripts of POSTMAN",
    "fork": false,
    "created_at": "2019-09-18T02:54:12Z",
    "updated_at": "2019-09-18T03:46:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48403495,
    "owner_login": "Anirban-Talukder",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/48403495?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "auto",
      "automat",
      "scripts",
      "automation"
    ]
  },
  {
    "id": 208324726,
    "name": "Postman",
    "full_name": "ZJanuik/Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-09-13T18:36:06Z",
    "updated_at": "2019-09-13T18:36:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 55295559,
    "owner_login": "ZJanuik",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/55295559?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 110729696,
    "name": "postman",
    "full_name": "pts-mattdeluco/postman",
    "description": "Postman LCP API requests, scripts, and tests.",
    "fork": false,
    "created_at": "2017-11-14T18:38:29Z",
    "updated_at": "2017-11-14T18:39:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23040900,
    "owner_login": "pts-mattdeluco",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/23040900?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "tests",
      "script",
      "requests",
      "scripts"
    ]
  },
  {
    "id": 169046532,
    "name": "postman",
    "full_name": "zeved/postman",
    "description": "simple postfix script",
    "fork": false,
    "created_at": "2019-02-04T08:15:42Z",
    "updated_at": "2019-08-29T18:09:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1412930,
    "owner_login": "zeved",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1412930?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "postfix"
    ]
  },
  {
    "id": 190386825,
    "name": "postman",
    "full_name": "chenmanru75/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-06-05T12:03:27Z",
    "updated_at": "2019-06-05T12:08:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42316876,
    "owner_login": "chenmanru75",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/42316876?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 203148547,
    "name": "postman",
    "full_name": "Roja1873/postman",
    "description": null,
    "fork": false,
    "created_at": "2019-08-19T10:12:36Z",
    "updated_at": "2019-08-19T10:12:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52593053,
    "owner_login": "Roja1873",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/52593053?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 141478282,
    "name": "PostmanYelp",
    "full_name": "Jesse-Penber/PostmanYelp",
    "description": "API testing on Yelp Fusion in Postman, using JSON and Javascript",
    "fork": false,
    "created_at": "2018-07-18T19:04:19Z",
    "updated_at": "2018-07-20T20:47:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41349257,
    "owner_login": "Jesse-Penber",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/41349257?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "script"
    ]
  },
  {
    "id": 138736713,
    "name": "PostmanDemo",
    "full_name": "jainishkpd/PostmanDemo",
    "description": null,
    "fork": false,
    "created_at": "2018-06-26T12:44:25Z",
    "updated_at": "2018-06-26T12:45:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30043533,
    "owner_login": "jainishkpd",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/30043533?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 122472878,
    "name": "postmanCollections",
    "full_name": "deepakjaggi/postmanCollections",
    "description": null,
    "fork": false,
    "created_at": "2018-02-22T12:01:58Z",
    "updated_at": "2018-05-25T07:34:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26724632,
    "owner_login": "deepakjaggi",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/26724632?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 121357740,
    "name": "PostmanLogin",
    "full_name": "KingSoloMona/PostmanLogin",
    "description": null,
    "fork": false,
    "created_at": "2018-02-13T08:32:39Z",
    "updated_at": "2018-02-13T08:32:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30595611,
    "owner_login": "KingSoloMona",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/30595611?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 248709138,
    "name": "PostmanWSSEToken",
    "full_name": "lmaxim/PostmanWSSEToken",
    "description": "Pre-request script for Postman provide auth header generation for API calls in Emarsys",
    "fork": false,
    "created_at": "2020-03-20T08:52:19Z",
    "updated_at": "2020-03-20T09:05:10Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1670749,
    "owner_login": "lmaxim",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1670749?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "call",
      "auth",
      "calls",
      "provide",
      "header",
      "generation",
      "mars"
    ]
  },
  {
    "id": 157857158,
    "name": "random-phone-number-generator",
    "full_name": "benfluleck/random-phone-number-generator",
    "description": "Random number generator is a full stack javascript app that implements a simple way to generate phone numbers in a file in an order specified",
    "fork": false,
    "created_at": "2018-11-16T11:17:23Z",
    "updated_at": "2019-04-27T20:01:46Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 2,
    "watchers": 4,
    "score": 1,
    "owner_id": 26222856,
    "owner_login": "benfluleck",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26222856?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "script",
      "implement",
      "generate",
      "spec",
      "full",
      "java",
      "generator",
      "stack",
      "order",
      "javascript",
      "full stack",
      "implements"
    ]
  },
  {
    "id": 196286329,
    "name": "PostmanRestfulAPI",
    "full_name": "maiya-tracy/PostmanRestfulAPI",
    "description": null,
    "fork": false,
    "created_at": "2019-07-10T23:11:17Z",
    "updated_at": "2019-07-10T23:11:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 50335747,
    "owner_login": "maiya-tracy",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/50335747?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 168297471,
    "name": "pm-scripts",
    "full_name": "luoxiaojun1992/pm-scripts",
    "description": "postman scripts",
    "fork": false,
    "created_at": "2019-01-30T07:17:10Z",
    "updated_at": "2019-01-30T07:21:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6905700,
    "owner_login": "luoxiaojun1992",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6905700?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "scripts",
      "postman scripts"
    ]
  },
  {
    "id": 79355986,
    "name": "F5_iWorkflow_REST_API_Commands",
    "full_name": "nelsoni2/F5_iWorkflow_REST_API_Commands",
    "description": "POSTMAN Collections and Javascript/Python scripts for the F5 iWorkflow REST API",
    "fork": false,
    "created_at": "2017-01-18T15:53:19Z",
    "updated_at": "2019-03-06T00:39:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 23656428,
    "owner_login": "nelsoni2",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23656428?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "scripts"
    ]
  },
  {
    "id": 188245041,
    "name": "common-api-tests_js",
    "full_name": "digipolisantwerp/common-api-tests_js",
    "description": "Bundled of the most commonly used Postman test scripts in one JavaScript file.",
    "fork": false,
    "created_at": "2019-05-23T13:58:58Z",
    "updated_at": "2020-03-16T13:04:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 16398335,
    "owner_login": "digipolisantwerp",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16398335?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "file",
      "script",
      "scripts",
      "common"
    ]
  },
  {
    "id": 231535316,
    "name": "postmangame",
    "full_name": "yonexbat/postmangame",
    "description": "java script game",
    "fork": false,
    "created_at": "2020-01-03T07:23:50Z",
    "updated_at": "2020-03-14T16:18:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 3679368,
    "owner_login": "yonexbat",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/3679368?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "java",
      "game"
    ]
  },
  {
    "id": 34200854,
    "name": "Postmanblog",
    "full_name": "NagisaVon/Postmanblog",
    "description": null,
    "fork": false,
    "created_at": "2015-04-19T09:31:03Z",
    "updated_at": "2015-09-05T11:23:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8179356,
    "owner_login": "NagisaVon",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/8179356?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 103462825,
    "name": "weather-api",
    "full_name": "shyamalpunekar/weather-api",
    "description": "Javascript-week2-API-Postman",
    "fork": false,
    "created_at": "2017-09-13T23:42:52Z",
    "updated_at": "2017-09-13T23:44:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20326511,
    "owner_login": "shyamalpunekar",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/20326511?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "week"
    ]
  },
  {
    "id": 109244893,
    "name": "tetration-postman",
    "full_name": "bbmorten/tetration-postman",
    "description": "Environment settings, pre-request script, and sample Postman scripts for accessing the Tetration API",
    "fork": false,
    "created_at": "2017-11-02T09:37:37Z",
    "updated_at": "2018-06-12T21:01:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 8436491,
    "owner_login": "bbmorten",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8436491?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "sample",
      "scripts",
      "access",
      "setting",
      "settings"
    ]
  },
  {
    "id": 80914274,
    "name": "postman-signing",
    "full_name": "ximik3/postman-signing",
    "description": "Postman script for automatic secure request signing.",
    "fork": false,
    "created_at": "2017-02-04T11:13:33Z",
    "updated_at": "2017-02-04T11:30:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 16223303,
    "owner_login": "ximik3",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16223303?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "auto",
      "automat",
      "sign",
      "automatic",
      "signing",
      "secure"
    ]
  },
  {
    "id": 183474860,
    "name": "postman-practice",
    "full_name": "atriacca/postman-practice",
    "description": null,
    "fork": false,
    "created_at": "2019-04-25T16:50:07Z",
    "updated_at": "2019-04-28T16:22:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47952462,
    "owner_login": "atriacca",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/47952462?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 168682665,
    "name": "postman-testing",
    "full_name": "JackWKelly/postman-testing",
    "description": null,
    "fork": false,
    "created_at": "2019-02-01T10:41:22Z",
    "updated_at": "2019-02-06T17:07:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47181493,
    "owner_login": "JackWKelly",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/47181493?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 143449442,
    "name": "postman_utils",
    "full_name": "h-parekh/postman_utils",
    "description": "A collection of scripts to work with postman",
    "fork": false,
    "created_at": "2018-08-03T16:23:20Z",
    "updated_at": "2019-03-21T17:35:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21689371,
    "owner_login": "h-parekh",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/21689371?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "script",
      "scripts"
    ]
  },
  {
    "id": 197611822,
    "name": "postman-runner",
    "full_name": "flaviostutz/postman-runner",
    "description": "Container with tools for running Postman scripts for integration tests on local or CI environments",
    "fork": false,
    "created_at": "2019-07-18T15:20:30Z",
    "updated_at": "2019-07-21T00:54:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7790172,
    "owner_login": "flaviostutz",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7790172?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "script",
      "tool",
      "tests ",
      "environment",
      "scripts",
      "local",
      "integration",
      "running",
      "tools",
      "environments"
    ]
  },
  {
    "id": 185625797,
    "name": "postman_asserts",
    "full_name": "AlexNDRmac/postman_asserts",
    "description": "Tiny scripts for Postman Auto tests (reusable Assertions for postman tests and json schema validation)",
    "fork": false,
    "created_at": "2019-05-08T14:47:19Z",
    "updated_at": "2020-03-15T20:09:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 29776808,
    "owner_login": "AlexNDRmac",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29776808?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "tests",
      "script",
      "tests ",
      "json",
      "scripts",
      "postman tests",
      "schema",
      "validation",
      "usable",
      "reusable"
    ]
  },
  {
    "id": 249354856,
    "name": "gsoc_postman",
    "full_name": "guptayogansh/gsoc_postman",
    "description": null,
    "fork": false,
    "created_at": "2020-03-23T06:41:39Z",
    "updated_at": "2020-03-24T10:30:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43352644,
    "owner_login": "guptayogansh",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/43352644?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 250875729,
    "name": "postman-demo",
    "full_name": "Hitvardhan-Singh-Solanki/postman-demo",
    "description": null,
    "fork": false,
    "created_at": "2020-03-28T19:22:50Z",
    "updated_at": "2020-03-29T15:10:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15267798,
    "owner_login": "Hitvardhan-Singh-Solanki",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/15267798?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 243049214,
    "name": "Har2Postman",
    "full_name": "javieraviles/Har2Postman",
    "description": "Javascript Har to Postman converter",
    "fork": false,
    "created_at": "2020-02-25T16:49:09Z",
    "updated_at": "2020-03-24T16:40:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8101719,
    "owner_login": "javieraviles",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/8101719?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "convert",
      "converte",
      "converter"
    ]
  },
  {
    "id": 89670666,
    "name": "postman-render",
    "full_name": "Opelar/postman-render",
    "description": null,
    "fork": false,
    "created_at": "2017-04-28T05:28:31Z",
    "updated_at": "2018-08-29T00:35:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16917000,
    "owner_login": "Opelar",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16917000?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 102528926,
    "name": "postman-data",
    "full_name": "saraharless/postman-data",
    "description": null,
    "fork": false,
    "created_at": "2017-09-05T20:54:09Z",
    "updated_at": "2017-09-05T20:55:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5490628,
    "owner_login": "saraharless",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/5490628?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 133997829,
    "name": "postman.js",
    "full_name": "duwamish-os/postman.js",
    "description": null,
    "fork": false,
    "created_at": "2018-05-18T19:51:02Z",
    "updated_at": "2018-05-18T21:08:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25099844,
    "owner_login": "duwamish-os",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/25099844?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 239538126,
    "name": "API_Scripts_Postman",
    "full_name": "Dasarimounika/API_Scripts_Postman",
    "description": "ComeOn assignment for API scripts using postman",
    "fork": false,
    "created_at": "2020-02-10T14:58:24Z",
    "updated_at": "2020-02-11T09:45:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 60812555,
    "owner_login": "Dasarimounika",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/60812555?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "sign",
      "scripts",
      "assignment"
    ]
  },
  {
    "id": 158230377,
    "name": "postman-api-request-executor",
    "full_name": "KevinWingi/postman-api-request-executor",
    "description": "Javascript code to run tests repeatedly in POSTMAN",
    "fork": false,
    "created_at": "2018-11-19T13:45:38Z",
    "updated_at": "2018-11-19T14:25:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16369534,
    "owner_login": "KevinWingi",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/16369534?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "script",
      "tests ",
      "code",
      "repeatedly"
    ]
  },
  {
    "id": 51917113,
    "name": "data-driven-postman",
    "full_name": "multimac/data-driven-postman",
    "description": "A series of scripts for running data-driven tests using Postman",
    "fork": false,
    "created_at": "2016-02-17T11:17:29Z",
    "updated_at": "2016-02-17T11:32:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 354845,
    "owner_login": "multimac",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/354845?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "tests",
      "script",
      "tests ",
      "scripts",
      "running",
      "drive",
      "driven",
      "series"
    ]
  },
  {
    "id": 49665543,
    "name": "mr-postman-v1",
    "full_name": "CarlosAGG/mr-postman-v1",
    "description": null,
    "fork": false,
    "created_at": "2016-01-14T18:11:30Z",
    "updated_at": "2016-01-14T18:11:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11427516,
    "owner_login": "CarlosAGG",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/11427516?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 102279399,
    "name": "bak-postman-rest-client",
    "full_name": "boxcore/bak-postman-rest-client",
    "description": null,
    "fork": false,
    "created_at": "2017-09-03T16:48:30Z",
    "updated_at": "2017-09-03T16:50:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4996138,
    "owner_login": "boxcore",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/4996138?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 176676111,
    "name": "cgi-trello-postman",
    "full_name": "KRatnaprabha/cgi-trello-postman",
    "description": null,
    "fork": false,
    "created_at": "2019-03-20T07:14:17Z",
    "updated_at": "2019-03-20T07:29:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48748045,
    "owner_login": "KRatnaprabha",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/48748045?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 193211940,
    "name": "postman-web-ui",
    "full_name": "kk-sarkar/postman-web-ui",
    "description": null,
    "fork": false,
    "created_at": "2019-06-22T08:44:25Z",
    "updated_at": "2019-06-22T12:51:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34937125,
    "owner_login": "kk-sarkar",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/34937125?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 194559431,
    "name": "postman_issue6337_demo",
    "full_name": "thesaxonedone/postman_issue6337_demo",
    "description": null,
    "fork": false,
    "created_at": "2019-06-30T20:41:27Z",
    "updated_at": "2019-06-30T22:11:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31674706,
    "owner_login": "thesaxonedone",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/31674706?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 221474429,
    "name": "postman-generic-json-visualize",
    "full_name": "LennartCockx/postman-generic-json-visualize",
    "description": "A script which utilizes the (beta) visualization option from postman to display any json response in a more visual manner",
    "fork": false,
    "created_at": "2019-11-13T14:10:56Z",
    "updated_at": "2019-11-13T14:13:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 17316487,
    "owner_login": "LennartCockx",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/17316487?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "json",
      "util",
      "response",
      "more",
      "play",
      "display",
      "utilizes",
      "visual",
      "visualization",
      "beta"
    ]
  },
  {
    "id": 219050422,
    "name": "postman-oclc-hmac",
    "full_name": "larrydeck/postman-oclc-hmac",
    "description": "Postman pre-request script to generate HMAC signatures and authorization headers for OCLC APIs.",
    "fork": false,
    "created_at": "2019-11-01T19:32:50Z",
    "updated_at": "2019-11-01T20:07:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 56116659,
    "owner_login": "larrydeck",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/56116659?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "script",
      "sign",
      "auth",
      "generate",
      "header",
      "authorization",
      "signature",
      "signatures"
    ]
  },
  {
    "id": 131689759,
    "name": "ost-postman-script",
    "full_name": "hammadtq/ost-postman-script",
    "description": "A pre-request script to help test the OST Developer API",
    "fork": false,
    "created_at": "2018-05-01T08:04:10Z",
    "updated_at": "2018-05-03T11:02:21Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 11869286,
    "owner_login": "hammadtq",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11869286?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "script",
      "help"
    ]
  },
  {
    "id": 107436823,
    "name": "weather-app",
    "full_name": "javierrcc522/weather-app",
    "description": "Javascript week 2 - using APIs and Postman",
    "fork": false,
    "created_at": "2017-10-18T16:50:40Z",
    "updated_at": "2017-10-18T17:23:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30586325,
    "owner_login": "javierrcc522",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/30586325?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "week"
    ]
  },
  {
    "id": 185198708,
    "name": "pmdoc",
    "full_name": "jiereal/pmdoc",
    "description": "writing postman scripts in js comments",
    "fork": false,
    "created_at": "2019-05-06T13:07:11Z",
    "updated_at": "2019-06-28T08:52:35Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 4595825,
    "owner_login": "jiereal",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/4595825?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "scripts",
      "writing",
      "postman scripts",
      "comments"
    ]
  },
  {
    "id": 220478038,
    "name": "newman-javascript",
    "full_name": "nand1234/newman-javascript",
    "description": "problematically postman test script execution using Newman",
    "fork": false,
    "created_at": "2019-11-08T13:59:15Z",
    "updated_at": "2019-11-12T13:04:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31034303,
    "owner_login": "nand1234",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/31034303?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "script",
      "call",
      "problem",
      "execution",
      "problematically"
    ]
  },
  {
    "id": 107436587,
    "name": "weather-app",
    "full_name": "srhcrete/weather-app",
    "description": "Javascript week 2 - using APIs and Postman",
    "fork": false,
    "created_at": "2017-10-18T16:48:31Z",
    "updated_at": "2017-10-18T16:59:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25338173,
    "owner_login": "srhcrete",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/25338173?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "week"
    ]
  },
  {
    "id": 107470915,
    "name": "news-crawler",
    "full_name": "javierrcc522/news-crawler",
    "description": "Javascript week 2 - using APIs and Postman",
    "fork": false,
    "created_at": "2017-10-18T22:40:17Z",
    "updated_at": "2017-10-18T22:41:29Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 30586325,
    "owner_login": "javierrcc522",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/30586325?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "week"
    ]
  },
  {
    "id": 155572624,
    "name": "js-postman-newman-csv-writer",
    "full_name": "CarlosEduardoFerreiraRamos/js-postman-newman-csv-writer",
    "description": "A javascript csv file writer, receving data from the newman api based on a postman collection",
    "fork": false,
    "created_at": "2018-10-31T14:38:10Z",
    "updated_at": "2018-10-31T14:54:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25060586,
    "owner_login": "CarlosEduardoFerreiraRamos",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25060586?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "data",
      "postman collection",
      "file",
      "script",
      "based",
      "newman",
      "java",
      "javascript",
      "write",
      "writer"
    ]
  },
  {
    "id": 196152526,
    "name": "oci-api-signing-postman-collection",
    "full_name": "CallanHP/oci-api-signing-postman-collection",
    "description": "This Postman collection implements pre-request scripts to perform the signing required to invoke the OCI APIs.",
    "fork": false,
    "created_at": "2019-07-10T07:15:11Z",
    "updated_at": "2019-11-22T02:31:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23567235,
    "owner_login": "CallanHP",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/23567235?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "form",
      "script",
      "implement",
      "sign",
      "scripts",
      "perform",
      "require",
      "required",
      "implements",
      "signing"
    ]
  },
  {
    "id": 65946016,
    "name": "pi-rest-api-postman-collections",
    "full_name": "rnsridharan/pi-rest-api-postman-collections",
    "description": null,
    "fork": false,
    "created_at": "2016-08-17T22:17:52Z",
    "updated_at": "2016-08-17T22:17:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5432537,
    "owner_login": "rnsridharan",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5432537?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 203563369,
    "name": "text-postman",
    "full_name": "cmdotcom/text-postman",
    "description": "Postman collection descriptions for CM.com's Business Messaging API",
    "fork": false,
    "created_at": "2019-08-21T10:42:02Z",
    "updated_at": "2020-02-10T15:24:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 42268957,
    "owner_login": "cmdotcom",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/42268957?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "script",
      "desc",
      "description",
      "descriptions"
    ]
  },
  {
    "id": 143494286,
    "name": "API",
    "full_name": "ces-hackathon/API",
    "description": "Postman API documentation for creating mock server API and postman test scripts",
    "fork": false,
    "created_at": "2018-08-04T03:23:55Z",
    "updated_at": "2018-08-05T03:00:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42081563,
    "owner_login": "ces-hackathon",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/42081563?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "script",
      "server",
      "document",
      "documentation",
      "scripts",
      "mock",
      "creating"
    ]
  },
  {
    "id": 51452858,
    "name": "aws-apigateway-exporter",
    "full_name": "yuun/aws-apigateway-exporter",
    "description": "Python script for exporting an API Gateway stage to a swagger file, in yaml or json format, with Postman or API Gateway integrations extensions.",
    "fork": false,
    "created_at": "2016-02-10T16:13:45Z",
    "updated_at": "2019-02-28T09:15:33Z",
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks": 1,
    "watchers": 8,
    "score": 1,
    "owner_id": 1932872,
    "owner_login": "yuun",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/1932872?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "file",
      "script",
      "json",
      "format",
      "integration",
      "export",
      "swagger",
      "extension",
      "yaml",
      "exporting"
    ]
  },
  {
    "id": 203759216,
    "name": "Postman",
    "full_name": "PratikshaRepo/Postman",
    "description": "Test scripts on API Automation using Postman",
    "fork": false,
    "created_at": "2019-08-22T09:18:59Z",
    "updated_at": "2019-08-30T09:36:17Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 54396728,
    "owner_login": "PratikshaRepo",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/54396728?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "scripts"
    ]
  },
  {
    "id": 159354081,
    "name": "neon-api-automation-test",
    "full_name": "luizlohn/neon-api-automation-test",
    "description": "Postman + Newman + Javascript",
    "fork": false,
    "created_at": "2018-11-27T15:08:20Z",
    "updated_at": "2018-11-29T17:12:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 9451950,
    "owner_login": "luizlohn",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9451950?v=4",
    "pulled": 1,
    "tags": [
      "script"
    ]
  },
  {
    "id": 80535371,
    "name": "postman2doc",
    "full_name": "ChristianHarms/postman2doc",
    "description": "A small script to generate a plain API document based on postman data",
    "fork": false,
    "created_at": "2017-01-31T15:54:39Z",
    "updated_at": "2017-02-01T13:06:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 606484,
    "owner_login": "ChristianHarms",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/606484?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "script",
      "based",
      "document",
      "generate",
      "small",
      "plain"
    ]
  },
  {
    "id": 113168573,
    "name": "dataentry-api-postman-collection",
    "full_name": "ibrsp/dataentry-api-postman-collection",
    "description": "A set of re-usable postman scripts for working with the Dataentry API",
    "fork": false,
    "created_at": "2017-12-05T10:36:54Z",
    "updated_at": "2018-03-23T09:52:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9370998,
    "owner_login": "ibrsp",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9370998?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "scripts",
      "working",
      "postman scripts",
      "usable"
    ]
  },
  {
    "id": 150589976,
    "name": "POSTMAN_API_AUTOMATION",
    "full_name": "NVKPAVANKUMAR/POSTMAN_API_AUTOMATION",
    "description": null,
    "fork": false,
    "created_at": "2018-09-27T13:18:56Z",
    "updated_at": "2018-12-24T10:01:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 27493770,
    "owner_login": "NVKPAVANKUMAR",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/27493770?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 143655117,
    "name": "API-Automation-POSTMAN",
    "full_name": "spangulu11/API-Automation-POSTMAN",
    "description": null,
    "fork": false,
    "created_at": "2018-08-05T23:32:24Z",
    "updated_at": "2018-08-05T23:34:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42091423,
    "owner_login": "spangulu11",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42091423?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 186259248,
    "name": "PostManAPI",
    "full_name": "kalingamishra/PostManAPI",
    "description": null,
    "fork": false,
    "created_at": "2019-05-12T13:35:13Z",
    "updated_at": "2019-05-12T15:03:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47708431,
    "owner_login": "kalingamishra",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/47708431?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 201142048,
    "name": "postman-api-tests",
    "full_name": "Doc999tor/postman-api-tests",
    "description": null,
    "fork": false,
    "created_at": "2019-08-07T23:25:44Z",
    "updated_at": "2019-09-10T23:16:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 7486679,
    "owner_login": "Doc999tor",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7486679?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 142439143,
    "name": "Postman_LearnAPI",
    "full_name": "r1990v/Postman_LearnAPI",
    "description": "This repo contains postman scripts for learning purposes.",
    "fork": false,
    "created_at": "2018-07-26T12:40:06Z",
    "updated_at": "2018-12-19T09:18:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14290306,
    "owner_login": "r1990v",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/14290306?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "repo",
      "script",
      "contain",
      "scripts",
      "learn",
      "learning",
      "purposes",
      "postman scripts"
    ]
  },
  {
    "id": 39001898,
    "name": "mobbr-api-tests",
    "full_name": "mobbr/mobbr-api-tests",
    "description": "POSTMAN-scripts for API endpoint testing.",
    "fork": false,
    "created_at": "2015-07-13T09:01:00Z",
    "updated_at": "2015-07-13T09:01:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 710804,
    "owner_login": "mobbr",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/710804?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "script",
      "endpoint",
      "scripts"
    ]
  },
  {
    "id": 230977523,
    "name": "k6-from-postman",
    "full_name": "nkeenan38/k6-from-postman",
    "description": "Generates K6 tests in typescript from postman collections",
    "fork": false,
    "created_at": "2019-12-30T20:45:20Z",
    "updated_at": "2020-01-20T13:41:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25674476,
    "owner_login": "nkeenan38",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/25674476?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "collections",
      "postman collection",
      "tests",
      "script",
      "tests ",
      "postman collections",
      "type",
      "types",
      "typescript"
    ]
  },
  {
    "id": 224638478,
    "name": "FHIRTesting",
    "full_name": "project-wildfyre/FHIRTesting",
    "description": "Collection of scripts including postman collection",
    "fork": false,
    "created_at": "2019-11-28T11:28:43Z",
    "updated_at": "2019-11-28T11:30:50Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 51814972,
    "owner_login": "project-wildfyre",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/51814972?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "script",
      "scripts",
      "including"
    ]
  },
  {
    "id": 153112588,
    "name": "Automated-API-Testing-Using-Postman-Collections",
    "full_name": "TSQAteam/Automated-API-Testing-Using-Postman-Collections",
    "description": "A Postman Collection is an executable API Description. Organize requests into folders. Document the collection with descriptions, tests, and more. Send requests individually, or use collection runner to send all the requests in the collection.",
    "fork": false,
    "created_at": "2018-10-15T12:53:59Z",
    "updated_at": "2018-10-24T09:46:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42575108,
    "owner_login": "TSQAteam",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/42575108?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "request",
      "tests",
      "script",
      "requests",
      "send",
      "runner",
      "more",
      "desc",
      "folder",
      "description",
      "descriptions",
      "folders",
      "executable"
    ]
  },
  {
    "id": 145168093,
    "name": "spring-boot-postman-collection-executor-coverage-report",
    "full_name": "rajaramkushwaha/spring-boot-postman-collection-executor-coverage-report",
    "description": null,
    "fork": false,
    "created_at": "2018-08-17T21:28:50Z",
    "updated_at": "2018-08-18T14:07:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14159015,
    "owner_login": "rajaramkushwaha",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/14159015?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 247676620,
    "name": "magento-automations",
    "full_name": "deepkamal/magento-automations",
    "description": "script and postman collection for Magento access",
    "fork": false,
    "created_at": "2020-03-16T10:44:16Z",
    "updated_at": "2020-03-16T11:26:52Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7984303,
    "owner_login": "deepkamal",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7984303?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "script",
      "access",
      "agent"
    ]
  },
  {
    "id": 170845399,
    "name": "full-stack-auth",
    "full_name": "SiddharthaChowdhury/full-stack-auth",
    "description": "react.js, node.js, typescript, babel, webpack, graphQL, REST, mongoDB, jest, react-router, postman",
    "fork": false,
    "created_at": "2019-02-15T10:17:05Z",
    "updated_at": "2019-11-12T17:06:41Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 0,
    "watchers": 5,
    "score": 1,
    "owner_id": 11028021,
    "owner_login": "SiddharthaChowdhury",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/11028021?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "node",
      "mongo",
      "route",
      "react",
      "type",
      "types",
      "router",
      "graph",
      "typescript",
      "jest"
    ]
  },
  {
    "id": 167320995,
    "name": "RESTAPITestingPostman",
    "full_name": "trivenimedici/RESTAPITestingPostman",
    "description": null,
    "fork": false,
    "created_at": "2019-01-24T07:11:51Z",
    "updated_at": "2019-01-24T09:40:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21274394,
    "owner_login": "trivenimedici",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/21274394?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 237214059,
    "name": "RESTAPIusingPostman",
    "full_name": "akash-agarwal96/RESTAPIusingPostman",
    "description": null,
    "fork": false,
    "created_at": "2020-01-30T13:01:24Z",
    "updated_at": "2020-01-30T13:07:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 58200628,
    "owner_login": "akash-agarwal96",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/58200628?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 235139286,
    "name": "Postman2RestClient",
    "full_name": "MikoSh95/Postman2RestClient",
    "description": null,
    "fork": false,
    "created_at": "2020-01-20T15:55:38Z",
    "updated_at": "2020-01-20T20:03:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23083053,
    "owner_login": "MikoSh95",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/23083053?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 35253469,
    "name": "nodejs_postman_site",
    "full_name": "thomasborland/nodejs_postman_site",
    "description": "NodeJS website to run POSTMan REST test scripts",
    "fork": false,
    "created_at": "2015-05-08T02:06:31Z",
    "updated_at": "2015-05-08T02:06:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9681442,
    "owner_login": "thomasborland",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/9681442?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "script",
      "scripts",
      "site",
      "website"
    ]
  },
  {
    "id": 72860070,
    "name": "postman-scripts",
    "full_name": "lposs/postman-scripts",
    "description": "A bunch of Postman scripts that partners and customers may find useful in exercising AM's REST endpoints. They are provided \"as is\" and are unsupported.",
    "fork": false,
    "created_at": "2016-11-04T15:26:21Z",
    "updated_at": "2016-11-29T09:01:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23235864,
    "owner_login": "lposs",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/23235864?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "endpoint",
      "points",
      "scripts",
      "endpoints",
      "provide",
      "custom",
      "support",
      "provided",
      "find",
      "useful",
      "customer",
      "customers",
      "supported",
      "bunch",
      "partner"
    ]
  },
  {
    "id": 208705135,
    "name": "RESTful-API",
    "full_name": "cpalmer-atx/RESTful-API",
    "description": "A group project for my Spring 2019 software engineering course implementing a RESTful API using mongoDB, Postman, and javascript.",
    "fork": false,
    "created_at": "2019-09-16T03:50:16Z",
    "updated_at": "2019-09-16T03:50:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29079728,
    "owner_login": "cpalmer-atx",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/29079728?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "implement",
      "mongo",
      "java",
      "course",
      "software",
      "2019",
      "javascript",
      "implementing",
      "engine",
      "group",
      "engineering"
    ]
  },
  {
    "id": 138474242,
    "name": "RESTful-Service--StripeAPI-integration-with-Spring-Application",
    "full_name": "utsavrai/RESTful-Service--StripeAPI-integration-with-Spring-Application",
    "description": "A Spring application to manage Customers, Plans and Subscriptions without using Stripe’s Dashboard",
    "fork": false,
    "created_at": "2018-06-24T10:53:18Z",
    "updated_at": "2018-06-24T11:13:27Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25121619,
    "owner_login": "utsavrai",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25121619?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "script",
      "manage"
    ]
  },
  {
    "id": 203823567,
    "name": "Postgen",
    "full_name": "Phara0h/Postgen",
    "description": "A simple node script to convert postman collections to clean REST client libs for node.",
    "fork": false,
    "created_at": "2019-08-22T15:32:28Z",
    "updated_at": "2019-11-07T19:16:05Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 1054802,
    "owner_login": "Phara0h",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1054802?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "postman collection",
      "script",
      "client",
      "node",
      "convert",
      "postman collections",
      "clean"
    ]
  },
  {
    "id": 190715549,
    "name": "ticket-viewer",
    "full_name": "SeepG/ticket-viewer",
    "description": "Javascript Ticket Viewer built using a simple REST API with NodeJS and Express. PostMan has been used for testing. HTML, Javascript and Bootstrap used for the front-end.",
    "fork": false,
    "created_at": "2019-06-07T09:01:10Z",
    "updated_at": "2019-07-31T07:53:54Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 45259330,
    "owner_login": "SeepG",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/45259330?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "script",
      "built",
      "front",
      "been"
    ]
  },
  {
    "id": 104587490,
    "name": "webservices-test-framework-compare",
    "full_name": "FachrulCH/webservices-test-framework-compare",
    "description": "personal opinion for test framework for web services in PHP, Python, Javascript, and Java. using codeception, postman-newman, robot framework, rest assured",
    "fork": false,
    "created_at": "2017-09-23T17:52:06Z",
    "updated_at": "2017-09-23T17:56:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 10245158,
    "owner_login": "FachrulCH",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10245158?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "rest",
      "script",
      "service",
      "code",
      "newman",
      "framework",
      "services",
      "robo",
      "personal",
      "assured",
      "codeception",
      "opinion"
    ]
  },
  {
    "id": 228832804,
    "name": "userPosts",
    "full_name": "param2404/userPosts",
    "description": "C.R.U.D operation using REST APIs and Mongoose . 1. Create two collections (User,Post) using mongoose.model USER: name, phone,email etc. POST: title,description etc. 2. Add users/post through POSTMAN and check the result in robo3t.(CREATE-post) 3.Fetch users/post through POSTMAN and check the result in robo3t.(READ-get) 4.Update users/post through POSTMAN and check the result in robo3t.(UPDATE-patch) 5.Delete users/post through POSTMAN and check the result in robo3t.(DELETE-delete) 6.Fetch a particular user's post using its id or name .",
    "fork": false,
    "created_at": "2019-12-18T12:11:29Z",
    "updated_at": "2019-12-18T12:14:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 59016540,
    "owner_login": "param2404",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/59016540?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "script",
      "user",
      "mongo",
      "mail",
      "operation",
      "users",
      "delete",
      "email",
      "name",
      "check",
      "model",
      "result",
      "mongoose",
      "desc",
      "description",
      "title",
      "robo",
      "patch",
      "robo3t"
    ]
  },
  {
    "id": 119587689,
    "name": "SmackApplication",
    "full_name": "sonali-developer/SmackApplication",
    "description": "App Description: A clone of chat application namely Slack. It is a full fledged and professional looking ready to publish app on Appstore. It allows first time user to register by providing unique username, email and password along with selection of Avatar and Avatar's Background color; login using registered email and password, participate in channels available for chat, create new channel by adding users, perform live chat with other users of this app, can even logout, and so on.  • Built using Xcode 9, Swift 4, Cocoa pods, node.js, MongoDB, Heroku, Postman, etc. for iOS 11 based iPhones and iPads.  • Local Frameworks used includes Foundation, UIKit and other API's like Alamofire, SwiftyJSON, SocketIO, REST, SWReveal, etc.  • Demonstrated the use of Networking in iOS.  • Implemented Web Request creation in Xcode using UIKit, APIs, node.js and Mongo dB online. • Implemented Web service API hosting online using Heroku and local hosting using Postman. • Implemented user creation and real time talking using Socket Technology through SocketIO library.  • Implemented Web Service for User Registration, Authentication & Login, Channels Creation & display, fetching, sending and saving text messages and many more.  • Implemented Table Views, Collection Views & custom design of their cells using data models.  • Implemented side menu for the display of user profile and channels using SWReveal and Gradient color design code for providing gradient color background to this side menu.  • Implemented creation of two XIB's for Channels creation and profile view’s popUp.  • Implemented SegmentedControl for displaying 28 Dark and Light Avatar displays and code for generating Avatar’s background color on user registration screen.  • Implemented Input Accessory View for Text field.  • In all designed around eight View Controllers and their corresponding storyboard file for GUI design, Four Services, two custom cells, seven view files, two model files and lots of assets and so on. ",
    "fork": false,
    "created_at": "2018-01-30T20:02:55Z",
    "updated_at": "2018-06-24T20:51:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 20232921,
    "owner_login": "sonali-developer",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20232921?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "file",
      "application",
      "script",
      "service",
      "node",
      "user",
      "based",
      "code",
      "sign",
      "mail",
      "line",
      "files",
      "send",
      "local",
      "full",
      "read",
      "users",
      "more",
      "library",
      "view",
      "host",
      "email",
      "perform",
      "rating",
      "store",
      "play",
      "name",
      "working",
      "side",
      "allows",
      "long",
      "model",
      "custom",
      "message",
      "text",
      "design",
      "includes",
      "login",
      "along",
      "available",
      "clone",
      "designed",
      "fetch",
      "creation",
      "sending",
      "around",
      "ready",
      "many",
      "messages",
      "online",
      "sets",
      "display",
      "models",
      "register",
      "select",
      "generating",
      "fire",
      "playing",
      "profile",
      "adding",
      "talk",
      "hosting",
      "providing",
      "registration",
      "chat",
      "saving",
      "background",
      "namely",
      "fetching",
      "selection",
      "real time",
      "lots"
    ]
  },
  {
    "id": 91374388,
    "name": "JWT-Authentication",
    "full_name": "kpraneeth3456/JWT-Authentication",
    "description": "Project Title: JWT Authentication  Description: This project is a basic Authorization and Authentication which exchanges JSON web tokens between the client and the server for more security.  Execution: -Clone or download the repo from the GitHub link -npm install (to download the dependencies) -node index.js (To get the application running)  Working: -User has to enter his email and password to register his account.(Use any third-party rest-client like Postman on port 3000) -If the email already exists in the database it sends an error message and if the email does not exist it saves to the database. -If the user is signed up then he can go ahead and Sign-in with same username and password. -If the credentials are matched then a JSON web token will be sent to the client in the header. -If the username and password do not match then it sends back an error message.",
    "fork": false,
    "created_at": "2017-05-15T19:03:55Z",
    "updated_at": "2018-12-28T08:47:41Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 26414547,
    "owner_login": "kpraneeth3456",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/26414547?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "data",
      "application",
      "rest",
      "script",
      "server",
      "client",
      "node",
      "database",
      "user",
      "sign",
      "mail",
      "send",
      "load",
      "read",
      "running",
      "more",
      "email",
      "name",
      "token",
      "message",
      "to do",
      "install",
      "between",
      "link",
      "header",
      "account",
      "download",
      "enter",
      "ready",
      "party",
      "register",
      "sends",
      "third",
      "dependencies",
      "tokens",
      "error",
      "match",
      "security",
      "exchange",
      "matched"
    ]
  },
  {
    "id": 166755938,
    "name": "Dec-api",
    "full_name": "Pal0720/Dec-api",
    "description": "Build a RESTful API/MICROSERVICE with the following implementations :   The API/Microservice must perform these basic CRUD Operations :              - Accepts a request to add a new entry into the database.        - Accepts a request to update an existing entry into the database.        - Accepts a request to retrieve all the existing entries from the database.        - Accepts a request to retrieve a single entry with respect to a particular field (ID, Name, etc.. )  from the database.    a. Products : Products Table Schema : Decathlon_Products ProductID  | ProductName  | ProductSport | ProductLevel | ProductDescription  | AssociatedStores |    b. Stores : DB Table Schema : Decathlon_Stores StoreID  | StoreName  | StoreCity |       Note : 1. 'AssociatedStores' is the field to capture the StoreIDs in which the product is available. It can be multiple stores.  2. Both Products and Stores API can be called separately and together to perform the above mentioned functions. For Ex: Expose one endpoint (for example: /stores/{store_id}/products/{product_id} ) to retrieve the details of the product associated to a store. Expose one endpoint ( /stores/store_id/products ) to list all the products available in that particular store.  3. IDs and names cannot be updated.  4. You can use Spring Boot(Java) or Django Framework (with Python) or any framework you are comfortable with to build the application with Maven.  5. You can use an in-memory database : H2/Apache Derby.  6. You can use Postman as the REST Client to send requests.   Security : Implement a Basic Authorization security mechanism, which is validated on all requests.",
    "fork": false,
    "created_at": "2019-01-21T05:53:07Z",
    "updated_at": "2019-01-21T06:55:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 29477534,
    "owner_login": "Pal0720",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/29477534?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "script",
      "service",
      "call",
      "database",
      "requests",
      "example",
      "implement",
      "endpoint",
      "framework",
      "build",
      "function",
      "send",
      "spec",
      "list",
      "update",
      "implementation",
      "perform",
      "store",
      "name",
      "product",
      "multiple",
      "available",
      "functions",
      "following",
      "retrieve",
      "products",
      "single",
      "updated",
      "details",
      "mechanism",
      "security",
      "memory",
      "names",
      "comfortable",
      "cannot",
      "implementations"
    ]
  },
  {
    "id": 218767130,
    "name": "wechaapp",
    "full_name": "yuyong1992/wechaapp",
    "description": "postman interface test script",
    "fork": false,
    "created_at": "2019-10-31T13:01:57Z",
    "updated_at": "2019-10-31T13:02:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37647028,
    "owner_login": "yuyong1992",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/37647028?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "script",
      "face",
      "interface"
    ]
  },
  {
    "id": 109276055,
    "name": "postman-test-proj",
    "full_name": "SriharshaKosaraju/postman-test-proj",
    "description": "Testing Postman scripts",
    "fork": false,
    "created_at": "2017-11-02T14:32:11Z",
    "updated_at": "2017-11-02T14:32:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26443383,
    "owner_login": "SriharshaKosaraju",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/26443383?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "scripts"
    ]
  },
  {
    "id": 218759371,
    "name": "openshift-demo-postman",
    "full_name": "nsubrahm/openshift-demo-postman",
    "description": "Postman scripts to test the OpenShift demo",
    "fork": false,
    "created_at": "2019-10-31T12:20:14Z",
    "updated_at": "2019-11-01T04:27:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 57213612,
    "owner_login": "nsubrahm",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/57213612?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "script",
      "demo",
      "scripts"
    ]
  },
  {
    "id": 156214341,
    "name": "TestingDCorePostman",
    "full_name": "SkvarkovskyDCore/TestingDCorePostman",
    "description": "Sets of test scripts from Postman",
    "fork": false,
    "created_at": "2018-11-05T12:27:45Z",
    "updated_at": "2018-11-05T12:30:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43748341,
    "owner_login": "SkvarkovskyDCore",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/43748341?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "script",
      "scripts"
    ]
  },
  {
    "id": 194766685,
    "name": "Postman-Tests",
    "full_name": "Solijons/Postman-Tests",
    "description": "Here is sample of writing tests in post using javascript syntax",
    "fork": false,
    "created_at": "2019-07-02T01:32:12Z",
    "updated_at": "2019-07-02T01:32:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40540002,
    "owner_login": "Solijons",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/40540002?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "script",
      "tests ",
      "sample",
      "java",
      "javascript",
      "writing",
      "syntax"
    ]
  },
  {
    "id": 195050318,
    "name": "test-postman",
    "full_name": "lexym/test-postman",
    "description": null,
    "fork": false,
    "created_at": "2019-07-03T12:36:14Z",
    "updated_at": "2019-10-08T10:16:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 28095971,
    "owner_login": "lexym",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/28095971?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 217150361,
    "name": "postman-test",
    "full_name": "mmarinez/postman-test",
    "description": null,
    "fork": false,
    "created_at": "2019-10-23T20:45:39Z",
    "updated_at": "2019-10-23T20:55:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18508975,
    "owner_login": "mmarinez",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/18508975?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 211599256,
    "name": "Postman_Test",
    "full_name": "Linmuer1/Postman_Test",
    "description": null,
    "fork": false,
    "created_at": "2019-09-29T03:44:16Z",
    "updated_at": "2019-09-29T08:57:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36976170,
    "owner_login": "Linmuer1",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36976170?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 233451771,
    "name": "postman-tests",
    "full_name": "vojtechrojicek/postman-tests",
    "description": null,
    "fork": false,
    "created_at": "2020-01-12T20:10:10Z",
    "updated_at": "2020-01-17T08:43:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42407746,
    "owner_login": "vojtechrojicek",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/42407746?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 187878348,
    "name": "Postman_Newman",
    "full_name": "YuriyPent/Postman_Newman",
    "description": "Install, run, pre-request script, test",
    "fork": false,
    "created_at": "2019-05-21T16:47:41Z",
    "updated_at": "2019-06-24T08:14:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12219558,
    "owner_login": "YuriyPent",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12219558?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "script"
    ]
  },
  {
    "id": 211079105,
    "name": "postman-test-scripts-poc",
    "full_name": "cboiam/postman-test-scripts-poc",
    "description": "Poc of the automated pre request scripts and test scripts in postman",
    "fork": false,
    "created_at": "2019-09-26T12:03:47Z",
    "updated_at": "2019-11-14T17:03:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38038695,
    "owner_login": "cboiam",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38038695?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "request",
      "script",
      "auto",
      "automat",
      "scripts",
      "automate",
      "automated",
      "pre request"
    ]
  },
  {
    "id": 183202101,
    "name": "gemma-postman-tests",
    "full_name": "VNG-Realisatie/gemma-postman-tests",
    "description": null,
    "fork": false,
    "created_at": "2019-04-24T10:02:56Z",
    "updated_at": "2019-12-16T14:01:15Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 34739001,
    "owner_login": "VNG-Realisatie",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34739001?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 70267698,
    "name": "UFT_PostMan_Driver",
    "full_name": "chit786/UFT_PostMan_Driver",
    "description": "Full integration of HP UFT with Newman test scripts using command line",
    "fork": false,
    "created_at": "2016-10-07T17:19:59Z",
    "updated_at": "2016-10-10T15:55:01Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18376182,
    "owner_login": "chit786",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/18376182?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "script",
      "line",
      "scripts",
      "integration",
      "command",
      "command line"
    ]
  },
  {
    "id": 133409252,
    "name": "bundle_runner_files",
    "full_name": "mastermalone/bundle_runner_files",
    "description": "Bash scripts to create .json files used for Postman runners",
    "fork": false,
    "created_at": "2018-05-14T19:09:02Z",
    "updated_at": "2019-01-25T19:34:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 652063,
    "owner_login": "mastermalone",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/652063?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "file",
      "script",
      "json",
      "files",
      "scripts",
      "runner",
      "runners"
    ]
  },
  {
    "id": 75204770,
    "name": "postman-sign-jwt",
    "full_name": "pe8ter/postman-sign-jwt",
    "description": "Build a script that signs JSON Web Tokens in Postman.",
    "fork": false,
    "created_at": "2016-11-30T16:20:55Z",
    "updated_at": "2016-12-09T05:24:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7235240,
    "owner_login": "pe8ter",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7235240?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "sign",
      "signs"
    ]
  },
  {
    "id": 134546261,
    "name": "Adobe-Air-Assistant",
    "full_name": "SaffronCode/Adobe-Air-Assistant",
    "description": "Descriptor file editor for Adobe Air",
    "fork": false,
    "created_at": "2018-05-23T09:31:30Z",
    "updated_at": "2020-03-25T09:42:00Z",
    "stargazers_count": 18,
    "watchers_count": 18,
    "forks": 1,
    "watchers": 18,
    "score": 1,
    "owner_id": 39374550,
    "owner_login": "SaffronCode",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/39374550?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "script",
      "edit",
      "editor"
    ]
  },
  {
    "id": 177333498,
    "name": "varman",
    "full_name": "KevCui/varman",
    "description": ":guardsman: A script to generate postman/newman global variable json from human readable yaml file",
    "fork": false,
    "created_at": "2019-03-23T19:50:10Z",
    "updated_at": "2019-08-10T19:03:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14293537,
    "owner_login": "KevCui",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/14293537?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "script",
      "json",
      "newman",
      "generate",
      "read",
      "variable",
      "yaml",
      "guardsman",
      "readable",
      "human"
    ]
  },
  {
    "id": 122043429,
    "name": "test-API",
    "full_name": "garybeattiejr/test-API",
    "description": "This is my test API. Developed with Javascript, JSON, Node, Postman, Nodemon, Express, Body-Parser.",
    "fork": false,
    "created_at": "2018-02-19T09:52:03Z",
    "updated_at": "2018-02-19T10:04:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36244950,
    "owner_login": "garybeattiejr",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/36244950?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "script",
      "demo"
    ]
  },
  {
    "id": 174555369,
    "name": "mern_devconnector",
    "full_name": "SalahEddine007/mern_devconnector",
    "description": "Welcome to \"MERN Stack Front To Back\". In this course we will build an in depth full stack social network application using Node.js, Express, React, Redux and MongoDB along with ES6+. We will start with a bank text editor and end with a deployed full stack application. This course includes...  Building an extensive backend API with Node.js & Express Protecting routes/endpoints with JWT (JSON Web Tokens) Extensive API testing with Postman Integrating React with our backend in an elegant way, creating a great workflow Building our frontend to work with the API Using Redux for app state management Creating reducers and actions for our resources Creating many container components that integrate with Redux Testing with the Redux Chrome extension Creating a build script, securing our keys and deploy to Heroku using Git This is NOT an \"Intro to React\" or \"Intro to Node\" course. It is a practical hands on course for building an app using the incredible MERN stack. I do try and explain everything as I go so it is possible to follow without React/Node experience but it is recommended that you know at least the basics first.",
    "fork": false,
    "created_at": "2019-03-08T14:50:34Z",
    "updated_at": "2019-03-08T14:50:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34078780,
    "owner_login": "SalahEddine007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/34078780?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "application",
      "script",
      "contain",
      "endpoint",
      "points",
      "route",
      "build",
      "manage",
      "endpoints",
      "full",
      "routes",
      "star",
      "source",
      "front",
      "stat",
      "creating",
      "course",
      "start",
      "extension",
      "very",
      "backend",
      "rating",
      "action",
      "resource",
      "long",
      "management",
      "stack",
      "ever",
      "building",
      "resources",
      "text",
      "integrate",
      "edit",
      "includes",
      "deployed",
      "frontend",
      "along",
      "container",
      "many",
      "network",
      "social",
      "plain",
      "workflow",
      "basics",
      "component",
      "full stack",
      "components",
      "editor",
      "explain",
      "bank",
      "elegant",
      "least",
      "practica",
      "every"
    ]
  },
  {
    "id": 133838455,
    "name": "nuxeo-swagger",
    "full_name": "nuxeo-sandbox/nuxeo-swagger",
    "description": "Tools to convert the Nuxeo Swagger 1.2 descriptions to an importable format for Postman and other types of tools.",
    "fork": false,
    "created_at": "2018-05-17T16:08:34Z",
    "updated_at": "2019-07-25T13:40:11Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 10600635,
    "owner_login": "nuxeo-sandbox",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/10600635?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "script",
      "tool",
      "format",
      "convert",
      "import",
      "tools",
      "type",
      "desc",
      "types",
      "description",
      "portable",
      "descriptions",
      "importable"
    ]
  },
  {
    "id": 211283078,
    "name": "postman-export-formatter",
    "full_name": "john-lock/postman-export-formatter",
    "description": "A formatter for Postman Collection exports for file uploads. Allowing users to put the desired path in the description and have this path writtening into the file upload path - rather than having the default relative paths given by PM",
    "fork": false,
    "created_at": "2019-09-27T09:22:43Z",
    "updated_at": "2020-03-13T11:24:56Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36238895,
    "owner_login": "john-lock",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/36238895?v=4",
    "pulled": 1,
    "tags": [
      "form",
      "file",
      "script",
      "user",
      "format",
      "load",
      "export",
      "users",
      "written",
      "desc",
      "upload",
      "given",
      "default",
      "description",
      "exports",
      "path",
      "having",
      "formatter"
    ]
  },
  {
    "id": 160962620,
    "name": "Ironhack-Project3-Client-Side",
    "full_name": "Rachel-Hofer/Ironhack-Project3-Client-Side",
    "description": "Week-9, Project 3 - MERN Application Assignment: Minimum 3 models. Include sign-up / sign-in / sign-out with encrypted passwords. Have full CRUD routes for a minimum of 2 models. Use React for Front End.  Technologies: React.js, Javascript, Node.js, HBS, CSS, Bootstrap, jQuery, Passport.js, Cloudinary.js, AJAX, MongoDB, Postman, GoogleMapsAPI",
    "fork": false,
    "created_at": "2018-12-08T17:30:01Z",
    "updated_at": "2019-01-17T22:49:10Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 42702889,
    "owner_login": "Rachel-Hofer",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/42702889?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "sign",
      "route",
      "full",
      "routes",
      "model",
      "mini",
      "models",
      "words",
      "minimum"
    ]
  },
  {
    "id": 161976716,
    "name": "node-post",
    "full_name": "ramakanthrao/node-post",
    "description": "node js script for postman sandbox api",
    "fork": false,
    "created_at": "2018-12-16T07:06:15Z",
    "updated_at": "2018-12-16T07:06:18Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2632526,
    "owner_login": "ramakanthrao",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2632526?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "node",
      "sandbox"
    ]
  },
  {
    "id": 160961638,
    "name": "Ironhack-Project3-Server-Side",
    "full_name": "Rachel-Hofer/Ironhack-Project3-Server-Side",
    "description": "Week-9, Project 3 - MERN Application Assignment: Minimum 3 models. Include sign-up / sign-in / sign-out with encrypted passwords. Have full CRUD routes for a minimum of 2 models. Use React for Front End.  Technologies: React.js, Javascript, Node.js, HBS, CSS, Bootstrap, jQuery, Passport.js, Cloudinary.js, AJAX, MongoDB, Postman, GoogleMapsAPI",
    "fork": false,
    "created_at": "2018-12-08T17:17:28Z",
    "updated_at": "2018-12-20T16:40:16Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 1,
    "watchers": 1,
    "score": 1,
    "owner_id": 42702889,
    "owner_login": "Rachel-Hofer",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/42702889?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "sign",
      "route",
      "full",
      "routes",
      "model",
      "mini",
      "models",
      "words",
      "minimum"
    ]
  },
  {
    "id": 158105938,
    "name": "FirstExpressWebSite",
    "full_name": "J-Nicholas/FirstExpressWebSite",
    "description": "This is a website I created for a college module in which we utilised Express, Node Js, Javascript, BootStrap, Ajax, for the site and MongoDB for the databsea and Postman to test APIs that we wrote.",
    "fork": false,
    "created_at": "2018-11-18T16:53:50Z",
    "updated_at": "2018-11-27T02:53:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37844909,
    "owner_login": "J-Nicholas",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/37844909?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "data",
      "script",
      "util",
      "site",
      "website",
      "module",
      "tabs",
      "college",
      "databse"
    ]
  },
  {
    "id": 225162969,
    "name": "Blockchain",
    "full_name": "VueVindicator/Blockchain",
    "description": "This is a short project that describes the workings of a blockchain network. Built with javascript, express.js and postman",
    "fork": false,
    "created_at": "2019-12-01T13:06:10Z",
    "updated_at": "2020-01-11T15:28:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 58005997,
    "owner_login": "VueVindicator",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/58005997?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "script",
      "express",
      " express",
      "java",
      "working",
      "chai",
      "desc",
      "blockchain",
      "javascript",
      "network",
      "describes"
    ]
  },
  {
    "id": 40326550,
    "name": "Angular-Directive-Project",
    "full_name": "sn0112358/Angular-Directive-Project",
    "description": "Angular-Directive-Project Directives range from very basic to extremely complex. This project will build up to some somewhat difficult directives. Keep in mind that the format we're learning for directives is the same format used to build some extremely complex things in angular. Using directives often and well is one way to show you're a talented developer.  Starting Out  We've included only a few things for you to begin with. index.html, app.js, styles.css. At this point the best way to get more comfortable with angular is to initialize an app without relying heavily on boilerplate code (reusable code that starts out your projects for you).  You'll notice that in the index.html we've included the angular-route CDN. Yes, we'll be using angular's router here. Put an ng-view into your index.html.  In your app.js set up a config and set up our first route for when a user is at the '/home' url. If you're having trouble remembering how to set up the router go look at how you set up the router on the previous project. One way these projects will be beneficial to you is allowing you to look back at something *you** did and seeing how you got that something to work.* You may also want add an otherwise that defaults to /home. Create a controller and a template file for this route in your app folder. Don't forget to include the controller as a script in your index.html Check that everything is hooked up correctly. Try adding a div with some text in your home template just to make sure it's showing up. Once you've got that going you're ready to start on some directives. Now let's make our directive. We'll start with a simple one that we can use to display information passed to it.  Step 1. Start your directive  Woot. When you're initializing your directive just remember that it works very similarly to how you start up a controller or a service. It can also be very helpful to think of your directive as a route.  Create your directive. You'll use the directive method on your angular module. It takes two arguments, the name string and the callback function, which will return the object that represents your directive. When naming your directive give it a name with two words; dirDisplay would be nice, but anything works. Just remember it's best practice to give a directive a camel case name so that it's clear in your html what it is. Also we're going to need a template html for our directive. We could do it inline, but let's make another file instead. Just name it something that makes sense for the name of your directive and put it in the same directory as your directive file. For your template just make a  and inside a  tag that says User. Now in your home route html add in your directive. It will look like this if you named it dirDisplay:  Start up your app and go to the home route. Check and make sure you see User where your directive was placed. If you're not seeing it at this point it could mean a few things. Here's some more common issues. You didn't link your directive in your index as a script. Your name for your directive doesn't match the name in your html. Remember camel case becomes snake case so myDirective becomes . You're file path to your html template is wrong. You have to think of file paths in angular as relative to the index. Here's some code to see just for this part, and just for the directive's js file.  var app = angular.module('directivePractice'); app.directive('dirDisplay', function(){   return {     templateUrl: 'app/directives/dirDisplay.html'   }; }); What we're returning is the directive object. You won't see anymore code in this tutorial so it's important you get things working right and refer back to what you've already done to advance from now on.  Step 2. Advancing directives  Your directive should be loaded up now, but it's not really doing much. Let's make it better.  In your home controller. Make a variable on your $scope called user. Set it's value to {   name: \"Geoff McMammy\",   age: 43,   email: \"geofdude@gmail.com\" } Now inside your directive's html specifically inside the  tags display our new user's name. Then inside maybe some  tags display his email and age. This is going to work exactly the same as if it was just inside your home controller. Reload the page and make sure it works. This is still very cosmetic and really not all that useful. It needs functionality.  Add into your directive's object the link property. The link property's value is a function definition that takes (generally) three parameters. scope, element, and attributes. Unlike in other places with angular injection these parameter names don't carry meaning. The first parameter will always represent your $scope for that directive, the second will always be the element that wraps your whole directive, and the third will always be an object containing all the properties and values of the attributes on your directive in the dom. Try the following to get a feel for all three.  Add two attributes to your directive in your html. Like this -  Now in the link property you've added console.log the three parameters in the function. You'll see an object for scope that should look identical to the $scope of your html function. For element you'll see an object the represents the DOM wrapper for your directive. For attributes you'll see an object that will look like this:  {   test: \"myTest\",   myCheck: \"checkItOut\" } An important thing to notice is how it has again converted snake case to camel case for you. my-check became myCheck. Don't forget this. You'll run into this issue one day. It counts for both attributes and directive names.  To feel some of what the link function could do let's try this.  Add a ng-show to both the email and age wrappers. This should be familiar to you. Now inside your link function add a click event listener to your element property. It's going to look just like jQuery. element.on('click', function(){  }) Inside the click listener's callback add a toggle for the ng-show property you passed in. Along with a console.log to make sure things are connecting when you click. Try it out. Don't call for a mentor when it doesn't work. Let's talk about that first. You should see the console.log firing, but why isn't it toggling. This is going to be a common problem when working with the link function and event listeners. What we have here is an angular digest problem. The value is changing on the scope object, but the change isn't being reflected by our DOM. That's because angular isn't aware of the change yet. Anytime we cause an event to happen using something like jQuery or even angular's jQLite we need to let angular know that we've made a change.  Add this line of code in place of your console.log, scope.$apply(). Now try it out. It should be working now, so if you're still having issues it's time to debug. What we've done is forced angular to run it's digest cycle. This is where angular checks the scope object for changes and then applies those to the DOM. This is another good lesson to learn for later. You'll most likely hit this when making changes to your element using event listeners.  Step 3. Directive's re-usability.  Now our directive has some extremely basic functionality. One of a directive's greatest advantages though is its ability to be placed anywhere and still be functional. Let's say instead we had a list of users instead of just one.  Change the $scope property in your home controller to be users and give it this array as its value: [  {    name: \"Geoff McMammy\",    age: 43,    email: \"geofdude@gmail.com\",    city: \"Provo\"  },  {    name: \"Frederick Deeder\",    age: 26,    email: \"fredeed@gmail.com\",    city: \"Austin\"  },  {    name: \"Spencer Rentz\",    age: 35,    email: \"spencerrentz@gmail.com\",    city: \"Sacramento\"  },  {    name: \"Geddup Ngo\",    age: 43,    email: \"geddupngo@gmail.com\",    city: \"Orlando\"  },  {    name: \"Donst Opbie Leevin\",    age: 67,    email: \"gernee@gmail.com\",    city: \"Phoenix\"  } ] Now in your home HTML add a ng-repeat to the directive call. Tell it to repeat for each user in users. Reload your page. It's working! But why? How does each directive instance know what information to display?  In the link function console.log the scope parameter. Make sure it's outside of your click listener. You'll see five print outs in your console. Open up any one of them and look to the bottom. Open up the user property. It's exactly what we would want! But again why would that be the case? Don't get too caught up in this next bit if it's too hard to understand, but the ng-repeat is essentially making new tiny scope objects for each individual user in our users array. Now each of our directives is still getting a user property on the scope object just like the directive wanted in the beginning. Woot.  Step 4. Ramp it up with Isolate Scope.  Directives can do so much more. So let's make that happen. That means we should make.... a new directive!!! This directive's purpose will be to display a selected User and the weather in his/her/its location. Link it up just like the last one.  Create a js file for our directive and name it dirWeather. Make an html file named dirWeather.html. Link it up in your index.html and add the template to your new directive object. In your directive's template give it an  tag that says Weather just so we can know it's working. Above your ng-repeat on dirDisplay add your new dirWeather directive. If it's not working check the instructions above as to some common reasons why before asking a mentor for help. If you're seeing the Weather text on your page then we're ready to try out the dreaded Isolate Scope. The isolate scope object is one of the stranger API's in angular. I'm sorry but it is. Just refer to this for now.  scope: {  string: '@',  link: '=',  func: '&' } The properties on the scope object represent the attributes on the directive in the html. Our example scope object here would look something like this in the html.  The hard part here is the @, =, and &. They each have very important and distinct meanings.  @ says take in my attribute value as a string. = says take in my attribute value as a two-way bound variable from the parent scope. & says take in my attribute value as a reference to a function on the parent scope. It's also critical to point out that once you add a scope object you have no isolated your directive's scope. Meaning, aside from the values passed in through attributes, this directive has no connection to the $scope of its parent.  That being said let's isolate our directive's scope. :worried:  Add the scope property to your dirWeather. Give it the value of an object with a property of currentUser whose value is '='. Remember in your html this will look like current-user. This is the third time I've said so don't expect it again. This means that whatever comes into the currentUser attribute is going to be a value of the parent's scope object.  For now test this out by passing in users[0]. Find a way to show that users information inside your dirWeather's html. Remember inside your directive now the user is represented by currentUser. Step 5. &? &!?  The '=' value on your scope object has created a two-way binding between users[0] and currentUser. Now let's try out the '&'.  On your home controller add a function called getWeather. It takes one parameter called city. This function will make a call to a service so we'll need to create that. Make a weather service. Name it something cool and creative like weatherService. Inside the weather service make a function called getWeather that also takes one parameter, city. Make an $http get to this url - 'http://api.openweathermap.org/data/2.5/weather?q=' After the q= add on the city parameter. If you want you can test this out in postman. See what kind of data you get back. If it's the weather of that city then... you win! Use $q to return a promise that only resolves with the data you want. Temperature (preferably not in Kelvin) and the weather description. Use console.log on the data coming from the $http request to get to what you want. You'll need to add both on an object that you resolve your new promise with. On your home controller have it return the result of invoking the get getWeather function on the service. You should be returning a promise. Now in your home route's HTML pass in the getWeather function to the dirWeather directive through an attribute called weather-call. Add the attribute to your isolate scope object. That was a lot of linking, but let's walk through it. Your controller has a function linked to the service, which is in turn linked to your directive. So if you run the weatherCall function in your directive it will go through your controller to your service and then back.  Now things get a little bit tricky. Angular's way of passing along arguments through a directive to your controller are tricky, but once you understand how to do it, it's not hard. I'm going to give an example here of how it works.   Here's how it would look in your HTML. But where's the data supposed to be coming from? It seems that you'd rather be able to pass in data from your directive. Well you still can, you just have to essentially tell angular what do use as an argument to replace data when it calls that function in your controller. The actualy function call inside the directive will look like this.  $scope.passFunc({data: wantedData}) So what you'll do is pass in an object where the property name is what the argument is named in the HTML where you call the directive. That might sound confusing, but just look at the two code blocks above for a pattern. Note that pass-func becomes $scope.passFunc and data is being replaced with wantedData with the {data: wantedData} object. In our directive we want to replace city in the attribute call, for something else inside the directive. You'll follow the same pattern as above.  For now let's get things set up for that function call.  Add to the dirWeather directive object a property called controller. It's value will be a function. Yes, this is a controller specifically for your one directive. It works the same as any other controller, except you don't give it a name. It's $scope object will only be accessible within an instance of your directive. Don't forget to inject $scope in the function.  Inside your controller function run the weatherCall function with the city property from the currentUser on your $scope. Here's where you need to make sure you've passed in a city argument in the attribute function call, and then replace that with your currentUser's city using an object with a city property. The function call should return a promise, so call .then afterward and add the data onto your $scope to display both the weather and temperature of the currentUser's city. The properties can be named whatever makes sense to you.  You may also want to find a way to get rid of all the decimal places on your temperature. Now you should have everything hooked up so it shows Geoff's data and the weather data for Provo. But is that good enough?  Step 6. Ramping up our ramp up.  Now let's change this so it shows the weather data for whichever user we select. We're going to need to use '&' again.  Make a function on the home controller that takes in a parameter and sets a property on the $scope to be that parameter. Maybe you see where this is going.  We want to get this function into our dirDisplay controller. But in order to do that we need to isolate dirDisplay's scope. This also means we need to pass in each individual user through the scope object as well.  To make it easier on ourselves, let's pass the current user from our ng-repeat into our directive through a user attribute. This way we can leave our two-way bindings as they are. Also pass our new function that sets our current user from our home controller into our directive through a setUser attribute.  You'll need to add an argument in there again. Go with user. Your scope object in dirDisplay should have two properties. setUser with the value of '&' and user with the value of '='. As before we're going to need to do some tricky stuff to get our argument back to our controller.  Call the setUser function inside our click event listener and pass in an object the sets our user argument to be the user on our directive's scope object. If you've forgotten this part go back up and take a look at how you did it before or the example in this README.  Whatever user you click on now should show up in the dirWeather directive as the current user. But we're missing one thing, we want to be able to see the weather for that user too. We'll have to do one more thing that will seem a little bit tricky at first, but it's good to learn if you don't know it already since it's actually used quite frequently.  We need to step up a change listener on our currentUser in the dirWeather directive. We'll use angular's $watch functionality. $watch is a method on your $scope that will watch for changes in a variable you give it. It works in two ways.  $scope.$watch('property', function(value){  console.log(\"When $scope.property changes its new value is: \", value) }); And  $scope.$watch(function(){  return myVar }, function(value){  console.log(\"When myVar changes its new value is: \", value); }); Remove the immediate function call that we have in there now. Maybe just comment it out for now because we'll use it in a bit. Now call the $watch method on your scope and have it watch currentUser. Either way of using $watch is fine. Have its callback run the $scope.weatherCall function just like you had it before.  One thing to note is that $scope.$watch will always run once to begin with. Since that's what we want here it's great, but just be aware of that.  If you've reached this point congratulate yourself. You've messed with some serious stuff today, namely directives. There are still a lot of things about directives that we can't possibly cover in a single project. If you like what we've done so far then you're in a good place to keep going. A developer who understands directives well can build a really clean looking code base. Just look at your home.html. It could have just two lines in it. If you're feeling good move on now to Step 7.  Step 7. Finishing touches  Try to work out these problems on your own.  There should be a way to let the user know that the weather data is loading. Something that appears while our $http request is retrieving our data. The $http request shouldn't fire on both opening and closing a user's information. A color change for the currently active user would be nicer than showing that user's info inside the dirWeather modal. Or at least less redundant. Whatever else you want. We still haven't explored transclusion and ng-transclude so give that a try if you're feeling adventurous. Just know that it's a way for deciding where to put the HTML child elements of a directive. It's cool stuff that can involve some criss-crossing of scopes.",
    "fork": false,
    "created_at": "2015-08-06T20:56:18Z",
    "updated_at": "2019-03-11T21:13:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 14,
    "watchers": 0,
    "score": 1,
    "owner_id": 13667207,
    "owner_login": "sn0112358",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13667207?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "data",
      "request",
      "form",
      "file",
      "script",
      "service",
      "call",
      "http",
      "user",
      "develop",
      "code",
      "example",
      "contain",
      "format",
      "convert",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "function",
      "load",
      "calls",
      "spec",
      "list",
      "star",
      "read",
      "import",
      "users",
      "learn",
      "rent",
      "more",
      "plate",
      "view",
      "config",
      "start",
      "connect",
      "email",
      "very",
      "functional",
      "method",
      "struct",
      "info",
      "developer",
      "play",
      "need",
      "access",
      "name",
      "working",
      "html",
      "converte",
      "learning",
      "module",
      "check",
      "side",
      "tutorial",
      "infor",
      "long",
      "open",
      "object",
      "print",
      "ever",
      "information",
      "template",
      "case",
      "result",
      "control",
      "esse",
      "text",
      "problem",
      "practice",
      "making",
      "to do",
      "place",
      "between",
      "link",
      "under",
      "right",
      "specific",
      "showing",
      "along",
      "variable",
      "included",
      "lines",
      "getting",
      "desc",
      "within",
      "folder",
      "functionality",
      "order",
      "advance",
      "parameter",
      "following",
      "controller",
      "reference",
      "those",
      "done",
      "ready",
      "debug",
      "needs",
      "find",
      "objects",
      "repl",
      "style",
      "console",
      "useful",
      "note",
      "angular",
      "containing",
      "current",
      "should",
      "single",
      "location",
      "easier",
      "connection",
      "sets",
      "default",
      "common",
      "event",
      "connecting",
      "description",
      "display",
      "both",
      "router",
      "best",
      "words",
      "directory",
      "usable",
      "projects",
      "things",
      "another",
      "complex",
      "added",
      "being",
      "third",
      "select",
      "fire",
      "wrapper",
      "doing",
      "correct",
      "path",
      "cause",
      "while",
      "media",
      "going",
      "keep",
      "replace",
      "stuff",
      "home",
      "boiler",
      "expect",
      "issue",
      "still",
      "having",
      "instead",
      "boilerplate",
      "three",
      "definition",
      "currently",
      "adding",
      "better",
      "helpful",
      "talk",
      "little",
      "match",
      "lesson",
      "ember",
      "makes",
      "instruction",
      "previous",
      "city",
      "named",
      "general",
      "instance",
      "familiar",
      "important",
      "become",
      "forge",
      "explore",
      "mean",
      "inside",
      "properties",
      "onto",
      "passing",
      "listen",
      "weather",
      "something",
      "names",
      "reusable",
      "inject",
      "array",
      "least",
      "shows",
      "comfortable",
      "tiny",
      "always",
      "clean",
      "cool",
      "five",
      "namely",
      "invoking",
      "initial",
      "returning",
      "actually",
      "wrappers",
      "wraps",
      "talent",
      "whole",
      "element",
      "directives",
      "elements",
      "essential",
      "sense",
      "arent",
      "much",
      "every",
      "wanted"
    ]
  },
  {
    "id": 183656335,
    "name": "Postman_JavaScript_npm_ChaiAssertionLibrary",
    "full_name": "qijia00/Postman_JavaScript_npm_ChaiAssertionLibrary",
    "description": "Sample Postman scripts I created in JavaScript with Chai Assertion Library. The scripts are also packaged by npm for easy execution and integration to CI/CD pipeline with Jenkins. Authentication information has been removed for privacy reasons.",
    "fork": false,
    "created_at": "2019-04-26T15:53:00Z",
    "updated_at": "2019-10-17T16:50:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41161854,
    "owner_login": "qijia00",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/41161854?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "script",
      "format",
      "line",
      "scripts",
      "integration",
      "package",
      "info",
      "infor",
      "information",
      "been",
      "execution",
      "pipeline",
      "moved"
    ]
  },
  {
    "id": 218388128,
    "name": "sse-xxe",
    "full_name": "Mall0c/sse-xxe",
    "description": "Short PHP script with sample Postman queries to demonstrate XML External Entities (XXE) for the \"Secure Software Engineering\" (SSE) lecture at Hochschule Mannheim",
    "fork": false,
    "created_at": "2019-10-29T21:36:13Z",
    "updated_at": "2019-11-30T13:35:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 33672870,
    "owner_login": "Mall0c",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/33672870?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "sample",
      "demo",
      "demonstrate",
      "queries"
    ]
  },
  {
    "id": 223704287,
    "name": "GET-POST-method-call-using-jquery-and-javascript",
    "full_name": "Manojvg1995/GET-POST-method-call-using-jquery-and-javascript",
    "description": "Hello , In this project I'm uploading how Call get and post method using jquery and javascript using online fake apis.",
    "fork": false,
    "created_at": "2019-11-24T06:49:42Z",
    "updated_at": "2019-11-28T03:49:42Z",
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks": 1,
    "watchers": 5,
    "score": 1,
    "owner_id": 42436097,
    "owner_login": "Manojvg1995",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/42436097?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "line",
      "load",
      "java",
      "method",
      "upload",
      "javascript",
      "online",
      "query",
      "fake",
      "uploading",
      "jquery"
    ]
  },
  {
    "id": 157502976,
    "name": "gulp-postcol",
    "full_name": "ashwanikumar04/gulp-postcol",
    "description": "This is gulp module to replace java script code in the postman collections",
    "fork": false,
    "created_at": "2018-11-14T06:38:34Z",
    "updated_at": "2019-07-15T17:09:05Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 3656437,
    "owner_login": "ashwanikumar04",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/3656437?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "postman collection",
      "script",
      "code",
      "postman collections",
      "java",
      "module",
      "place",
      "repl",
      "replace",
      "gulp"
    ]
  },
  {
    "id": 215174100,
    "name": "meveoman",
    "full_name": "smichea/meveoman",
    "description": "A meveo script, also usable as a standalone java app, that execute a postman 2.1 collection",
    "fork": false,
    "created_at": "2019-10-15T00:59:38Z",
    "updated_at": "2019-10-15T02:13:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16659140,
    "owner_login": "smichea",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16659140?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "script",
      "java",
      "execute",
      "usable",
      "standalone",
      "meveo"
    ]
  },
  {
    "id": 73948533,
    "name": "javascript-at",
    "full_name": "theuggla/javascript-at",
    "description": "ranging from small programs to full applications testing out javascript concepts, both as standalone applications, servers and client applications",
    "fork": false,
    "created_at": "2016-11-16T18:24:52Z",
    "updated_at": "2018-12-12T14:01:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20565872,
    "owner_login": "theuggla",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20565872?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "application",
      "script",
      "server",
      "client",
      "full",
      "java",
      "program",
      "small",
      "applications",
      "concept",
      "javascript",
      "both",
      "servers",
      "concepts",
      "standalone",
      "ranging"
    ]
  },
  {
    "id": 153759693,
    "name": "stategen",
    "full_name": "stategen/stategen",
    "description": "通用springMvc/springBoot分布式非强迫性全栈架构(java服务端，H5、iOS、andriod前端)，内含大名鼎鼎的支付宝dalgen之freemarker开源实现之商用升级版dalgenX，是唯一支持迭代开发的全栈代码生成器，大量前、后端代码通过生成器生成，其中后端任意api直接生成前端网络调用、状态化、交互等相关代码，把前后端分离开发\"拉\"回来，目前前端已支持react(dva+umi+typescript)和flutter(provider),后续加入kotlin、swf。免去前端文档、调试、postman、mockjs...繁琐。开发中迭代生成，不改变原开发流程、生成80%代码,兼容后20%你自己的代码，拒绝挖坑！  https://github.com/stategen/stategen",
    "fork": false,
    "created_at": "2018-10-19T09:34:49Z",
    "updated_at": "2020-03-14T08:04:49Z",
    "stargazers_count": 44,
    "watchers_count": 44,
    "forks": 10,
    "watchers": 44,
    "score": 1,
    "owner_id": 44145320,
    "owner_login": "stategen",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/44145320?v=4",
    "pulled": 1,
    "tags": [
      "script",
      "http",
      "https",
      "java",
      "stat",
      "mock",
      "spring",
      "provide",
      "github",
      "react",
      "type",
      "types",
      "free",
      "typescript",
      "provider",
      "freemarker",
      "flutter"
    ]
  },
  {
    "id": 162571828,
    "name": "iReporter2",
    "full_name": "bakersen/iReporter2",
    "description": "iReporter enables any/every citizen to bring any form of corruption to the notice of appropriate authorities and the general public. Users can also report on things that needs government intervention. Corruption is a huge bane to Africa’s development. African countries must develop novel and localised solutions that will curb this menace, hence the birth of iReporter.  ### Features  1. Users can create an account and log in. 2. Users can create a red-flag record (An incident linked to corruption). 3. Users can create intervention record (a call for a government agency to intervene e.g repair bad road sections, collapsed bridges, flooding e.t.c). 4. Users can edit their red-flag or intervention records. 5. Users can delete their red-flag or intervention records. 6. Users can add geolocation (Lat Long Coordinates) to their red-flag or intervention records . 7. Users can change the geolocation (Lat Long Coordinates) attached to their red-flag or intervention records . 8. Admin can change the status of a record to either under investigation, rejected (in the event of a false claim) or resolved (in the event that the claim has been investigated and resolved) .  Optional Features  1. Users can add images to their red-flag or intervention records, to support their claims. 2. Users can add videos to their red-flag or intervention records, to support their claims. 3. The application should display a Google Map with Marker showing the red-flag or intervention location. 4. The user gets real-time email notification when Admin changes the status of their record. 5. The user gets real-time SMS notification when Admin changes the status of their record.   ## Built With  * HTML, CSS, Javascript * Python, Flask APIs * Postgres SQL  ## Tools Used  * Pivotal Tracker * github * Postman * Heroku  ## Version  v1.0   ## Authors  * **Baker Sentamu**  ## iReporter Demo UI Link   ## Acknowledgments  * Andela Learning Facilitators",
    "fork": false,
    "created_at": "2018-12-20T11:41:54Z",
    "updated_at": "2019-02-14T14:26:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7971499,
    "owner_login": "bakersen",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7971499?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "repo",
      "form",
      "application",
      "script",
      "call",
      "user",
      "develop",
      "mail",
      "auth",
      "local",
      "stat",
      "delete",
      "email",
      "development",
      "image",
      "very",
      "play",
      "need",
      "report",
      "github",
      "ever",
      "support",
      "public",
      "edit",
      "link",
      "under",
      "showing",
      "account",
      "images",
      "solution",
      "status",
      "enable",
      "been",
      "needs",
      "enables",
      "should",
      "location",
      "event",
      "display",
      "gets",
      "things",
      "notification",
      "solutions",
      "general",
      "bridge",
      "video",
      "either",
      "bane",
      "countries",
      "section",
      "every"
    ]
  },
  {
    "id": 210782397,
    "name": "Backend-Server_typescript",
    "full_name": "martinc278/Backend-Server_typescript",
    "description": "Created and deployed a backend server using typescript, used Framework Nest and tested with postman",
    "fork": false,
    "created_at": "2019-09-25T07:27:30Z",
    "updated_at": "2019-11-13T08:51:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33938608,
    "owner_login": "martinc278",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/33938608?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "script",
      "server",
      "tested",
      "backend",
      "type",
      "deployed",
      "types",
      "typescript"
    ]
  },
  {
    "id": 163696353,
    "name": "iex-postman-scripts",
    "full_name": "nelsonvt/iex-postman-scripts",
    "description": "(BETA) This repository contains scripts for the Postman client to check stock prices and notify users when they exceed / fall below desired values.",
    "fork": false,
    "created_at": "2018-12-31T20:41:30Z",
    "updated_at": "2018-12-31T21:42:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31448347,
    "owner_login": "nelsonvt",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/31448347?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "repos",
      "repository",
      "script",
      "client",
      "user",
      "contain",
      "scripts",
      "users",
      "check",
      "notify",
      "stock",
      "below"
    ]
  },
  {
    "id": 240393509,
    "name": "newman-dr",
    "full_name": "k4l397/newman-dr",
    "description": "This is a javascript tool that wraps the newman postman client and runs all collections in a directory.",
    "fork": false,
    "created_at": "2020-02-14T00:08:03Z",
    "updated_at": "2020-02-16T17:41:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4959969,
    "owner_login": "k4l397",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/4959969?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "script",
      "tool",
      "client",
      "newman",
      "java",
      "javascript",
      "directory",
      "runs",
      "wraps"
    ]
  }
]