[
  {
    "id": 1819808,
    "name": "Postman",
    "full_name": "aaronpowell/Postman",
    "description": "The Postman will help you deliver messages around your JavaScript application",
    "fork": false,
    "created_at": "2011-05-30T02:57:53Z",
    "updated_at": "2020-02-24T20:41:18Z",
    "stargazers_count": 144,
    "watchers_count": 144,
    "forks": 18,
    "watchers": 144,
    "score": 1,
    "owner_id": 434140,
    "owner_login": "aaronpowell",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/434140?v=4",
    "pulled": 1,
    "tags": [
      "application",
      "help",
      "message",
      "around",
      "messages",
      "deliver"
    ]
  },
  {
    "user": "josephpconley",
    "repo": "swagger2postman",
    "pulled": "User",
    "id": 35300437,
    "name": "swagger2postman",
    "full_name": "josephpconley/swagger2postman",
    "description": "Create a Postman collection from live Swagger documentation",
    "fork": false,
    "created_at": "2015-05-08T20:30:26Z",
    "updated_at": "2020-02-07T21:11:55Z",
    "forks": 14,
    "open_issues": 3,
    "watchers": 81,
    "network_count": 14,
    "subscribers_count": 3,
    "owner_id": 1165287,
    "owner_login": "josephpconley",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/1165287?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "document",
      "documentation"
    ]
  },
  {
    "id": 48420090,
    "name": "postman",
    "full_name": "at15/postman",
    "description": "Deliver emails and sms and push notifications using third party API",
    "fork": false,
    "created_at": "2015-12-22T08:32:08Z",
    "updated_at": "2016-05-10T18:34:06Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 0,
    "watchers": 3,
    "score": 1,
    "owner_id": 5621298,
    "owner_login": "at15",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5621298?v=4",
    "tags": [
      "mail",
      "email",
      "emails",
      "party",
      "third",
      "notification"
    ]
  },
  {
    "id": 213064829,
    "name": "PostmanDelivers",
    "full_name": "crowcoder/PostmanDelivers",
    "description": null,
    "fork": false,
    "created_at": "2019-10-05T20:11:58Z",
    "updated_at": "2020-02-25T21:01:47Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 2,
    "watchers": 3,
    "score": 1,
    "owner_id": 4210624,
    "owner_login": "crowcoder",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/4210624?v=4",
    "tags": []
  },
  {
    "id": 3433873,
    "name": "postman",
    "full_name": "corruptmem/postman",
    "description": "Listens for emails via AMQP and manages the delivery",
    "fork": false,
    "created_at": "2012-02-13T20:38:40Z",
    "updated_at": "2013-01-07T20:46:12Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 274923,
    "owner_login": "corruptmem",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/274923?v=4",
    "pulled": 1,
    "tags": [
      "mail",
      "manage",
      "email",
      "very",
      "emails",
      "deliver",
      "manages"
    ]
  },
  {
    "id": 67119130,
    "name": "postman",
    "full_name": "paulsu1988/postman",
    "description": null,
    "fork": false,
    "created_at": "2016-09-01T09:47:44Z",
    "updated_at": "2016-09-01T09:47:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21595052,
    "owner_login": "paulsu1988",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/21595052?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 98514691,
    "name": "postman",
    "full_name": "shenfei/postman",
    "description": "A newsletter deliver tool",
    "fork": false,
    "created_at": "2017-07-27T08:51:15Z",
    "updated_at": "2019-11-08T10:35:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1721221,
    "owner_login": "shenfei",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/1721221?v=4",
    "pulled": 1,
    "tags": [
      "tool",
      "deliver",
      "news",
      "newsletter"
    ]
  },
  {
    "id": 246502753,
    "name": "postMan",
    "full_name": "pedrito120/postMan",
    "description": null,
    "fork": false,
    "created_at": "2020-03-11T07:25:26Z",
    "updated_at": "2020-03-11T07:32:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 35696830,
    "owner_login": "pedrito120",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/35696830?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 21190277,
    "name": "postman",
    "full_name": "sorpaas/postman",
    "description": null,
    "fork": false,
    "created_at": "2014-06-25T04:29:40Z",
    "updated_at": "2019-01-30T12:42:25Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6277322,
    "owner_login": "sorpaas",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6277322?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 59457286,
    "name": "Hummingbird",
    "full_name": "codemeow5/Hummingbird",
    "description": "Postman bot - Deliver the Latest News & Topics",
    "fork": false,
    "created_at": "2016-05-23T06:24:08Z",
    "updated_at": "2016-10-27T02:52:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12323047,
    "owner_login": "codemeow5",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/12323047?v=4",
    "pulled": 1,
    "tags": [
      "test"
    ]
  },
  {
    "id": 119587689,
    "name": "SmackApplication",
    "full_name": "sonali-developer/SmackApplication",
    "description": "App Description: A clone of chat application namely Slack. It is a full fledged and professional looking ready to publish app on Appstore. It allows first time user to register by providing unique username, email and password along with selection of Avatar and Avatar's Background color; login using registered email and password, participate in channels available for chat, create new channel by adding users, perform live chat with other users of this app, can even logout, and so on.  • Built using Xcode 9, Swift 4, Cocoa pods, node.js, MongoDB, Heroku, Postman, etc. for iOS 11 based iPhones and iPads.  • Local Frameworks used includes Foundation, UIKit and other API's like Alamofire, SwiftyJSON, SocketIO, REST, SWReveal, etc.  • Demonstrated the use of Networking in iOS.  • Implemented Web Request creation in Xcode using UIKit, APIs, node.js and Mongo dB online. • Implemented Web service API hosting online using Heroku and local hosting using Postman. • Implemented user creation and real time talking using Socket Technology through SocketIO library.  • Implemented Web Service for User Registration, Authentication & Login, Channels Creation & display, fetching, sending and saving text messages and many more.  • Implemented Table Views, Collection Views & custom design of their cells using data models.  • Implemented side menu for the display of user profile and channels using SWReveal and Gradient color design code for providing gradient color background to this side menu.  • Implemented creation of two XIB's for Channels creation and profile view’s popUp.  • Implemented SegmentedControl for displaying 28 Dark and Light Avatar displays and code for generating Avatar’s background color on user registration screen.  • Implemented Input Accessory View for Text field.  • In all designed around eight View Controllers and their corresponding storyboard file for GUI design, Four Services, two custom cells, seven view files, two model files and lots of assets and so on. ",
    "fork": false,
    "created_at": "2018-01-30T20:02:55Z",
    "updated_at": "2018-06-24T20:51:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 20232921,
    "owner_login": "sonali-developer",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20232921?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "data",
      "form",
      "file",
      "application",
      "script",
      "service",
      "node",
      "user",
      "based",
      "code",
      "sign",
      "mail",
      "line",
      "files",
      "send",
      "local",
      "full",
      "read",
      "users",
      "more",
      "library",
      "view",
      "host",
      "email",
      "perform",
      "rating",
      "store",
      "play",
      "name",
      "working",
      "side",
      "allows",
      "long",
      "model",
      "custom",
      "message",
      "text",
      "design",
      "includes",
      "login",
      "along",
      "available",
      "clone",
      "designed",
      "fetch",
      "creation",
      "sending",
      "around",
      "ready",
      "many",
      "messages",
      "online",
      "sets",
      "display",
      "models",
      "register",
      "select",
      "generating",
      "fire",
      "playing",
      "profile",
      "adding",
      "talk",
      "hosting",
      "providing",
      "registration",
      "chat",
      "saving",
      "background",
      "namely",
      "fetching",
      "selection",
      "real time",
      "lots"
    ]
  },
  {
    "id": 82122922,
    "name": "chatapp",
    "full_name": "Inn4ki/chatapp",
    "description": "NODE.JS WEB APPS WITH EXPRESS by Wes Higbee  In this Node.js Web Apps with Express training course, expert author Wes Higbee will teach you how to create web applications and APIs with Express. This course is designed for users that are already familiar with HTML, CSS, and JavaScript.  You will start by learning how to set up a web app, then jump into learning about the Jade view engine. From there, Wes will teach you about CRUD, including how to add the chat room view, respond with JSON, and edit chat rooms. This video tutorial also covers routers, middleware, APIs, and logging and debugging. Finally, you will learn about auth with passport, including passport user validation, protecting admin routes, and query string parameters.  Once you have completed this computer based training course, you will have learned how to create web applications and APIs with Express. Working files are included, allowing you to follow along with the author throughout the lessons.  About the Publisher  Presented in stunning HD quality, the Infinite Skills range of video based training provides a clear and concise way to learn computer applications and programming languages at your own speed. Delivered to your Desktop, iPad ...  More about Infinite Skills Table of Contents Setting Up A Web App What You Will Learn 00:03:28 About The Author 00:01:23 Project Setup 00:02:14 Spinning Up Our Server From Scratch 00:05:11 Serving Index.HTML 00:04:32 Serving Bootstrap Assets 00:05:52 Styling Our Site 00:01:16 How To Access Your Working Files 00:01:15 The Jade View Engine Why View Engines? 00:02:10 The Jade View Engine 00:06:32 HTML Tags In Jade 00:02:16 Attributes Classes And Ids In Jade 00:02:06 Serving Up Jade Views 00:04:24 HTML Reuse In Jade 00:06:26 Code In Jade Views 00:02:37 Passing Data To View Rendering 00:02:01 Setting A Default View Engine 00:00:37 String Interpolation In Jade 00:02:30 Generating Tables In Jade 00:03:50 Tabs And Spaces Oh My 00:01:21 Demystifying Jade 00:02:21 Crud Setting The Stage 00:01:01 Add Chat Room View 00:04:21 Post Chat Room Form 00:06:56 Parsing Form Data From The Request Body 00:04:22 Responding With JSON 00:03:20 Admin Chat Rooms Workflow 00:02:21 Named Route Parameters To Delete Rooms 00:05:59 Edit Chat Rooms 00:06:01 Edit Chat Rooms Part - 2 00:02:00 Responding With 404 Not Found 00:01:39 Wrap Up 00:01:23 Routers Extracting An Admin Module 00:04:47 Modular Admin Router 00:04:00 Pluggable Admin Mount Path 00:03:15 Stumbling Block - Relative Redirects 00:02:49 Chaining Routes 00:01:57 Middleware Understanding Routing And Middleware 00:05:45 Adding Custom Logging Middleware 00:02:15 Understanding Next() 00:01:31 Middleware To Fetch Data 00:07:24 Order Matters.Av 00:01:09 Scoping Middleware 00:03:53 What To Do With Errors 00:03:01 Last Thoughts 00:03:19 APIs A Client Side Chat App 00:01:55 Setup The Client Side Chat App 00:03:01 Creating An API 00:05:42 Modules Are Singletons 00:01:50 Postman To Test API 00:01:24 API Get Room Messages 00:05:49 Posting To An API 00:03:37 API To Delete Messages 00:03:15 Parsing JSON In The Request Body 00:03:25 Logging And Debugging Express-Debug 00:03:03 Logging With Morgan 00:01:45 File Access Log With Morgan 00:01:28 Built-In Express Debugging 00:01:57 When Things Go Wrong Throwing An Error In A Route Handler 00:01:39 Errors In Production 00:01:53 Custom Error Handlers 00:02:40 Browser Hangs 00:00:58 Hanging Async Request Handlers 00:01:17 Errors In Callbacks 00:03:32 Don't Swallow Callback Errors 00:02:46 Auth With Passport Auth With Passport 00:01:49 Login Form 00:06:31 Passport User Validation 00:05:20 Passport Session Serialization 00:01:49 Logging In 00:06:23 Logout 00:03:52 Authorizing Access To Block Anonymous Users 00:03:40 Protecting Admin Routes 00:02:04 Using User Information 00:02:48 Bypassing Login In Development 00:03:11 Query String Parameters 00:02:34 Auth Cookies 00:02:17 Last Thoughts 00:05:45  Publisher: Infinite Skills Release Date: March 2016 ISBN: 9781491958933 Running time: 4:09:49 Topic: Node.js",
    "fork": false,
    "created_at": "2017-02-16T00:56:43Z",
    "updated_at": "2019-11-16T05:23:17Z",
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks": 5,
    "watchers": 4,
    "score": 1,
    "owner_id": 9013039,
    "owner_login": "Inn4ki",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9013039?v=4",
    "pulled": 1,
    "tags": [
      "create",
      "form",
      "file",
      "application",
      "user",
      "based",
      "sign",
      "format",
      "auth",
      "files",
      "route",
      "routes",
      "star",
      "read",
      "users",
      "learn",
      "view",
      "course",
      "start",
      "rating",
      "provide",
      "learning",
      "program",
      "tutorial",
      "web app",
      "long",
      "lang",
      "complete",
      "design",
      "edit",
      "including",
      "along",
      "applications",
      "included",
      "validation",
      "designed",
      "sync",
      "parameter",
      "middleware",
      "ready",
      "debug",
      "query",
      "sets",
      "provides",
      "training",
      "router",
      "engine",
      "language",
      "covers",
      "passport",
      "lesson",
      "admin",
      "programming",
      "familiar",
      "logging",
      "passing",
      "debugging",
      "video",
      "quality",
      "chat",
      "protecting",
      "completed",
      "speed",
      "learned",
      "computer"
    ]
  },
  {
    "id": 131504946,
    "name": "Smart-Doorbell",
    "full_name": "omniaAbdallah/Smart-Doorbell",
    "description": "My friend often call me instead of pressing my doorbell when they arrive, because I always miss the doorbell and left my guests outside, but how about postman or delivery service whom may not have my phone number? There are also special doorbell made for deafness people with lights alert, but it still can be missed easily, so I think it is time to reinvent doorbell.In this project, I am going to build an IoT doorbell .Once the visitor pressed the doorbell, it will publish and an alert will be sent, so I know someone is knocking my door no matter where I am. Visitors no longer need to call me and simply let the IoT doorbell to do the job, deafness people also benefit using it so they can alert from vibration of their phone.",
    "fork": false,
    "created_at": "2018-04-29T15:12:43Z",
    "updated_at": "2018-06-17T17:23:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36019090,
    "owner_login": "omniaAbdallah",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36019090?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "service",
      "call",
      "build",
      "spec",
      "very",
      "need",
      "side",
      "long",
      "esse",
      "to do",
      "light",
      "easily",
      "cause",
      "going",
      "still",
      "instead",
      "deliver",
      "friend",
      "longer",
      "always",
      "guest"
    ]
  },
  {
    "id": 206781028,
    "name": "Postman_CICD_AzureDevops",
    "full_name": "RashmiPad/Postman_CICD_AzureDevops",
    "description": null,
    "fork": false,
    "created_at": "2019-09-06T11:37:48Z",
    "updated_at": "2019-09-16T12:37:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 39586491,
    "owner_login": "RashmiPad",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/39586491?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 126697860,
    "name": "Flask-APIs-example",
    "full_name": "invanalabs/Flask-APIs-example",
    "description": "Write maintainable RESTful APIs with Flask — ditch postman and have api doc in the Code live.",
    "fork": false,
    "created_at": "2018-03-25T13:01:20Z",
    "updated_at": "2018-10-07T19:20:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 2,
    "watchers": 0,
    "score": 1,
    "owner_id": 26816714,
    "owner_login": "invanalabs",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26816714?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "main",
      "maintainable"
    ]
  }
]