[
  {
    "id": 1924147,
    "name": "postman-app-support",
    "full_name": "postmanlabs/postman-app-support",
    "description": "Postman helps you be more efficient while working with APIs. Using Postman, you can construct complex HTTP requests quickly, organize them in collections and share them with your co-workers.",
    "fork": false,
    "created_at": "2011-06-20T15:11:21Z",
    "updated_at": "2020-03-28T23:13:04Z",
    "stargazers_count": 4326,
    "watchers_count": 4326,
    "forks": 639,
    "watchers": 4326,
    "score": 1,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "help",
      "more",
      "struct",
      "working",
      "helps",
      "complex",
      "while",
      "quickly",
      "efficient"
    ]
  },
  {
    "user": "sittinash",
    "repo": "elasticsearch-postman",
    "pulled": "User",
    "id": 107509977,
    "name": "elasticsearch-postman",
    "full_name": "sittinash/elasticsearch-postman",
    "description": "Collection of frequently-used Elasticsearch requests.",
    "fork": false,
    "created_at": "2017-10-19T07:01:59Z",
    "updated_at": "2020-03-11T14:28:46Z",
    "forks": 27,
    "open_issues": 0,
    "watchers": 21,
    "network_count": 27,
    "subscribers_count": 1,
    "owner_id": 7665806,
    "owner_login": "sittinash",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/7665806?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "requests",
      "search"
    ]
  },
  {
    "user": "TCGplayer",
    "repo": "Postman-Api",
    "pulled": "Organization",
    "id": 124442153,
    "name": "Postman-Api",
    "full_name": "TCGplayer/Postman-Api",
    "description": "A Postman collection containing requests for all of the current TCGPlayer API endpoints.",
    "fork": false,
    "created_at": "2018-03-08T20:06:13Z",
    "updated_at": "2020-01-31T22:22:49Z",
    "forks": 8,
    "open_issues": 2,
    "watchers": 19,
    "network_count": 8,
    "subscribers_count": 7,
    "owner_id": 29218133,
    "owner_login": "TCGplayer",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/29218133?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "contain",
      "endpoint",
      "points",
      "endpoints",
      "rent",
      "containing",
      "current"
    ]
  },
  {
    "user": "twilio",
    "repo": "wireless-postman-collection",
    "pulled": "Organization",
    "id": 95825518,
    "name": "wireless-postman-collection",
    "full_name": "twilio/wireless-postman-collection",
    "description": "This repository includes a group of Programmable Wireless HTTP requests for your convenience. You can learn more about Programmable Wireless HTTP request formats in the Programmable Wireless Documentation.",
    "fork": false,
    "created_at": "2017-06-29T22:31:30Z",
    "updated_at": "2020-01-28T20:52:34Z",
    "forks": 11,
    "open_issues": 0,
    "watchers": 16,
    "network_count": 11,
    "subscribers_count": 14,
    "owner_id": 109142,
    "owner_login": "twilio",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/109142?v=4",
    "owner_type": "Organization",
    "tags": [
      "repo",
      "request",
      "form",
      "repos",
      "repository",
      "requests",
      "format",
      "learn",
      "more",
      "includes",
      "group"
    ]
  },
  {
    "user": "Rasbandit",
    "repo": "postman-test-server",
    "pulled": "User",
    "id": 153728688,
    "name": "postman-test-server",
    "full_name": "Rasbandit/postman-test-server",
    "description": null,
    "fork": false,
    "created_at": "2018-10-19T04:58:15Z",
    "updated_at": "2018-11-15T16:42:35Z",
    "forks": 34,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 34,
    "subscribers_count": 0,
    "owner_id": 22157796,
    "owner_login": "Rasbandit",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/22157796?v=4",
    "owner_type": "User",
    "tags": []
  },
  {
    "user": "fedejousset",
    "repo": "Dynamics365WebApiPostmanCollection",
    "pulled": "User",
    "id": 148663809,
    "name": "Dynamics365WebApiPostmanCollection",
    "full_name": "fedejousset/Dynamics365WebApiPostmanCollection",
    "description": "This is a Postman collection that covers standard API requests for Dynamics 365. The collection aims to help Dynamics 365 Developers/Power Users to create, run and test different types of Web API request by providing authentication and request templates.",
    "fork": false,
    "created_at": "2018-09-13T16:06:50Z",
    "updated_at": "2020-03-03T09:00:17Z",
    "forks": 7,
    "open_issues": 1,
    "watchers": 26,
    "network_count": 7,
    "subscribers_count": 3,
    "owner_id": 20836210,
    "owner_login": "fedejousset",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20836210?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "collect",
      "collection",
      "create",
      "request",
      "requests",
      "auth",
      "help",
      "authentication",
      "rent",
      "plate",
      "template",
      "type",
      "types",
      "templates",
      "covers",
      "providing"
    ]
  },
  {
    "user": "kamranayub",
    "repo": "azure-storage-rest-postman",
    "pulled": "User",
    "id": 152349105,
    "name": "azure-storage-rest-postman",
    "full_name": "kamranayub/azure-storage-rest-postman",
    "description": "Postman collection to sign requests to Azure Storage Management REST API",
    "fork": false,
    "created_at": "2018-10-10T02:11:17Z",
    "updated_at": "2020-02-18T04:41:23Z",
    "forks": 11,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 11,
    "subscribers_count": 1,
    "owner_id": 563819,
    "owner_login": "kamranayub",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/563819?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "sign"
    ]
  },
  {
    "user": "OneNoteDev",
    "repo": "OneNoteAPIPostmanCollection",
    "pulled": "Organization",
    "id": 153196328,
    "name": "OneNoteAPIPostmanCollection",
    "full_name": "OneNoteDev/OneNoteAPIPostmanCollection",
    "description": "Postman collection for OneNote API requests.",
    "fork": false,
    "created_at": "2018-10-15T23:52:19Z",
    "updated_at": "2020-02-09T07:13:00Z",
    "forks": 5,
    "open_issues": 2,
    "watchers": 10,
    "network_count": 5,
    "subscribers_count": 22,
    "owner_id": 6225732,
    "owner_login": "OneNoteDev",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/6225732?v=4",
    "owner_type": "Organization",
    "tags": [
      "collect",
      "collection",
      "request",
      "requests"
    ]
  },
  {
    "user": "sendwyre",
    "repo": "wyre-postman-collection",
    "pulled": "Organization",
    "id": 183311400,
    "name": "wyre-postman-collection",
    "full_name": "sendwyre/wyre-postman-collection",
    "description": "This repo is filled to the brim with sample Postman API requests that allow you to test our back-end endpoints.",
    "fork": false,
    "created_at": "2019-04-24T21:46:31Z",
    "updated_at": "2019-12-17T23:07:15Z",
    "forks": 6,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 6,
    "subscribers_count": 3,
    "owner_id": 6931243,
    "owner_login": "sendwyre",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/6931243?v=4",
    "owner_type": "Organization",
    "tags": [
      "test",
      "repo",
      "request",
      "requests",
      "endpoint",
      "points",
      "sample",
      "endpoints",
      "filled"
    ]
  },
  {
    "user": "Thingee",
    "repo": "postman-cinder",
    "pulled": "User",
    "id": 8426781,
    "name": "postman-cinder",
    "full_name": "Thingee/postman-cinder",
    "description": "A collection of requests for the Cinder RESTful API using Chrome extension Postman.",
    "fork": false,
    "created_at": "2013-02-26T06:38:55Z",
    "updated_at": "2014-05-03T06:02:03Z",
    "forks": 3,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 3,
    "subscribers_count": 1,
    "owner_id": 47583,
    "owner_login": "Thingee",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/47583?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "extension"
    ]
  },
  {
    "user": "QAS-Labs",
    "repo": "postman-samples",
    "pulled": "Organization",
    "id": 138645061,
    "name": "postman-samples",
    "full_name": "QAS-Labs/postman-samples",
    "description": null,
    "fork": false,
    "created_at": "2018-06-25T20:14:22Z",
    "updated_at": "2020-02-10T21:52:41Z",
    "forks": 3,
    "open_issues": 0,
    "watchers": 1,
    "network_count": 3,
    "subscribers_count": 6,
    "owner_id": 17824403,
    "owner_login": "QAS-Labs",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/17824403?v=4",
    "owner_type": "Organization",
    "tags": []
  },
  {
    "user": "postmanlabs",
    "repo": "curl-to-postman",
    "pulled": "Organization",
    "id": 188996885,
    "name": "curl-to-postman",
    "full_name": "postmanlabs/curl-to-postman",
    "description": "Converts curl requests to Postman Collection v2 request objects",
    "fork": false,
    "created_at": "2019-05-28T09:25:26Z",
    "updated_at": "2020-03-27T16:08:07Z",
    "forks": 2,
    "open_issues": 1,
    "watchers": 3,
    "network_count": 2,
    "subscribers_count": 5,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "owner_type": "Organization",
    "tags": [
      "request",
      "requests",
      "object",
      "curl",
      "objects"
    ]
  },
  {
    "user": "josephbuchma",
    "repo": "postman-ruby",
    "pulled": "User",
    "id": 88745456,
    "name": "postman-ruby",
    "full_name": "josephbuchma/postman-ruby",
    "description": "Parse & make http requests from Postman's (getpostman.com) exported collections (Collection V2)",
    "fork": false,
    "created_at": "2017-04-19T12:58:15Z",
    "updated_at": "2018-10-19T22:15:14Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 3,
    "network_count": 1,
    "subscribers_count": 2,
    "owner_id": 3718145,
    "owner_login": "josephbuchma",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/3718145?v=4",
    "owner_type": "User",
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "http",
      "export",
      "getpost",
      "exported"
    ]
  },
  {
    "user": "wcandillon",
    "repo": "courrier",
    "pulled": "User",
    "id": 54550890,
    "name": "courrier",
    "full_name": "wcandillon/courrier",
    "description": "Postman runner that can run requests in parallel",
    "fork": false,
    "created_at": "2016-03-23T10:26:41Z",
    "updated_at": "2019-04-06T06:13:16Z",
    "forks": 1,
    "open_issues": 0,
    "watchers": 6,
    "network_count": 1,
    "subscribers_count": 2,
    "owner_id": 306134,
    "owner_login": "wcandillon",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/306134?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "requests",
      "runner",
      "parallel"
    ]
  },
  {
    "user": "ddemaree",
    "repo": "lazy_postman",
    "pulled": "User",
    "id": 137880,
    "name": "lazy_postman",
    "full_name": "ddemaree/lazy_postman",
    "description": "Emails in, POST requests out",
    "fork": false,
    "created_at": "2009-02-26T03:30:56Z",
    "updated_at": "2019-08-13T14:04:07Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 2,
    "owner_id": 965,
    "owner_login": "ddemaree",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/965?v=4",
    "owner_type": "User",
    "tags": [
      "request",
      "requests",
      "mail"
    ]
  },
  {
    "user": "motivast",
    "repo": "motimize-postman",
    "pulled": "Organization",
    "id": 149724278,
    "name": "motimize-postman",
    "full_name": "motivast/motimize-postman",
    "description": "Collection of Postman requests to work with Motimize. Motimize is an open source self-hosted REST web service to optimize and compress images.",
    "fork": false,
    "created_at": "2018-09-21T07:09:06Z",
    "updated_at": "2019-09-14T03:25:18Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 32762369,
    "owner_login": "motivast",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32762369?v=4",
    "owner_type": "Organization",
    "tags": [
      "request",
      "service",
      "requests",
      "source",
      "host",
      "image",
      "open",
      "images",
      "hosted"
    ]
  },
  {
    "user": "gauravsinghrawat",
    "repo": "postmanClone",
    "pulled": "User",
    "id": 223626730,
    "name": "postmanClone",
    "full_name": "gauravsinghrawat/postmanClone",
    "description": "This the demo working clone of Post man API to make different type of requests to test our server API.",
    "fork": false,
    "created_at": "2019-11-23T17:23:12Z",
    "updated_at": "2019-12-02T11:55:37Z",
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "network_count": 0,
    "subscribers_count": 1,
    "owner_id": 48629593,
    "owner_login": "gauravsinghrawat",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/48629593?v=4",
    "owner_type": "User",
    "tags": [
      "test",
      "request",
      "server",
      "requests",
      "demo",
      "rent",
      "working",
      "type",
      "clone"
    ]
  },
  {
    "id": 165998464,
    "name": "PostmanDemo",
    "full_name": "danielplawgo/PostmanDemo",
    "description": null,
    "fork": false,
    "created_at": "2019-01-16T07:55:35Z",
    "updated_at": "2019-12-11T10:15:17Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 70243,
    "owner_login": "danielplawgo",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/70243?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 88745456,
    "name": "postman-ruby",
    "full_name": "josephbuchma/postman-ruby",
    "description": "Parse & make http requests from Postman's (getpostman.com) exported collections (Collection V2)",
    "fork": false,
    "created_at": "2017-04-19T12:58:15Z",
    "updated_at": "2018-10-19T22:15:14Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 1,
    "watchers": 3,
    "score": 1,
    "owner_id": 3718145,
    "owner_login": "josephbuchma",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/3718145?v=4",
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "http",
      "export",
      "getpost",
      "exported"
    ]
  },
  {
    "id": 54550890,
    "name": "courrier",
    "full_name": "wcandillon/courrier",
    "description": "Postman runner that can run requests in parallel",
    "fork": false,
    "created_at": "2016-03-23T10:26:41Z",
    "updated_at": "2019-04-06T06:13:16Z",
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks": 1,
    "watchers": 6,
    "score": 1,
    "owner_id": 306134,
    "owner_login": "wcandillon",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/306134?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "runner",
      "parallel"
    ]
  },
  {
    "id": 137880,
    "name": "lazy_postman",
    "full_name": "ddemaree/lazy_postman",
    "description": "Emails in, POST requests out",
    "fork": false,
    "created_at": "2009-02-26T03:30:56Z",
    "updated_at": "2019-08-13T14:04:07Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 965,
    "owner_login": "ddemaree",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/965?v=4",
    "tags": [
      "request",
      "requests",
      "mail"
    ]
  },
  {
    "id": 79989875,
    "name": "postman-ultimate",
    "full_name": "LinYangxin/postman-ultimate",
    "description": null,
    "fork": false,
    "created_at": "2017-01-25T06:40:28Z",
    "updated_at": "2019-04-20T11:12:47Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 25339219,
    "owner_login": "LinYangxin",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25339219?v=4",
    "tags": []
  },
  {
    "id": 149724278,
    "name": "motimize-postman",
    "full_name": "motivast/motimize-postman",
    "description": "Collection of Postman requests to work with Motimize. Motimize is an open source self-hosted REST web service to optimize and compress images.",
    "fork": false,
    "created_at": "2018-09-21T07:09:06Z",
    "updated_at": "2019-09-14T03:25:18Z",
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks": 0,
    "watchers": 2,
    "score": 1,
    "owner_id": 32762369,
    "owner_login": "motivast",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/32762369?v=4",
    "tags": [
      "request",
      "service",
      "requests",
      "source",
      "host",
      "image",
      "open",
      "images",
      "hosted"
    ]
  },
  {
    "id": 118181235,
    "name": "express-practice",
    "full_name": "michaelbrian93/express-practice",
    "description": "a repo making POST, PUT, DELETE requests with Express & Postman",
    "fork": false,
    "created_at": "2018-01-19T21:37:25Z",
    "updated_at": "2018-01-19T21:38:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14987708,
    "owner_login": "michaelbrian93",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/14987708?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "request",
      "requests",
      "making"
    ]
  },
  {
    "id": 179223594,
    "name": "api-client",
    "full_name": "joeattardi/api-client",
    "description": "Graphical interface for making HTTP requests (like Postman)",
    "fork": false,
    "created_at": "2019-04-03T06:21:11Z",
    "updated_at": "2019-12-09T20:52:58Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 219285,
    "owner_login": "joeattardi",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/219285?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "face",
      "interface",
      "making"
    ]
  },
  {
    "id": 127477457,
    "name": "dcode-server",
    "full_name": "samuraijane/dcode-server",
    "description": "Fire GET requests in Postman at this URL:",
    "fork": false,
    "created_at": "2018-03-30T22:10:39Z",
    "updated_at": "2018-04-11T09:43:04Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8484986,
    "owner_login": "samuraijane",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/8484986?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 128285172,
    "name": "back-end-nodejs",
    "full_name": "gparasyris/back-end-nodejs",
    "description": "Simple Node JS Express server handling POST, GET, PUT, DELETE requests.",
    "fork": false,
    "created_at": "2018-04-06T01:50:22Z",
    "updated_at": "2018-08-12T15:25:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 38101481,
    "owner_login": "gparasyris",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/38101481?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "server",
      "requests",
      "handling"
    ]
  },
  {
    "id": 155191480,
    "name": "RESTful_BC_API",
    "full_name": "TheChronicMonster/RESTful_BC_API",
    "description": "Node.js + Express RESTful API that enables GET and POST requests via CURL and Postman",
    "fork": false,
    "created_at": "2018-10-29T10:15:20Z",
    "updated_at": "2018-10-30T16:43:12Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9493272,
    "owner_login": "TheChronicMonster",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/9493272?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "enable",
      "enables"
    ]
  },
  {
    "id": 188996885,
    "name": "curl-to-postman",
    "full_name": "postmanlabs/curl-to-postman",
    "description": "Converts curl requests to Postman Collection v2 request objects",
    "fork": false,
    "created_at": "2019-05-28T09:25:26Z",
    "updated_at": "2020-03-27T16:08:07Z",
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks": 2,
    "watchers": 3,
    "score": 1,
    "owner_id": 10251060,
    "owner_login": "postmanlabs",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/10251060?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "object",
      "curl",
      "objects"
    ]
  },
  {
    "id": 104051543,
    "name": "postman",
    "full_name": "go-wheel/postman",
    "description": "Batch HTTP requests, using postman format",
    "fork": false,
    "created_at": "2017-09-19T08:58:40Z",
    "updated_at": "2017-09-19T09:27:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32092526,
    "owner_login": "go-wheel",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/32092526?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "form",
      "requests",
      "format"
    ]
  },
  {
    "id": 110729696,
    "name": "postman",
    "full_name": "pts-mattdeluco/postman",
    "description": "Postman LCP API requests, scripts, and tests.",
    "fork": false,
    "created_at": "2017-11-14T18:38:29Z",
    "updated_at": "2017-11-14T18:39:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23040900,
    "owner_login": "pts-mattdeluco",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/23040900?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "tests",
      "script",
      "requests",
      "scripts"
    ]
  },
  {
    "id": 193985537,
    "name": "cidade-estado-node-express",
    "full_name": "MunizMechanics/cidade-estado-node-express",
    "description": "Postman para as requests",
    "fork": false,
    "created_at": "2019-06-26T22:26:23Z",
    "updated_at": "2019-06-26T23:33:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22156851,
    "owner_login": "MunizMechanics",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/22156851?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 164734934,
    "name": "Postman_Analytics",
    "full_name": "thandon263/Postman_Analytics",
    "description": "This a postman analytics gathering function. Get results and average of time taken by the requests",
    "fork": false,
    "created_at": "2019-01-08T21:21:39Z",
    "updated_at": "2019-02-05T17:24:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 18520509,
    "owner_login": "thandon263",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/18520509?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "requests",
      "function",
      "result",
      "results",
      "analytics"
    ]
  },
  {
    "id": 189791429,
    "name": "postman-kosmo",
    "full_name": "wileymab/postman-kosmo",
    "description": "Parameter management for Postman requests.",
    "fork": false,
    "created_at": "2019-06-02T01:03:18Z",
    "updated_at": "2019-06-02T04:22:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 2964761,
    "owner_login": "wileymab",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/2964761?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "manage",
      "management"
    ]
  },
  {
    "id": 114694664,
    "name": "Postman-Fundamentals",
    "full_name": "gsivaprabu/Postman-Fundamentals",
    "description": "Postman is used by over 3 million developers across the world. This course will show you the fundamentals of Postman, how you can issue requests, create automated API tests, and even document your API with Postman.",
    "fork": false,
    "created_at": "2017-12-18T22:38:26Z",
    "updated_at": "2017-12-20T04:06:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 2444608,
    "owner_login": "gsivaprabu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/2444608?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "tests",
      "requests",
      "develop",
      "document",
      "auto",
      "automat",
      "course",
      "developer",
      "automate",
      "automated",
      "developers",
      "world",
      "issue",
      "fundamental",
      "fundamentals",
      "across",
      "million"
    ]
  },
  {
    "id": 175797902,
    "name": "postman-splitter",
    "full_name": "cfitz1995/postman-splitter",
    "description": "Node.js command-line utility for importing/exports individual Postman requests",
    "fork": false,
    "created_at": "2019-03-15T10:19:51Z",
    "updated_at": "2019-03-15T10:40:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41369223,
    "owner_login": "cfitz1995",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/41369223?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "line",
      "util",
      "export",
      "import",
      "command",
      "utility",
      "exports"
    ]
  },
  {
    "id": 102910061,
    "name": "postman-oraclebmc-apis-js",
    "full_name": "paasdtools/postman-oraclebmc-apis-js",
    "description": "JavaScript-based mechanism for making Oracle Bare Metal Cloud Services API requests from Postman",
    "fork": false,
    "created_at": "2017-09-08T22:36:32Z",
    "updated_at": "2017-09-08T22:43:06Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31580110,
    "owner_login": "paasdtools",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31580110?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 169608941,
    "name": "ermjson-to-postmanjson",
    "full_name": "joneldiablo/ermjson-to-postmanjson",
    "description": null,
    "fork": false,
    "created_at": "2019-02-07T17:06:57Z",
    "updated_at": "2019-02-07T17:52:16Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13206502,
    "owner_login": "joneldiablo",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13206502?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 157493695,
    "name": "swagger2postman",
    "full_name": "campfire-inc/swagger2postman",
    "description": null,
    "fork": false,
    "created_at": "2018-11-14T05:03:59Z",
    "updated_at": "2019-02-26T05:20:19Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22833307,
    "owner_login": "campfire-inc",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22833307?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 102173049,
    "name": "postman-amazon-apis-js",
    "full_name": "cpettools/postman-amazon-apis-js",
    "description": "JavaScript-based mechanism for making AWS REST API requests from Postman",
    "fork": false,
    "created_at": "2017-09-02T04:41:34Z",
    "updated_at": "2017-09-02T04:41:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 15694756,
    "owner_login": "cpettools",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15694756?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 102172708,
    "name": "postman-oraclebmc-apis-js",
    "full_name": "cpettools/postman-oraclebmc-apis-js",
    "description": "JavaScript-based mechanism for making Oracle Bare Metal Cloud Services API requests from Postman",
    "fork": false,
    "created_at": "2017-09-02T04:32:28Z",
    "updated_at": "2017-09-02T04:34:09Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 15694756,
    "owner_login": "cpettools",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/15694756?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 147647031,
    "name": "nodejs-postman-demo",
    "full_name": "impactotecnologico/nodejs-postman-demo",
    "description": null,
    "fork": false,
    "created_at": "2018-09-06T09:05:48Z",
    "updated_at": "2018-10-17T11:20:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5190774,
    "owner_login": "impactotecnologico",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5190774?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 102910117,
    "name": "postman-amazon-apis-js",
    "full_name": "paasdtools/postman-amazon-apis-js",
    "description": "JavaScript-based mechanism for making AWS REST API requests from Postman",
    "fork": false,
    "created_at": "2017-09-08T22:37:30Z",
    "updated_at": "2017-09-08T22:43:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31580110,
    "owner_login": "paasdtools",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/31580110?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "based",
      "making",
      "mechanism"
    ]
  },
  {
    "id": 116677681,
    "name": "node-postman-refactor-mongoose",
    "full_name": "vinoth112/node-postman-refactor-mongoose",
    "description": null,
    "fork": false,
    "created_at": "2018-01-08T13:05:11Z",
    "updated_at": "2018-02-08T09:57:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11039684,
    "owner_login": "vinoth112",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11039684?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 135809969,
    "name": "slack-postman-chatbot",
    "full_name": "oleh-polishchuk/slack-postman-chatbot",
    "description": null,
    "fork": false,
    "created_at": "2018-06-02T10:52:25Z",
    "updated_at": "2018-06-03T11:39:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16427424,
    "owner_login": "oleh-polishchuk",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16427424?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 220307289,
    "name": "multiple-curl-to-postman",
    "full_name": "bhargavkaranam/multiple-curl-to-postman",
    "description": "Convert multiple cURL requests to Postman collection",
    "fork": false,
    "created_at": "2019-11-07T18:53:32Z",
    "updated_at": "2019-11-07T18:53:55Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8963298,
    "owner_login": "bhargavkaranam",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/8963298?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "multiple"
    ]
  },
  {
    "id": 50537215,
    "name": "postman-ci-server",
    "full_name": "MTen/postman-ci-server",
    "description": null,
    "fork": false,
    "created_at": "2016-01-27T20:55:39Z",
    "updated_at": "2017-10-13T05:17:13Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5403486,
    "owner_login": "MTen",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5403486?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 183930959,
    "name": "postal_clirk",
    "full_name": "rwilcox/postal_clirk",
    "description": "Ever wanted to set up or run a single Postman request from exported postman collections. Here you go. Simple Postman requests only",
    "fork": false,
    "created_at": "2019-04-28T16:13:53Z",
    "updated_at": "2019-05-09T14:51:05Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 20831,
    "owner_login": "rwilcox",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20831?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "collections",
      "request",
      "postman collection",
      "requests",
      "postman collections",
      "export",
      "exported",
      "single",
      "wanted"
    ]
  },
  {
    "id": 137878299,
    "name": "helloapi",
    "full_name": "anubhavg18/helloapi",
    "description": "Enter data to mongodb by postman requests",
    "fork": false,
    "created_at": "2018-06-19T10:47:02Z",
    "updated_at": "2018-06-19T10:56:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36505618,
    "owner_login": "anubhavg18",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/36505618?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "request",
      "requests",
      "mongo",
      "mongod",
      "mongodb"
    ]
  },
  {
    "id": 166076660,
    "name": "AzureDatabricksPostmanCollection",
    "full_name": "GaryStrange/AzureDatabricksPostmanCollection",
    "description": "A collection of Azure Databricks API requests",
    "fork": false,
    "created_at": "2019-01-16T16:54:21Z",
    "updated_at": "2019-08-12T11:01:28Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 25485835,
    "owner_login": "GaryStrange",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/25485835?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests"
    ]
  },
  {
    "id": 207537810,
    "name": "APIChainingInPostman",
    "full_name": "raghwendra-sonu/APIChainingInPostman",
    "description": "https://medium.com/@Raghwendra.sonu/postman-chain-api-requests-get-data-from-response-of-one-api-and-refer-in-another-api-d3bb184c2dd1",
    "fork": false,
    "created_at": "2019-09-10T11:11:50Z",
    "updated_at": "2019-11-14T03:44:37Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7844894,
    "owner_login": "raghwendra-sonu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/7844894?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "requests",
      "http",
      "https",
      "response",
      "chai",
      "another"
    ]
  },
  {
    "id": 125142339,
    "name": "ApiToPostman",
    "full_name": "gregambrose/ApiToPostman",
    "description": "Takes HTTP requests and makes them into collections that can be imported into POSTMAN",
    "fork": false,
    "created_at": "2018-03-14T02:16:48Z",
    "updated_at": "2018-11-27T20:47:59Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 2172948,
    "owner_login": "gregambrose",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/2172948?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "import",
      "imported",
      "makes"
    ]
  },
  {
    "id": 203404634,
    "name": "APICollectionPostmanNewman",
    "full_name": "romaricpoton/APICollectionPostmanNewman",
    "description": null,
    "fork": false,
    "created_at": "2019-08-20T15:33:29Z",
    "updated_at": "2019-08-20T17:36:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36893205,
    "owner_login": "romaricpoton",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/36893205?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 217399342,
    "name": "api.postman",
    "full_name": "pscarpioni/api.postman",
    "description": "This repository contains requests about Integra Commerce API",
    "fork": false,
    "created_at": "2019-10-24T21:35:24Z",
    "updated_at": "2020-01-06T21:29:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22650213,
    "owner_login": "pscarpioni",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22650213?v=4",
    "pulled": 1,
    "tags": [
      "repo",
      "request",
      "repos",
      "repository",
      "requests",
      "contain"
    ]
  },
  {
    "id": 100196377,
    "name": "apig-postman",
    "full_name": "nwayve/apig-postman",
    "description": null,
    "fork": false,
    "created_at": "2017-08-13T18:25:38Z",
    "updated_at": "2017-08-13T18:25:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1729221,
    "owner_login": "nwayve",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1729221?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 148436698,
    "name": "APITesting-Postman",
    "full_name": "rizwanr5s/APITesting-Postman",
    "description": null,
    "fork": false,
    "created_at": "2018-09-12T07:02:15Z",
    "updated_at": "2018-09-18T04:06:34Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 43171492,
    "owner_login": "rizwanr5s",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/43171492?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 179918929,
    "name": "API_Postman",
    "full_name": "PansyLi/API_Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-04-07T04:44:15Z",
    "updated_at": "2019-04-07T04:46:44Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47636396,
    "owner_login": "PansyLi",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/47636396?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 74160474,
    "name": "url_shortener_api",
    "full_name": "Anubhav722/url_shortener_api",
    "description": "Use Postman for POST requests",
    "fork": false,
    "created_at": "2016-11-18T19:35:12Z",
    "updated_at": "2016-11-18T19:45:03Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20791676,
    "owner_login": "Anubhav722",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/20791676?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 149461323,
    "name": "public-api-postman-collection",
    "full_name": "serhii-sanduliak/public-api-postman-collection",
    "description": "A collection of example requests to demonstrate and test the TransferWise public API",
    "fork": false,
    "created_at": "2018-09-19T14:12:33Z",
    "updated_at": "2018-09-21T10:34:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 40859346,
    "owner_login": "serhii-sanduliak",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/40859346?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "request",
      "requests",
      "example",
      "demo",
      "public",
      "demonstrate"
    ]
  },
  {
    "id": 184620739,
    "name": "POSTMAN-TEST-API",
    "full_name": "lineageispig/POSTMAN-TEST-API",
    "description": null,
    "fork": false,
    "created_at": "2019-05-02T17:11:38Z",
    "updated_at": "2019-05-02T17:20:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22027966,
    "owner_login": "lineageispig",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/22027966?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 114933920,
    "name": "pan-postman",
    "full_name": "stealthllama/pan-postman",
    "description": "Postman collection for PAN-OS API requests",
    "fork": false,
    "created_at": "2017-12-20T21:44:43Z",
    "updated_at": "2020-03-25T20:19:12Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 5359553,
    "owner_login": "stealthllama",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/5359553?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests"
    ]
  },
  {
    "id": 12794353,
    "name": "Twilio-postman",
    "full_name": "devinrader/Twilio-postman",
    "description": "A set of collections for POSTman that let you simulate Twilio webhook requests",
    "fork": false,
    "created_at": "2013-09-12T20:44:42Z",
    "updated_at": "2014-07-18T17:17:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 1095289,
    "owner_login": "devinrader",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/1095289?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "webhook",
      "simulate"
    ]
  },
  {
    "id": 81733446,
    "name": "PostmanCollectionSorter",
    "full_name": "ivansams/PostmanCollectionSorter",
    "description": "Cmd line app to sort the requests within Postman collections to match the order object. Postman randomly shuffles requests when outputting collections in order to make source control difficult even with minor changes. If this is run before each update to a collection, it allows you to see incremental changes to each version in history instead of the entire collection being shuffled.",
    "fork": false,
    "created_at": "2017-02-12T14:53:04Z",
    "updated_at": "2017-02-21T05:23:27Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 11498645,
    "owner_login": "ivansams",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/11498645?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "requests",
      "line",
      "source",
      "update",
      "version",
      "allows",
      "object",
      "control",
      "within",
      "order",
      "sort",
      "output",
      "being",
      "instead",
      "match",
      "entire",
      "random",
      "history"
    ]
  },
  {
    "id": 155793008,
    "name": "mainflux-postman-collection",
    "full_name": "chombium/mainflux-postman-collection",
    "description": "A postman collection to send requests to Mainflux",
    "fork": false,
    "created_at": "2018-11-02T00:35:59Z",
    "updated_at": "2018-11-02T00:41:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 781503,
    "owner_login": "chombium",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/781503?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "collect",
      "collection",
      "request",
      "postman collection",
      "requests",
      "send"
    ]
  },
  {
    "id": 155561935,
    "name": "node-recap-postman-collection",
    "full_name": "virgilbugnariu/node-recap-postman-collection",
    "description": null,
    "fork": false,
    "created_at": "2018-10-31T13:27:07Z",
    "updated_at": "2018-10-31T13:30:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 12611206,
    "owner_login": "virgilbugnariu",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/12611206?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 161351660,
    "name": "Postman-Redfish-Collections",
    "full_name": "donzef/Postman-Redfish-Collections",
    "description": "Postman collections for Redfish requests against HPE servers",
    "fork": false,
    "created_at": "2018-12-11T15:08:16Z",
    "updated_at": "2020-03-13T14:46:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42031605,
    "owner_login": "donzef",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/42031605?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "collections",
      "request",
      "server",
      "requests",
      "servers"
    ]
  },
  {
    "id": 150748703,
    "name": "unite-tenant-administration-postman-collection",
    "full_name": "Mercateo/unite-tenant-administration-postman-collection",
    "description": "A collection of example requests that can be made to the Unite-Tenant-Administration APIs",
    "fork": false,
    "created_at": "2018-09-28T13:58:54Z",
    "updated_at": "2018-09-28T14:32:21Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 7766597,
    "owner_login": "Mercateo",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/7766597?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "example",
      "mini"
    ]
  },
  {
    "id": 153112588,
    "name": "Automated-API-Testing-Using-Postman-Collections",
    "full_name": "TSQAteam/Automated-API-Testing-Using-Postman-Collections",
    "description": "A Postman Collection is an executable API Description. Organize requests into folders. Document the collection with descriptions, tests, and more. Send requests individually, or use collection runner to send all the requests in the collection.",
    "fork": false,
    "created_at": "2018-10-15T12:53:59Z",
    "updated_at": "2018-10-24T09:46:26Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 42575108,
    "owner_login": "TSQAteam",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/42575108?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "collect",
      "collection",
      "request",
      "tests",
      "script",
      "requests",
      "send",
      "runner",
      "more",
      "desc",
      "folder",
      "description",
      "descriptions",
      "folders",
      "executable"
    ]
  },
  {
    "id": 145168093,
    "name": "spring-boot-postman-collection-executor-coverage-report",
    "full_name": "rajaramkushwaha/spring-boot-postman-collection-executor-coverage-report",
    "description": null,
    "fork": false,
    "created_at": "2018-08-17T21:28:50Z",
    "updated_at": "2018-08-18T14:07:33Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14159015,
    "owner_login": "rajaramkushwaha",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/14159015?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 186640659,
    "name": "ES_demo",
    "full_name": "noonlit/ES_demo",
    "description": "Postman collection with example requests to Elasticsearch.",
    "fork": false,
    "created_at": "2019-05-14T14:33:54Z",
    "updated_at": "2019-05-14T14:39:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11314452,
    "owner_login": "noonlit",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/11314452?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests",
      "example",
      "search"
    ]
  },
  {
    "id": 179155642,
    "name": "https-github.com-salesforce-marketingcloud-postman-blob-master-SFMC.json.postman_collection",
    "full_name": "rishithm/https-github.com-salesforce-marketingcloud-postman-blob-master-SFMC.json.postman_collection",
    "description": null,
    "fork": false,
    "created_at": "2019-04-02T20:43:36Z",
    "updated_at": "2019-04-02T20:43:36Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 49211728,
    "owner_login": "rishithm",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/49211728?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 176755194,
    "name": "Useless-Team",
    "full_name": "DaniloOlegovich/Useless-Team",
    "description": "First collection of requests by POSTMAN",
    "fork": false,
    "created_at": "2019-03-20T14:45:59Z",
    "updated_at": "2019-03-20T17:41:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 48756373,
    "owner_login": "DaniloOlegovich",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/48756373?v=4",
    "pulled": 1,
    "tags": [
      "collect",
      "collection",
      "request",
      "requests"
    ]
  },
  {
    "id": 144314919,
    "name": "VaporAuthTemplateRequestExamples",
    "full_name": "jottenlips/VaporAuthTemplateRequestExamples",
    "description": "💧 Sample requests and documentation for creating your first authenticated Vapor API 💧",
    "fork": false,
    "created_at": "2018-08-10T17:30:22Z",
    "updated_at": "2019-02-19T22:30:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 14910912,
    "owner_login": "jottenlips",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/14910912?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "document",
      "auth",
      "documentation",
      "creating",
      "authenticate",
      "authenticated"
    ]
  },
  {
    "id": 226686927,
    "name": "web_postman",
    "full_name": "rafaelhks/web_postman",
    "description": "Web app to make REST requests",
    "fork": false,
    "created_at": "2019-12-08T15:15:59Z",
    "updated_at": "2020-02-14T01:39:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 32396805,
    "owner_login": "rafaelhks",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/32396805?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 225828921,
    "name": "KinveyPostmanRequests",
    "full_name": "mkapostolov/KinveyPostmanRequests",
    "description": "Sample Postman requests for Kinvey REST API",
    "fork": false,
    "created_at": "2019-12-04T09:29:17Z",
    "updated_at": "2020-01-02T12:55:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 16541687,
    "owner_login": "mkapostolov",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16541687?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 187020334,
    "name": "rest_api",
    "full_name": "Alpha-github/rest_api",
    "description": "Create a web server using flask and test for API requests using postman",
    "fork": false,
    "created_at": "2019-05-16T12:09:04Z",
    "updated_at": "2019-05-16T13:57:17Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 37172066,
    "owner_login": "Alpha-github",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/37172066?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "request",
      "server",
      "requests",
      "flask"
    ]
  },
  {
    "id": 169559184,
    "name": "RESTful-API",
    "full_name": "jainanant1/RESTful-API",
    "description": "A NodeJS code where the five major (GET,POST,PUT,PATCH,DELETE) requests are written and are tested using POSTMAN.",
    "fork": false,
    "created_at": "2019-02-07T11:10:54Z",
    "updated_at": "2019-02-07T11:11:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21207431,
    "owner_login": "jainanant1",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/21207431?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "requests",
      "code",
      "tested",
      "written",
      "five"
    ]
  },
  {
    "id": 141100390,
    "name": "RESTful-API",
    "full_name": "Mayurgupta3/RESTful-API",
    "description": "A RESTful API is an application program interface that uses HTTP requests to GET, PUT, POST and DELETE data using Postman Application.",
    "fork": false,
    "created_at": "2018-07-16T07:11:40Z",
    "updated_at": "2019-04-02T09:31:14Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16776443,
    "owner_login": "Mayurgupta3",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/16776443?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "application",
      "requests",
      "face",
      "program",
      "uses",
      "interface"
    ]
  },
  {
    "id": 92623621,
    "name": "node-jwt-mocha-todo-rest-api",
    "full_name": "rdbhagat999/node-jwt-mocha-todo-rest-api",
    "description": "Nodejs rest api with authentication using jsonwebtoken. Use postman chrome extension to send requests to endpoints ",
    "fork": false,
    "created_at": "2017-05-27T20:55:04Z",
    "updated_at": "2017-05-31T01:48:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 20500206,
    "owner_login": "rdbhagat999",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/20500206?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "rest",
      "json",
      "requests",
      "auth",
      "endpoint",
      "points",
      "send",
      "endpoints",
      "authentication",
      "extension",
      "rest api",
      "token",
      "chrome",
      "jsonwebtoken"
    ]
  },
  {
    "id": 120206246,
    "name": "Mongo_rest_api",
    "full_name": "WingChhun/Mongo_rest_api",
    "description": "Example of a REST api for a sports team with players, will test making endpoint requests using POSTMAN.",
    "fork": false,
    "created_at": "2018-02-04T17:23:55Z",
    "updated_at": "2018-02-04T17:40:31Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16395923,
    "owner_login": "WingChhun",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/16395923?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "request",
      "requests",
      "endpoint",
      "play",
      "making",
      "sports"
    ]
  },
  {
    "id": 190126346,
    "name": "Restful-Explore-California-App",
    "full_name": "davidenoma/Restful-Explore-California-App",
    "description": "A restful spring boot micro service based on spring data JPA and spring rest. It allows requests to the web service that returns information about tours, tour packages and tour ratings about locations in california.",
    "fork": false,
    "created_at": "2019-06-04T04:01:22Z",
    "updated_at": "2019-06-06T14:43:04Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 24875399,
    "owner_login": "davidenoma",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/24875399?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "rest",
      "service",
      "requests",
      "based",
      "format",
      "boot",
      "restful",
      "spring",
      "package",
      "rating",
      "info",
      "infor",
      "allows",
      "information",
      "micro",
      "spring boot",
      "location",
      "turns",
      "returns",
      "packages",
      "tours"
    ]
  },
  {
    "id": 135473441,
    "name": "P11-build-rest-api",
    "full_name": "TJaySteno/P11-build-rest-api",
    "description": "This REST API handles requests for a course rating website. Using MongoDB, stores the reviews users make on different courses.",
    "fork": false,
    "created_at": "2018-05-30T17:00:49Z",
    "updated_at": "2020-01-10T22:14:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26858794,
    "owner_login": "TJaySteno",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/26858794?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "user",
      "site",
      "users",
      "rent",
      "view",
      "course",
      "website",
      "rating",
      "store",
      "handle",
      "review",
      "reviews",
      "handles"
    ]
  },
  {
    "id": 117588375,
    "name": "RESTfulAPI_Ruby",
    "full_name": "samuelgedaly/RESTfulAPI_Ruby",
    "description": "Completed RESTful API using PostgreSQL database, you should be able to Create, Read, Uptade and Delete (CRUD) a Cause. I used Postman to send the different http requests with the following url: http://localhost:3000/api/v1/causes.",
    "fork": false,
    "created_at": "2018-01-15T19:47:05Z",
    "updated_at": "2018-01-19T17:58:30Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 27719250,
    "owner_login": "samuelgedaly",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/27719250?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "database",
      "requests",
      "http",
      "send",
      "local",
      "rent",
      "host",
      "uses",
      "following",
      "should",
      "cause"
    ]
  },
  {
    "id": 179158889,
    "name": "Creating-a-RESTFul-API-With-CRUD-Operations-Using-Flask-and-POSTMAN",
    "full_name": "KrishnaGupta72/Creating-a-RESTFul-API-With-CRUD-Operations-Using-Flask-and-POSTMAN",
    "description": "In this project, We'll show you how to perform CREATE/READ/UPDATE/DELETE requests using Python, Flask and POSTMAN(an API testing app)",
    "fork": false,
    "created_at": "2019-04-02T21:08:00Z",
    "updated_at": "2019-04-02T21:11:42Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 46058679,
    "owner_login": "KrishnaGupta72",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/46058679?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "testing",
      "request",
      "form",
      "requests",
      "perform"
    ]
  },
  {
    "id": 162643106,
    "name": "REST-employeeApp",
    "full_name": "Marqueb82/REST-employeeApp",
    "description": "RESTful web service created using spring and tested with Postman.  Uses general get and post requests for mapping and service will allow user to add, remove, view all and view specific employess based upon their ID.",
    "fork": false,
    "created_at": "2018-12-20T23:50:03Z",
    "updated_at": "2019-02-06T05:53:05Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 33797265,
    "owner_login": "Marqueb82",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/33797265?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "service",
      "requests",
      "user",
      "based",
      "tested",
      "spec",
      "view",
      "spring",
      "specific",
      "general",
      "upon"
    ]
  },
  {
    "id": 81371954,
    "name": "EmployeeCRUD-Spring-MVC-Hibernate",
    "full_name": "Ajinkyashinde15/EmployeeCRUD-Spring-MVC-Hibernate",
    "description": "I have created web services REST API using Spring Web MVC framework with Hibernate technology. Postman used to tested and constructed requests to REST API .",
    "fork": false,
    "created_at": "2017-02-08T20:19:11Z",
    "updated_at": "2017-02-08T21:07:26Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 11631994,
    "owner_login": "Ajinkyashinde15",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/11631994?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "request",
      "service",
      "requests",
      "tested",
      "framework",
      "services",
      "struct",
      "tech",
      "technology",
      "constructed"
    ]
  },
  {
    "id": 195168480,
    "name": "Manual",
    "full_name": "gabomare/Manual",
    "description": "Manua del uso del API REST y del FRONT END. JSON con la colección de requests para probar en POSTMAN",
    "fork": false,
    "created_at": "2019-07-04T04:26:22Z",
    "updated_at": "2019-07-04T04:27:00Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41311674,
    "owner_login": "gabomare",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/41311674?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests"
    ]
  },
  {
    "id": 224601109,
    "name": "todo-basic-express-mongo",
    "full_name": "nenadjeremic/todo-basic-express-mongo",
    "description": "Basic TODO REST API using ExpressJS and MongoDB. Performs basic CRUD functionalities. Contains folder with examples of API requests that could be imported in Postman.",
    "fork": false,
    "created_at": "2019-11-28T08:06:05Z",
    "updated_at": "2019-11-28T08:55:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 23355906,
    "owner_login": "nenadjeremic",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/23355906?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "form",
      "requests",
      "example",
      "function",
      "import",
      "functional",
      "examples",
      "folder",
      "imported",
      "functionalities"
    ]
  },
  {
    "id": 107671514,
    "name": "lara-api",
    "full_name": "binoysarker/lara-api",
    "description": "My first REST API using laravel and Postman. I have worked with the users,posts,likes using different relational statement like polymorphic relation and i also use separate requests and policies with this.   ",
    "fork": false,
    "created_at": "2017-10-20T11:45:33Z",
    "updated_at": "2017-10-20T11:47:43Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26120595,
    "owner_login": "binoysarker",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/26120595?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "user",
      "users",
      "rent",
      "stat",
      "laravel",
      "posts",
      "worked"
    ]
  },
  {
    "id": 166755938,
    "name": "Dec-api",
    "full_name": "Pal0720/Dec-api",
    "description": "Build a RESTful API/MICROSERVICE with the following implementations :   The API/Microservice must perform these basic CRUD Operations :              - Accepts a request to add a new entry into the database.        - Accepts a request to update an existing entry into the database.        - Accepts a request to retrieve all the existing entries from the database.        - Accepts a request to retrieve a single entry with respect to a particular field (ID, Name, etc.. )  from the database.    a. Products : Products Table Schema : Decathlon_Products ProductID  | ProductName  | ProductSport | ProductLevel | ProductDescription  | AssociatedStores |    b. Stores : DB Table Schema : Decathlon_Stores StoreID  | StoreName  | StoreCity |       Note : 1. 'AssociatedStores' is the field to capture the StoreIDs in which the product is available. It can be multiple stores.  2. Both Products and Stores API can be called separately and together to perform the above mentioned functions. For Ex: Expose one endpoint (for example: /stores/{store_id}/products/{product_id} ) to retrieve the details of the product associated to a store. Expose one endpoint ( /stores/store_id/products ) to list all the products available in that particular store.  3. IDs and names cannot be updated.  4. You can use Spring Boot(Java) or Django Framework (with Python) or any framework you are comfortable with to build the application with Maven.  5. You can use an in-memory database : H2/Apache Derby.  6. You can use Postman as the REST Client to send requests.   Security : Implement a Basic Authorization security mechanism, which is validated on all requests.",
    "fork": false,
    "created_at": "2019-01-21T05:53:07Z",
    "updated_at": "2019-01-21T06:55:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 29477534,
    "owner_login": "Pal0720",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/29477534?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "form",
      "application",
      "script",
      "service",
      "call",
      "database",
      "requests",
      "example",
      "implement",
      "endpoint",
      "framework",
      "build",
      "function",
      "send",
      "spec",
      "list",
      "update",
      "implementation",
      "perform",
      "store",
      "name",
      "product",
      "multiple",
      "available",
      "functions",
      "following",
      "retrieve",
      "products",
      "single",
      "updated",
      "details",
      "mechanism",
      "security",
      "memory",
      "names",
      "comfortable",
      "cannot",
      "implementations"
    ]
  },
  {
    "id": 164997909,
    "name": "testrail",
    "full_name": "bharath411/testrail",
    "description": "This repository contains testrail restapi requests in postman collections.",
    "fork": false,
    "created_at": "2019-01-10T05:45:51Z",
    "updated_at": "2019-01-11T17:02:39Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 1,
    "watchers": 0,
    "score": 1,
    "owner_id": 8632970,
    "owner_login": "bharath411",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/8632970?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "collect",
      "collection",
      "collections",
      "repo",
      "request",
      "postman collection",
      "repos",
      "repository",
      "rest",
      "requests",
      "contain",
      "postman collections",
      "restapi",
      "testrail"
    ]
  },
  {
    "id": 197917540,
    "name": "Complaint-Lodging",
    "full_name": "Shekhar-Shashank/Complaint-Lodging",
    "description": "It is an android complaint lodging app in which the front end is designed in android studio using java language. The restful API that the app interacts with is made using python flask. The database used is sqlite. And the language used to parse the data from the server is Json. For testing the requests like get and post we used postman as a dummy request generator.",
    "fork": false,
    "created_at": "2019-07-20T10:50:35Z",
    "updated_at": "2019-07-26T06:59:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52148699,
    "owner_login": "Shekhar-Shashank",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/52148699?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "data",
      "testing",
      "request",
      "rest",
      "server",
      "database",
      "requests",
      "sign",
      "interact",
      "front",
      "java",
      "restful",
      "python",
      "generator",
      "lang",
      "design",
      "parse",
      "flask",
      "designed",
      "android",
      "front end",
      "plain",
      "language",
      "dummy",
      "sqlite",
      "studio",
      "complaint"
    ]
  },
  {
    "id": 249174449,
    "name": "postmanJson",
    "full_name": "PinkaCourt/postmanJson",
    "description": null,
    "fork": false,
    "created_at": "2020-03-22T12:03:41Z",
    "updated_at": "2020-03-22T12:03:41Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 50292671,
    "owner_login": "PinkaCourt",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/50292671?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 91568417,
    "name": "PostmanJson",
    "full_name": "Angael/PostmanJson",
    "description": null,
    "fork": false,
    "created_at": "2017-05-17T11:23:35Z",
    "updated_at": "2017-05-17T11:23:35Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21974933,
    "owner_login": "Angael",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/21974933?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 114962946,
    "name": "tcp-postman",
    "full_name": "neshoj/tcp-postman",
    "description": "Angular4 implementation of an app that sends JSON request to a back end server that initiates tcp requests to a target server. Best for POS driven solutions.",
    "fork": false,
    "created_at": "2017-12-21T04:35:10Z",
    "updated_at": "2018-10-12T06:13:45Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 19221354,
    "owner_login": "neshoj",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/19221354?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "server",
      "requests",
      "implement",
      "send",
      "implementation",
      "drive",
      "solution",
      "driven",
      "sends",
      "back end",
      "solutions",
      "initiate"
    ]
  },
  {
    "id": 216589130,
    "name": "Get-and-post",
    "full_name": "Aizaz299/Get-and-post",
    "description": "Simple code for the understanding of the get and post requests. I used json middleware. I creating new course as well by using post request through postman. ",
    "fork": false,
    "created_at": "2019-10-21T14:29:37Z",
    "updated_at": "2019-10-22T14:03:02Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 13184390,
    "owner_login": "Aizaz299",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/13184390?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "json",
      "requests",
      "code",
      "creating",
      "course",
      "under",
      "middleware",
      "understanding"
    ]
  },
  {
    "id": 142351951,
    "name": "jekshop-api",
    "full_name": "slpkej/jekshop-api",
    "description": "Created a node api using express/bodyparser and mongo and mongoose for the database. Used Postman to send web requests to the backend.",
    "fork": false,
    "created_at": "2018-07-25T20:42:50Z",
    "updated_at": "2018-07-25T20:58:08Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 41170480,
    "owner_login": "slpkej",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/41170480?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "node",
      "database",
      "requests",
      "express",
      "mongo",
      " express",
      "send",
      "backend",
      "mongoose",
      "parse",
      "parser"
    ]
  },
  {
    "id": 251298533,
    "name": "RequestLogger",
    "full_name": "Ayorinde-Codes/RequestLogger",
    "description": "A Laravel package that logs requests ip, agent(browser or postman), payload request, payload response, Time of execution and url in the database within any request call",
    "fork": false,
    "created_at": "2020-03-30T12:32:05Z",
    "updated_at": "2020-03-30T17:52:46Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 47367086,
    "owner_login": "Ayorinde-Codes",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/47367086?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "data",
      "request",
      "call",
      "database",
      "requests",
      "load",
      "response",
      "package",
      "browser",
      "within",
      "agent",
      "execution",
      "logs"
    ]
  },
  {
    "id": 174263023,
    "name": "postman-newman-circleci",
    "full_name": "jordanahaines/postman-newman-circleci",
    "description": "Companion repo for a post on how to use Newmand and CircleCI to schedule automated tests for requests defined in Postman",
    "fork": false,
    "created_at": "2019-03-07T03:14:56Z",
    "updated_at": "2019-03-07T03:14:59Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 6641613,
    "owner_login": "jordanahaines",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/6641613?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "request",
      "tests",
      "tests ",
      "requests",
      "auto",
      "automat",
      "automate",
      "automated",
      "define",
      "schedule"
    ]
  },
  {
    "id": 58562066,
    "name": "relay",
    "full_name": "owainlewis/relay",
    "description": "Relay lets you write HTTP requests as easy to read, structured YAML and dispatch them easily using a CLI. Similar to tools like Postman",
    "fork": false,
    "created_at": "2016-05-11T16:29:24Z",
    "updated_at": "2019-08-11T06:28:20Z",
    "stargazers_count": 24,
    "watchers_count": 24,
    "forks": 0,
    "watchers": 24,
    "score": 1,
    "owner_id": 733944,
    "owner_login": "owainlewis",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/733944?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "tool",
      "requests",
      "read",
      "tools",
      "struct",
      "structure",
      "easily",
      "write",
      "lets",
      "patch"
    ]
  },
  {
    "id": 200848624,
    "name": "PostmanCli",
    "full_name": "Borhan10/PostmanCli",
    "description": null,
    "fork": false,
    "created_at": "2019-08-06T12:38:56Z",
    "updated_at": "2019-08-06T12:49:15Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 4346304,
    "owner_login": "Borhan10",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/4346304?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 174249180,
    "name": "newman-reporter-diff",
    "full_name": "indeedeng-alpha/newman-reporter-diff",
    "description": "Showcase for comparing http requests using newman, the postman cli client.",
    "fork": false,
    "created_at": "2019-03-07T01:33:49Z",
    "updated_at": "2019-03-07T01:36:38Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 31606812,
    "owner_login": "indeedeng-alpha",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/31606812?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "client",
      "requests",
      "http",
      "newman",
      "case",
      "comparing"
    ]
  },
  {
    "id": 63832212,
    "name": "AjaxExplorer",
    "full_name": "saveenchad/AjaxExplorer",
    "description": "The Super Endpoint Explorer (SEE) app will allow the end user to craft requests to a remote end-point by filling out various form fields, send the request and show the response, and save common request configurations for later playback. The form of the tool is roughly like the Chrome Extension called Postman or an OSX HTTP exploration like Paw but obviously less polished and feature laden.",
    "fork": false,
    "created_at": "2016-07-21T03:01:18Z",
    "updated_at": "2016-07-28T03:31:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 9758723,
    "owner_login": "saveenchad",
    "owner_avatar_url": "https://avatars0.githubusercontent.com/u/9758723?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "form",
      "tool",
      "call",
      "requests",
      "user",
      "send",
      "response",
      "config",
      "play",
      "feature",
      "configuration",
      "various",
      "remote",
      "common",
      "configurations",
      "fields"
    ]
  },
  {
    "id": 157698357,
    "name": "postman-plugins",
    "full_name": "kamalaknn/postman-plugins",
    "description": null,
    "fork": false,
    "created_at": "2018-11-15T11:10:11Z",
    "updated_at": "2018-11-15T11:11:47Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 8401064,
    "owner_login": "kamalaknn",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/8401064?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 207091776,
    "name": "practice-3",
    "full_name": "martynow173/practice-3",
    "description": "Just backend requests handling, use postman. Additional functionality and code refactoring: user ratings, comments, sorting based on them, many-to-many relationship between categories and products. Role system - https://github.com/spatie/laravel-permission",
    "fork": false,
    "created_at": "2019-09-08T09:47:16Z",
    "updated_at": "2019-09-16T15:06:28Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 25533512,
    "owner_login": "martynow173",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/25533512?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "requests",
      "http",
      "user",
      "based",
      "code",
      "https",
      "function",
      "functional",
      "backend",
      "rating",
      "system",
      "github",
      "laravel",
      "product",
      "between",
      "functionality",
      "handling",
      "many",
      "actor",
      "products",
      "sort",
      "comments",
      "relationship"
    ]
  },
  {
    "id": 161702588,
    "name": "flight-api",
    "full_name": "omarabdeljelil/flight-api",
    "description": "Flight API (created with laravel 5.7) all the HTTP requests are tested with Postman/fiddler. it includes data validation and require user's Token validation for PUT,POST and DELETE requests",
    "fork": false,
    "created_at": "2018-12-13T22:32:39Z",
    "updated_at": "2018-12-15T18:42:45Z",
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks": 0,
    "watchers": 1,
    "score": 1,
    "owner_id": 24657418,
    "owner_login": "omarabdeljelil",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/24657418?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "create",
      "data",
      "request",
      "requests",
      "user",
      "tested",
      "laravel",
      "light",
      "includes",
      "validation",
      "require",
      "fiddler"
    ]
  },
  {
    "id": 223620810,
    "name": "Fiddler2Postman",
    "full_name": "liyinchigithub/Fiddler2Postman",
    "description": null,
    "fork": false,
    "created_at": "2019-11-23T16:38:07Z",
    "updated_at": "2019-11-23T16:38:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 19643260,
    "owner_login": "liyinchigithub",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/19643260?v=4",
    "pulled": 1,
    "tags": []
  },
  {
    "id": 126534347,
    "name": "startnow-node101-vstda-api",
    "full_name": "Fragomeli/startnow-node101-vstda-api",
    "description": "making HTTP requests GET, POST, DELETE and logging them using Postman.",
    "fork": false,
    "created_at": "2018-03-23T20:12:16Z",
    "updated_at": "2018-03-23T20:12:57Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 36241358,
    "owner_login": "Fragomeli",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/36241358?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "making",
      "logging"
    ]
  },
  {
    "id": 170088463,
    "name": "Node-and-Express-App",
    "full_name": "anthonygilbertt/Node-and-Express-App",
    "description": "A Node and Express application that has built in data validation using Joi and sends requests via Postman",
    "fork": false,
    "created_at": "2019-02-11T07:49:59Z",
    "updated_at": "2019-02-22T16:31:07Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 26334011,
    "owner_login": "anthonygilbertt",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/26334011?v=4",
    "pulled": 1,
    "tags": [
      "data",
      "request",
      "application",
      "requests",
      "send",
      "built",
      "validation",
      "sends"
    ]
  },
  {
    "id": 83179676,
    "name": "api_hw2",
    "full_name": "colechristenson/api_hw2",
    "description": "Test different requests against a node.js server using postman. Node.js server is set up with express.",
    "fork": false,
    "created_at": "2017-02-26T03:20:14Z",
    "updated_at": "2017-02-26T03:42:49Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22686955,
    "owner_login": "colechristenson",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/22686955?v=4",
    "pulled": 1,
    "tags": [
      " postman",
      "request",
      "server",
      "node",
      "requests",
      "express",
      " express",
      "rent"
    ]
  },
  {
    "id": 219425300,
    "name": "Fullstack_Vue_Express",
    "full_name": "edivera/Fullstack_Vue_Express",
    "description": "MEVN tutorial. Express apis tested with postman. Makes requests from vue front end to backend using axios.",
    "fork": false,
    "created_at": "2019-11-04T05:37:50Z",
    "updated_at": "2019-11-24T08:13:24Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 22969075,
    "owner_login": "edivera",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/22969075?v=4",
    "pulled": 1,
    "tags": [
      "test",
      " postman",
      "request",
      "requests",
      "tested",
      "front",
      "backend",
      "tutorial",
      "front end",
      "axios"
    ]
  },
  {
    "id": 218969039,
    "name": "JavaScript-PostmanClone",
    "full_name": "Amer15/JavaScript-PostmanClone",
    "description": "Postman clone build with Vanilla JS which supports GET and POST requests",
    "fork": false,
    "created_at": "2019-11-01T11:00:47Z",
    "updated_at": "2019-11-01T11:07:40Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 52877053,
    "owner_login": "Amer15",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/52877053?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "build",
      "support",
      "clone"
    ]
  },
  {
    "id": 192989538,
    "name": "javaUnirest",
    "full_name": "johnnycupcakes/javaUnirest",
    "description": "Simple implementation for making HTTP raw requests using Postman and the HS API",
    "fork": false,
    "created_at": "2019-06-20T21:27:41Z",
    "updated_at": "2019-06-20T21:29:48Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 11359253,
    "owner_login": "johnnycupcakes",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/11359253?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "implement",
      "implementation",
      "making"
    ]
  },
  {
    "id": 142798122,
    "name": "Multithread-Web-Server",
    "full_name": "xzhang007/Multithread-Web-Server",
    "description": "Developed a web server in Java capable of handling HTTP requests and parsing those requests, and sending out various HTTP responses. • Handles basic user authentication and CGI which could execute concurrently using multithreading and synchronized method. And it could send binary files like images over network. • Using GitHub repository to control versions and Postman to test as well as factory design pattern.",
    "fork": false,
    "created_at": "2018-07-29T21:54:31Z",
    "updated_at": "2018-11-07T23:21:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 16105149,
    "owner_login": "xzhang007",
    "owner_avatar_url": "https://avatars1.githubusercontent.com/u/16105149?v=4",
    "pulled": 1,
    "tags": [
      "test",
      "repo",
      "request",
      "file",
      "repos",
      "repository",
      "server",
      "requests",
      "user",
      "sign",
      "auth",
      "files",
      "send",
      "read",
      "authentication",
      "response",
      "rent",
      "version",
      "image",
      "method",
      "control",
      "design",
      "various",
      "images",
      "responses",
      "sync",
      "handling",
      "sending",
      "those",
      "actor",
      "current",
      "network",
      "execute",
      "currently",
      "reading",
      "versions",
      "parsing",
      "capable"
    ]
  },
  {
    "id": 73997186,
    "name": "Mars-Colony-App",
    "full_name": "HaninMustafa/Mars-Colony-App",
    "description": "MARS COLONY APP - Web-Based Application: A mobile first responsive layout that uses Angular2 to implement GET and POST HTTP requests with our internal API to save colonist’s info and alien encounter and use localStorage to save colonist object",
    "fork": false,
    "created_at": "2016-11-17T06:25:10Z",
    "updated_at": "2017-02-06T18:30:53Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 21347476,
    "owner_login": "HaninMustafa",
    "owner_avatar_url": "https://avatars2.githubusercontent.com/u/21347476?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "requests",
      "implement",
      "local",
      "info",
      "uses",
      "object",
      "mobile",
      "intern",
      "internal",
      "responsive"
    ]
  },
  {
    "id": 21957860,
    "name": "zendesk-search-api-requests",
    "full_name": "ckumar1/zendesk-search-api-requests",
    "description": "Used to collaboratively share search requests saved in Postman client",
    "fork": false,
    "created_at": "2014-07-17T21:14:32Z",
    "updated_at": "2014-07-17T21:14:32Z",
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks": 0,
    "watchers": 0,
    "score": 1,
    "owner_id": 5449665,
    "owner_login": "ckumar1",
    "owner_avatar_url": "https://avatars3.githubusercontent.com/u/5449665?v=4",
    "pulled": 1,
    "tags": [
      "request",
      "client",
      "requests",
      "search",
      "collaboratively"
    ]
  }
]